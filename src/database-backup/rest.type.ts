/**
 * Generated by @skyleague/therefore@v1.0.0-local
 * Do not manually touch this
 */
/* eslint-disable */

import type { DefinedError, ValidateFunction } from 'ajv'

import { validate as ErrorResponseValidator } from './schemas/error-response.schema.js'
import { validate as TriggerDatabaseBackupRequestValidator } from './schemas/trigger-database-backup-request.schema.js'
import { validate as TriggerDatabaseBackupResponseValidator } from './schemas/trigger-database-backup-response.schema.js'

export interface ErrorResponse {
    errors?: RestError[] | undefined
}

export const ErrorResponse = {
    validate: ErrorResponseValidator as ValidateFunction<ErrorResponse>,
    get schema() {
        return ErrorResponse.validate.schema
    },
    get errors() {
        return ErrorResponse.validate.errors ?? undefined
    },
    is: (o: unknown): o is ErrorResponse => ErrorResponse.validate(o) === true,
    parse: (o: unknown): { right: ErrorResponse } | { left: DefinedError[] } => {
        if (ErrorResponse.is(o)) {
            return { right: o }
        }
        return { left: (ErrorResponse.errors ?? []) as DefinedError[] }
    },
} as const

export interface RestError {
    errorCode?: number | undefined
    errorReason?: string | undefined
    errorSource?: string | undefined
}

/**
 * Represents a request for triggering a database backup.
 */
export interface TriggerDatabaseBackupRequest {
    /**
     * If provided, it needs to be a valid URL. It will be a webhook call that will later execute when the backup is complete.
     */
    callback?: string | undefined
    /**
     * If provided, it needs to be a date time from which the backup should include data. If not provided, the backup will include all the data.
     */
    createBackupFromDate?: string | undefined
    /**
     * If provided, it needs to be a list of tables that exist in the database schema. The backup will only include the specified tables. If not provided, the backup will include all tables.
     */
    tables?: string[] | undefined
}

export const TriggerDatabaseBackupRequest = {
    validate: TriggerDatabaseBackupRequestValidator as ValidateFunction<TriggerDatabaseBackupRequest>,
    get schema() {
        return TriggerDatabaseBackupRequest.validate.schema
    },
    get errors() {
        return TriggerDatabaseBackupRequest.validate.errors ?? undefined
    },
    is: (o: unknown): o is TriggerDatabaseBackupRequest => TriggerDatabaseBackupRequest.validate(o) === true,
    parse: (o: unknown): { right: TriggerDatabaseBackupRequest } | { left: DefinedError[] } => {
        if (TriggerDatabaseBackupRequest.is(o)) {
            return { right: o }
        }
        return { left: (TriggerDatabaseBackupRequest.errors ?? []) as DefinedError[] }
    },
} as const

/**
 * Represents a response for triggering a database backup
 */
export interface TriggerDatabaseBackupResponse {
    /**
     * The state of the database backup process
     */
    state?:
        | 'QUEUED'
        | 'IN_PROGRESS'
        | 'COMPLETE'
        | 'NOT_FOUND'
        | 'CANCEL'
        | 'TO_BE_CANCELED'
        | 'TIMED_OUT'
        | 'ERROR'
        | 'TRANSIENT_ERROR'
        | 'OVERRIDDEN'
        | 'RECOVERABLE_ERROR'
        | undefined
}

export const TriggerDatabaseBackupResponse = {
    validate: TriggerDatabaseBackupResponseValidator as ValidateFunction<TriggerDatabaseBackupResponse>,
    get schema() {
        return TriggerDatabaseBackupResponse.validate.schema
    },
    get errors() {
        return TriggerDatabaseBackupResponse.validate.errors ?? undefined
    },
    is: (o: unknown): o is TriggerDatabaseBackupResponse => TriggerDatabaseBackupResponse.validate(o) === true,
    parse: (o: unknown): { right: TriggerDatabaseBackupResponse } | { left: DefinedError[] } => {
        if (TriggerDatabaseBackupResponse.is(o)) {
            return { right: o }
        }
        return { left: (TriggerDatabaseBackupResponse.errors ?? []) as DefinedError[] }
    },
} as const
