/**
 * Generated by @skyleague/therefore@v1.0.0-local
 * Do not manually touch this
 */
/* eslint-disable */
import AjvValidator from 'ajv'
import type { ValidateFunction } from 'ajv'

/**
 * Represents a request for triggering a database backup
 */
export interface TriggerDatabaseBackupRequest {
    /**
     * If provided, needs to be a valid URL. It will be a webhook call that will be later executed when the backup is completed.
     */
    callback?: string
}

export const TriggerDatabaseBackupRequest = {
    validate: require('./schemas/trigger-database-backup-request.schema.js') as ValidateFunction<TriggerDatabaseBackupRequest>,
    get schema() {
        return TriggerDatabaseBackupRequest.validate.schema
    },
    is: (o: unknown): o is TriggerDatabaseBackupRequest => TriggerDatabaseBackupRequest.validate(o) === true,
    assert: (o: unknown) => {
        if (!TriggerDatabaseBackupRequest.validate(o)) {
            throw new AjvValidator.ValidationError(TriggerDatabaseBackupRequest.validate.errors ?? [])
        }
    },
} as const

/**
 * Represents a response for triggering a database backup
 */
export interface TriggerDatabaseBackupResponse {
    /**
     * The state of the database backup process
     */
    state?:
        | 'QUEUED'
        | 'IN_PROGRESS'
        | 'COMPLETE'
        | 'NOT_FOUND'
        | 'CANCEL'
        | 'TO_BE_CANCELED'
        | 'TIMED_OUT'
        | 'ERROR'
        | 'TRANSIENT_ERROR'
        | 'OVERRIDDEN'
}

export const TriggerDatabaseBackupResponse = {
    validate: require('./schemas/trigger-database-backup-response.schema.js') as ValidateFunction<TriggerDatabaseBackupResponse>,
    get schema() {
        return TriggerDatabaseBackupResponse.validate.schema
    },
    is: (o: unknown): o is TriggerDatabaseBackupResponse => TriggerDatabaseBackupResponse.validate(o) === true,
} as const

export interface ErrorResponse {
    errors?: RestError[]
}

export const ErrorResponse = {
    validate: require('./schemas/error-response.schema.js') as ValidateFunction<ErrorResponse>,
    get schema() {
        return ErrorResponse.validate.schema
    },
    is: (o: unknown): o is ErrorResponse => ErrorResponse.validate(o) === true,
} as const

export interface RestError {
    errorCode?: number
    errorSource?: string
    errorReason?: string
}
