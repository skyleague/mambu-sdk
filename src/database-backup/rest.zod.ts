/**
 * Generated by @skyleague/therefore
 * Do not manually touch this
 */
/* eslint-disable */

import { z } from 'zod'

export const RestError = z.object({
    errorCode: z.number().int().optional(),
    errorReason: z.string().optional(),
    errorSource: z.string().optional(),
})

export type RestError = z.infer<typeof RestError>

export const ErrorResponse = z.object({
    errors: RestError.array().optional(),
})

export type ErrorResponse = z.infer<typeof ErrorResponse>

export const TriggerDatabaseBackupRequest = z
    .object({
        callback: z
            .string()
            .describe(
                'If provided, it needs to be a valid URL. It will be a webhook call that will later execute when the backup is complete.',
            )
            .optional(),
        createBackupFromDate: z
            .string()
            .datetime({ offset: true })
            .describe(
                'If provided, it needs to be a date time from which the backup should include data. If not provided, the backup will include all the data.',
            )
            .optional(),
        tables: z
            .string()
            .array()
            .describe(
                'If provided, it needs to be a list of tables that exist in the database schema. The backup will only include the specified tables. If not provided, the backup will include all tables.',
            )
            .optional(),
    })
    .describe('Represents a request for triggering a database backup.')

export type TriggerDatabaseBackupRequest = z.infer<typeof TriggerDatabaseBackupRequest>

export const TriggerDatabaseBackupResponse = z
    .object({
        state: z
            .enum([
                'QUEUED',
                'IN_PROGRESS',
                'COMPLETE',
                'NOT_FOUND',
                'CANCEL',
                'TO_BE_CANCELED',
                'TIMED_OUT',
                'ERROR',
                'TRANSIENT_ERROR',
                'OVERRIDDEN',
                'RECOVERABLE_ERROR',
            ])
            .describe('The state of the database backup process')
            .optional(),
    })
    .describe('Represents a response for triggering a database backup')

export type TriggerDatabaseBackupResponse = z.infer<typeof TriggerDatabaseBackupResponse>
