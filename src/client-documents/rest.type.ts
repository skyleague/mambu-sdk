/**
 * Generated by @skyleague/therefore@v1.0.0-local
 * Do not manually touch this
 */
/* eslint-disable */

import type { DefinedError, ValidateFunction } from 'ajv'

import { validate as CreateDocumentRequestValidator } from './schemas/create-document-request.schema.js'
import { validate as DocumentValidator } from './schemas/document.schema.js'
import { validate as ErrorResponseValidator } from './schemas/error-response.schema.js'
import { validate as GetDocumentsByClientIdResponseValidator } from './schemas/get-documents-by-client-id-response.schema.js'

export interface CreateDocumentRequest {
    /**
     * The file to be attached for a client.
     */
    file: string
    /**
     * The name (title) of the attached file.
     */
    name?: string | undefined
    /**
     * The description of the attached file.
     */
    notes?: string | undefined
}

export const CreateDocumentRequest = {
    validate: CreateDocumentRequestValidator as ValidateFunction<CreateDocumentRequest>,
    get schema() {
        return CreateDocumentRequest.validate.schema
    },
    get errors() {
        return CreateDocumentRequest.validate.errors ?? undefined
    },
    is: (o: unknown): o is CreateDocumentRequest => CreateDocumentRequest.validate(o) === true,
    parse: (o: unknown): { right: CreateDocumentRequest } | { left: DefinedError[] } => {
        if (CreateDocumentRequest.is(o)) {
            return { right: o }
        }
        return { left: (CreateDocumentRequest.errors ?? []) as DefinedError[] }
    },
} as const

/**
 * Holds information regarding the documents uploaded as attachments
 */
export interface Document {
    /**
     * The creation date of the document, stored as UTC
     */
    creationDate?: string | undefined
    /**
     * The document encodedKey
     */
    encodedKey?: string | undefined
    /**
     * The original file name of the document
     */
    fileName?: string | undefined
    /**
     * The file size of the document
     */
    fileSize?: number | undefined
    /**
     * The document id
     */
    id: number
    /**
     * The last modified date of the document, stored as UTC
     */
    lastModifiedDate?: string | undefined
    /**
     * Location where the document can be found, eg /myfiles/mypicture.jpeg
     */
    location?: string | undefined
    /**
     * The name of the document
     */
    name: string
    /**
     * Detailed notes about the document
     */
    notes?: string | undefined
    /**
     * Represents the holder of this document. If null, means nobody is the owner of this document
     */
    ownerKey?: string | undefined
    /**
     * Determines the owner type of the document
     */
    ownerType?:
        | 'CLIENT'
        | 'GROUP'
        | 'LOAN_PRODUCT'
        | 'SAVINGS_PRODUCT'
        | 'CENTRE'
        | 'BRANCH'
        | 'USER'
        | 'LOAN_ACCOUNT'
        | 'DEPOSIT_ACCOUNT'
        | 'ID_DOCUMENT'
        | 'LINE_OF_CREDIT'
        | 'GL_JOURNAL_ENTRY'
        | undefined
    /**
     * The extension of the document
     */
    type: string
}

export const Document = {
    validate: DocumentValidator as ValidateFunction<Document>,
    get schema() {
        return Document.validate.schema
    },
    get errors() {
        return Document.validate.errors ?? undefined
    },
    is: (o: unknown): o is Document => Document.validate(o) === true,
    parse: (o: unknown): { right: Document } | { left: DefinedError[] } => {
        if (Document.is(o)) {
            return { right: o }
        }
        return { left: (Document.errors ?? []) as DefinedError[] }
    },
} as const

export interface ErrorResponse {
    errors?: RestError[] | undefined
}

export const ErrorResponse = {
    validate: ErrorResponseValidator as ValidateFunction<ErrorResponse>,
    get schema() {
        return ErrorResponse.validate.schema
    },
    get errors() {
        return ErrorResponse.validate.errors ?? undefined
    },
    is: (o: unknown): o is ErrorResponse => ErrorResponse.validate(o) === true,
    parse: (o: unknown): { right: ErrorResponse } | { left: DefinedError[] } => {
        if (ErrorResponse.is(o)) {
            return { right: o }
        }
        return { left: (ErrorResponse.errors ?? []) as DefinedError[] }
    },
} as const

export type GetDocumentsByClientIdResponse = Document[]

export const GetDocumentsByClientIdResponse = {
    validate: GetDocumentsByClientIdResponseValidator as ValidateFunction<GetDocumentsByClientIdResponse>,
    get schema() {
        return GetDocumentsByClientIdResponse.validate.schema
    },
    get errors() {
        return GetDocumentsByClientIdResponse.validate.errors ?? undefined
    },
    is: (o: unknown): o is GetDocumentsByClientIdResponse => GetDocumentsByClientIdResponse.validate(o) === true,
    parse: (o: unknown): { right: GetDocumentsByClientIdResponse } | { left: DefinedError[] } => {
        if (GetDocumentsByClientIdResponse.is(o)) {
            return { right: o }
        }
        return { left: (GetDocumentsByClientIdResponse.errors ?? []) as DefinedError[] }
    },
} as const

export interface RestError {
    errorCode?: number | undefined
    errorReason?: string | undefined
    errorSource?: string | undefined
}
