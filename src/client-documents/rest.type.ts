/**
 * Generated by @skyleague/therefore@v1.0.0-local
 * Do not manually touch this
 */
/* eslint-disable */
import type { ValidateFunction } from 'ajv'
import { ValidationError } from 'ajv'

/**
 * Holds information regarding the documents uploaded as attachments
 */
export interface Document {
    /**
     * The creation date of the document, stored as UTC
     */
    creationDate?: string
    /**
     * The document encodedKey
     */
    encodedKey?: string
    /**
     * The original file name of the document
     */
    fileName?: string
    /**
     * The file size of the document
     */
    fileSize?: number
    /**
     * The document id
     */
    id: number
    /**
     * The last modified date of the document, stored as UTC
     */
    lastModifiedDate?: string
    /**
     * Location where the document can be found, eg /myfiles/mypicture.jpeg
     */
    location?: string
    /**
     * The name of the document
     */
    name: string
    /**
     * Detailed notes about the document
     */
    notes?: string
    /**
     * Represents the holder of this document. If null, means nobody is the owner of this document
     */
    ownerKey?: string
    /**
     * Determines the owner type of the document
     */
    ownerType?:
        | 'CLIENT'
        | 'GROUP'
        | 'LOAN_PRODUCT'
        | 'SAVINGS_PRODUCT'
        | 'CENTRE'
        | 'BRANCH'
        | 'USER'
        | 'LOAN_ACCOUNT'
        | 'DEPOSIT_ACCOUNT'
        | 'ID_DOCUMENT'
        | 'LINE_OF_CREDIT'
        | 'GL_JOURNAL_ENTRY'
    /**
     * The extension of the document
     */
    type: string
}

export const Document = {
    validate: (await import('./schemas/document.schema.js')).validate as ValidateFunction<Document>,
    get schema() {
        return Document.validate.schema
    },
    get errors() {
        return Document.validate.errors ?? undefined
    },
    is: (o: unknown): o is Document => Document.validate(o) === true,
    assert: (o: unknown) => {
        if (!Document.validate(o)) {
            throw new ValidationError(Document.errors ?? [])
        }
    },
} as const

export interface ErrorResponse {
    errors?: RestError[]
}

export const ErrorResponse = {
    validate: (await import('./schemas/error-response.schema.js')).validate as ValidateFunction<ErrorResponse>,
    get schema() {
        return ErrorResponse.validate.schema
    },
    get errors() {
        return ErrorResponse.validate.errors ?? undefined
    },
    is: (o: unknown): o is ErrorResponse => ErrorResponse.validate(o) === true,
    assert: (o: unknown) => {
        if (!ErrorResponse.validate(o)) {
            throw new ValidationError(ErrorResponse.errors ?? [])
        }
    },
} as const

export type GetDocumentsByClientIdResponse = Document[]

export const GetDocumentsByClientIdResponse = {
    validate: (await import('./schemas/get-documents-by-client-id-response.schema.js'))
        .validate as ValidateFunction<GetDocumentsByClientIdResponse>,
    get schema() {
        return GetDocumentsByClientIdResponse.validate.schema
    },
    get errors() {
        return GetDocumentsByClientIdResponse.validate.errors ?? undefined
    },
    is: (o: unknown): o is GetDocumentsByClientIdResponse => GetDocumentsByClientIdResponse.validate(o) === true,
} as const

export interface RestError {
    errorCode?: number
    errorReason?: string
    errorSource?: string
}
