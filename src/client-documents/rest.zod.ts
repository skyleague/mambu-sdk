/**
 * Generated by @skyleague/therefore
 * Do not manually touch this
 */
/* eslint-disable */

import { z } from 'zod'

export const RestError = z.object({
    errorCode: z.number().int().optional(),
    errorReason: z.string().optional(),
    errorSource: z.string().optional(),
})

export type RestError = z.infer<typeof RestError>

export const Document = z
    .object({
        creationDate: z
            .string()
            .datetime({ offset: true })
            .describe('The creation date of the document, stored as UTC')
            .optional(),
        encodedKey: z.string().describe('The document encodedKey').optional(),
        fileName: z.string().describe('The original file name of the document').optional(),
        fileSize: z.number().int().describe('The file size of the document').optional(),
        id: z.number().int().describe('The document id'),
        lastModifiedDate: z
            .string()
            .datetime({ offset: true })
            .describe('The last modified date of the document, stored as UTC')
            .optional(),
        location: z.string().describe('Location where the document can be found, eg /myfiles/mypicture.jpeg').optional(),
        name: z.string().describe('The name of the document'),
        notes: z.string().describe('Detailed notes about the document').optional(),
        ownerKey: z
            .string()
            .describe('Represents the holder of this document. If null, means nobody is the owner of this document')
            .optional(),
        ownerType: z
            .enum([
                'CLIENT',
                'GROUP',
                'LOAN_PRODUCT',
                'SAVINGS_PRODUCT',
                'CENTRE',
                'BRANCH',
                'USER',
                'LOAN_ACCOUNT',
                'DEPOSIT_ACCOUNT',
                'ID_DOCUMENT',
                'LINE_OF_CREDIT',
                'GL_JOURNAL_ENTRY',
            ])
            .describe('Determines the owner type of the document')
            .optional(),
        type: z.string().describe('The extension of the document'),
    })
    .describe('Holds information regarding the documents uploaded as attachments')

export type Document = z.infer<typeof Document>

export const CreateDocumentRequest = z.object({
    file: z.string().describe('The file to be attached for a client.'),
    name: z.string().describe('The name (title) of the attached file.').optional(),
    notes: z.string().describe('The description of the attached file.').optional(),
})

export type CreateDocumentRequest = z.infer<typeof CreateDocumentRequest>

export const ErrorResponse = z.object({
    errors: RestError.array().optional(),
})

export type ErrorResponse = z.infer<typeof ErrorResponse>

export const GetDocumentsByClientIdResponse = Document.array()

export type GetDocumentsByClientIdResponse = z.infer<typeof GetDocumentsByClientIdResponse>
