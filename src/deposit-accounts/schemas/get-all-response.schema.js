/**
 * Generated by Ajv https://ajv.js.org/guide/managing-schemas.html#standalone-validation-code 
 * eslint-disable
 */
import {createRequire} from 'module';const require = createRequire(import.meta.url);"use strict";export const validate = validate10;export default validate10;const schema11 = {"$schema":"http://json-schema.org/draft-07/schema#","title":"getAllResponse","type":"array","items":{"$ref":"#/$defs/DepositAccount"},"$defs":{"DepositAccount":{"type":"object","title":"DepositAccount","description":"Represents information about a deposit account.","properties":{"accountState":{"title":"accountState","description":"The state of the deposit account.","enum":["PENDING_APPROVAL","APPROVED","ACTIVE","ACTIVE_IN_ARREARS","MATURED","LOCKED","DORMANT","CLOSED","CLOSED_WRITTEN_OFF","WITHDRAWN","CLOSED_REJECTED"]},"migrationEventKey":{"type":"string","title":"migrationEventKey","description":"The migration event encoded key associated with this deposit account. If this account was imported, you can track which migration event it came from."},"notes":{"type":"string","title":"notes","description":"The notes or description attached to this object."},"lastSetToArrearsDate":{"type":"string","title":"lastSetToArrearsDate","description":"The date when the deposit account was set to In Arrears, or null if the account is not In Arrears. The date is in the organization's timezone and time format.","format":"date-time"},"assignedBranchKey":{"type":"string","title":"assignedBranchKey","description":"The key of the branch that this deposit account is assigned to."},"lastOverdraftInterestReviewDate":{"type":"string","title":"lastOverdraftInterestReviewDate","description":"The date when the overdraft interest was last reviewed, in the organization's timezone and time format.","format":"date-time"},"lastInterestStoredDate":{"type":"string","title":"lastInterestStoredDate","description":"The date when interest was last applied on the account, in the organization's timezone and time format.","format":"date-time"},"interestSettings":{"title":"interestSettings","$ref":"#/$defs/DepositAccountInterestSettingsaf30"},"balances":{"title":"balances","$ref":"#/$defs/DepositAccountBalancesaf30"},"creditArrangementKey":{"type":"string","title":"creditArrangementKey","description":"The key to the credit arrangement where this account is registered."},"maturityDate":{"type":"string","title":"maturityDate","description":"The date when the account matures, for fixed or compulsory savings plans, in the organization's timezone and time format.","format":"date-time"},"lastInterestReviewDate":{"type":"string","title":"lastInterestReviewDate","description":"The date when regular interest was last reviewed, in the organization's timezone and time format.","format":"date-time"},"encodedKey":{"type":"string","title":"encodedKey","description":"The encoded key of the deposit account, which is auto-generated and unique."},"id":{"type":"string","title":"id","description":"The ID of the deposit account, which can be generated and customized - but must be unique."},"overdraftSettings":{"title":"overdraftSettings","$ref":"#/$defs/DepositAccountOverdraftSettingsaf30"},"lastAccountAppraisalDate":{"type":"string","title":"lastAccountAppraisalDate","description":"The date when the account was last evaluated for interest calculations and maturity, in the organization's timezone and time format.","format":"date-time"},"withholdingTaxSourceKey":{"type":"string","title":"withholdingTaxSourceKey","description":"The tax source where the account withholding taxes will be updated."},"assignedUserKey":{"type":"string","title":"assignedUserKey","description":"The key of the user that this deposit is assigned to."},"overdraftInterestSettings":{"title":"overdraftInterestSettings","$ref":"#/$defs/DepositAccountOverdraftInterestSettingsaf30"},"lastModifiedDate":{"type":"string","title":"lastModifiedDate","description":"The last update date for the deposit account, in UTC.","format":"date-time"},"accountType":{"title":"accountType","description":"The deposit account type and the product that it belongs to.","enum":["CURRENT_ACCOUNT","REGULAR_SAVINGS","FIXED_DEPOSIT","SAVINGS_PLAN","INVESTOR_ACCOUNT"]},"lockedDate":{"type":"string","title":"lockedDate","description":"The date when the deposit account was locked, in the organization's timezone and time format.","format":"date-time"},"creationDate":{"type":"string","title":"creationDate","description":"The date this deposit account was created, in UTC.","format":"date-time"},"lastInterestCalculationDate":{"type":"string","title":"lastInterestCalculationDate","description":"The date when interest was last calculated for the account, in the organization's timezone and time format.","format":"date-time"},"assignedCentreKey":{"type":"string","title":"assignedCentreKey","description":"The key of the centre that this account is assigned to."},"approvedDate":{"type":"string","title":"approvedDate","description":"The date when the deposit account was approved, in the organization's timezone and time format.","format":"date-time"},"closedDate":{"type":"string","title":"closedDate","description":"The date when the deposit account was closed, in UTC.","format":"date-time"},"accruedAmounts":{"title":"accruedAmounts","$ref":"#/$defs/DepositAccountAccruedAmountsaf30"},"name":{"type":"string","title":"name","description":"The deposit account name."},"accountHolderKey":{"type":"string","title":"accountHolderKey","description":"The encoded key of the account holder, which is an individual client or group."},"productTypeKey":{"type":"string","title":"productTypeKey","description":"The key to the product type that this account is based on."},"activationDate":{"type":"string","title":"activationDate","description":"The date when the deposit account was activated, in the organization's timezone and time format.","format":"date-time"},"internalControls":{"title":"internalControls","$ref":"#/$defs/DepositAccountInternalControlsaf30"},"currencyCode":{"type":"string","title":"currencyCode","description":"The currency code."},"accountHolderType":{"title":"accountHolderType","description":"The account holder type.","enum":["CLIENT","GROUP"]},"linkedSettlementAccountKeys":{"type":"array","title":"linkedSettlementAccountKeys","description":"Lists all loan account keys on which the deposit account is used as the settlement account.","items":{"type":"string"}}},"required":["name","accountHolderKey","productTypeKey","accountHolderType"],"additionalProperties":true},"DepositAccountInterestSettingsaf30":{"type":"object","title":"DepositAccountInterestSettingsaf30","description":"Represents information about the deposit account's interest settings.","properties":{"interestRateSettings":{"title":"interestRateSettings","$ref":"#/$defs/DepositAccountInterestRateSettingsaf30"},"interestPaymentSettings":{"title":"interestPaymentSettings","$ref":"#/$defs/DepositAccountInterestPaymentSettingsaf30"}},"additionalProperties":true},"DepositAccountInterestRateSettingsaf30":{"type":"object","title":"DepositAccountInterestRateSettingsaf30","description":"Represents information about the interest rate settings for deposit accounts.","properties":{"interestRate":{"type":"number","title":"interestRate","description":"The interest rate for the deposit account."},"interestSpread":{"type":"number","title":"interestSpread","description":"The index interest rate that is used to calculate the interest rate that is applied to accounts."},"interestRateReviewUnit":{"title":"interestRateReviewUnit","description":"The time unit to use to determine the frequency of interest rate reviews.","enum":["DAYS","WEEKS","MONTHS"]},"interestRateSource":{"title":"interestRateSource","description":"The interest calculation method used.","enum":["FIXED_INTEREST_RATE","INDEX_INTEREST_RATE"]},"interestRateReviewCount":{"type":"integer","title":"interestRateReviewCount","description":"The number of times to review the interest rate in a time period."},"interestRateTiers":{"type":"array","title":"interestRateTiers","description":"The list of interest rate tiers, which hold the values to define how interest is calculated.","items":{"$ref":"#/$defs/DepositAccountInterestRateTieraf30"}},"interestChargeFrequency":{"title":"interestChargeFrequency","description":"The interest charge frequency, which shows how often interest is charged on loan or deposit accounts.","enum":["ANNUALIZED","EVERY_MONTH","EVERY_FOUR_WEEKS","EVERY_WEEK","EVERY_DAY","EVERY_X_DAYS"]},"encodedKey":{"type":"string","title":"encodedKey","description":"The encoded key for the set of interest settings, which is auto-generated and unique."},"interestChargeFrequencyCount":{"type":"integer","title":"interestChargeFrequencyCount","description":"The number of times to apply interest in a time period."},"interestRateTerms":{"title":"interestRateTerms","description":"The terms for how interest rate is determined when accruing for an account.","enum":["FIXED","TIERED","TIERED_PERIOD","TIERED_BAND"]}},"additionalProperties":true},"DepositAccountInterestRateTieraf30":{"type":"object","title":"DepositAccountInterestRateTieraf30","description":"Represents information about how interest rate is calculated.","properties":{"endingBalance":{"type":"number","title":"endingBalance","description":"The top-limit value for the account balance in order to determine if this tier is used or not"},"interestRate":{"type":"number","title":"interestRate","description":"The rate used for computing the interest for an account which has the balance less than the ending balance"},"encodedKey":{"type":"string","title":"encodedKey","description":"The encoded key of the interest rate tier, auto generated, unique"},"endingDay":{"type":"integer","title":"endingDay","description":"The end date for the account period. Used to determine if this interest rate tier is used or not."}},"required":["interestRate"],"additionalProperties":true},"DepositAccountInterestPaymentSettingsaf30":{"type":"object","title":"DepositAccountInterestPaymentSettingsaf30","description":"Represents information about the interest payment settings.","properties":{"interestPaymentDates":{"type":"array","title":"interestPaymentDates","description":"The list of all dates when the interest is paid into the deposit account.","items":{"$ref":"#/$defs/MonthAndDayaf30"}},"interestPaymentPoint":{"title":"interestPaymentPoint","description":"The interest payment point, which specifies when the interest should be paid to the account.","enum":["FIRST_DAY_OF_MONTH","EVERY_WEEK","EVERY_OTHER_WEEK","EVERY_MONTH","EVERY_3_MONTHS","ON_FIXED_DATES","DAILY","ANNUALLY","BI_ANNUALLY","ON_ACCOUNT_MATURITY"]}},"additionalProperties":true},"MonthAndDayaf30":{"type":"object","title":"MonthAndDayaf30","description":"Wrapper for month and day for instances where the year isn't needed","properties":{"month":{"type":"integer","title":"month","description":"The month of the year"},"day":{"type":"integer","title":"day","description":"The day in the month"}},"additionalProperties":true},"DepositAccountBalancesaf30":{"type":"object","title":"DepositAccountBalancesaf30","description":"Represents information about the balances of a deposit account.","properties":{"overdraftInterestDue":{"type":"number","title":"overdraftInterestDue","description":"The amount of interest due to be paid on an account as a result of an authorized overdraft."},"forwardAvailableBalance":{"type":"number","title":"forwardAvailableBalance","description":"The sum of all the authorization hold amounts that have `CRDT` as the `creditDebitIndicator` for an account."},"totalBalance":{"type":"number","title":"totalBalance","description":"The current balance of the account."},"lockedBalance":{"type":"number","title":"lockedBalance","description":"The locked amount that is not available for withdrawal in the account. For more information, see [Deposit Account Overview Details](https://support.mambu.com/docs/deposit-account-overview-details)."},"technicalOverdraftAmount":{"type":"number","title":"technicalOverdraftAmount","description":"The technical overdraft amount that has been taken out in the account. For more information, see [Technical Overdraft](https://support.mambu.com/docs/en/overdraft-products#technical-overdraft)."},"overdraftAmount":{"type":"number","title":"overdraftAmount","description":"The overdraft amount that has been taken out in the account. For more information, see [Overdraft Products](https://support.mambu.com/docs/en/overdraft-products)."},"holdBalance":{"type":"number","title":"holdBalance","description":"The sum of all the authorization hold amounts that have `DBIT` as the `creditDebitIndicator` for an account."},"technicalOverdraftInterestDue":{"type":"number","title":"technicalOverdraftInterestDue","description":"The amount of interest due to be paid on an account as a result of a technical overdraft."},"feesDue":{"type":"number","title":"feesDue","description":"The amount of fees due to be paid on this account."},"blockedBalance":{"type":"number","title":"blockedBalance","description":"The sum of all the blocked amounts on an account."},"availableBalance":{"type":"number","title":"availableBalance","description":"The current available balance for deposit transactions."}},"additionalProperties":true},"DepositAccountOverdraftSettingsaf30":{"type":"object","title":"DepositAccountOverdraftSettingsaf30","description":"Represents information about a deposit account's overdraft settings.","properties":{"allowOverdraft":{"type":"boolean","title":"allowOverdraft","description":"`TRUE` if this account supports overdraft, `FALSE` otherwise."},"overdraftLimit":{"type":"number","title":"overdraftLimit","description":"The limit amount that may be taken out as overdraft, where null means 0."},"overdraftExpiryDate":{"type":"string","title":"overdraftExpiryDate","description":"The expiration date of an overdraft.","format":"date-time"}},"additionalProperties":true},"DepositAccountOverdraftInterestSettingsaf30":{"type":"object","title":"DepositAccountOverdraftInterestSettingsaf30","description":"Represents information about a deposit account's overdraft interest settings.","properties":{"interestRateSettings":{"title":"interestRateSettings","$ref":"#/$defs/DepositAccountOverdraftInterestRateSettingsaf30"}},"additionalProperties":true},"DepositAccountOverdraftInterestRateSettingsaf30":{"type":"object","title":"DepositAccountOverdraftInterestRateSettingsaf30","description":"Represents information about overdraft interest rate settings for deposit accounts.","properties":{"interestRate":{"type":"number","title":"interestRate","description":"The interest rate for the deposit account."},"interestSpread":{"type":"number","title":"interestSpread","description":"The index interest rate that is used to calculate the interest rate that is applied to accounts."},"interestRateReviewUnit":{"title":"interestRateReviewUnit","description":"The time unit to use to determine the frequency of interest rate reviews.","enum":["DAYS","WEEKS","MONTHS"]},"interestRateSource":{"title":"interestRateSource","description":"The interest calculation method used.","enum":["FIXED_INTEREST_RATE","INDEX_INTEREST_RATE"]},"interestRateReviewCount":{"type":"integer","title":"interestRateReviewCount","description":"The number of times to review the interest rate in a time period."},"interestRateTiers":{"type":"array","title":"interestRateTiers","description":"The list of interest rate tiers, which hold the values to define how interest is calculated.","items":{"$ref":"#/$defs/DepositAccountInterestRateTieraf30"}},"interestChargeFrequency":{"title":"interestChargeFrequency","description":"The interest charge frequency, which shows how often interest is charged on loan or deposit accounts.","enum":["ANNUALIZED","EVERY_MONTH","EVERY_FOUR_WEEKS","EVERY_WEEK","EVERY_DAY","EVERY_X_DAYS"]},"encodedKey":{"type":"string","title":"encodedKey","description":"The encoded key for the set of interest settings, which is auto-generated and unique."},"interestChargeFrequencyCount":{"type":"integer","title":"interestChargeFrequencyCount","description":"The number of times to apply interest in a time period."},"interestRateTerms":{"title":"interestRateTerms","description":"The terms for how interest rate is determined when accruing for an account.","enum":["FIXED","TIERED","TIERED_PERIOD","TIERED_BAND"]}},"additionalProperties":true},"DepositAccountAccruedAmountsaf30":{"type":"object","title":"DepositAccountAccruedAmountsaf30","description":"Represents information about the accrued amounts of deposit accounts.","properties":{"overdraftInterestAccrued":{"type":"number","title":"overdraftInterestAccrued","description":"The amount of overdraft interest that has been accrued in the account."},"interestAccrued":{"type":"number","title":"interestAccrued","description":"The amount of positive interest that has been accrued in the account."},"technicalOverdraftInterestAccrued":{"type":"number","title":"technicalOverdraftInterestAccrued","description":"The amount of technical overdraft interest that has been accrued in the account."},"negativeInterestAccrued":{"type":"number","title":"negativeInterestAccrued","description":"The amount of negative interest that has been accrued in the account."}},"additionalProperties":true},"DepositAccountInternalControlsaf30":{"type":"object","title":"DepositAccountInternalControlsaf30","description":"Represents information about internal controls.","properties":{"maxDepositBalance":{"type":"number","title":"maxDepositBalance","description":"The maximum deposit balance of the account."},"recommendedDepositAmount":{"type":"number","title":"recommendedDepositAmount","description":"The recommended amount for a deposit."},"targetAmount":{"type":"number","title":"targetAmount","description":"The target amount for a deposit made towards a savings goal."},"maxWithdrawalAmount":{"type":"number","title":"maxWithdrawalAmount","description":"The maximum amount allowed for a withdrawal."}},"additionalProperties":true}}};const schema12 = {"type":"object","title":"DepositAccount","description":"Represents information about a deposit account.","properties":{"accountState":{"title":"accountState","description":"The state of the deposit account.","enum":["PENDING_APPROVAL","APPROVED","ACTIVE","ACTIVE_IN_ARREARS","MATURED","LOCKED","DORMANT","CLOSED","CLOSED_WRITTEN_OFF","WITHDRAWN","CLOSED_REJECTED"]},"migrationEventKey":{"type":"string","title":"migrationEventKey","description":"The migration event encoded key associated with this deposit account. If this account was imported, you can track which migration event it came from."},"notes":{"type":"string","title":"notes","description":"The notes or description attached to this object."},"lastSetToArrearsDate":{"type":"string","title":"lastSetToArrearsDate","description":"The date when the deposit account was set to In Arrears, or null if the account is not In Arrears. The date is in the organization's timezone and time format.","format":"date-time"},"assignedBranchKey":{"type":"string","title":"assignedBranchKey","description":"The key of the branch that this deposit account is assigned to."},"lastOverdraftInterestReviewDate":{"type":"string","title":"lastOverdraftInterestReviewDate","description":"The date when the overdraft interest was last reviewed, in the organization's timezone and time format.","format":"date-time"},"lastInterestStoredDate":{"type":"string","title":"lastInterestStoredDate","description":"The date when interest was last applied on the account, in the organization's timezone and time format.","format":"date-time"},"interestSettings":{"title":"interestSettings","$ref":"#/$defs/DepositAccountInterestSettingsaf30"},"balances":{"title":"balances","$ref":"#/$defs/DepositAccountBalancesaf30"},"creditArrangementKey":{"type":"string","title":"creditArrangementKey","description":"The key to the credit arrangement where this account is registered."},"maturityDate":{"type":"string","title":"maturityDate","description":"The date when the account matures, for fixed or compulsory savings plans, in the organization's timezone and time format.","format":"date-time"},"lastInterestReviewDate":{"type":"string","title":"lastInterestReviewDate","description":"The date when regular interest was last reviewed, in the organization's timezone and time format.","format":"date-time"},"encodedKey":{"type":"string","title":"encodedKey","description":"The encoded key of the deposit account, which is auto-generated and unique."},"id":{"type":"string","title":"id","description":"The ID of the deposit account, which can be generated and customized - but must be unique."},"overdraftSettings":{"title":"overdraftSettings","$ref":"#/$defs/DepositAccountOverdraftSettingsaf30"},"lastAccountAppraisalDate":{"type":"string","title":"lastAccountAppraisalDate","description":"The date when the account was last evaluated for interest calculations and maturity, in the organization's timezone and time format.","format":"date-time"},"withholdingTaxSourceKey":{"type":"string","title":"withholdingTaxSourceKey","description":"The tax source where the account withholding taxes will be updated."},"assignedUserKey":{"type":"string","title":"assignedUserKey","description":"The key of the user that this deposit is assigned to."},"overdraftInterestSettings":{"title":"overdraftInterestSettings","$ref":"#/$defs/DepositAccountOverdraftInterestSettingsaf30"},"lastModifiedDate":{"type":"string","title":"lastModifiedDate","description":"The last update date for the deposit account, in UTC.","format":"date-time"},"accountType":{"title":"accountType","description":"The deposit account type and the product that it belongs to.","enum":["CURRENT_ACCOUNT","REGULAR_SAVINGS","FIXED_DEPOSIT","SAVINGS_PLAN","INVESTOR_ACCOUNT"]},"lockedDate":{"type":"string","title":"lockedDate","description":"The date when the deposit account was locked, in the organization's timezone and time format.","format":"date-time"},"creationDate":{"type":"string","title":"creationDate","description":"The date this deposit account was created, in UTC.","format":"date-time"},"lastInterestCalculationDate":{"type":"string","title":"lastInterestCalculationDate","description":"The date when interest was last calculated for the account, in the organization's timezone and time format.","format":"date-time"},"assignedCentreKey":{"type":"string","title":"assignedCentreKey","description":"The key of the centre that this account is assigned to."},"approvedDate":{"type":"string","title":"approvedDate","description":"The date when the deposit account was approved, in the organization's timezone and time format.","format":"date-time"},"closedDate":{"type":"string","title":"closedDate","description":"The date when the deposit account was closed, in UTC.","format":"date-time"},"accruedAmounts":{"title":"accruedAmounts","$ref":"#/$defs/DepositAccountAccruedAmountsaf30"},"name":{"type":"string","title":"name","description":"The deposit account name."},"accountHolderKey":{"type":"string","title":"accountHolderKey","description":"The encoded key of the account holder, which is an individual client or group."},"productTypeKey":{"type":"string","title":"productTypeKey","description":"The key to the product type that this account is based on."},"activationDate":{"type":"string","title":"activationDate","description":"The date when the deposit account was activated, in the organization's timezone and time format.","format":"date-time"},"internalControls":{"title":"internalControls","$ref":"#/$defs/DepositAccountInternalControlsaf30"},"currencyCode":{"type":"string","title":"currencyCode","description":"The currency code."},"accountHolderType":{"title":"accountHolderType","description":"The account holder type.","enum":["CLIENT","GROUP"]},"linkedSettlementAccountKeys":{"type":"array","title":"linkedSettlementAccountKeys","description":"Lists all loan account keys on which the deposit account is used as the settlement account.","items":{"type":"string"}}},"required":["name","accountHolderKey","productTypeKey","accountHolderType"],"additionalProperties":true};const schema18 = {"type":"object","title":"DepositAccountBalancesaf30","description":"Represents information about the balances of a deposit account.","properties":{"overdraftInterestDue":{"type":"number","title":"overdraftInterestDue","description":"The amount of interest due to be paid on an account as a result of an authorized overdraft."},"forwardAvailableBalance":{"type":"number","title":"forwardAvailableBalance","description":"The sum of all the authorization hold amounts that have `CRDT` as the `creditDebitIndicator` for an account."},"totalBalance":{"type":"number","title":"totalBalance","description":"The current balance of the account."},"lockedBalance":{"type":"number","title":"lockedBalance","description":"The locked amount that is not available for withdrawal in the account. For more information, see [Deposit Account Overview Details](https://support.mambu.com/docs/deposit-account-overview-details)."},"technicalOverdraftAmount":{"type":"number","title":"technicalOverdraftAmount","description":"The technical overdraft amount that has been taken out in the account. For more information, see [Technical Overdraft](https://support.mambu.com/docs/en/overdraft-products#technical-overdraft)."},"overdraftAmount":{"type":"number","title":"overdraftAmount","description":"The overdraft amount that has been taken out in the account. For more information, see [Overdraft Products](https://support.mambu.com/docs/en/overdraft-products)."},"holdBalance":{"type":"number","title":"holdBalance","description":"The sum of all the authorization hold amounts that have `DBIT` as the `creditDebitIndicator` for an account."},"technicalOverdraftInterestDue":{"type":"number","title":"technicalOverdraftInterestDue","description":"The amount of interest due to be paid on an account as a result of a technical overdraft."},"feesDue":{"type":"number","title":"feesDue","description":"The amount of fees due to be paid on this account."},"blockedBalance":{"type":"number","title":"blockedBalance","description":"The sum of all the blocked amounts on an account."},"availableBalance":{"type":"number","title":"availableBalance","description":"The current available balance for deposit transactions."}},"additionalProperties":true};const schema19 = {"type":"object","title":"DepositAccountOverdraftSettingsaf30","description":"Represents information about a deposit account's overdraft settings.","properties":{"allowOverdraft":{"type":"boolean","title":"allowOverdraft","description":"`TRUE` if this account supports overdraft, `FALSE` otherwise."},"overdraftLimit":{"type":"number","title":"overdraftLimit","description":"The limit amount that may be taken out as overdraft, where null means 0."},"overdraftExpiryDate":{"type":"string","title":"overdraftExpiryDate","description":"The expiration date of an overdraft.","format":"date-time"}},"additionalProperties":true};const schema23 = {"type":"object","title":"DepositAccountAccruedAmountsaf30","description":"Represents information about the accrued amounts of deposit accounts.","properties":{"overdraftInterestAccrued":{"type":"number","title":"overdraftInterestAccrued","description":"The amount of overdraft interest that has been accrued in the account."},"interestAccrued":{"type":"number","title":"interestAccrued","description":"The amount of positive interest that has been accrued in the account."},"technicalOverdraftInterestAccrued":{"type":"number","title":"technicalOverdraftInterestAccrued","description":"The amount of technical overdraft interest that has been accrued in the account."},"negativeInterestAccrued":{"type":"number","title":"negativeInterestAccrued","description":"The amount of negative interest that has been accrued in the account."}},"additionalProperties":true};const schema24 = {"type":"object","title":"DepositAccountInternalControlsaf30","description":"Represents information about internal controls.","properties":{"maxDepositBalance":{"type":"number","title":"maxDepositBalance","description":"The maximum deposit balance of the account."},"recommendedDepositAmount":{"type":"number","title":"recommendedDepositAmount","description":"The recommended amount for a deposit."},"targetAmount":{"type":"number","title":"targetAmount","description":"The target amount for a deposit made towards a savings goal."},"maxWithdrawalAmount":{"type":"number","title":"maxWithdrawalAmount","description":"The maximum amount allowed for a withdrawal."}},"additionalProperties":true};const func0 = require("ajv/dist/runtime/equal").default;const schema13 = {"type":"object","title":"DepositAccountInterestSettingsaf30","description":"Represents information about the deposit account's interest settings.","properties":{"interestRateSettings":{"title":"interestRateSettings","$ref":"#/$defs/DepositAccountInterestRateSettingsaf30"},"interestPaymentSettings":{"title":"interestPaymentSettings","$ref":"#/$defs/DepositAccountInterestPaymentSettingsaf30"}},"additionalProperties":true};const schema14 = {"type":"object","title":"DepositAccountInterestRateSettingsaf30","description":"Represents information about the interest rate settings for deposit accounts.","properties":{"interestRate":{"type":"number","title":"interestRate","description":"The interest rate for the deposit account."},"interestSpread":{"type":"number","title":"interestSpread","description":"The index interest rate that is used to calculate the interest rate that is applied to accounts."},"interestRateReviewUnit":{"title":"interestRateReviewUnit","description":"The time unit to use to determine the frequency of interest rate reviews.","enum":["DAYS","WEEKS","MONTHS"]},"interestRateSource":{"title":"interestRateSource","description":"The interest calculation method used.","enum":["FIXED_INTEREST_RATE","INDEX_INTEREST_RATE"]},"interestRateReviewCount":{"type":"integer","title":"interestRateReviewCount","description":"The number of times to review the interest rate in a time period."},"interestRateTiers":{"type":"array","title":"interestRateTiers","description":"The list of interest rate tiers, which hold the values to define how interest is calculated.","items":{"$ref":"#/$defs/DepositAccountInterestRateTieraf30"}},"interestChargeFrequency":{"title":"interestChargeFrequency","description":"The interest charge frequency, which shows how often interest is charged on loan or deposit accounts.","enum":["ANNUALIZED","EVERY_MONTH","EVERY_FOUR_WEEKS","EVERY_WEEK","EVERY_DAY","EVERY_X_DAYS"]},"encodedKey":{"type":"string","title":"encodedKey","description":"The encoded key for the set of interest settings, which is auto-generated and unique."},"interestChargeFrequencyCount":{"type":"integer","title":"interestChargeFrequencyCount","description":"The number of times to apply interest in a time period."},"interestRateTerms":{"title":"interestRateTerms","description":"The terms for how interest rate is determined when accruing for an account.","enum":["FIXED","TIERED","TIERED_PERIOD","TIERED_BAND"]}},"additionalProperties":true};const schema15 = {"type":"object","title":"DepositAccountInterestRateTieraf30","description":"Represents information about how interest rate is calculated.","properties":{"endingBalance":{"type":"number","title":"endingBalance","description":"The top-limit value for the account balance in order to determine if this tier is used or not"},"interestRate":{"type":"number","title":"interestRate","description":"The rate used for computing the interest for an account which has the balance less than the ending balance"},"encodedKey":{"type":"string","title":"encodedKey","description":"The encoded key of the interest rate tier, auto generated, unique"},"endingDay":{"type":"integer","title":"endingDay","description":"The end date for the account period. Used to determine if this interest rate tier is used or not."}},"required":["interestRate"],"additionalProperties":true};function validate13(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){let vErrors = null;let errors = 0;if(errors === 0){if(data && typeof data == "object" && !Array.isArray(data)){if(data.interestRate !== undefined){let data0 = data.interestRate;const _errs2 = errors;if(!((typeof data0 == "number") && (isFinite(data0)))){validate13.errors = [{instancePath:instancePath+"/interestRate",schemaPath:"#/properties/interestRate/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid0 = _errs2 === errors;}else {var valid0 = true;}if(valid0){if(data.interestSpread !== undefined){let data1 = data.interestSpread;const _errs4 = errors;if(!((typeof data1 == "number") && (isFinite(data1)))){validate13.errors = [{instancePath:instancePath+"/interestSpread",schemaPath:"#/properties/interestSpread/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid0 = _errs4 === errors;}else {var valid0 = true;}if(valid0){if(data.interestRateReviewUnit !== undefined){let data2 = data.interestRateReviewUnit;const _errs6 = errors;if(!(((data2 === "DAYS") || (data2 === "WEEKS")) || (data2 === "MONTHS"))){validate13.errors = [{instancePath:instancePath+"/interestRateReviewUnit",schemaPath:"#/properties/interestRateReviewUnit/enum",keyword:"enum",params:{allowedValues: schema14.properties.interestRateReviewUnit.enum},message:"must be equal to one of the allowed values"}];return false;}var valid0 = _errs6 === errors;}else {var valid0 = true;}if(valid0){if(data.interestRateSource !== undefined){let data3 = data.interestRateSource;const _errs7 = errors;if(!((data3 === "FIXED_INTEREST_RATE") || (data3 === "INDEX_INTEREST_RATE"))){validate13.errors = [{instancePath:instancePath+"/interestRateSource",schemaPath:"#/properties/interestRateSource/enum",keyword:"enum",params:{allowedValues: schema14.properties.interestRateSource.enum},message:"must be equal to one of the allowed values"}];return false;}var valid0 = _errs7 === errors;}else {var valid0 = true;}if(valid0){if(data.interestRateReviewCount !== undefined){let data4 = data.interestRateReviewCount;const _errs8 = errors;if(!(((typeof data4 == "number") && (!(data4 % 1) && !isNaN(data4))) && (isFinite(data4)))){validate13.errors = [{instancePath:instancePath+"/interestRateReviewCount",schemaPath:"#/properties/interestRateReviewCount/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];return false;}var valid0 = _errs8 === errors;}else {var valid0 = true;}if(valid0){if(data.interestRateTiers !== undefined){let data5 = data.interestRateTiers;const _errs10 = errors;if(errors === _errs10){if(Array.isArray(data5)){var valid1 = true;const len0 = data5.length;for(let i0=0; i0<len0; i0++){let data6 = data5[i0];const _errs12 = errors;const _errs13 = errors;if(errors === _errs13){if(data6 && typeof data6 == "object" && !Array.isArray(data6)){let missing0;if((data6.interestRate === undefined) && (missing0 = "interestRate")){validate13.errors = [{instancePath:instancePath+"/interestRateTiers/" + i0,schemaPath:"#/$defs/DepositAccountInterestRateTieraf30/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];return false;}else {if(data6.endingBalance !== undefined){let data7 = data6.endingBalance;const _errs16 = errors;if(!((typeof data7 == "number") && (isFinite(data7)))){validate13.errors = [{instancePath:instancePath+"/interestRateTiers/" + i0+"/endingBalance",schemaPath:"#/$defs/DepositAccountInterestRateTieraf30/properties/endingBalance/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid3 = _errs16 === errors;}else {var valid3 = true;}if(valid3){if(data6.interestRate !== undefined){let data8 = data6.interestRate;const _errs18 = errors;if(!((typeof data8 == "number") && (isFinite(data8)))){validate13.errors = [{instancePath:instancePath+"/interestRateTiers/" + i0+"/interestRate",schemaPath:"#/$defs/DepositAccountInterestRateTieraf30/properties/interestRate/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid3 = _errs18 === errors;}else {var valid3 = true;}if(valid3){if(data6.encodedKey !== undefined){const _errs20 = errors;if(typeof data6.encodedKey !== "string"){validate13.errors = [{instancePath:instancePath+"/interestRateTiers/" + i0+"/encodedKey",schemaPath:"#/$defs/DepositAccountInterestRateTieraf30/properties/encodedKey/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid3 = _errs20 === errors;}else {var valid3 = true;}if(valid3){if(data6.endingDay !== undefined){let data10 = data6.endingDay;const _errs22 = errors;if(!(((typeof data10 == "number") && (!(data10 % 1) && !isNaN(data10))) && (isFinite(data10)))){validate13.errors = [{instancePath:instancePath+"/interestRateTiers/" + i0+"/endingDay",schemaPath:"#/$defs/DepositAccountInterestRateTieraf30/properties/endingDay/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];return false;}var valid3 = _errs22 === errors;}else {var valid3 = true;}}}}}}else {validate13.errors = [{instancePath:instancePath+"/interestRateTiers/" + i0,schemaPath:"#/$defs/DepositAccountInterestRateTieraf30/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}var valid1 = _errs12 === errors;if(!valid1){break;}}}else {validate13.errors = [{instancePath:instancePath+"/interestRateTiers",schemaPath:"#/properties/interestRateTiers/type",keyword:"type",params:{type: "array"},message:"must be array"}];return false;}}var valid0 = _errs10 === errors;}else {var valid0 = true;}if(valid0){if(data.interestChargeFrequency !== undefined){const _errs24 = errors;let valid4;valid4 = false;for(const v0 of schema14.properties.interestChargeFrequency.enum){if(func0(data.interestChargeFrequency, v0)){valid4 = true;break;}}if(!valid4){validate13.errors = [{instancePath:instancePath+"/interestChargeFrequency",schemaPath:"#/properties/interestChargeFrequency/enum",keyword:"enum",params:{allowedValues: schema14.properties.interestChargeFrequency.enum},message:"must be equal to one of the allowed values"}];return false;}var valid0 = _errs24 === errors;}else {var valid0 = true;}if(valid0){if(data.encodedKey !== undefined){const _errs25 = errors;if(typeof data.encodedKey !== "string"){validate13.errors = [{instancePath:instancePath+"/encodedKey",schemaPath:"#/properties/encodedKey/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid0 = _errs25 === errors;}else {var valid0 = true;}if(valid0){if(data.interestChargeFrequencyCount !== undefined){let data13 = data.interestChargeFrequencyCount;const _errs27 = errors;if(!(((typeof data13 == "number") && (!(data13 % 1) && !isNaN(data13))) && (isFinite(data13)))){validate13.errors = [{instancePath:instancePath+"/interestChargeFrequencyCount",schemaPath:"#/properties/interestChargeFrequencyCount/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];return false;}var valid0 = _errs27 === errors;}else {var valid0 = true;}if(valid0){if(data.interestRateTerms !== undefined){let data14 = data.interestRateTerms;const _errs29 = errors;if(!((((data14 === "FIXED") || (data14 === "TIERED")) || (data14 === "TIERED_PERIOD")) || (data14 === "TIERED_BAND"))){validate13.errors = [{instancePath:instancePath+"/interestRateTerms",schemaPath:"#/properties/interestRateTerms/enum",keyword:"enum",params:{allowedValues: schema14.properties.interestRateTerms.enum},message:"must be equal to one of the allowed values"}];return false;}var valid0 = _errs29 === errors;}else {var valid0 = true;}}}}}}}}}}}else {validate13.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}validate13.errors = vErrors;return errors === 0;}const schema16 = {"type":"object","title":"DepositAccountInterestPaymentSettingsaf30","description":"Represents information about the interest payment settings.","properties":{"interestPaymentDates":{"type":"array","title":"interestPaymentDates","description":"The list of all dates when the interest is paid into the deposit account.","items":{"$ref":"#/$defs/MonthAndDayaf30"}},"interestPaymentPoint":{"title":"interestPaymentPoint","description":"The interest payment point, which specifies when the interest should be paid to the account.","enum":["FIRST_DAY_OF_MONTH","EVERY_WEEK","EVERY_OTHER_WEEK","EVERY_MONTH","EVERY_3_MONTHS","ON_FIXED_DATES","DAILY","ANNUALLY","BI_ANNUALLY","ON_ACCOUNT_MATURITY"]}},"additionalProperties":true};const schema17 = {"type":"object","title":"MonthAndDayaf30","description":"Wrapper for month and day for instances where the year isn't needed","properties":{"month":{"type":"integer","title":"month","description":"The month of the year"},"day":{"type":"integer","title":"day","description":"The day in the month"}},"additionalProperties":true};function validate15(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){let vErrors = null;let errors = 0;if(errors === 0){if(data && typeof data == "object" && !Array.isArray(data)){if(data.interestPaymentDates !== undefined){let data0 = data.interestPaymentDates;const _errs2 = errors;if(errors === _errs2){if(Array.isArray(data0)){var valid1 = true;const len0 = data0.length;for(let i0=0; i0<len0; i0++){let data1 = data0[i0];const _errs4 = errors;const _errs5 = errors;if(errors === _errs5){if(data1 && typeof data1 == "object" && !Array.isArray(data1)){if(data1.month !== undefined){let data2 = data1.month;const _errs8 = errors;if(!(((typeof data2 == "number") && (!(data2 % 1) && !isNaN(data2))) && (isFinite(data2)))){validate15.errors = [{instancePath:instancePath+"/interestPaymentDates/" + i0+"/month",schemaPath:"#/$defs/MonthAndDayaf30/properties/month/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];return false;}var valid3 = _errs8 === errors;}else {var valid3 = true;}if(valid3){if(data1.day !== undefined){let data3 = data1.day;const _errs10 = errors;if(!(((typeof data3 == "number") && (!(data3 % 1) && !isNaN(data3))) && (isFinite(data3)))){validate15.errors = [{instancePath:instancePath+"/interestPaymentDates/" + i0+"/day",schemaPath:"#/$defs/MonthAndDayaf30/properties/day/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];return false;}var valid3 = _errs10 === errors;}else {var valid3 = true;}}}else {validate15.errors = [{instancePath:instancePath+"/interestPaymentDates/" + i0,schemaPath:"#/$defs/MonthAndDayaf30/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}var valid1 = _errs4 === errors;if(!valid1){break;}}}else {validate15.errors = [{instancePath:instancePath+"/interestPaymentDates",schemaPath:"#/properties/interestPaymentDates/type",keyword:"type",params:{type: "array"},message:"must be array"}];return false;}}var valid0 = _errs2 === errors;}else {var valid0 = true;}if(valid0){if(data.interestPaymentPoint !== undefined){const _errs12 = errors;let valid4;valid4 = false;for(const v0 of schema16.properties.interestPaymentPoint.enum){if(func0(data.interestPaymentPoint, v0)){valid4 = true;break;}}if(!valid4){validate15.errors = [{instancePath:instancePath+"/interestPaymentPoint",schemaPath:"#/properties/interestPaymentPoint/enum",keyword:"enum",params:{allowedValues: schema16.properties.interestPaymentPoint.enum},message:"must be equal to one of the allowed values"}];return false;}var valid0 = _errs12 === errors;}else {var valid0 = true;}}}else {validate15.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}validate15.errors = vErrors;return errors === 0;}function validate12(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){let vErrors = null;let errors = 0;if(errors === 0){if(data && typeof data == "object" && !Array.isArray(data)){if(data.interestRateSettings !== undefined){const _errs2 = errors;if(!(validate13(data.interestRateSettings, {instancePath:instancePath+"/interestRateSettings",parentData:data,parentDataProperty:"interestRateSettings",rootData}))){vErrors = vErrors === null ? validate13.errors : vErrors.concat(validate13.errors);errors = vErrors.length;}var valid0 = _errs2 === errors;}else {var valid0 = true;}if(valid0){if(data.interestPaymentSettings !== undefined){const _errs3 = errors;if(!(validate15(data.interestPaymentSettings, {instancePath:instancePath+"/interestPaymentSettings",parentData:data,parentDataProperty:"interestPaymentSettings",rootData}))){vErrors = vErrors === null ? validate15.errors : vErrors.concat(validate15.errors);errors = vErrors.length;}var valid0 = _errs3 === errors;}else {var valid0 = true;}}}else {validate12.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}validate12.errors = vErrors;return errors === 0;}const schema20 = {"type":"object","title":"DepositAccountOverdraftInterestSettingsaf30","description":"Represents information about a deposit account's overdraft interest settings.","properties":{"interestRateSettings":{"title":"interestRateSettings","$ref":"#/$defs/DepositAccountOverdraftInterestRateSettingsaf30"}},"additionalProperties":true};const schema21 = {"type":"object","title":"DepositAccountOverdraftInterestRateSettingsaf30","description":"Represents information about overdraft interest rate settings for deposit accounts.","properties":{"interestRate":{"type":"number","title":"interestRate","description":"The interest rate for the deposit account."},"interestSpread":{"type":"number","title":"interestSpread","description":"The index interest rate that is used to calculate the interest rate that is applied to accounts."},"interestRateReviewUnit":{"title":"interestRateReviewUnit","description":"The time unit to use to determine the frequency of interest rate reviews.","enum":["DAYS","WEEKS","MONTHS"]},"interestRateSource":{"title":"interestRateSource","description":"The interest calculation method used.","enum":["FIXED_INTEREST_RATE","INDEX_INTEREST_RATE"]},"interestRateReviewCount":{"type":"integer","title":"interestRateReviewCount","description":"The number of times to review the interest rate in a time period."},"interestRateTiers":{"type":"array","title":"interestRateTiers","description":"The list of interest rate tiers, which hold the values to define how interest is calculated.","items":{"$ref":"#/$defs/DepositAccountInterestRateTieraf30"}},"interestChargeFrequency":{"title":"interestChargeFrequency","description":"The interest charge frequency, which shows how often interest is charged on loan or deposit accounts.","enum":["ANNUALIZED","EVERY_MONTH","EVERY_FOUR_WEEKS","EVERY_WEEK","EVERY_DAY","EVERY_X_DAYS"]},"encodedKey":{"type":"string","title":"encodedKey","description":"The encoded key for the set of interest settings, which is auto-generated and unique."},"interestChargeFrequencyCount":{"type":"integer","title":"interestChargeFrequencyCount","description":"The number of times to apply interest in a time period."},"interestRateTerms":{"title":"interestRateTerms","description":"The terms for how interest rate is determined when accruing for an account.","enum":["FIXED","TIERED","TIERED_PERIOD","TIERED_BAND"]}},"additionalProperties":true};function validate19(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){let vErrors = null;let errors = 0;if(errors === 0){if(data && typeof data == "object" && !Array.isArray(data)){if(data.interestRate !== undefined){let data0 = data.interestRate;const _errs2 = errors;if(!((typeof data0 == "number") && (isFinite(data0)))){validate19.errors = [{instancePath:instancePath+"/interestRate",schemaPath:"#/properties/interestRate/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid0 = _errs2 === errors;}else {var valid0 = true;}if(valid0){if(data.interestSpread !== undefined){let data1 = data.interestSpread;const _errs4 = errors;if(!((typeof data1 == "number") && (isFinite(data1)))){validate19.errors = [{instancePath:instancePath+"/interestSpread",schemaPath:"#/properties/interestSpread/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid0 = _errs4 === errors;}else {var valid0 = true;}if(valid0){if(data.interestRateReviewUnit !== undefined){let data2 = data.interestRateReviewUnit;const _errs6 = errors;if(!(((data2 === "DAYS") || (data2 === "WEEKS")) || (data2 === "MONTHS"))){validate19.errors = [{instancePath:instancePath+"/interestRateReviewUnit",schemaPath:"#/properties/interestRateReviewUnit/enum",keyword:"enum",params:{allowedValues: schema21.properties.interestRateReviewUnit.enum},message:"must be equal to one of the allowed values"}];return false;}var valid0 = _errs6 === errors;}else {var valid0 = true;}if(valid0){if(data.interestRateSource !== undefined){let data3 = data.interestRateSource;const _errs7 = errors;if(!((data3 === "FIXED_INTEREST_RATE") || (data3 === "INDEX_INTEREST_RATE"))){validate19.errors = [{instancePath:instancePath+"/interestRateSource",schemaPath:"#/properties/interestRateSource/enum",keyword:"enum",params:{allowedValues: schema21.properties.interestRateSource.enum},message:"must be equal to one of the allowed values"}];return false;}var valid0 = _errs7 === errors;}else {var valid0 = true;}if(valid0){if(data.interestRateReviewCount !== undefined){let data4 = data.interestRateReviewCount;const _errs8 = errors;if(!(((typeof data4 == "number") && (!(data4 % 1) && !isNaN(data4))) && (isFinite(data4)))){validate19.errors = [{instancePath:instancePath+"/interestRateReviewCount",schemaPath:"#/properties/interestRateReviewCount/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];return false;}var valid0 = _errs8 === errors;}else {var valid0 = true;}if(valid0){if(data.interestRateTiers !== undefined){let data5 = data.interestRateTiers;const _errs10 = errors;if(errors === _errs10){if(Array.isArray(data5)){var valid1 = true;const len0 = data5.length;for(let i0=0; i0<len0; i0++){let data6 = data5[i0];const _errs12 = errors;const _errs13 = errors;if(errors === _errs13){if(data6 && typeof data6 == "object" && !Array.isArray(data6)){let missing0;if((data6.interestRate === undefined) && (missing0 = "interestRate")){validate19.errors = [{instancePath:instancePath+"/interestRateTiers/" + i0,schemaPath:"#/$defs/DepositAccountInterestRateTieraf30/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];return false;}else {if(data6.endingBalance !== undefined){let data7 = data6.endingBalance;const _errs16 = errors;if(!((typeof data7 == "number") && (isFinite(data7)))){validate19.errors = [{instancePath:instancePath+"/interestRateTiers/" + i0+"/endingBalance",schemaPath:"#/$defs/DepositAccountInterestRateTieraf30/properties/endingBalance/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid3 = _errs16 === errors;}else {var valid3 = true;}if(valid3){if(data6.interestRate !== undefined){let data8 = data6.interestRate;const _errs18 = errors;if(!((typeof data8 == "number") && (isFinite(data8)))){validate19.errors = [{instancePath:instancePath+"/interestRateTiers/" + i0+"/interestRate",schemaPath:"#/$defs/DepositAccountInterestRateTieraf30/properties/interestRate/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid3 = _errs18 === errors;}else {var valid3 = true;}if(valid3){if(data6.encodedKey !== undefined){const _errs20 = errors;if(typeof data6.encodedKey !== "string"){validate19.errors = [{instancePath:instancePath+"/interestRateTiers/" + i0+"/encodedKey",schemaPath:"#/$defs/DepositAccountInterestRateTieraf30/properties/encodedKey/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid3 = _errs20 === errors;}else {var valid3 = true;}if(valid3){if(data6.endingDay !== undefined){let data10 = data6.endingDay;const _errs22 = errors;if(!(((typeof data10 == "number") && (!(data10 % 1) && !isNaN(data10))) && (isFinite(data10)))){validate19.errors = [{instancePath:instancePath+"/interestRateTiers/" + i0+"/endingDay",schemaPath:"#/$defs/DepositAccountInterestRateTieraf30/properties/endingDay/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];return false;}var valid3 = _errs22 === errors;}else {var valid3 = true;}}}}}}else {validate19.errors = [{instancePath:instancePath+"/interestRateTiers/" + i0,schemaPath:"#/$defs/DepositAccountInterestRateTieraf30/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}var valid1 = _errs12 === errors;if(!valid1){break;}}}else {validate19.errors = [{instancePath:instancePath+"/interestRateTiers",schemaPath:"#/properties/interestRateTiers/type",keyword:"type",params:{type: "array"},message:"must be array"}];return false;}}var valid0 = _errs10 === errors;}else {var valid0 = true;}if(valid0){if(data.interestChargeFrequency !== undefined){const _errs24 = errors;let valid4;valid4 = false;for(const v0 of schema21.properties.interestChargeFrequency.enum){if(func0(data.interestChargeFrequency, v0)){valid4 = true;break;}}if(!valid4){validate19.errors = [{instancePath:instancePath+"/interestChargeFrequency",schemaPath:"#/properties/interestChargeFrequency/enum",keyword:"enum",params:{allowedValues: schema21.properties.interestChargeFrequency.enum},message:"must be equal to one of the allowed values"}];return false;}var valid0 = _errs24 === errors;}else {var valid0 = true;}if(valid0){if(data.encodedKey !== undefined){const _errs25 = errors;if(typeof data.encodedKey !== "string"){validate19.errors = [{instancePath:instancePath+"/encodedKey",schemaPath:"#/properties/encodedKey/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid0 = _errs25 === errors;}else {var valid0 = true;}if(valid0){if(data.interestChargeFrequencyCount !== undefined){let data13 = data.interestChargeFrequencyCount;const _errs27 = errors;if(!(((typeof data13 == "number") && (!(data13 % 1) && !isNaN(data13))) && (isFinite(data13)))){validate19.errors = [{instancePath:instancePath+"/interestChargeFrequencyCount",schemaPath:"#/properties/interestChargeFrequencyCount/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];return false;}var valid0 = _errs27 === errors;}else {var valid0 = true;}if(valid0){if(data.interestRateTerms !== undefined){let data14 = data.interestRateTerms;const _errs29 = errors;if(!((((data14 === "FIXED") || (data14 === "TIERED")) || (data14 === "TIERED_PERIOD")) || (data14 === "TIERED_BAND"))){validate19.errors = [{instancePath:instancePath+"/interestRateTerms",schemaPath:"#/properties/interestRateTerms/enum",keyword:"enum",params:{allowedValues: schema21.properties.interestRateTerms.enum},message:"must be equal to one of the allowed values"}];return false;}var valid0 = _errs29 === errors;}else {var valid0 = true;}}}}}}}}}}}else {validate19.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}validate19.errors = vErrors;return errors === 0;}function validate18(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){let vErrors = null;let errors = 0;if(errors === 0){if(data && typeof data == "object" && !Array.isArray(data)){if(data.interestRateSettings !== undefined){if(!(validate19(data.interestRateSettings, {instancePath:instancePath+"/interestRateSettings",parentData:data,parentDataProperty:"interestRateSettings",rootData}))){vErrors = vErrors === null ? validate19.errors : vErrors.concat(validate19.errors);errors = vErrors.length;}}}else {validate18.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}validate18.errors = vErrors;return errors === 0;}function validate11(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){let vErrors = null;let errors = 0;if(errors === 0){if(data && typeof data == "object" && !Array.isArray(data)){let missing0;if(((((data.name === undefined) && (missing0 = "name")) || ((data.accountHolderKey === undefined) && (missing0 = "accountHolderKey"))) || ((data.productTypeKey === undefined) && (missing0 = "productTypeKey"))) || ((data.accountHolderType === undefined) && (missing0 = "accountHolderType"))){validate11.errors = [{instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];return false;}else {if(data.accountState !== undefined){const _errs2 = errors;let valid1;valid1 = false;for(const v0 of schema12.properties.accountState.enum){if(func0(data.accountState, v0)){valid1 = true;break;}}if(!valid1){validate11.errors = [{instancePath:instancePath+"/accountState",schemaPath:"#/properties/accountState/enum",keyword:"enum",params:{allowedValues: schema12.properties.accountState.enum},message:"must be equal to one of the allowed values"}];return false;}var valid0 = _errs2 === errors;}else {var valid0 = true;}if(valid0){if(data.migrationEventKey !== undefined){const _errs3 = errors;if(typeof data.migrationEventKey !== "string"){validate11.errors = [{instancePath:instancePath+"/migrationEventKey",schemaPath:"#/properties/migrationEventKey/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid0 = _errs3 === errors;}else {var valid0 = true;}if(valid0){if(data.notes !== undefined){const _errs5 = errors;if(typeof data.notes !== "string"){validate11.errors = [{instancePath:instancePath+"/notes",schemaPath:"#/properties/notes/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid0 = _errs5 === errors;}else {var valid0 = true;}if(valid0){if(data.lastSetToArrearsDate !== undefined){const _errs7 = errors;if(errors === _errs7){if(errors === _errs7){if(!(typeof data.lastSetToArrearsDate === "string")){validate11.errors = [{instancePath:instancePath+"/lastSetToArrearsDate",schemaPath:"#/properties/lastSetToArrearsDate/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}}var valid0 = _errs7 === errors;}else {var valid0 = true;}if(valid0){if(data.assignedBranchKey !== undefined){const _errs9 = errors;if(typeof data.assignedBranchKey !== "string"){validate11.errors = [{instancePath:instancePath+"/assignedBranchKey",schemaPath:"#/properties/assignedBranchKey/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid0 = _errs9 === errors;}else {var valid0 = true;}if(valid0){if(data.lastOverdraftInterestReviewDate !== undefined){const _errs11 = errors;if(errors === _errs11){if(errors === _errs11){if(!(typeof data.lastOverdraftInterestReviewDate === "string")){validate11.errors = [{instancePath:instancePath+"/lastOverdraftInterestReviewDate",schemaPath:"#/properties/lastOverdraftInterestReviewDate/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}}var valid0 = _errs11 === errors;}else {var valid0 = true;}if(valid0){if(data.lastInterestStoredDate !== undefined){const _errs13 = errors;if(errors === _errs13){if(errors === _errs13){if(!(typeof data.lastInterestStoredDate === "string")){validate11.errors = [{instancePath:instancePath+"/lastInterestStoredDate",schemaPath:"#/properties/lastInterestStoredDate/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}}var valid0 = _errs13 === errors;}else {var valid0 = true;}if(valid0){if(data.interestSettings !== undefined){const _errs15 = errors;if(!(validate12(data.interestSettings, {instancePath:instancePath+"/interestSettings",parentData:data,parentDataProperty:"interestSettings",rootData}))){vErrors = vErrors === null ? validate12.errors : vErrors.concat(validate12.errors);errors = vErrors.length;}var valid0 = _errs15 === errors;}else {var valid0 = true;}if(valid0){if(data.balances !== undefined){let data8 = data.balances;const _errs16 = errors;const _errs17 = errors;if(errors === _errs17){if(data8 && typeof data8 == "object" && !Array.isArray(data8)){if(data8.overdraftInterestDue !== undefined){let data9 = data8.overdraftInterestDue;const _errs20 = errors;if(!((typeof data9 == "number") && (isFinite(data9)))){validate11.errors = [{instancePath:instancePath+"/balances/overdraftInterestDue",schemaPath:"#/$defs/DepositAccountBalancesaf30/properties/overdraftInterestDue/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid3 = _errs20 === errors;}else {var valid3 = true;}if(valid3){if(data8.forwardAvailableBalance !== undefined){let data10 = data8.forwardAvailableBalance;const _errs22 = errors;if(!((typeof data10 == "number") && (isFinite(data10)))){validate11.errors = [{instancePath:instancePath+"/balances/forwardAvailableBalance",schemaPath:"#/$defs/DepositAccountBalancesaf30/properties/forwardAvailableBalance/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid3 = _errs22 === errors;}else {var valid3 = true;}if(valid3){if(data8.totalBalance !== undefined){let data11 = data8.totalBalance;const _errs24 = errors;if(!((typeof data11 == "number") && (isFinite(data11)))){validate11.errors = [{instancePath:instancePath+"/balances/totalBalance",schemaPath:"#/$defs/DepositAccountBalancesaf30/properties/totalBalance/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid3 = _errs24 === errors;}else {var valid3 = true;}if(valid3){if(data8.lockedBalance !== undefined){let data12 = data8.lockedBalance;const _errs26 = errors;if(!((typeof data12 == "number") && (isFinite(data12)))){validate11.errors = [{instancePath:instancePath+"/balances/lockedBalance",schemaPath:"#/$defs/DepositAccountBalancesaf30/properties/lockedBalance/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid3 = _errs26 === errors;}else {var valid3 = true;}if(valid3){if(data8.technicalOverdraftAmount !== undefined){let data13 = data8.technicalOverdraftAmount;const _errs28 = errors;if(!((typeof data13 == "number") && (isFinite(data13)))){validate11.errors = [{instancePath:instancePath+"/balances/technicalOverdraftAmount",schemaPath:"#/$defs/DepositAccountBalancesaf30/properties/technicalOverdraftAmount/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid3 = _errs28 === errors;}else {var valid3 = true;}if(valid3){if(data8.overdraftAmount !== undefined){let data14 = data8.overdraftAmount;const _errs30 = errors;if(!((typeof data14 == "number") && (isFinite(data14)))){validate11.errors = [{instancePath:instancePath+"/balances/overdraftAmount",schemaPath:"#/$defs/DepositAccountBalancesaf30/properties/overdraftAmount/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid3 = _errs30 === errors;}else {var valid3 = true;}if(valid3){if(data8.holdBalance !== undefined){let data15 = data8.holdBalance;const _errs32 = errors;if(!((typeof data15 == "number") && (isFinite(data15)))){validate11.errors = [{instancePath:instancePath+"/balances/holdBalance",schemaPath:"#/$defs/DepositAccountBalancesaf30/properties/holdBalance/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid3 = _errs32 === errors;}else {var valid3 = true;}if(valid3){if(data8.technicalOverdraftInterestDue !== undefined){let data16 = data8.technicalOverdraftInterestDue;const _errs34 = errors;if(!((typeof data16 == "number") && (isFinite(data16)))){validate11.errors = [{instancePath:instancePath+"/balances/technicalOverdraftInterestDue",schemaPath:"#/$defs/DepositAccountBalancesaf30/properties/technicalOverdraftInterestDue/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid3 = _errs34 === errors;}else {var valid3 = true;}if(valid3){if(data8.feesDue !== undefined){let data17 = data8.feesDue;const _errs36 = errors;if(!((typeof data17 == "number") && (isFinite(data17)))){validate11.errors = [{instancePath:instancePath+"/balances/feesDue",schemaPath:"#/$defs/DepositAccountBalancesaf30/properties/feesDue/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid3 = _errs36 === errors;}else {var valid3 = true;}if(valid3){if(data8.blockedBalance !== undefined){let data18 = data8.blockedBalance;const _errs38 = errors;if(!((typeof data18 == "number") && (isFinite(data18)))){validate11.errors = [{instancePath:instancePath+"/balances/blockedBalance",schemaPath:"#/$defs/DepositAccountBalancesaf30/properties/blockedBalance/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid3 = _errs38 === errors;}else {var valid3 = true;}if(valid3){if(data8.availableBalance !== undefined){let data19 = data8.availableBalance;const _errs40 = errors;if(!((typeof data19 == "number") && (isFinite(data19)))){validate11.errors = [{instancePath:instancePath+"/balances/availableBalance",schemaPath:"#/$defs/DepositAccountBalancesaf30/properties/availableBalance/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid3 = _errs40 === errors;}else {var valid3 = true;}}}}}}}}}}}}else {validate11.errors = [{instancePath:instancePath+"/balances",schemaPath:"#/$defs/DepositAccountBalancesaf30/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}var valid0 = _errs16 === errors;}else {var valid0 = true;}if(valid0){if(data.creditArrangementKey !== undefined){const _errs42 = errors;if(typeof data.creditArrangementKey !== "string"){validate11.errors = [{instancePath:instancePath+"/creditArrangementKey",schemaPath:"#/properties/creditArrangementKey/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid0 = _errs42 === errors;}else {var valid0 = true;}if(valid0){if(data.maturityDate !== undefined){const _errs44 = errors;if(errors === _errs44){if(errors === _errs44){if(!(typeof data.maturityDate === "string")){validate11.errors = [{instancePath:instancePath+"/maturityDate",schemaPath:"#/properties/maturityDate/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}}var valid0 = _errs44 === errors;}else {var valid0 = true;}if(valid0){if(data.lastInterestReviewDate !== undefined){const _errs46 = errors;if(errors === _errs46){if(errors === _errs46){if(!(typeof data.lastInterestReviewDate === "string")){validate11.errors = [{instancePath:instancePath+"/lastInterestReviewDate",schemaPath:"#/properties/lastInterestReviewDate/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}}var valid0 = _errs46 === errors;}else {var valid0 = true;}if(valid0){if(data.encodedKey !== undefined){const _errs48 = errors;if(typeof data.encodedKey !== "string"){validate11.errors = [{instancePath:instancePath+"/encodedKey",schemaPath:"#/properties/encodedKey/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid0 = _errs48 === errors;}else {var valid0 = true;}if(valid0){if(data.id !== undefined){const _errs50 = errors;if(typeof data.id !== "string"){validate11.errors = [{instancePath:instancePath+"/id",schemaPath:"#/properties/id/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid0 = _errs50 === errors;}else {var valid0 = true;}if(valid0){if(data.overdraftSettings !== undefined){let data25 = data.overdraftSettings;const _errs52 = errors;const _errs53 = errors;if(errors === _errs53){if(data25 && typeof data25 == "object" && !Array.isArray(data25)){if(data25.allowOverdraft !== undefined){const _errs56 = errors;if(typeof data25.allowOverdraft !== "boolean"){validate11.errors = [{instancePath:instancePath+"/overdraftSettings/allowOverdraft",schemaPath:"#/$defs/DepositAccountOverdraftSettingsaf30/properties/allowOverdraft/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"}];return false;}var valid5 = _errs56 === errors;}else {var valid5 = true;}if(valid5){if(data25.overdraftLimit !== undefined){let data27 = data25.overdraftLimit;const _errs58 = errors;if(!((typeof data27 == "number") && (isFinite(data27)))){validate11.errors = [{instancePath:instancePath+"/overdraftSettings/overdraftLimit",schemaPath:"#/$defs/DepositAccountOverdraftSettingsaf30/properties/overdraftLimit/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid5 = _errs58 === errors;}else {var valid5 = true;}if(valid5){if(data25.overdraftExpiryDate !== undefined){const _errs60 = errors;if(errors === _errs60){if(errors === _errs60){if(!(typeof data25.overdraftExpiryDate === "string")){validate11.errors = [{instancePath:instancePath+"/overdraftSettings/overdraftExpiryDate",schemaPath:"#/$defs/DepositAccountOverdraftSettingsaf30/properties/overdraftExpiryDate/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}}var valid5 = _errs60 === errors;}else {var valid5 = true;}}}}else {validate11.errors = [{instancePath:instancePath+"/overdraftSettings",schemaPath:"#/$defs/DepositAccountOverdraftSettingsaf30/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}var valid0 = _errs52 === errors;}else {var valid0 = true;}if(valid0){if(data.lastAccountAppraisalDate !== undefined){const _errs62 = errors;if(errors === _errs62){if(errors === _errs62){if(!(typeof data.lastAccountAppraisalDate === "string")){validate11.errors = [{instancePath:instancePath+"/lastAccountAppraisalDate",schemaPath:"#/properties/lastAccountAppraisalDate/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}}var valid0 = _errs62 === errors;}else {var valid0 = true;}if(valid0){if(data.withholdingTaxSourceKey !== undefined){const _errs64 = errors;if(typeof data.withholdingTaxSourceKey !== "string"){validate11.errors = [{instancePath:instancePath+"/withholdingTaxSourceKey",schemaPath:"#/properties/withholdingTaxSourceKey/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid0 = _errs64 === errors;}else {var valid0 = true;}if(valid0){if(data.assignedUserKey !== undefined){const _errs66 = errors;if(typeof data.assignedUserKey !== "string"){validate11.errors = [{instancePath:instancePath+"/assignedUserKey",schemaPath:"#/properties/assignedUserKey/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid0 = _errs66 === errors;}else {var valid0 = true;}if(valid0){if(data.overdraftInterestSettings !== undefined){const _errs68 = errors;if(!(validate18(data.overdraftInterestSettings, {instancePath:instancePath+"/overdraftInterestSettings",parentData:data,parentDataProperty:"overdraftInterestSettings",rootData}))){vErrors = vErrors === null ? validate18.errors : vErrors.concat(validate18.errors);errors = vErrors.length;}var valid0 = _errs68 === errors;}else {var valid0 = true;}if(valid0){if(data.lastModifiedDate !== undefined){const _errs69 = errors;if(errors === _errs69){if(errors === _errs69){if(!(typeof data.lastModifiedDate === "string")){validate11.errors = [{instancePath:instancePath+"/lastModifiedDate",schemaPath:"#/properties/lastModifiedDate/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}}var valid0 = _errs69 === errors;}else {var valid0 = true;}if(valid0){if(data.accountType !== undefined){const _errs71 = errors;let valid6;valid6 = false;for(const v1 of schema12.properties.accountType.enum){if(func0(data.accountType, v1)){valid6 = true;break;}}if(!valid6){validate11.errors = [{instancePath:instancePath+"/accountType",schemaPath:"#/properties/accountType/enum",keyword:"enum",params:{allowedValues: schema12.properties.accountType.enum},message:"must be equal to one of the allowed values"}];return false;}var valid0 = _errs71 === errors;}else {var valid0 = true;}if(valid0){if(data.lockedDate !== undefined){const _errs72 = errors;if(errors === _errs72){if(errors === _errs72){if(!(typeof data.lockedDate === "string")){validate11.errors = [{instancePath:instancePath+"/lockedDate",schemaPath:"#/properties/lockedDate/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}}var valid0 = _errs72 === errors;}else {var valid0 = true;}if(valid0){if(data.creationDate !== undefined){const _errs74 = errors;if(errors === _errs74){if(errors === _errs74){if(!(typeof data.creationDate === "string")){validate11.errors = [{instancePath:instancePath+"/creationDate",schemaPath:"#/properties/creationDate/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}}var valid0 = _errs74 === errors;}else {var valid0 = true;}if(valid0){if(data.lastInterestCalculationDate !== undefined){const _errs76 = errors;if(errors === _errs76){if(errors === _errs76){if(!(typeof data.lastInterestCalculationDate === "string")){validate11.errors = [{instancePath:instancePath+"/lastInterestCalculationDate",schemaPath:"#/properties/lastInterestCalculationDate/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}}var valid0 = _errs76 === errors;}else {var valid0 = true;}if(valid0){if(data.assignedCentreKey !== undefined){const _errs78 = errors;if(typeof data.assignedCentreKey !== "string"){validate11.errors = [{instancePath:instancePath+"/assignedCentreKey",schemaPath:"#/properties/assignedCentreKey/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid0 = _errs78 === errors;}else {var valid0 = true;}if(valid0){if(data.approvedDate !== undefined){const _errs80 = errors;if(errors === _errs80){if(errors === _errs80){if(!(typeof data.approvedDate === "string")){validate11.errors = [{instancePath:instancePath+"/approvedDate",schemaPath:"#/properties/approvedDate/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}}var valid0 = _errs80 === errors;}else {var valid0 = true;}if(valid0){if(data.closedDate !== undefined){const _errs82 = errors;if(errors === _errs82){if(errors === _errs82){if(!(typeof data.closedDate === "string")){validate11.errors = [{instancePath:instancePath+"/closedDate",schemaPath:"#/properties/closedDate/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}}var valid0 = _errs82 === errors;}else {var valid0 = true;}if(valid0){if(data.accruedAmounts !== undefined){let data41 = data.accruedAmounts;const _errs84 = errors;const _errs85 = errors;if(errors === _errs85){if(data41 && typeof data41 == "object" && !Array.isArray(data41)){if(data41.overdraftInterestAccrued !== undefined){let data42 = data41.overdraftInterestAccrued;const _errs88 = errors;if(!((typeof data42 == "number") && (isFinite(data42)))){validate11.errors = [{instancePath:instancePath+"/accruedAmounts/overdraftInterestAccrued",schemaPath:"#/$defs/DepositAccountAccruedAmountsaf30/properties/overdraftInterestAccrued/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid8 = _errs88 === errors;}else {var valid8 = true;}if(valid8){if(data41.interestAccrued !== undefined){let data43 = data41.interestAccrued;const _errs90 = errors;if(!((typeof data43 == "number") && (isFinite(data43)))){validate11.errors = [{instancePath:instancePath+"/accruedAmounts/interestAccrued",schemaPath:"#/$defs/DepositAccountAccruedAmountsaf30/properties/interestAccrued/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid8 = _errs90 === errors;}else {var valid8 = true;}if(valid8){if(data41.technicalOverdraftInterestAccrued !== undefined){let data44 = data41.technicalOverdraftInterestAccrued;const _errs92 = errors;if(!((typeof data44 == "number") && (isFinite(data44)))){validate11.errors = [{instancePath:instancePath+"/accruedAmounts/technicalOverdraftInterestAccrued",schemaPath:"#/$defs/DepositAccountAccruedAmountsaf30/properties/technicalOverdraftInterestAccrued/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid8 = _errs92 === errors;}else {var valid8 = true;}if(valid8){if(data41.negativeInterestAccrued !== undefined){let data45 = data41.negativeInterestAccrued;const _errs94 = errors;if(!((typeof data45 == "number") && (isFinite(data45)))){validate11.errors = [{instancePath:instancePath+"/accruedAmounts/negativeInterestAccrued",schemaPath:"#/$defs/DepositAccountAccruedAmountsaf30/properties/negativeInterestAccrued/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid8 = _errs94 === errors;}else {var valid8 = true;}}}}}else {validate11.errors = [{instancePath:instancePath+"/accruedAmounts",schemaPath:"#/$defs/DepositAccountAccruedAmountsaf30/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}var valid0 = _errs84 === errors;}else {var valid0 = true;}if(valid0){if(data.name !== undefined){const _errs96 = errors;if(typeof data.name !== "string"){validate11.errors = [{instancePath:instancePath+"/name",schemaPath:"#/properties/name/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid0 = _errs96 === errors;}else {var valid0 = true;}if(valid0){if(data.accountHolderKey !== undefined){const _errs98 = errors;if(typeof data.accountHolderKey !== "string"){validate11.errors = [{instancePath:instancePath+"/accountHolderKey",schemaPath:"#/properties/accountHolderKey/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid0 = _errs98 === errors;}else {var valid0 = true;}if(valid0){if(data.productTypeKey !== undefined){const _errs100 = errors;if(typeof data.productTypeKey !== "string"){validate11.errors = [{instancePath:instancePath+"/productTypeKey",schemaPath:"#/properties/productTypeKey/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid0 = _errs100 === errors;}else {var valid0 = true;}if(valid0){if(data.activationDate !== undefined){const _errs102 = errors;if(errors === _errs102){if(errors === _errs102){if(!(typeof data.activationDate === "string")){validate11.errors = [{instancePath:instancePath+"/activationDate",schemaPath:"#/properties/activationDate/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}}var valid0 = _errs102 === errors;}else {var valid0 = true;}if(valid0){if(data.internalControls !== undefined){let data50 = data.internalControls;const _errs104 = errors;const _errs105 = errors;if(errors === _errs105){if(data50 && typeof data50 == "object" && !Array.isArray(data50)){if(data50.maxDepositBalance !== undefined){let data51 = data50.maxDepositBalance;const _errs108 = errors;if(!((typeof data51 == "number") && (isFinite(data51)))){validate11.errors = [{instancePath:instancePath+"/internalControls/maxDepositBalance",schemaPath:"#/$defs/DepositAccountInternalControlsaf30/properties/maxDepositBalance/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid10 = _errs108 === errors;}else {var valid10 = true;}if(valid10){if(data50.recommendedDepositAmount !== undefined){let data52 = data50.recommendedDepositAmount;const _errs110 = errors;if(!((typeof data52 == "number") && (isFinite(data52)))){validate11.errors = [{instancePath:instancePath+"/internalControls/recommendedDepositAmount",schemaPath:"#/$defs/DepositAccountInternalControlsaf30/properties/recommendedDepositAmount/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid10 = _errs110 === errors;}else {var valid10 = true;}if(valid10){if(data50.targetAmount !== undefined){let data53 = data50.targetAmount;const _errs112 = errors;if(!((typeof data53 == "number") && (isFinite(data53)))){validate11.errors = [{instancePath:instancePath+"/internalControls/targetAmount",schemaPath:"#/$defs/DepositAccountInternalControlsaf30/properties/targetAmount/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid10 = _errs112 === errors;}else {var valid10 = true;}if(valid10){if(data50.maxWithdrawalAmount !== undefined){let data54 = data50.maxWithdrawalAmount;const _errs114 = errors;if(!((typeof data54 == "number") && (isFinite(data54)))){validate11.errors = [{instancePath:instancePath+"/internalControls/maxWithdrawalAmount",schemaPath:"#/$defs/DepositAccountInternalControlsaf30/properties/maxWithdrawalAmount/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid10 = _errs114 === errors;}else {var valid10 = true;}}}}}else {validate11.errors = [{instancePath:instancePath+"/internalControls",schemaPath:"#/$defs/DepositAccountInternalControlsaf30/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}var valid0 = _errs104 === errors;}else {var valid0 = true;}if(valid0){if(data.currencyCode !== undefined){const _errs116 = errors;if(typeof data.currencyCode !== "string"){validate11.errors = [{instancePath:instancePath+"/currencyCode",schemaPath:"#/properties/currencyCode/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid0 = _errs116 === errors;}else {var valid0 = true;}if(valid0){if(data.accountHolderType !== undefined){let data56 = data.accountHolderType;const _errs118 = errors;if(!((data56 === "CLIENT") || (data56 === "GROUP"))){validate11.errors = [{instancePath:instancePath+"/accountHolderType",schemaPath:"#/properties/accountHolderType/enum",keyword:"enum",params:{allowedValues: schema12.properties.accountHolderType.enum},message:"must be equal to one of the allowed values"}];return false;}var valid0 = _errs118 === errors;}else {var valid0 = true;}if(valid0){if(data.linkedSettlementAccountKeys !== undefined){let data57 = data.linkedSettlementAccountKeys;const _errs119 = errors;if(errors === _errs119){if(Array.isArray(data57)){var valid11 = true;const len0 = data57.length;for(let i0=0; i0<len0; i0++){const _errs121 = errors;if(typeof data57[i0] !== "string"){validate11.errors = [{instancePath:instancePath+"/linkedSettlementAccountKeys/" + i0,schemaPath:"#/properties/linkedSettlementAccountKeys/items/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid11 = _errs121 === errors;if(!valid11){break;}}}else {validate11.errors = [{instancePath:instancePath+"/linkedSettlementAccountKeys",schemaPath:"#/properties/linkedSettlementAccountKeys/type",keyword:"type",params:{type: "array"},message:"must be array"}];return false;}}var valid0 = _errs119 === errors;}else {var valid0 = true;}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}else {validate11.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}validate11.errors = vErrors;return errors === 0;}function validate10(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){let vErrors = null;let errors = 0;if(errors === 0){if(Array.isArray(data)){var valid0 = true;const len0 = data.length;for(let i0=0; i0<len0; i0++){const _errs1 = errors;if(!(validate11(data[i0], {instancePath:instancePath+"/" + i0,parentData:data,parentDataProperty:i0,rootData}))){vErrors = vErrors === null ? validate11.errors : vErrors.concat(validate11.errors);errors = vErrors.length;}var valid0 = _errs1 === errors;if(!valid0){break;}}}else {validate10.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "array"},message:"must be array"}];return false;}}validate10.errors = vErrors;return errors === 0;};validate.schema=schema11;