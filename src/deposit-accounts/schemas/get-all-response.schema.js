/* eslint-disable */
// @ts-nocheck
/**
 * Generated by Ajv https://ajv.js.org/guide/managing-schemas.html#standalone-validation-code
 */
import { default as ajvDistRuntimeEqualDefault } from 'ajv/dist/runtime/equal.js';
"use strict";
/** @type {unknown} */
export const validate = validate10;export default validate10;const schema11 = {"$schema":"http://json-schema.org/draft-07/schema#","title":"GetAllResponse","type":"array","items":{"$ref":"#/$defs/DepositAccount"},"$defs":{"DepositAccount":{"type":"object","description":"Represents information about a deposit account.","properties":{"accountHolderKey":{"type":"string","description":"The encoded key of the account holder, which is an individual client or group."},"accountHolderType":{"description":"The account holder type.","enum":["CLIENT","GROUP"]},"accountState":{"description":"The state of the deposit account.","enum":["PENDING_APPROVAL","APPROVED","ACTIVE","ACTIVE_IN_ARREARS","MATURED","LOCKED","DORMANT","CLOSED","CLOSED_WRITTEN_OFF","WITHDRAWN","CLOSED_REJECTED"]},"accountType":{"description":"The deposit account type and the product that it belongs to.","enum":["CURRENT_ACCOUNT","REGULAR_SAVINGS","FIXED_DEPOSIT","SAVINGS_PLAN","INVESTOR_ACCOUNT"]},"accruedAmounts":{"$ref":"#/$defs/DepositAccountAccruedAmounts"},"activationDate":{"type":"string","description":"The date when the deposit account was activated, in the organization's timezone and time format.","format":"date-time"},"approvedDate":{"type":"string","description":"The date when the deposit account was approved, in the organization's timezone and time format.","format":"date-time"},"assignedBranchKey":{"type":"string","description":"The key of the branch that this deposit account is assigned to."},"assignedCentreKey":{"type":"string","description":"The key of the centre that this account is assigned to."},"assignedUserKey":{"type":"string","description":"The key of the user that this deposit is assigned to."},"balances":{"$ref":"#/$defs/DepositAccountBalances"},"closedDate":{"type":"string","description":"The date when the deposit account was closed, in UTC.","format":"date-time"},"creationDate":{"type":"string","description":"The date this deposit account was created, in UTC.","format":"date-time"},"creditArrangementKey":{"type":"string","description":"The key to the credit arrangement where this account is registered."},"currencyCode":{"type":"string","description":"The currency code."},"encodedKey":{"type":"string","description":"The encoded key of the deposit account, which is auto-generated and unique."},"id":{"type":"string","description":"The ID of the deposit account, which can be generated and customized - but must be unique."},"interestSettings":{"$ref":"#/$defs/DepositAccountInterestSettings"},"internalControls":{"$ref":"#/$defs/DepositAccountInternalControls"},"lastAccountAppraisalDate":{"type":"string","description":"The date when the account was last evaluated for interest calculations and maturity, in the organization's timezone and time format.","format":"date-time"},"lastInterestCalculationDate":{"type":"string","description":"The date when interest was last calculated for the account, in the organization's timezone and time format.","format":"date-time"},"lastInterestReviewDate":{"type":"string","description":"The date when regular interest was last reviewed, in the organization's timezone and time format.","format":"date-time"},"lastInterestStoredDate":{"type":"string","description":"The date when interest was last applied on the account, in the organization's timezone and time format.","format":"date-time"},"lastModifiedDate":{"type":"string","description":"The last update date for the deposit account, in UTC.","format":"date-time"},"lastOverdraftInterestReviewDate":{"type":"string","description":"The date when the overdraft interest was last reviewed, in the organization's timezone and time format.","format":"date-time"},"lastSetToArrearsDate":{"type":"string","description":"The date when the deposit account was set to In Arrears, or null if the account is not In Arrears. The date is in the organization's timezone and time format.","format":"date-time"},"linkedSettlementAccountKeys":{"type":"array","description":"Lists all loan account keys on which the deposit account is used as the settlement account.","items":{"type":"string"}},"lockedDate":{"type":"string","description":"The date when the deposit account was locked, in the organization's timezone and time format.","format":"date-time"},"maturityDate":{"type":"string","description":"The date when the account matures, for fixed or compulsory savings plans, in the organization's timezone and time format.","format":"date-time"},"migrationEventKey":{"type":"string","description":"The migration event encoded key associated with this deposit account. If this account was imported, you can track which migration event it came from."},"name":{"type":"string","description":"The deposit account name."},"notes":{"type":"string","description":"The notes or description attached to this object."},"overdraftInterestSettings":{"$ref":"#/$defs/DepositAccountOverdraftInterestSettings"},"overdraftSettings":{"$ref":"#/$defs/DepositAccountOverdraftSettings"},"productTypeKey":{"type":"string","description":"The key to the product type that this account is based on."},"withholdingTaxSourceKey":{"type":"string","description":"The tax source where the account withholding taxes will be updated."}},"required":["accountHolderKey","accountHolderType","name","productTypeKey"],"additionalProperties":true},"DepositAccountAccruedAmounts":{"type":"object","description":"Represents information about the accrued amounts of deposit accounts.","properties":{"interestAccrued":{"type":"number","description":"The amount of positive interest that has been accrued in the account."},"negativeInterestAccrued":{"type":"number","description":"The amount of negative interest that has been accrued in the account."},"overdraftInterestAccrued":{"type":"number","description":"The amount of overdraft interest that has been accrued in the account."},"technicalOverdraftInterestAccrued":{"type":"number","description":"The amount of technical overdraft interest that has been accrued in the account."}},"additionalProperties":true},"DepositAccountBalances":{"type":"object","description":"Represents information about the balances of a deposit account.","properties":{"availableBalance":{"type":"number","description":"The current available balance for deposit transactions."},"blockedBalance":{"type":"number","description":"The sum of all the blocked amounts on an account."},"feesDue":{"type":"number","description":"The amount of fees due to be paid on this account."},"forwardAvailableBalance":{"type":"number","description":"The sum of all the authorization hold amounts that have `CRDT` as the `creditDebitIndicator` for an account."},"holdBalance":{"type":"number","description":"The sum of all the authorization hold amounts that have `DBIT` as the `creditDebitIndicator` for an account."},"lockedBalance":{"type":"number","description":"The locked amount that is not available for withdrawal in the account. For more information, see [Deposit Account Overview Details](https://support.mambu.com/docs/deposit-account-overview-details)."},"overdraftAmount":{"type":"number","description":"The overdraft amount that has been taken out in the account. For more information, see [Overdraft Products](https://support.mambu.com/docs/en/overdraft-products)."},"overdraftInterestDue":{"type":"number","description":"The amount of interest due to be paid on an account as a result of an authorized overdraft."},"technicalOverdraftAmount":{"type":"number","description":"The technical overdraft amount that has been taken out in the account. For more information, see [Technical Overdraft](https://support.mambu.com/docs/en/overdraft-products#technical-overdraft)."},"technicalOverdraftInterestDue":{"type":"number","description":"The amount of interest due to be paid on an account as a result of a technical overdraft."},"totalBalance":{"type":"number","description":"The current balance of the account."}},"additionalProperties":true},"DepositAccountInterestSettings":{"type":"object","description":"Represents information about the deposit account's interest settings.","properties":{"interestPaymentSettings":{"$ref":"#/$defs/DepositAccountInterestPaymentSettings"},"interestRateSettings":{"$ref":"#/$defs/DepositAccountInterestRateSettings"}},"additionalProperties":true},"DepositAccountInterestPaymentSettings":{"type":"object","description":"Represents information about the interest payment settings.","properties":{"interestPaymentDates":{"type":"array","description":"The list of all dates when the interest is paid into the deposit account.","items":{"$ref":"#/$defs/MonthAndDay"}},"interestPaymentPoint":{"description":"The interest payment point, which specifies when the interest should be paid to the account.","enum":["FIRST_DAY_OF_MONTH","EVERY_WEEK","EVERY_OTHER_WEEK","EVERY_MONTH","EVERY_3_MONTHS","ON_FIXED_DATES","DAILY","ANNUALLY","BI_ANNUALLY","ON_ACCOUNT_MATURITY"]}},"additionalProperties":true},"MonthAndDay":{"type":"object","description":"Wrapper for month and day for instances where the year isn't needed","properties":{"day":{"type":"integer","description":"The day in the month"},"month":{"type":"integer","description":"The month of the year"}},"additionalProperties":true},"DepositAccountInterestRateSettings":{"type":"object","description":"Represents information about the interest rate settings for deposit accounts.","properties":{"encodedKey":{"type":"string","description":"The encoded key for the set of interest settings, which is auto-generated and unique."},"interestChargeFrequency":{"description":"The interest charge frequency, which shows how often interest is charged on loan or deposit accounts.","enum":["ANNUALIZED","EVERY_MONTH","EVERY_FOUR_WEEKS","EVERY_WEEK","EVERY_DAY","EVERY_X_DAYS"]},"interestChargeFrequencyCount":{"type":"integer","description":"The number of times to apply interest in a time period."},"interestRate":{"type":"number","description":"The interest rate for the deposit account."},"interestRateReviewCount":{"type":"integer","description":"The number of times to review the interest rate in a time period."},"interestRateReviewUnit":{"description":"The time unit to use to determine the frequency of interest rate reviews.","enum":["DAYS","WEEKS","MONTHS"]},"interestRateSource":{"description":"The interest calculation method used.","enum":["FIXED_INTEREST_RATE","INDEX_INTEREST_RATE"]},"interestRateTerms":{"description":"The terms for how interest rate is determined when accruing for an account.","enum":["FIXED","TIERED","TIERED_PERIOD","TIERED_BAND"]},"interestRateTiers":{"type":"array","description":"The list of interest rate tiers, which hold the values to define how interest is calculated.","items":{"$ref":"#/$defs/DepositAccountInterestRateTier"}},"interestSpread":{"type":"number","description":"The index interest rate that is used to calculate the interest rate that is applied to accounts."}},"additionalProperties":true},"DepositAccountInterestRateTier":{"type":"object","description":"Represents information about how interest rate is calculated.","properties":{"encodedKey":{"type":"string","description":"The encoded key of the interest rate tier, auto generated, unique"},"endingBalance":{"type":"number","description":"The top-limit value for the account balance in order to determine if this tier is used or not"},"endingDay":{"type":"integer","description":"The end date for the account period. Used to determine if this interest rate tier is used or not."},"interestRate":{"type":"number","description":"The rate used for computing the interest for an account which has the balance less than the ending balance"}},"required":["interestRate"],"additionalProperties":true},"DepositAccountInternalControls":{"type":"object","description":"Represents information about internal controls.","properties":{"maxDepositBalance":{"type":"number","description":"The maximum deposit balance of the account."},"maxWithdrawalAmount":{"type":"number","description":"The maximum amount allowed for a withdrawal."},"recommendedDepositAmount":{"type":"number","description":"The recommended amount for a deposit."},"targetAmount":{"type":"number","description":"The target amount for a deposit made towards a savings goal."}},"additionalProperties":true},"DepositAccountOverdraftInterestSettings":{"type":"object","description":"Represents information about a deposit account's overdraft interest settings.","properties":{"interestRateSettings":{"$ref":"#/$defs/DepositAccountOverdraftInterestRateSettings"}},"additionalProperties":true},"DepositAccountOverdraftInterestRateSettings":{"type":"object","description":"Represents information about overdraft interest rate settings for deposit accounts.","properties":{"encodedKey":{"type":"string","description":"The encoded key for the set of interest settings, which is auto-generated and unique."},"interestChargeFrequency":{"description":"The interest charge frequency, which shows how often interest is charged on loan or deposit accounts.","enum":["ANNUALIZED","EVERY_MONTH","EVERY_FOUR_WEEKS","EVERY_WEEK","EVERY_DAY","EVERY_X_DAYS"]},"interestChargeFrequencyCount":{"type":"integer","description":"The number of times to apply interest in a time period."},"interestRate":{"type":"number","description":"The interest rate for the deposit account."},"interestRateReviewCount":{"type":"integer","description":"The number of times to review the interest rate in a time period."},"interestRateReviewUnit":{"description":"The time unit to use to determine the frequency of interest rate reviews.","enum":["DAYS","WEEKS","MONTHS"]},"interestRateSource":{"description":"The interest calculation method used.","enum":["FIXED_INTEREST_RATE","INDEX_INTEREST_RATE"]},"interestRateTerms":{"description":"The terms for how interest rate is determined when accruing for an account.","enum":["FIXED","TIERED","TIERED_PERIOD","TIERED_BAND"]},"interestRateTiers":{"type":"array","description":"The list of interest rate tiers, which hold the values to define how interest is calculated.","items":{"$ref":"#/$defs/DepositAccountInterestRateTier"}},"interestSpread":{"type":"number","description":"The index interest rate that is used to calculate the interest rate that is applied to accounts."}},"additionalProperties":true},"DepositAccountOverdraftSettings":{"type":"object","description":"Represents information about a deposit account's overdraft settings.","properties":{"allowOverdraft":{"type":"boolean","description":"`TRUE` if this account supports overdraft, `FALSE` otherwise."},"overdraftExpiryDate":{"type":"string","description":"The expiration date of an overdraft.","format":"date-time"},"overdraftLimit":{"type":"number","description":"The limit amount that may be taken out as overdraft, where null means 0."}},"additionalProperties":true}}};const schema12 = {"type":"object","description":"Represents information about a deposit account.","properties":{"accountHolderKey":{"type":"string","description":"The encoded key of the account holder, which is an individual client or group."},"accountHolderType":{"description":"The account holder type.","enum":["CLIENT","GROUP"]},"accountState":{"description":"The state of the deposit account.","enum":["PENDING_APPROVAL","APPROVED","ACTIVE","ACTIVE_IN_ARREARS","MATURED","LOCKED","DORMANT","CLOSED","CLOSED_WRITTEN_OFF","WITHDRAWN","CLOSED_REJECTED"]},"accountType":{"description":"The deposit account type and the product that it belongs to.","enum":["CURRENT_ACCOUNT","REGULAR_SAVINGS","FIXED_DEPOSIT","SAVINGS_PLAN","INVESTOR_ACCOUNT"]},"accruedAmounts":{"$ref":"#/$defs/DepositAccountAccruedAmounts"},"activationDate":{"type":"string","description":"The date when the deposit account was activated, in the organization's timezone and time format.","format":"date-time"},"approvedDate":{"type":"string","description":"The date when the deposit account was approved, in the organization's timezone and time format.","format":"date-time"},"assignedBranchKey":{"type":"string","description":"The key of the branch that this deposit account is assigned to."},"assignedCentreKey":{"type":"string","description":"The key of the centre that this account is assigned to."},"assignedUserKey":{"type":"string","description":"The key of the user that this deposit is assigned to."},"balances":{"$ref":"#/$defs/DepositAccountBalances"},"closedDate":{"type":"string","description":"The date when the deposit account was closed, in UTC.","format":"date-time"},"creationDate":{"type":"string","description":"The date this deposit account was created, in UTC.","format":"date-time"},"creditArrangementKey":{"type":"string","description":"The key to the credit arrangement where this account is registered."},"currencyCode":{"type":"string","description":"The currency code."},"encodedKey":{"type":"string","description":"The encoded key of the deposit account, which is auto-generated and unique."},"id":{"type":"string","description":"The ID of the deposit account, which can be generated and customized - but must be unique."},"interestSettings":{"$ref":"#/$defs/DepositAccountInterestSettings"},"internalControls":{"$ref":"#/$defs/DepositAccountInternalControls"},"lastAccountAppraisalDate":{"type":"string","description":"The date when the account was last evaluated for interest calculations and maturity, in the organization's timezone and time format.","format":"date-time"},"lastInterestCalculationDate":{"type":"string","description":"The date when interest was last calculated for the account, in the organization's timezone and time format.","format":"date-time"},"lastInterestReviewDate":{"type":"string","description":"The date when regular interest was last reviewed, in the organization's timezone and time format.","format":"date-time"},"lastInterestStoredDate":{"type":"string","description":"The date when interest was last applied on the account, in the organization's timezone and time format.","format":"date-time"},"lastModifiedDate":{"type":"string","description":"The last update date for the deposit account, in UTC.","format":"date-time"},"lastOverdraftInterestReviewDate":{"type":"string","description":"The date when the overdraft interest was last reviewed, in the organization's timezone and time format.","format":"date-time"},"lastSetToArrearsDate":{"type":"string","description":"The date when the deposit account was set to In Arrears, or null if the account is not In Arrears. The date is in the organization's timezone and time format.","format":"date-time"},"linkedSettlementAccountKeys":{"type":"array","description":"Lists all loan account keys on which the deposit account is used as the settlement account.","items":{"type":"string"}},"lockedDate":{"type":"string","description":"The date when the deposit account was locked, in the organization's timezone and time format.","format":"date-time"},"maturityDate":{"type":"string","description":"The date when the account matures, for fixed or compulsory savings plans, in the organization's timezone and time format.","format":"date-time"},"migrationEventKey":{"type":"string","description":"The migration event encoded key associated with this deposit account. If this account was imported, you can track which migration event it came from."},"name":{"type":"string","description":"The deposit account name."},"notes":{"type":"string","description":"The notes or description attached to this object."},"overdraftInterestSettings":{"$ref":"#/$defs/DepositAccountOverdraftInterestSettings"},"overdraftSettings":{"$ref":"#/$defs/DepositAccountOverdraftSettings"},"productTypeKey":{"type":"string","description":"The key to the product type that this account is based on."},"withholdingTaxSourceKey":{"type":"string","description":"The tax source where the account withholding taxes will be updated."}},"required":["accountHolderKey","accountHolderType","name","productTypeKey"],"additionalProperties":true};const schema13 = {"type":"object","description":"Represents information about the accrued amounts of deposit accounts.","properties":{"interestAccrued":{"type":"number","description":"The amount of positive interest that has been accrued in the account."},"negativeInterestAccrued":{"type":"number","description":"The amount of negative interest that has been accrued in the account."},"overdraftInterestAccrued":{"type":"number","description":"The amount of overdraft interest that has been accrued in the account."},"technicalOverdraftInterestAccrued":{"type":"number","description":"The amount of technical overdraft interest that has been accrued in the account."}},"additionalProperties":true};const schema14 = {"type":"object","description":"Represents information about the balances of a deposit account.","properties":{"availableBalance":{"type":"number","description":"The current available balance for deposit transactions."},"blockedBalance":{"type":"number","description":"The sum of all the blocked amounts on an account."},"feesDue":{"type":"number","description":"The amount of fees due to be paid on this account."},"forwardAvailableBalance":{"type":"number","description":"The sum of all the authorization hold amounts that have `CRDT` as the `creditDebitIndicator` for an account."},"holdBalance":{"type":"number","description":"The sum of all the authorization hold amounts that have `DBIT` as the `creditDebitIndicator` for an account."},"lockedBalance":{"type":"number","description":"The locked amount that is not available for withdrawal in the account. For more information, see [Deposit Account Overview Details](https://support.mambu.com/docs/deposit-account-overview-details)."},"overdraftAmount":{"type":"number","description":"The overdraft amount that has been taken out in the account. For more information, see [Overdraft Products](https://support.mambu.com/docs/en/overdraft-products)."},"overdraftInterestDue":{"type":"number","description":"The amount of interest due to be paid on an account as a result of an authorized overdraft."},"technicalOverdraftAmount":{"type":"number","description":"The technical overdraft amount that has been taken out in the account. For more information, see [Technical Overdraft](https://support.mambu.com/docs/en/overdraft-products#technical-overdraft)."},"technicalOverdraftInterestDue":{"type":"number","description":"The amount of interest due to be paid on an account as a result of a technical overdraft."},"totalBalance":{"type":"number","description":"The current balance of the account."}},"additionalProperties":true};const schema20 = {"type":"object","description":"Represents information about internal controls.","properties":{"maxDepositBalance":{"type":"number","description":"The maximum deposit balance of the account."},"maxWithdrawalAmount":{"type":"number","description":"The maximum amount allowed for a withdrawal."},"recommendedDepositAmount":{"type":"number","description":"The recommended amount for a deposit."},"targetAmount":{"type":"number","description":"The target amount for a deposit made towards a savings goal."}},"additionalProperties":true};const schema24 = {"type":"object","description":"Represents information about a deposit account's overdraft settings.","properties":{"allowOverdraft":{"type":"boolean","description":"`TRUE` if this account supports overdraft, `FALSE` otherwise."},"overdraftExpiryDate":{"type":"string","description":"The expiration date of an overdraft.","format":"date-time"},"overdraftLimit":{"type":"number","description":"The limit amount that may be taken out as overdraft, where null means 0."}},"additionalProperties":true};const func0 = (ajvDistRuntimeEqualDefault.default ?? ajvDistRuntimeEqualDefault);const schema15 = {"type":"object","description":"Represents information about the deposit account's interest settings.","properties":{"interestPaymentSettings":{"$ref":"#/$defs/DepositAccountInterestPaymentSettings"},"interestRateSettings":{"$ref":"#/$defs/DepositAccountInterestRateSettings"}},"additionalProperties":true};const schema16 = {"type":"object","description":"Represents information about the interest payment settings.","properties":{"interestPaymentDates":{"type":"array","description":"The list of all dates when the interest is paid into the deposit account.","items":{"$ref":"#/$defs/MonthAndDay"}},"interestPaymentPoint":{"description":"The interest payment point, which specifies when the interest should be paid to the account.","enum":["FIRST_DAY_OF_MONTH","EVERY_WEEK","EVERY_OTHER_WEEK","EVERY_MONTH","EVERY_3_MONTHS","ON_FIXED_DATES","DAILY","ANNUALLY","BI_ANNUALLY","ON_ACCOUNT_MATURITY"]}},"additionalProperties":true};const schema17 = {"type":"object","description":"Wrapper for month and day for instances where the year isn't needed","properties":{"day":{"type":"integer","description":"The day in the month"},"month":{"type":"integer","description":"The month of the year"}},"additionalProperties":true};function validate13(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){let vErrors = null;let errors = 0;if(errors === 0){if(data && typeof data == "object" && !Array.isArray(data)){if(data.interestPaymentDates !== undefined){let data0 = data.interestPaymentDates;const _errs2 = errors;if(errors === _errs2){if(Array.isArray(data0)){var valid1 = true;const len0 = data0.length;for(let i0=0; i0<len0; i0++){let data1 = data0[i0];const _errs4 = errors;const _errs5 = errors;if(errors === _errs5){if(data1 && typeof data1 == "object" && !Array.isArray(data1)){if(data1.day !== undefined){let data2 = data1.day;const _errs8 = errors;if(!(((typeof data2 == "number") && (!(data2 % 1) && !isNaN(data2))) && (isFinite(data2)))){validate13.errors = [{instancePath:instancePath+"/interestPaymentDates/" + i0+"/day",schemaPath:"#/$defs/MonthAndDay/properties/day/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];return false;}var valid3 = _errs8 === errors;}else {var valid3 = true;}if(valid3){if(data1.month !== undefined){let data3 = data1.month;const _errs10 = errors;if(!(((typeof data3 == "number") && (!(data3 % 1) && !isNaN(data3))) && (isFinite(data3)))){validate13.errors = [{instancePath:instancePath+"/interestPaymentDates/" + i0+"/month",schemaPath:"#/$defs/MonthAndDay/properties/month/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];return false;}var valid3 = _errs10 === errors;}else {var valid3 = true;}}}else {validate13.errors = [{instancePath:instancePath+"/interestPaymentDates/" + i0,schemaPath:"#/$defs/MonthAndDay/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}var valid1 = _errs4 === errors;if(!valid1){break;}}}else {validate13.errors = [{instancePath:instancePath+"/interestPaymentDates",schemaPath:"#/properties/interestPaymentDates/type",keyword:"type",params:{type: "array"},message:"must be array"}];return false;}}var valid0 = _errs2 === errors;}else {var valid0 = true;}if(valid0){if(data.interestPaymentPoint !== undefined){const _errs12 = errors;let valid4;valid4 = false;for(const v0 of schema16.properties.interestPaymentPoint.enum){if(func0(data.interestPaymentPoint, v0)){valid4 = true;break;}}if(!valid4){validate13.errors = [{instancePath:instancePath+"/interestPaymentPoint",schemaPath:"#/properties/interestPaymentPoint/enum",keyword:"enum",params:{allowedValues: schema16.properties.interestPaymentPoint.enum},message:"must be equal to one of the allowed values"}];return false;}var valid0 = _errs12 === errors;}else {var valid0 = true;}}}else {validate13.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}validate13.errors = vErrors;return errors === 0;}const schema18 = {"type":"object","description":"Represents information about the interest rate settings for deposit accounts.","properties":{"encodedKey":{"type":"string","description":"The encoded key for the set of interest settings, which is auto-generated and unique."},"interestChargeFrequency":{"description":"The interest charge frequency, which shows how often interest is charged on loan or deposit accounts.","enum":["ANNUALIZED","EVERY_MONTH","EVERY_FOUR_WEEKS","EVERY_WEEK","EVERY_DAY","EVERY_X_DAYS"]},"interestChargeFrequencyCount":{"type":"integer","description":"The number of times to apply interest in a time period."},"interestRate":{"type":"number","description":"The interest rate for the deposit account."},"interestRateReviewCount":{"type":"integer","description":"The number of times to review the interest rate in a time period."},"interestRateReviewUnit":{"description":"The time unit to use to determine the frequency of interest rate reviews.","enum":["DAYS","WEEKS","MONTHS"]},"interestRateSource":{"description":"The interest calculation method used.","enum":["FIXED_INTEREST_RATE","INDEX_INTEREST_RATE"]},"interestRateTerms":{"description":"The terms for how interest rate is determined when accruing for an account.","enum":["FIXED","TIERED","TIERED_PERIOD","TIERED_BAND"]},"interestRateTiers":{"type":"array","description":"The list of interest rate tiers, which hold the values to define how interest is calculated.","items":{"$ref":"#/$defs/DepositAccountInterestRateTier"}},"interestSpread":{"type":"number","description":"The index interest rate that is used to calculate the interest rate that is applied to accounts."}},"additionalProperties":true};const schema19 = {"type":"object","description":"Represents information about how interest rate is calculated.","properties":{"encodedKey":{"type":"string","description":"The encoded key of the interest rate tier, auto generated, unique"},"endingBalance":{"type":"number","description":"The top-limit value for the account balance in order to determine if this tier is used or not"},"endingDay":{"type":"integer","description":"The end date for the account period. Used to determine if this interest rate tier is used or not."},"interestRate":{"type":"number","description":"The rate used for computing the interest for an account which has the balance less than the ending balance"}},"required":["interestRate"],"additionalProperties":true};function validate15(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){let vErrors = null;let errors = 0;if(errors === 0){if(data && typeof data == "object" && !Array.isArray(data)){if(data.encodedKey !== undefined){const _errs2 = errors;if(typeof data.encodedKey !== "string"){validate15.errors = [{instancePath:instancePath+"/encodedKey",schemaPath:"#/properties/encodedKey/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid0 = _errs2 === errors;}else {var valid0 = true;}if(valid0){if(data.interestChargeFrequency !== undefined){const _errs4 = errors;let valid1;valid1 = false;for(const v0 of schema18.properties.interestChargeFrequency.enum){if(func0(data.interestChargeFrequency, v0)){valid1 = true;break;}}if(!valid1){validate15.errors = [{instancePath:instancePath+"/interestChargeFrequency",schemaPath:"#/properties/interestChargeFrequency/enum",keyword:"enum",params:{allowedValues: schema18.properties.interestChargeFrequency.enum},message:"must be equal to one of the allowed values"}];return false;}var valid0 = _errs4 === errors;}else {var valid0 = true;}if(valid0){if(data.interestChargeFrequencyCount !== undefined){let data2 = data.interestChargeFrequencyCount;const _errs5 = errors;if(!(((typeof data2 == "number") && (!(data2 % 1) && !isNaN(data2))) && (isFinite(data2)))){validate15.errors = [{instancePath:instancePath+"/interestChargeFrequencyCount",schemaPath:"#/properties/interestChargeFrequencyCount/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];return false;}var valid0 = _errs5 === errors;}else {var valid0 = true;}if(valid0){if(data.interestRate !== undefined){let data3 = data.interestRate;const _errs7 = errors;if(!((typeof data3 == "number") && (isFinite(data3)))){validate15.errors = [{instancePath:instancePath+"/interestRate",schemaPath:"#/properties/interestRate/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid0 = _errs7 === errors;}else {var valid0 = true;}if(valid0){if(data.interestRateReviewCount !== undefined){let data4 = data.interestRateReviewCount;const _errs9 = errors;if(!(((typeof data4 == "number") && (!(data4 % 1) && !isNaN(data4))) && (isFinite(data4)))){validate15.errors = [{instancePath:instancePath+"/interestRateReviewCount",schemaPath:"#/properties/interestRateReviewCount/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];return false;}var valid0 = _errs9 === errors;}else {var valid0 = true;}if(valid0){if(data.interestRateReviewUnit !== undefined){let data5 = data.interestRateReviewUnit;const _errs11 = errors;if(!(((data5 === "DAYS") || (data5 === "WEEKS")) || (data5 === "MONTHS"))){validate15.errors = [{instancePath:instancePath+"/interestRateReviewUnit",schemaPath:"#/properties/interestRateReviewUnit/enum",keyword:"enum",params:{allowedValues: schema18.properties.interestRateReviewUnit.enum},message:"must be equal to one of the allowed values"}];return false;}var valid0 = _errs11 === errors;}else {var valid0 = true;}if(valid0){if(data.interestRateSource !== undefined){let data6 = data.interestRateSource;const _errs12 = errors;if(!((data6 === "FIXED_INTEREST_RATE") || (data6 === "INDEX_INTEREST_RATE"))){validate15.errors = [{instancePath:instancePath+"/interestRateSource",schemaPath:"#/properties/interestRateSource/enum",keyword:"enum",params:{allowedValues: schema18.properties.interestRateSource.enum},message:"must be equal to one of the allowed values"}];return false;}var valid0 = _errs12 === errors;}else {var valid0 = true;}if(valid0){if(data.interestRateTerms !== undefined){let data7 = data.interestRateTerms;const _errs13 = errors;if(!((((data7 === "FIXED") || (data7 === "TIERED")) || (data7 === "TIERED_PERIOD")) || (data7 === "TIERED_BAND"))){validate15.errors = [{instancePath:instancePath+"/interestRateTerms",schemaPath:"#/properties/interestRateTerms/enum",keyword:"enum",params:{allowedValues: schema18.properties.interestRateTerms.enum},message:"must be equal to one of the allowed values"}];return false;}var valid0 = _errs13 === errors;}else {var valid0 = true;}if(valid0){if(data.interestRateTiers !== undefined){let data8 = data.interestRateTiers;const _errs14 = errors;if(errors === _errs14){if(Array.isArray(data8)){var valid2 = true;const len0 = data8.length;for(let i0=0; i0<len0; i0++){let data9 = data8[i0];const _errs16 = errors;const _errs17 = errors;if(errors === _errs17){if(data9 && typeof data9 == "object" && !Array.isArray(data9)){let missing0;if((data9.interestRate === undefined) && (missing0 = "interestRate")){validate15.errors = [{instancePath:instancePath+"/interestRateTiers/" + i0,schemaPath:"#/$defs/DepositAccountInterestRateTier/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];return false;}else {if(data9.encodedKey !== undefined){const _errs20 = errors;if(typeof data9.encodedKey !== "string"){validate15.errors = [{instancePath:instancePath+"/interestRateTiers/" + i0+"/encodedKey",schemaPath:"#/$defs/DepositAccountInterestRateTier/properties/encodedKey/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid4 = _errs20 === errors;}else {var valid4 = true;}if(valid4){if(data9.endingBalance !== undefined){let data11 = data9.endingBalance;const _errs22 = errors;if(!((typeof data11 == "number") && (isFinite(data11)))){validate15.errors = [{instancePath:instancePath+"/interestRateTiers/" + i0+"/endingBalance",schemaPath:"#/$defs/DepositAccountInterestRateTier/properties/endingBalance/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid4 = _errs22 === errors;}else {var valid4 = true;}if(valid4){if(data9.endingDay !== undefined){let data12 = data9.endingDay;const _errs24 = errors;if(!(((typeof data12 == "number") && (!(data12 % 1) && !isNaN(data12))) && (isFinite(data12)))){validate15.errors = [{instancePath:instancePath+"/interestRateTiers/" + i0+"/endingDay",schemaPath:"#/$defs/DepositAccountInterestRateTier/properties/endingDay/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];return false;}var valid4 = _errs24 === errors;}else {var valid4 = true;}if(valid4){if(data9.interestRate !== undefined){let data13 = data9.interestRate;const _errs26 = errors;if(!((typeof data13 == "number") && (isFinite(data13)))){validate15.errors = [{instancePath:instancePath+"/interestRateTiers/" + i0+"/interestRate",schemaPath:"#/$defs/DepositAccountInterestRateTier/properties/interestRate/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid4 = _errs26 === errors;}else {var valid4 = true;}}}}}}else {validate15.errors = [{instancePath:instancePath+"/interestRateTiers/" + i0,schemaPath:"#/$defs/DepositAccountInterestRateTier/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}var valid2 = _errs16 === errors;if(!valid2){break;}}}else {validate15.errors = [{instancePath:instancePath+"/interestRateTiers",schemaPath:"#/properties/interestRateTiers/type",keyword:"type",params:{type: "array"},message:"must be array"}];return false;}}var valid0 = _errs14 === errors;}else {var valid0 = true;}if(valid0){if(data.interestSpread !== undefined){let data14 = data.interestSpread;const _errs28 = errors;if(!((typeof data14 == "number") && (isFinite(data14)))){validate15.errors = [{instancePath:instancePath+"/interestSpread",schemaPath:"#/properties/interestSpread/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid0 = _errs28 === errors;}else {var valid0 = true;}}}}}}}}}}}else {validate15.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}validate15.errors = vErrors;return errors === 0;}function validate12(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){let vErrors = null;let errors = 0;if(errors === 0){if(data && typeof data == "object" && !Array.isArray(data)){if(data.interestPaymentSettings !== undefined){const _errs2 = errors;if(!(validate13(data.interestPaymentSettings, {instancePath:instancePath+"/interestPaymentSettings",parentData:data,parentDataProperty:"interestPaymentSettings",rootData}))){vErrors = vErrors === null ? validate13.errors : vErrors.concat(validate13.errors);errors = vErrors.length;}var valid0 = _errs2 === errors;}else {var valid0 = true;}if(valid0){if(data.interestRateSettings !== undefined){const _errs3 = errors;if(!(validate15(data.interestRateSettings, {instancePath:instancePath+"/interestRateSettings",parentData:data,parentDataProperty:"interestRateSettings",rootData}))){vErrors = vErrors === null ? validate15.errors : vErrors.concat(validate15.errors);errors = vErrors.length;}var valid0 = _errs3 === errors;}else {var valid0 = true;}}}else {validate12.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}validate12.errors = vErrors;return errors === 0;}const schema21 = {"type":"object","description":"Represents information about a deposit account's overdraft interest settings.","properties":{"interestRateSettings":{"$ref":"#/$defs/DepositAccountOverdraftInterestRateSettings"}},"additionalProperties":true};const schema22 = {"type":"object","description":"Represents information about overdraft interest rate settings for deposit accounts.","properties":{"encodedKey":{"type":"string","description":"The encoded key for the set of interest settings, which is auto-generated and unique."},"interestChargeFrequency":{"description":"The interest charge frequency, which shows how often interest is charged on loan or deposit accounts.","enum":["ANNUALIZED","EVERY_MONTH","EVERY_FOUR_WEEKS","EVERY_WEEK","EVERY_DAY","EVERY_X_DAYS"]},"interestChargeFrequencyCount":{"type":"integer","description":"The number of times to apply interest in a time period."},"interestRate":{"type":"number","description":"The interest rate for the deposit account."},"interestRateReviewCount":{"type":"integer","description":"The number of times to review the interest rate in a time period."},"interestRateReviewUnit":{"description":"The time unit to use to determine the frequency of interest rate reviews.","enum":["DAYS","WEEKS","MONTHS"]},"interestRateSource":{"description":"The interest calculation method used.","enum":["FIXED_INTEREST_RATE","INDEX_INTEREST_RATE"]},"interestRateTerms":{"description":"The terms for how interest rate is determined when accruing for an account.","enum":["FIXED","TIERED","TIERED_PERIOD","TIERED_BAND"]},"interestRateTiers":{"type":"array","description":"The list of interest rate tiers, which hold the values to define how interest is calculated.","items":{"$ref":"#/$defs/DepositAccountInterestRateTier"}},"interestSpread":{"type":"number","description":"The index interest rate that is used to calculate the interest rate that is applied to accounts."}},"additionalProperties":true};function validate19(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){let vErrors = null;let errors = 0;if(errors === 0){if(data && typeof data == "object" && !Array.isArray(data)){if(data.encodedKey !== undefined){const _errs2 = errors;if(typeof data.encodedKey !== "string"){validate19.errors = [{instancePath:instancePath+"/encodedKey",schemaPath:"#/properties/encodedKey/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid0 = _errs2 === errors;}else {var valid0 = true;}if(valid0){if(data.interestChargeFrequency !== undefined){const _errs4 = errors;let valid1;valid1 = false;for(const v0 of schema22.properties.interestChargeFrequency.enum){if(func0(data.interestChargeFrequency, v0)){valid1 = true;break;}}if(!valid1){validate19.errors = [{instancePath:instancePath+"/interestChargeFrequency",schemaPath:"#/properties/interestChargeFrequency/enum",keyword:"enum",params:{allowedValues: schema22.properties.interestChargeFrequency.enum},message:"must be equal to one of the allowed values"}];return false;}var valid0 = _errs4 === errors;}else {var valid0 = true;}if(valid0){if(data.interestChargeFrequencyCount !== undefined){let data2 = data.interestChargeFrequencyCount;const _errs5 = errors;if(!(((typeof data2 == "number") && (!(data2 % 1) && !isNaN(data2))) && (isFinite(data2)))){validate19.errors = [{instancePath:instancePath+"/interestChargeFrequencyCount",schemaPath:"#/properties/interestChargeFrequencyCount/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];return false;}var valid0 = _errs5 === errors;}else {var valid0 = true;}if(valid0){if(data.interestRate !== undefined){let data3 = data.interestRate;const _errs7 = errors;if(!((typeof data3 == "number") && (isFinite(data3)))){validate19.errors = [{instancePath:instancePath+"/interestRate",schemaPath:"#/properties/interestRate/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid0 = _errs7 === errors;}else {var valid0 = true;}if(valid0){if(data.interestRateReviewCount !== undefined){let data4 = data.interestRateReviewCount;const _errs9 = errors;if(!(((typeof data4 == "number") && (!(data4 % 1) && !isNaN(data4))) && (isFinite(data4)))){validate19.errors = [{instancePath:instancePath+"/interestRateReviewCount",schemaPath:"#/properties/interestRateReviewCount/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];return false;}var valid0 = _errs9 === errors;}else {var valid0 = true;}if(valid0){if(data.interestRateReviewUnit !== undefined){let data5 = data.interestRateReviewUnit;const _errs11 = errors;if(!(((data5 === "DAYS") || (data5 === "WEEKS")) || (data5 === "MONTHS"))){validate19.errors = [{instancePath:instancePath+"/interestRateReviewUnit",schemaPath:"#/properties/interestRateReviewUnit/enum",keyword:"enum",params:{allowedValues: schema22.properties.interestRateReviewUnit.enum},message:"must be equal to one of the allowed values"}];return false;}var valid0 = _errs11 === errors;}else {var valid0 = true;}if(valid0){if(data.interestRateSource !== undefined){let data6 = data.interestRateSource;const _errs12 = errors;if(!((data6 === "FIXED_INTEREST_RATE") || (data6 === "INDEX_INTEREST_RATE"))){validate19.errors = [{instancePath:instancePath+"/interestRateSource",schemaPath:"#/properties/interestRateSource/enum",keyword:"enum",params:{allowedValues: schema22.properties.interestRateSource.enum},message:"must be equal to one of the allowed values"}];return false;}var valid0 = _errs12 === errors;}else {var valid0 = true;}if(valid0){if(data.interestRateTerms !== undefined){let data7 = data.interestRateTerms;const _errs13 = errors;if(!((((data7 === "FIXED") || (data7 === "TIERED")) || (data7 === "TIERED_PERIOD")) || (data7 === "TIERED_BAND"))){validate19.errors = [{instancePath:instancePath+"/interestRateTerms",schemaPath:"#/properties/interestRateTerms/enum",keyword:"enum",params:{allowedValues: schema22.properties.interestRateTerms.enum},message:"must be equal to one of the allowed values"}];return false;}var valid0 = _errs13 === errors;}else {var valid0 = true;}if(valid0){if(data.interestRateTiers !== undefined){let data8 = data.interestRateTiers;const _errs14 = errors;if(errors === _errs14){if(Array.isArray(data8)){var valid2 = true;const len0 = data8.length;for(let i0=0; i0<len0; i0++){let data9 = data8[i0];const _errs16 = errors;const _errs17 = errors;if(errors === _errs17){if(data9 && typeof data9 == "object" && !Array.isArray(data9)){let missing0;if((data9.interestRate === undefined) && (missing0 = "interestRate")){validate19.errors = [{instancePath:instancePath+"/interestRateTiers/" + i0,schemaPath:"#/$defs/DepositAccountInterestRateTier/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];return false;}else {if(data9.encodedKey !== undefined){const _errs20 = errors;if(typeof data9.encodedKey !== "string"){validate19.errors = [{instancePath:instancePath+"/interestRateTiers/" + i0+"/encodedKey",schemaPath:"#/$defs/DepositAccountInterestRateTier/properties/encodedKey/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid4 = _errs20 === errors;}else {var valid4 = true;}if(valid4){if(data9.endingBalance !== undefined){let data11 = data9.endingBalance;const _errs22 = errors;if(!((typeof data11 == "number") && (isFinite(data11)))){validate19.errors = [{instancePath:instancePath+"/interestRateTiers/" + i0+"/endingBalance",schemaPath:"#/$defs/DepositAccountInterestRateTier/properties/endingBalance/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid4 = _errs22 === errors;}else {var valid4 = true;}if(valid4){if(data9.endingDay !== undefined){let data12 = data9.endingDay;const _errs24 = errors;if(!(((typeof data12 == "number") && (!(data12 % 1) && !isNaN(data12))) && (isFinite(data12)))){validate19.errors = [{instancePath:instancePath+"/interestRateTiers/" + i0+"/endingDay",schemaPath:"#/$defs/DepositAccountInterestRateTier/properties/endingDay/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];return false;}var valid4 = _errs24 === errors;}else {var valid4 = true;}if(valid4){if(data9.interestRate !== undefined){let data13 = data9.interestRate;const _errs26 = errors;if(!((typeof data13 == "number") && (isFinite(data13)))){validate19.errors = [{instancePath:instancePath+"/interestRateTiers/" + i0+"/interestRate",schemaPath:"#/$defs/DepositAccountInterestRateTier/properties/interestRate/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid4 = _errs26 === errors;}else {var valid4 = true;}}}}}}else {validate19.errors = [{instancePath:instancePath+"/interestRateTiers/" + i0,schemaPath:"#/$defs/DepositAccountInterestRateTier/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}var valid2 = _errs16 === errors;if(!valid2){break;}}}else {validate19.errors = [{instancePath:instancePath+"/interestRateTiers",schemaPath:"#/properties/interestRateTiers/type",keyword:"type",params:{type: "array"},message:"must be array"}];return false;}}var valid0 = _errs14 === errors;}else {var valid0 = true;}if(valid0){if(data.interestSpread !== undefined){let data14 = data.interestSpread;const _errs28 = errors;if(!((typeof data14 == "number") && (isFinite(data14)))){validate19.errors = [{instancePath:instancePath+"/interestSpread",schemaPath:"#/properties/interestSpread/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid0 = _errs28 === errors;}else {var valid0 = true;}}}}}}}}}}}else {validate19.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}validate19.errors = vErrors;return errors === 0;}function validate18(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){let vErrors = null;let errors = 0;if(errors === 0){if(data && typeof data == "object" && !Array.isArray(data)){if(data.interestRateSettings !== undefined){if(!(validate19(data.interestRateSettings, {instancePath:instancePath+"/interestRateSettings",parentData:data,parentDataProperty:"interestRateSettings",rootData}))){vErrors = vErrors === null ? validate19.errors : vErrors.concat(validate19.errors);errors = vErrors.length;}}}else {validate18.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}validate18.errors = vErrors;return errors === 0;}function validate11(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){let vErrors = null;let errors = 0;if(errors === 0){if(data && typeof data == "object" && !Array.isArray(data)){let missing0;if(((((data.accountHolderKey === undefined) && (missing0 = "accountHolderKey")) || ((data.accountHolderType === undefined) && (missing0 = "accountHolderType"))) || ((data.name === undefined) && (missing0 = "name"))) || ((data.productTypeKey === undefined) && (missing0 = "productTypeKey"))){validate11.errors = [{instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];return false;}else {if(data.accountHolderKey !== undefined){const _errs2 = errors;if(typeof data.accountHolderKey !== "string"){validate11.errors = [{instancePath:instancePath+"/accountHolderKey",schemaPath:"#/properties/accountHolderKey/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid0 = _errs2 === errors;}else {var valid0 = true;}if(valid0){if(data.accountHolderType !== undefined){let data1 = data.accountHolderType;const _errs4 = errors;if(!((data1 === "CLIENT") || (data1 === "GROUP"))){validate11.errors = [{instancePath:instancePath+"/accountHolderType",schemaPath:"#/properties/accountHolderType/enum",keyword:"enum",params:{allowedValues: schema12.properties.accountHolderType.enum},message:"must be equal to one of the allowed values"}];return false;}var valid0 = _errs4 === errors;}else {var valid0 = true;}if(valid0){if(data.accountState !== undefined){const _errs5 = errors;let valid1;valid1 = false;for(const v0 of schema12.properties.accountState.enum){if(func0(data.accountState, v0)){valid1 = true;break;}}if(!valid1){validate11.errors = [{instancePath:instancePath+"/accountState",schemaPath:"#/properties/accountState/enum",keyword:"enum",params:{allowedValues: schema12.properties.accountState.enum},message:"must be equal to one of the allowed values"}];return false;}var valid0 = _errs5 === errors;}else {var valid0 = true;}if(valid0){if(data.accountType !== undefined){const _errs6 = errors;let valid2;valid2 = false;for(const v1 of schema12.properties.accountType.enum){if(func0(data.accountType, v1)){valid2 = true;break;}}if(!valid2){validate11.errors = [{instancePath:instancePath+"/accountType",schemaPath:"#/properties/accountType/enum",keyword:"enum",params:{allowedValues: schema12.properties.accountType.enum},message:"must be equal to one of the allowed values"}];return false;}var valid0 = _errs6 === errors;}else {var valid0 = true;}if(valid0){if(data.accruedAmounts !== undefined){let data4 = data.accruedAmounts;const _errs7 = errors;const _errs8 = errors;if(errors === _errs8){if(data4 && typeof data4 == "object" && !Array.isArray(data4)){if(data4.interestAccrued !== undefined){let data5 = data4.interestAccrued;const _errs11 = errors;if(!((typeof data5 == "number") && (isFinite(data5)))){validate11.errors = [{instancePath:instancePath+"/accruedAmounts/interestAccrued",schemaPath:"#/$defs/DepositAccountAccruedAmounts/properties/interestAccrued/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid4 = _errs11 === errors;}else {var valid4 = true;}if(valid4){if(data4.negativeInterestAccrued !== undefined){let data6 = data4.negativeInterestAccrued;const _errs13 = errors;if(!((typeof data6 == "number") && (isFinite(data6)))){validate11.errors = [{instancePath:instancePath+"/accruedAmounts/negativeInterestAccrued",schemaPath:"#/$defs/DepositAccountAccruedAmounts/properties/negativeInterestAccrued/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid4 = _errs13 === errors;}else {var valid4 = true;}if(valid4){if(data4.overdraftInterestAccrued !== undefined){let data7 = data4.overdraftInterestAccrued;const _errs15 = errors;if(!((typeof data7 == "number") && (isFinite(data7)))){validate11.errors = [{instancePath:instancePath+"/accruedAmounts/overdraftInterestAccrued",schemaPath:"#/$defs/DepositAccountAccruedAmounts/properties/overdraftInterestAccrued/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid4 = _errs15 === errors;}else {var valid4 = true;}if(valid4){if(data4.technicalOverdraftInterestAccrued !== undefined){let data8 = data4.technicalOverdraftInterestAccrued;const _errs17 = errors;if(!((typeof data8 == "number") && (isFinite(data8)))){validate11.errors = [{instancePath:instancePath+"/accruedAmounts/technicalOverdraftInterestAccrued",schemaPath:"#/$defs/DepositAccountAccruedAmounts/properties/technicalOverdraftInterestAccrued/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid4 = _errs17 === errors;}else {var valid4 = true;}}}}}else {validate11.errors = [{instancePath:instancePath+"/accruedAmounts",schemaPath:"#/$defs/DepositAccountAccruedAmounts/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}var valid0 = _errs7 === errors;}else {var valid0 = true;}if(valid0){if(data.activationDate !== undefined){const _errs19 = errors;if(errors === _errs19){if(errors === _errs19){if(!(typeof data.activationDate === "string")){validate11.errors = [{instancePath:instancePath+"/activationDate",schemaPath:"#/properties/activationDate/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}}var valid0 = _errs19 === errors;}else {var valid0 = true;}if(valid0){if(data.approvedDate !== undefined){const _errs21 = errors;if(errors === _errs21){if(errors === _errs21){if(!(typeof data.approvedDate === "string")){validate11.errors = [{instancePath:instancePath+"/approvedDate",schemaPath:"#/properties/approvedDate/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}}var valid0 = _errs21 === errors;}else {var valid0 = true;}if(valid0){if(data.assignedBranchKey !== undefined){const _errs23 = errors;if(typeof data.assignedBranchKey !== "string"){validate11.errors = [{instancePath:instancePath+"/assignedBranchKey",schemaPath:"#/properties/assignedBranchKey/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid0 = _errs23 === errors;}else {var valid0 = true;}if(valid0){if(data.assignedCentreKey !== undefined){const _errs25 = errors;if(typeof data.assignedCentreKey !== "string"){validate11.errors = [{instancePath:instancePath+"/assignedCentreKey",schemaPath:"#/properties/assignedCentreKey/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid0 = _errs25 === errors;}else {var valid0 = true;}if(valid0){if(data.assignedUserKey !== undefined){const _errs27 = errors;if(typeof data.assignedUserKey !== "string"){validate11.errors = [{instancePath:instancePath+"/assignedUserKey",schemaPath:"#/properties/assignedUserKey/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid0 = _errs27 === errors;}else {var valid0 = true;}if(valid0){if(data.balances !== undefined){let data14 = data.balances;const _errs29 = errors;const _errs30 = errors;if(errors === _errs30){if(data14 && typeof data14 == "object" && !Array.isArray(data14)){if(data14.availableBalance !== undefined){let data15 = data14.availableBalance;const _errs33 = errors;if(!((typeof data15 == "number") && (isFinite(data15)))){validate11.errors = [{instancePath:instancePath+"/balances/availableBalance",schemaPath:"#/$defs/DepositAccountBalances/properties/availableBalance/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid6 = _errs33 === errors;}else {var valid6 = true;}if(valid6){if(data14.blockedBalance !== undefined){let data16 = data14.blockedBalance;const _errs35 = errors;if(!((typeof data16 == "number") && (isFinite(data16)))){validate11.errors = [{instancePath:instancePath+"/balances/blockedBalance",schemaPath:"#/$defs/DepositAccountBalances/properties/blockedBalance/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid6 = _errs35 === errors;}else {var valid6 = true;}if(valid6){if(data14.feesDue !== undefined){let data17 = data14.feesDue;const _errs37 = errors;if(!((typeof data17 == "number") && (isFinite(data17)))){validate11.errors = [{instancePath:instancePath+"/balances/feesDue",schemaPath:"#/$defs/DepositAccountBalances/properties/feesDue/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid6 = _errs37 === errors;}else {var valid6 = true;}if(valid6){if(data14.forwardAvailableBalance !== undefined){let data18 = data14.forwardAvailableBalance;const _errs39 = errors;if(!((typeof data18 == "number") && (isFinite(data18)))){validate11.errors = [{instancePath:instancePath+"/balances/forwardAvailableBalance",schemaPath:"#/$defs/DepositAccountBalances/properties/forwardAvailableBalance/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid6 = _errs39 === errors;}else {var valid6 = true;}if(valid6){if(data14.holdBalance !== undefined){let data19 = data14.holdBalance;const _errs41 = errors;if(!((typeof data19 == "number") && (isFinite(data19)))){validate11.errors = [{instancePath:instancePath+"/balances/holdBalance",schemaPath:"#/$defs/DepositAccountBalances/properties/holdBalance/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid6 = _errs41 === errors;}else {var valid6 = true;}if(valid6){if(data14.lockedBalance !== undefined){let data20 = data14.lockedBalance;const _errs43 = errors;if(!((typeof data20 == "number") && (isFinite(data20)))){validate11.errors = [{instancePath:instancePath+"/balances/lockedBalance",schemaPath:"#/$defs/DepositAccountBalances/properties/lockedBalance/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid6 = _errs43 === errors;}else {var valid6 = true;}if(valid6){if(data14.overdraftAmount !== undefined){let data21 = data14.overdraftAmount;const _errs45 = errors;if(!((typeof data21 == "number") && (isFinite(data21)))){validate11.errors = [{instancePath:instancePath+"/balances/overdraftAmount",schemaPath:"#/$defs/DepositAccountBalances/properties/overdraftAmount/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid6 = _errs45 === errors;}else {var valid6 = true;}if(valid6){if(data14.overdraftInterestDue !== undefined){let data22 = data14.overdraftInterestDue;const _errs47 = errors;if(!((typeof data22 == "number") && (isFinite(data22)))){validate11.errors = [{instancePath:instancePath+"/balances/overdraftInterestDue",schemaPath:"#/$defs/DepositAccountBalances/properties/overdraftInterestDue/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid6 = _errs47 === errors;}else {var valid6 = true;}if(valid6){if(data14.technicalOverdraftAmount !== undefined){let data23 = data14.technicalOverdraftAmount;const _errs49 = errors;if(!((typeof data23 == "number") && (isFinite(data23)))){validate11.errors = [{instancePath:instancePath+"/balances/technicalOverdraftAmount",schemaPath:"#/$defs/DepositAccountBalances/properties/technicalOverdraftAmount/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid6 = _errs49 === errors;}else {var valid6 = true;}if(valid6){if(data14.technicalOverdraftInterestDue !== undefined){let data24 = data14.technicalOverdraftInterestDue;const _errs51 = errors;if(!((typeof data24 == "number") && (isFinite(data24)))){validate11.errors = [{instancePath:instancePath+"/balances/technicalOverdraftInterestDue",schemaPath:"#/$defs/DepositAccountBalances/properties/technicalOverdraftInterestDue/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid6 = _errs51 === errors;}else {var valid6 = true;}if(valid6){if(data14.totalBalance !== undefined){let data25 = data14.totalBalance;const _errs53 = errors;if(!((typeof data25 == "number") && (isFinite(data25)))){validate11.errors = [{instancePath:instancePath+"/balances/totalBalance",schemaPath:"#/$defs/DepositAccountBalances/properties/totalBalance/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid6 = _errs53 === errors;}else {var valid6 = true;}}}}}}}}}}}}else {validate11.errors = [{instancePath:instancePath+"/balances",schemaPath:"#/$defs/DepositAccountBalances/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}var valid0 = _errs29 === errors;}else {var valid0 = true;}if(valid0){if(data.closedDate !== undefined){const _errs55 = errors;if(errors === _errs55){if(errors === _errs55){if(!(typeof data.closedDate === "string")){validate11.errors = [{instancePath:instancePath+"/closedDate",schemaPath:"#/properties/closedDate/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}}var valid0 = _errs55 === errors;}else {var valid0 = true;}if(valid0){if(data.creationDate !== undefined){const _errs57 = errors;if(errors === _errs57){if(errors === _errs57){if(!(typeof data.creationDate === "string")){validate11.errors = [{instancePath:instancePath+"/creationDate",schemaPath:"#/properties/creationDate/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}}var valid0 = _errs57 === errors;}else {var valid0 = true;}if(valid0){if(data.creditArrangementKey !== undefined){const _errs59 = errors;if(typeof data.creditArrangementKey !== "string"){validate11.errors = [{instancePath:instancePath+"/creditArrangementKey",schemaPath:"#/properties/creditArrangementKey/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid0 = _errs59 === errors;}else {var valid0 = true;}if(valid0){if(data.currencyCode !== undefined){const _errs61 = errors;if(typeof data.currencyCode !== "string"){validate11.errors = [{instancePath:instancePath+"/currencyCode",schemaPath:"#/properties/currencyCode/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid0 = _errs61 === errors;}else {var valid0 = true;}if(valid0){if(data.encodedKey !== undefined){const _errs63 = errors;if(typeof data.encodedKey !== "string"){validate11.errors = [{instancePath:instancePath+"/encodedKey",schemaPath:"#/properties/encodedKey/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid0 = _errs63 === errors;}else {var valid0 = true;}if(valid0){if(data.id !== undefined){const _errs65 = errors;if(typeof data.id !== "string"){validate11.errors = [{instancePath:instancePath+"/id",schemaPath:"#/properties/id/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid0 = _errs65 === errors;}else {var valid0 = true;}if(valid0){if(data.interestSettings !== undefined){const _errs67 = errors;if(!(validate12(data.interestSettings, {instancePath:instancePath+"/interestSettings",parentData:data,parentDataProperty:"interestSettings",rootData}))){vErrors = vErrors === null ? validate12.errors : vErrors.concat(validate12.errors);errors = vErrors.length;}var valid0 = _errs67 === errors;}else {var valid0 = true;}if(valid0){if(data.internalControls !== undefined){let data33 = data.internalControls;const _errs68 = errors;const _errs69 = errors;if(errors === _errs69){if(data33 && typeof data33 == "object" && !Array.isArray(data33)){if(data33.maxDepositBalance !== undefined){let data34 = data33.maxDepositBalance;const _errs72 = errors;if(!((typeof data34 == "number") && (isFinite(data34)))){validate11.errors = [{instancePath:instancePath+"/internalControls/maxDepositBalance",schemaPath:"#/$defs/DepositAccountInternalControls/properties/maxDepositBalance/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid8 = _errs72 === errors;}else {var valid8 = true;}if(valid8){if(data33.maxWithdrawalAmount !== undefined){let data35 = data33.maxWithdrawalAmount;const _errs74 = errors;if(!((typeof data35 == "number") && (isFinite(data35)))){validate11.errors = [{instancePath:instancePath+"/internalControls/maxWithdrawalAmount",schemaPath:"#/$defs/DepositAccountInternalControls/properties/maxWithdrawalAmount/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid8 = _errs74 === errors;}else {var valid8 = true;}if(valid8){if(data33.recommendedDepositAmount !== undefined){let data36 = data33.recommendedDepositAmount;const _errs76 = errors;if(!((typeof data36 == "number") && (isFinite(data36)))){validate11.errors = [{instancePath:instancePath+"/internalControls/recommendedDepositAmount",schemaPath:"#/$defs/DepositAccountInternalControls/properties/recommendedDepositAmount/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid8 = _errs76 === errors;}else {var valid8 = true;}if(valid8){if(data33.targetAmount !== undefined){let data37 = data33.targetAmount;const _errs78 = errors;if(!((typeof data37 == "number") && (isFinite(data37)))){validate11.errors = [{instancePath:instancePath+"/internalControls/targetAmount",schemaPath:"#/$defs/DepositAccountInternalControls/properties/targetAmount/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid8 = _errs78 === errors;}else {var valid8 = true;}}}}}else {validate11.errors = [{instancePath:instancePath+"/internalControls",schemaPath:"#/$defs/DepositAccountInternalControls/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}var valid0 = _errs68 === errors;}else {var valid0 = true;}if(valid0){if(data.lastAccountAppraisalDate !== undefined){const _errs80 = errors;if(errors === _errs80){if(errors === _errs80){if(!(typeof data.lastAccountAppraisalDate === "string")){validate11.errors = [{instancePath:instancePath+"/lastAccountAppraisalDate",schemaPath:"#/properties/lastAccountAppraisalDate/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}}var valid0 = _errs80 === errors;}else {var valid0 = true;}if(valid0){if(data.lastInterestCalculationDate !== undefined){const _errs82 = errors;if(errors === _errs82){if(errors === _errs82){if(!(typeof data.lastInterestCalculationDate === "string")){validate11.errors = [{instancePath:instancePath+"/lastInterestCalculationDate",schemaPath:"#/properties/lastInterestCalculationDate/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}}var valid0 = _errs82 === errors;}else {var valid0 = true;}if(valid0){if(data.lastInterestReviewDate !== undefined){const _errs84 = errors;if(errors === _errs84){if(errors === _errs84){if(!(typeof data.lastInterestReviewDate === "string")){validate11.errors = [{instancePath:instancePath+"/lastInterestReviewDate",schemaPath:"#/properties/lastInterestReviewDate/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}}var valid0 = _errs84 === errors;}else {var valid0 = true;}if(valid0){if(data.lastInterestStoredDate !== undefined){const _errs86 = errors;if(errors === _errs86){if(errors === _errs86){if(!(typeof data.lastInterestStoredDate === "string")){validate11.errors = [{instancePath:instancePath+"/lastInterestStoredDate",schemaPath:"#/properties/lastInterestStoredDate/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}}var valid0 = _errs86 === errors;}else {var valid0 = true;}if(valid0){if(data.lastModifiedDate !== undefined){const _errs88 = errors;if(errors === _errs88){if(errors === _errs88){if(!(typeof data.lastModifiedDate === "string")){validate11.errors = [{instancePath:instancePath+"/lastModifiedDate",schemaPath:"#/properties/lastModifiedDate/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}}var valid0 = _errs88 === errors;}else {var valid0 = true;}if(valid0){if(data.lastOverdraftInterestReviewDate !== undefined){const _errs90 = errors;if(errors === _errs90){if(errors === _errs90){if(!(typeof data.lastOverdraftInterestReviewDate === "string")){validate11.errors = [{instancePath:instancePath+"/lastOverdraftInterestReviewDate",schemaPath:"#/properties/lastOverdraftInterestReviewDate/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}}var valid0 = _errs90 === errors;}else {var valid0 = true;}if(valid0){if(data.lastSetToArrearsDate !== undefined){const _errs92 = errors;if(errors === _errs92){if(errors === _errs92){if(!(typeof data.lastSetToArrearsDate === "string")){validate11.errors = [{instancePath:instancePath+"/lastSetToArrearsDate",schemaPath:"#/properties/lastSetToArrearsDate/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}}var valid0 = _errs92 === errors;}else {var valid0 = true;}if(valid0){if(data.linkedSettlementAccountKeys !== undefined){let data45 = data.linkedSettlementAccountKeys;const _errs94 = errors;if(errors === _errs94){if(Array.isArray(data45)){var valid9 = true;const len0 = data45.length;for(let i0=0; i0<len0; i0++){const _errs96 = errors;if(typeof data45[i0] !== "string"){validate11.errors = [{instancePath:instancePath+"/linkedSettlementAccountKeys/" + i0,schemaPath:"#/properties/linkedSettlementAccountKeys/items/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid9 = _errs96 === errors;if(!valid9){break;}}}else {validate11.errors = [{instancePath:instancePath+"/linkedSettlementAccountKeys",schemaPath:"#/properties/linkedSettlementAccountKeys/type",keyword:"type",params:{type: "array"},message:"must be array"}];return false;}}var valid0 = _errs94 === errors;}else {var valid0 = true;}if(valid0){if(data.lockedDate !== undefined){const _errs98 = errors;if(errors === _errs98){if(errors === _errs98){if(!(typeof data.lockedDate === "string")){validate11.errors = [{instancePath:instancePath+"/lockedDate",schemaPath:"#/properties/lockedDate/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}}var valid0 = _errs98 === errors;}else {var valid0 = true;}if(valid0){if(data.maturityDate !== undefined){const _errs100 = errors;if(errors === _errs100){if(errors === _errs100){if(!(typeof data.maturityDate === "string")){validate11.errors = [{instancePath:instancePath+"/maturityDate",schemaPath:"#/properties/maturityDate/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}}var valid0 = _errs100 === errors;}else {var valid0 = true;}if(valid0){if(data.migrationEventKey !== undefined){const _errs102 = errors;if(typeof data.migrationEventKey !== "string"){validate11.errors = [{instancePath:instancePath+"/migrationEventKey",schemaPath:"#/properties/migrationEventKey/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid0 = _errs102 === errors;}else {var valid0 = true;}if(valid0){if(data.name !== undefined){const _errs104 = errors;if(typeof data.name !== "string"){validate11.errors = [{instancePath:instancePath+"/name",schemaPath:"#/properties/name/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid0 = _errs104 === errors;}else {var valid0 = true;}if(valid0){if(data.notes !== undefined){const _errs106 = errors;if(typeof data.notes !== "string"){validate11.errors = [{instancePath:instancePath+"/notes",schemaPath:"#/properties/notes/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid0 = _errs106 === errors;}else {var valid0 = true;}if(valid0){if(data.overdraftInterestSettings !== undefined){const _errs108 = errors;if(!(validate18(data.overdraftInterestSettings, {instancePath:instancePath+"/overdraftInterestSettings",parentData:data,parentDataProperty:"overdraftInterestSettings",rootData}))){vErrors = vErrors === null ? validate18.errors : vErrors.concat(validate18.errors);errors = vErrors.length;}var valid0 = _errs108 === errors;}else {var valid0 = true;}if(valid0){if(data.overdraftSettings !== undefined){let data53 = data.overdraftSettings;const _errs109 = errors;const _errs110 = errors;if(errors === _errs110){if(data53 && typeof data53 == "object" && !Array.isArray(data53)){if(data53.allowOverdraft !== undefined){const _errs113 = errors;if(typeof data53.allowOverdraft !== "boolean"){validate11.errors = [{instancePath:instancePath+"/overdraftSettings/allowOverdraft",schemaPath:"#/$defs/DepositAccountOverdraftSettings/properties/allowOverdraft/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"}];return false;}var valid11 = _errs113 === errors;}else {var valid11 = true;}if(valid11){if(data53.overdraftExpiryDate !== undefined){const _errs115 = errors;if(errors === _errs115){if(errors === _errs115){if(!(typeof data53.overdraftExpiryDate === "string")){validate11.errors = [{instancePath:instancePath+"/overdraftSettings/overdraftExpiryDate",schemaPath:"#/$defs/DepositAccountOverdraftSettings/properties/overdraftExpiryDate/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}}var valid11 = _errs115 === errors;}else {var valid11 = true;}if(valid11){if(data53.overdraftLimit !== undefined){let data56 = data53.overdraftLimit;const _errs117 = errors;if(!((typeof data56 == "number") && (isFinite(data56)))){validate11.errors = [{instancePath:instancePath+"/overdraftSettings/overdraftLimit",schemaPath:"#/$defs/DepositAccountOverdraftSettings/properties/overdraftLimit/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid11 = _errs117 === errors;}else {var valid11 = true;}}}}else {validate11.errors = [{instancePath:instancePath+"/overdraftSettings",schemaPath:"#/$defs/DepositAccountOverdraftSettings/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}var valid0 = _errs109 === errors;}else {var valid0 = true;}if(valid0){if(data.productTypeKey !== undefined){const _errs119 = errors;if(typeof data.productTypeKey !== "string"){validate11.errors = [{instancePath:instancePath+"/productTypeKey",schemaPath:"#/properties/productTypeKey/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid0 = _errs119 === errors;}else {var valid0 = true;}if(valid0){if(data.withholdingTaxSourceKey !== undefined){const _errs121 = errors;if(typeof data.withholdingTaxSourceKey !== "string"){validate11.errors = [{instancePath:instancePath+"/withholdingTaxSourceKey",schemaPath:"#/properties/withholdingTaxSourceKey/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid0 = _errs121 === errors;}else {var valid0 = true;}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}else {validate11.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}validate11.errors = vErrors;return errors === 0;}function validate10(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){let vErrors = null;let errors = 0;if(errors === 0){if(Array.isArray(data)){var valid0 = true;const len0 = data.length;for(let i0=0; i0<len0; i0++){const _errs1 = errors;if(!(validate11(data[i0], {instancePath:instancePath+"/" + i0,parentData:data,parentDataProperty:i0,rootData}))){vErrors = vErrors === null ? validate11.errors : vErrors.concat(validate11.errors);errors = vErrors.length;}var valid0 = _errs1 === errors;if(!valid0){break;}}}else {validate10.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "array"},message:"must be array"}];return false;}}validate10.errors = vErrors;return errors === 0;};validate.schema=schema11;