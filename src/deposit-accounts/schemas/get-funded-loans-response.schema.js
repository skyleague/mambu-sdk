/**
 * Generated by Ajv https://ajv.js.org/guide/managing-schemas.html#standalone-validation-code 
 * eslint-disable
 */
import {createRequire} from 'module';const require = createRequire(import.meta.url);"use strict";export const validate = validate10;export default validate10;const schema11 = {"$schema":"http://json-schema.org/draft-07/schema#","title":"getFundedLoansResponse","type":"array","items":{"$ref":"#/$defs/LoanAccountaf30"},"$defs":{"LoanAccountaf30":{"type":"object","title":"LoanAccountaf30","description":"Represents a loan account. A loan account defines the amount that your organization lends to a client. The terms and conditions of a loan account are defined by a loan product. In a loan account, Mambu stores all the information related to disbursements, repayments, interest rates, and withdrawals.","properties":{"accountState":{"title":"accountState","description":"The state of the loan account.","enum":["PARTIAL_APPLICATION","PENDING_APPROVAL","APPROVED","ACTIVE","ACTIVE_IN_ARREARS","CLOSED"]},"prepaymentSettings":{"title":"prepaymentSettings","$ref":"#/$defs/PrepaymentSettingsaf30"},"migrationEventKey":{"type":"string","title":"migrationEventKey","description":"The migration event encoded key associated with this loan account. If this account was imported, track which 'migration event' they came from."},"lastSetToArrearsDate":{"type":"string","title":"lastSetToArrearsDate","description":"The date when the loan account was set to last standing or null; if never set, it is expressed in your organization time format and time zone.","format":"date-time"},"notes":{"type":"string","title":"notes","description":"The notes about this loan account."},"disbursementDetails":{"title":"disbursementDetails","$ref":"#/$defs/DisbursementDetailsaf30"},"redrawSettings":{"title":"redrawSettings","$ref":"#/$defs/LoanAccountRedrawSettingsaf30"},"plannedInstallmentFees":{"type":"array","title":"plannedInstallmentFees","description":"The list with manual fees planned on the installments of the loan account.","items":{"$ref":"#/$defs/PlannedInstallmentFeeaf30"}},"daysInArrears":{"type":"integer","title":"daysInArrears","description":"The number of days the loan account is in arrears."},"accountSubState":{"title":"accountSubState","description":"A second state for the loan account. Beside the account state, a second substate is sometimes necessary to provide more information about the exact lifecycle state of a loan account.For example, even if the account state of a loan account is `ACTIVE`, it can also have a substate of `LOCKED`.","enum":["PARTIALLY_DISBURSED","LOCKED","LOCKED_CAPPING","REFINANCED","RESCHEDULED","WITHDRAWN","REPAID","REJECTED","WRITTEN_OFF","TERMINATED"]},"loanName":{"type":"string","title":"loanName","description":"The name of the loan account."},"terminationDate":{"type":"string","title":"terminationDate","description":"The date this loan account was terminated.","format":"date-time"},"interestSettings":{"title":"interestSettings","$ref":"#/$defs/InterestSettingsaf30"},"assets":{"type":"array","title":"assets","description":"The list of assets associated with the current loan account.","items":{"$ref":"#/$defs/Assetaf30"}},"lastInterestReviewDate":{"type":"string","title":"lastInterestReviewDate","description":"The date the interest was reviewed last time, stored in the organization time format and time zone.","format":"date-time"},"id":{"type":"string","title":"id","description":"The ID of the loan account, it can be generated and customized, and must be unique."},"assignedUserKey":{"type":"string","title":"assignedUserKey","description":"The key of the user this loan account is assigned to."},"lockedAccountTotalDueType":{"title":"lockedAccountTotalDueType","description":"The locked account total due type.","enum":["BALANCE_AMOUNT","DUE_AMOUNT_ON_LATE_INSTALLMENTS"]},"futurePaymentsAcceptance":{"title":"futurePaymentsAcceptance","description":"Shows whether the repayment transactions with entry date set in the future are allowed or not for this loan account.","enum":["NO_FUTURE_PAYMENTS","ACCEPT_FUTURE_PAYMENTS","ACCEPT_OVERPAYMENTS"]},"originalAccountKey":{"type":"string","title":"originalAccountKey","description":"The key of the original rescheduled or refinanced loan account."},"lockedOperations":{"type":"array","title":"lockedOperations","description":"A list with operations which are locked when the account is in the AccountState.LOCKED substate.","items":{"enum":["APPLY_INTEREST","APPLY_FEES","APPLY_PENALTIES"]}},"accruedInterest":{"type":"number","title":"accruedInterest","description":"The amount of interest that has been accrued in the loan account."},"accruedPenalty":{"type":"number","title":"accruedPenalty","description":"The accrued penalty, represents the amount of penalty that has been accrued in the loan account."},"creationDate":{"type":"string","title":"creationDate","description":"The date the loan account was created.","format":"date-time"},"modifyInterestForFirstInstallment":{"type":"boolean","title":"modifyInterestForFirstInstallment","description":"Adjust the interest for the first repayment when the first repayment period is different than the repayment frequency"},"assignedCentreKey":{"type":"string","title":"assignedCentreKey","description":"The key of the centre this account is assigned to."},"tranches":{"type":"array","title":"tranches","description":"The list of disbursement tranches available for the loan account.","items":{"$ref":"#/$defs/LoanTrancheaf30"}},"approvedDate":{"type":"string","title":"approvedDate","description":"The date the loan account was approved.","format":"date-time"},"taxRate":{"type":"number","title":"taxRate","description":"The tax rate."},"lastTaxRateReviewDate":{"type":"string","title":"lastTaxRateReviewDate","description":"The date the tax rate on the loan account was last checked, expressed in the organization time format and time zone.","format":"date-time"},"interestFromArrearsAccrued":{"type":"number","title":"interestFromArrearsAccrued","description":"The amount of interest from arrears that has been accrued in the loan account."},"scheduleSettings":{"title":"scheduleSettings","$ref":"#/$defs/ScheduleSettingsaf30"},"daysLate":{"type":"integer","title":"daysLate","description":"The number of days a repayment for the loan account is late."},"paymentMethod":{"title":"paymentMethod","description":"The interest payment method that determines whether the payments are made horizontally (on the repayments) or vertically (on the loan account).","enum":["HORIZONTAL","VERTICAL"]},"accountHolderKey":{"type":"string","title":"accountHolderKey","description":"The encoded key of the account holder."},"latePaymentsRecalculationMethod":{"title":"latePaymentsRecalculationMethod","description":"The overdue payments recalculation method inherited from the loan product on which this loan account is based.","enum":["OVERDUE_INSTALLMENTS_INCREASE","LAST_INSTALLMENT_INCREASE"]},"fundingSources":{"type":"array","title":"fundingSources","description":"The list of funds associated with the loan account.","items":{"$ref":"#/$defs/InvestorFundaf30"}},"accountHolderType":{"title":"accountHolderType","description":"The type of the account holder.","enum":["CLIENT","GROUP"]},"arrearsTolerancePeriod":{"type":"integer","title":"arrearsTolerancePeriod","description":"The arrears tolerance (period or day of month) depending on the product settings."},"lastInterestAppliedDate":{"type":"string","title":"lastInterestAppliedDate","description":"The date of the last time the loan account had interest applied (stored to interest balance), expressed in the organization time format and time zone.","format":"date-time"},"rescheduledAccountKey":{"type":"string","title":"rescheduledAccountKey","description":"The key pointing to where this loan account was rescheduled or refinanced to. This value is only not null if rescheduled."},"paymentHolidaysAccruedInterest":{"type":"number","title":"paymentHolidaysAccruedInterest","description":"The amount of interest that has been accrued during payment holidays in the loan account."},"activationTransactionKey":{"type":"string","title":"activationTransactionKey","description":"The encoded key of the transaction that activated the loan account."},"interestAccruedInBillingCycle":{"type":"number","title":"interestAccruedInBillingCycle","description":"The interest that is accrued in the current billing cycle."},"assignedBranchKey":{"type":"string","title":"assignedBranchKey","description":"The key of the branch this loan account is assigned to. The branch is set to unassigned if no branch field is set."},"balances":{"title":"balances","$ref":"#/$defs/Balancesaf30"},"creditArrangementKey":{"type":"string","title":"creditArrangementKey","description":"The key to the line of credit where this account is registered to."},"interestCommission":{"type":"number","title":"interestCommission","description":"The value of the interest booked by the organization from the accounts funded by investors. Null if the funds are not enabled."},"encodedKey":{"type":"string","title":"encodedKey","description":"The encoded key of the loan account, it is auto generated, and must be unique."},"currency":{"title":"currency","$ref":"#/$defs/Currencyaf30"},"lastAccountAppraisalDate":{"type":"string","title":"lastAccountAppraisalDate","description":"The date the loan account has last been evaluated for interest, principal, fees, and penalties calculations expressed in the organization time format and time zone.","format":"date-time"},"penaltySettings":{"title":"penaltySettings","$ref":"#/$defs/PenaltySettingsaf30"},"settlementAccountKey":{"type":"string","title":"settlementAccountKey","description":"The encoded key of the settlement account."},"lastModifiedDate":{"type":"string","title":"lastModifiedDate","description":"The last date the loan was updated.","format":"date-time"},"principalPaymentSettings":{"title":"principalPaymentSettings","$ref":"#/$defs/PrincipalPaymentAccountSettingsaf30"},"lastLockedDate":{"type":"string","title":"lastLockedDate","description":"The date when the loan account was set for the last time in the `LOCKED` state expressed in the organization time format and time zone. If null, the account is not locked anymore.","format":"date-time"},"loanAmount":{"type":"number","title":"loanAmount","description":"The loan amount."},"closedDate":{"type":"string","title":"closedDate","description":"The date the loan was closed.","format":"date-time"},"productTypeKey":{"type":"string","title":"productTypeKey","description":"The key for the type of loan product that this loan account is based on."},"allowOffset":{"type":"boolean","title":"allowOffset","description":"DEPRECATED - Will always be false."},"guarantors":{"type":"array","title":"guarantors","description":"The list of guarantees associated with the loan account.","items":{"$ref":"#/$defs/Guarantoraf30"}},"accountArrearsSettings":{"title":"accountArrearsSettings","$ref":"#/$defs/AccountArrearsSettingsaf30"}},"required":["scheduleSettings","accountHolderKey","accountHolderType","loanAmount","productTypeKey"],"additionalProperties":true},"PrepaymentSettingsaf30":{"type":"object","title":"PrepaymentSettingsaf30","description":"The prepayment settings, holds all prepayment properties.","properties":{"elementsRecalculationMethod":{"title":"elementsRecalculationMethod","description":"The elements recalculation method, indicates how the declining balance with equal installments repayments are recalculated.","enum":["PRINCIPAL_EXPECTED_FIXED","TOTAL_EXPECTED_FIXED"]},"principalPaidInstallmentStatus":{"title":"principalPaidInstallmentStatus","description":"Installment status for the case when principal is paid off (copied from loan product).","enum":["PARTIALLY_PAID","PAID","ORIGINAL_TOTAL_EXPECTED_PAID"]},"prepaymentRecalculationMethod":{"title":"prepaymentRecalculationMethod","description":"Prepayment recalculation method copied from the loan product on which this account is based.","enum":["NO_RECALCULATION","RESCHEDULE_REMAINING_REPAYMENTS","RECALCULATE_SCHEDULE_KEEP_SAME_NUMBER_OF_TERMS","RECALCULATE_SCHEDULE_KEEP_SAME_PRINCIPAL_AMOUNT","RECALCULATE_SCHEDULE_KEEP_SAME_TOTAL_REPAYMENT_AMOUNT","REDUCE_AMOUNT_PER_INSTALLMENT","REDUCE_NUMBER_OF_INSTALLMENTS","REDUCE_NUMBER_OF_INSTALLMENTS_NEW"]},"applyInterestOnPrepaymentMethod":{"title":"applyInterestOnPrepaymentMethod","description":"Apply interest on prepayment method copied from loan product on which this account is based.","enum":["AUTOMATIC","MANUAL"]}},"additionalProperties":true},"DisbursementDetailsaf30":{"type":"object","title":"DisbursementDetailsaf30","description":"The the disbursement details it holds the information related to the disbursement details as disbursement date, first repayment date, disbursement fees.","properties":{"transactionDetails":{"title":"transactionDetails","$ref":"#/$defs/LoanTransactionDetailsaf30"},"expectedDisbursementDate":{"type":"string","title":"expectedDisbursementDate","description":"The date of the expected disbursement.Stored as Organization Time.","format":"date-time"},"fees":{"type":"array","title":"fees","description":"List of fees that should be applied at the disbursement time.","items":{"$ref":"#/$defs/CustomPredefinedFeeaf30"}},"firstRepaymentDate":{"type":"string","title":"firstRepaymentDate","description":"The date of the expected first repayment. Stored as Organization Time.","format":"date-time"},"disbursementDate":{"type":"string","title":"disbursementDate","description":"The activation date, the date when the disbursement actually took place.","format":"date-time"},"encodedKey":{"type":"string","title":"encodedKey","description":"The encoded key of the disbursement details, auto generated, unique"}},"additionalProperties":true},"LoanTransactionDetailsaf30":{"type":"object","title":"LoanTransactionDetailsaf30","description":"Represents the loan transaction details.","properties":{"encodedKey":{"type":"string","title":"encodedKey","description":"The encoded key of the entity, generated, globally unique"},"internalTransfer":{"type":"boolean","title":"internalTransfer","description":"Whether the transaction was transferred between loans or deposit accounts"},"transactionChannelKey":{"type":"string","title":"transactionChannelKey","description":"The encoded key of the transaction channel associated with the transaction details."},"transactionChannelId":{"type":"string","title":"transactionChannelId","description":"The ID of the transaction channel associated with the transaction details."},"targetDepositAccountKey":{"type":"string","title":"targetDepositAccountKey","description":"In case of a transaction to a deposit account this represent the deposit account key to which the transaction was made."}},"additionalProperties":true},"CustomPredefinedFeeaf30":{"type":"object","title":"CustomPredefinedFeeaf30","description":"The custom predefined fees, they may be used as the expected predefined fees that will be applied on the disbursement.","properties":{"predefinedFeeEncodedKey":{"type":"string","title":"predefinedFeeEncodedKey","description":"The encoded key of the predefined fee"},"encodedKey":{"type":"string","title":"encodedKey","description":"The encoded key of the custom predefined fee, auto generated, unique."},"amount":{"type":"number","title":"amount","description":"The amount of the custom fee."},"percentage":{"type":"number","title":"percentage","description":"The percentage of the custom fee."}},"additionalProperties":true},"LoanAccountRedrawSettingsaf30":{"type":"object","title":"LoanAccountRedrawSettingsaf30","description":"Represents the redraw settings for a loan account.","properties":{"restrictNextDueWithdrawal":{"type":"boolean","title":"restrictNextDueWithdrawal","description":"`TRUE` if withdrawing amounts that reduce the next due instalment repayment is restricted, `FALSE` otherwise."}},"required":["restrictNextDueWithdrawal"],"additionalProperties":true},"PlannedInstallmentFeeaf30":{"type":"object","title":"PlannedInstallmentFeeaf30","description":"The planned fee details holds the information related to the installment key, predefined fee key and amount","properties":{"installmentNumber":{"type":"integer","title":"installmentNumber","description":"The number of the installment on which the predefined fee is planned. It is used only in the case when fees are created at the same time with the loan account creation or during preview schedule, before account creation, otherwise this should be empty and installmentKey will be used to identify an installment."},"amount":{"type":"number","title":"amount","description":"The amount of the planned fee."},"applyOnDate":{"type":"string","title":"applyOnDate","description":"The date when a planned fee should be applied, overriding installment's due date. It should match the interval of the installment. If it belong to first installment, it should be between disbursement date and installment due date.","format":"date-time"},"predefinedFeeKey":{"type":"string","title":"predefinedFeeKey","description":"The encoded key of the predefined fee which is planned."},"encodedKey":{"type":"string","title":"encodedKey","description":"The encoded key of the planned installment fee, auto generated, unique."},"installmentKey":{"type":"string","title":"installmentKey","description":"The encoded key of the installment on which the predefined fee is planned."}},"required":["predefinedFeeKey"],"additionalProperties":true},"InterestSettingsaf30":{"type":"object","title":"InterestSettingsaf30","description":"The interest settings, holds all the properties regarding interests for the loan account.","properties":{"interestRateReviewUnit":{"title":"interestRateReviewUnit","description":"The interest rate review unit. Defines the interest rate update frequency measurement unit.","enum":["DAYS","WEEKS","MONTHS"]},"interestRate":{"type":"number","title":"interestRate","description":"The interest rate. Represents the interest rate for the loan account. The interest on loans is accrued on a daily basis, which allows charging the clients only for the days they actually used the loan amount."},"interestRateSource":{"title":"interestRateSource","description":"The interest rate source. Represents the interest calculation method: fixed or (interest spread + active organization index interest rate)","enum":["FIXED_INTEREST_RATE","INDEX_INTEREST_RATE"]},"interestApplicationMethod":{"title":"interestApplicationMethod","description":"The interest application method. Represents the interest application method that determines whether the interest gets applied on the account's disbursement or on each repayment.","enum":["AFTER_DISBURSEMENT","REPAYMENT_DUE_DATE"]},"interestChargeFrequency":{"title":"interestChargeFrequency","description":"The interest change frequency. Holds the possible values for how often is interest charged on loan or deposit accounts","enum":["ANNUALIZED","EVERY_MONTH","EVERY_FOUR_WEEKS","EVERY_WEEK","EVERY_DAY","EVERY_X_DAYS"]},"interestType":{"title":"interestType","description":"The possible values for how we compute and apply the interest","enum":["SIMPLE_INTEREST","CAPITALIZED_INTEREST","COMPOUNDING_INTEREST"]},"accrueInterestAfterMaturity":{"type":"boolean","title":"accrueInterestAfterMaturity","description":"The accrue interest after maturity. If the product support this option, specify if the interest should be accrued after the account maturity date."},"interestBalanceCalculationMethod":{"title":"interestBalanceCalculationMethod","description":"The interest balance calculation method. Represents the option which determines the way the balance for the account's interest is computed.","enum":["ONLY_PRINCIPAL","PRINCIPAL_AND_INTEREST"]},"interestSpread":{"type":"number","title":"interestSpread","description":"Interest to be added to active organization index interest rate in order to find out actual interest rate"},"interestCalculationMethod":{"title":"interestCalculationMethod","description":"The interest calculation method. Holds the type of interest calculation method.","enum":["FLAT","DECLINING_BALANCE","DECLINING_BALANCE_DISCOUNTED"]},"interestRateReviewCount":{"type":"integer","title":"interestRateReviewCount","description":"Interest rate update frequency unit count."},"accrueLateInterest":{"type":"boolean","title":"accrueLateInterest","description":"Indicates whether late interest is accrued for this loan account"},"accountInterestRateSettings":{"type":"array","title":"accountInterestRateSettings","description":"Adjustable interest rates settings for loan account","items":{"$ref":"#/$defs/AccountInterestRateSettingsaf30"}}},"additionalProperties":true},"AccountInterestRateSettingsaf30":{"type":"object","title":"AccountInterestRateSettingsaf30","description":"Adjustable interest rates settings for loan account","properties":{"interestRateReviewUnit":{"title":"interestRateReviewUnit","description":"Interest rate review frequency measurement unit. Valid only for index interest rate.","enum":["DAYS","WEEKS","MONTHS"]},"interestRate":{"type":"number","title":"interestRate","description":"Interest rate value."},"interestSpread":{"type":"number","title":"interestSpread","description":"Interest spread value."},"interestRateSource":{"title":"interestRateSource","description":"Interest calculation method: fixed or indexed(interest spread + active organization index interest rate)","enum":["FIXED_INTEREST_RATE","INDEX_INTEREST_RATE"]},"interestRateReviewCount":{"type":"integer","title":"interestRateReviewCount","description":"Interest rate review frequency unit count. Valid only for index interest rate."},"indexSourceKey":{"type":"string","title":"indexSourceKey","description":"Index rate source key."},"interestRateCeilingValue":{"type":"number","title":"interestRateCeilingValue","description":"Maximum value allowed for index based interest rate. Valid only for index interest rate."},"encodedKey":{"type":"string","title":"encodedKey","description":"The encoded key of the interest rate settings, auto generated, unique"},"validFrom":{"type":"string","title":"validFrom","description":"Date since an interest rate is valid","format":"date-time"},"interestRateFloorValue":{"type":"number","title":"interestRateFloorValue","description":"Minimum value allowed for index based interest rate. Valid only for index interest rate."}},"required":["interestRateSource","validFrom"],"additionalProperties":true},"Assetaf30":{"type":"object","title":"Assetaf30","description":"Asset, holds information about a client asset entry.","properties":{"amount":{"type":"number","title":"amount","description":"The amount used by the client for the guaranty"},"originalAmount":{"type":"number","title":"originalAmount","description":"The original amount used by the client for a collateral asset"},"depositAccountKey":{"type":"string","title":"depositAccountKey","description":"The key of the deposit account used by the guarantor (populated when the guaranty type is GUARANTOR). It can be null."},"assetName":{"type":"string","title":"assetName","description":"The name of a value the client guarantees with (populated when the guaranty type is ASSET)"},"encodedKey":{"type":"string","title":"encodedKey","description":"The encoded key of the security, auto generated, unique."},"guarantorKey":{"type":"string","title":"guarantorKey","description":"The key of the client/group used as the guarantor."},"guarantorType":{"title":"guarantorType","description":"The type of the guarantor (client/group)","enum":["CLIENT","GROUP"]},"originalCurrency":{"title":"originalCurrency","$ref":"#/$defs/Currencyaf30"}},"required":["amount","assetName"],"additionalProperties":true},"Currencyaf30":{"type":"object","title":"Currencyaf30","description":"Represents a currency eg. USD, EUR.","properties":{"currencyCode":{"type":"string","title":"currencyCode","description":"Currency code for NON_FIAT currency."},"code":{"title":"code","description":"Fiat(ISO-4217) currency code or NON_FIAT for non fiat currencies.","enum":["AED","AFN","ALL","AMD","ANG","AOA","ARS","AUD","AWG","AZN","BAM","BBD","BDT","BGN","BHD","BIF","BMD","BND","BOB","BOV","BRL","BSD","BTN","BWP","BYR","BYN","BZD","CAD","CDF","CHE","CHF","CHW","CLF","CLP","CNY","COP","COU","CRC","CUC","CUP","CVE","CZK","DJF","DKK","DOP","DZD","EGP","ERN","ETB","EUR","FJD","FKP","GBP","GEL","GHS","GIP","GMD","GNF","GTQ","GYD","HKD","HNL","HRK","HTG","HUF","IDR","ILS","INR","IQD","IRR","ISK","JMD","JOD","JPY","KES","KGS","KHR","KMF","KPW","KRW","KWD","KYD","KZT","LAK","LBP","LKR","LRD","LSL","LTL","LVL","LYD","MAD","MDL","MGA","MKD","MMK","MNT","MOP","MRO","MRU","MUR","MVR","MWK","MXN","MXV","MYR","MZN","NAD","NGN","NIO","NOK","NPR","NZD","OMR","PAB","PEN","PGK","PHP","PKR","PLN","PYG","QAR","RON","RSD","RUB","RWF","SAR","SBD","SCR","SDG","SEK","SGD","SHP","SLL","SOS","SRD","STD","STN","SVC","SYP","SZL","THB","TJS","TMT","TND","TOP","TRY","TTD","TWD","TZS","UAH","UGX","USD","USN","UYI","UYU","UYW","UZS","VED","VEF","VES","VND","VUV","WST","XAG","XAU","XAF","XBA","XBB","XBC","XBD","XCD","XDR","XOF","XPD","XPF","XPT","XSU","XTS","XUA","XXX","YER","ZAR","ZMK","ZWL","ZMW","SSP","NON_FIAT"]}},"additionalProperties":true},"LoanTrancheaf30":{"type":"object","title":"LoanTrancheaf30","description":"In some cases organizations may approve loans but not disburse the full amount initially. They would like to spread the disbursement (and risk) over time. Likewise for the client, they may not need the full loan amount up front. They may want to have a loan to buy some equipment for their business but will make one purchase today and another purchase in a few months.  In these cases, they don't need the full amount and wouldn't want to pay interest on cash they don't need yet. A solution for this matter is the usage of disbursement in tranches. This class holds the information required for one of this tranche. ","properties":{"encodedKey":{"type":"string","title":"encodedKey","description":"The encoded key of the transaction details , auto generated, unique."},"amount":{"type":"number","title":"amount","description":"The amount this tranche has available for disburse"},"fees":{"type":"array","title":"fees","description":"Fees that are associated with this tranche","items":{"$ref":"#/$defs/CustomPredefinedFeeaf30"}},"disbursementDetails":{"title":"disbursementDetails","$ref":"#/$defs/TrancheDisbursementDetailsaf30"},"trancheNumber":{"type":"integer","title":"trancheNumber","description":"Index indicating the tranche number"}},"required":["amount"],"additionalProperties":true},"TrancheDisbursementDetailsaf30":{"type":"object","title":"TrancheDisbursementDetailsaf30","description":"The disbursement details regarding a loan tranche.","properties":{"expectedDisbursementDate":{"type":"string","title":"expectedDisbursementDate","description":"The date when this tranche is supposed to be disbursed (as Organization Time)","format":"date-time"},"disbursementTransactionKey":{"type":"string","title":"disbursementTransactionKey","description":"The key of the disbursement transaction logged when this tranche was disbursed. This field will be null until the tranche disbursement"}},"additionalProperties":true},"ScheduleSettingsaf30":{"type":"object","title":"ScheduleSettingsaf30","description":"The schedule settings, holds all schedule properties.","properties":{"gracePeriod":{"type":"integer","title":"gracePeriod","description":"The grace period. Represents the grace period for loan repayment - in number of installments."},"periodicPayment":{"type":"number","title":"periodicPayment","description":"The periodic payment amount for the accounts which have balloon payments or Reduce Number of Installments and Optimized Payments"},"repaymentScheduleMethod":{"title":"repaymentScheduleMethod","description":"The repayment schedule method. Represents the method that determines whether the schedule will be fixed all over the loan account's life cycle or will be dynamically recomputed when required.","enum":["NONE","FIXED","DYNAMIC"]},"paymentPlan":{"type":"array","title":"paymentPlan","description":"A list of periodic payments for the current loan account.","items":{"$ref":"#/$defs/PeriodicPaymentaf30"}},"shortMonthHandlingMethod":{"title":"shortMonthHandlingMethod","description":"The short handling method. Determines how to handle the short months, if they select a fixed day of month > 28. Will be null if no such date is selected and also for the Interval methodology. Only available if the Repayment Methodology is FIXED_DAYS_OF_MONTH.","enum":["LAST_DAY_IN_MONTH","FIRST_DAY_OF_NEXT_MONTH"]},"repaymentInstallments":{"type":"integer","title":"repaymentInstallments","description":"The repayment installments. Represents how many installments are required to pay back the loan."},"gracePeriodType":{"title":"gracePeriodType","description":"The grace period type. Representing the type of grace period which is possible for a loan account.","enum":["NONE","PAY_INTEREST_ONLY","INTEREST_FORGIVENESS"]},"principalRepaymentInterval":{"type":"integer","title":"principalRepaymentInterval","description":"The principal repayment interval. Indicates the interval of repayments that the principal has to be paid."},"hasCustomSchedule":{"type":"boolean","title":"hasCustomSchedule","description":"Flag used when the repayments schedule for the current account was determined by the user, by editing the due dates or the principal due"},"repaymentPeriodUnit":{"title":"repaymentPeriodUnit","description":"The repayment period unit. Represents the frequency of loan repayment.","enum":["DAYS","WEEKS","MONTHS","YEARS"]},"previewSchedule":{"title":"previewSchedule","$ref":"#/$defs/RevolvingAccountSettingsaf30"},"fixedDaysOfMonth":{"type":"array","title":"fixedDaysOfMonth","description":"Specifies the days of the month when the repayment due dates should be. Only available if the Repayment Methodology is FIXED_DAYS_OF_MONTH.","items":{"type":"integer"}},"billingCycle":{"title":"billingCycle","$ref":"#/$defs/BillingCycleDaysaf30"},"scheduleDueDatesMethod":{"title":"scheduleDueDatesMethod","description":"The schedule due dates method. Represents the methodology used by this account to compute the due dates of the repayments.","enum":["INTERVAL","FIXED_DAYS_OF_MONTH"]},"repaymentPeriodCount":{"type":"integer","title":"repaymentPeriodCount","description":"The repayment period count. Represents how often the loan is to be repaid: stored based on the type repayment option."},"defaultFirstRepaymentDueDateOffset":{"type":"integer","title":"defaultFirstRepaymentDueDateOffset","description":"The default first repayment due date offset, indicates how many days the first repayment due date should be extended(all other due dates from the schedule are relative to first repayment due date - they will also be affected by the offset)"}},"required":["gracePeriod"],"additionalProperties":true},"PeriodicPaymentaf30":{"type":"object","title":"PeriodicPaymentaf30","description":"For fixed term loans there is the possibility to define a payment plan. A payment plan consists of multiple periodic payments. This class holds information about a periodic payment.","properties":{"toInstallment":{"type":"integer","title":"toInstallment","description":"The installment's position up to which the PMT will be used"},"encodedKey":{"type":"string","title":"encodedKey","description":"The encoded key of the periodic payment, auto generated, unique."},"amount":{"type":"number","title":"amount","description":"The PMT value used in periodic payment"}},"required":["toInstallment","amount"],"additionalProperties":true},"RevolvingAccountSettingsaf30":{"type":"object","title":"RevolvingAccountSettingsaf30","description":"The number of previewed instalments for an account","properties":{"numberOfPreviewedInstalments":{"type":"integer","title":"numberOfPreviewedInstalments","description":"The number of previewed instalments"}},"additionalProperties":true},"BillingCycleDaysaf30":{"type":"object","title":"BillingCycleDaysaf30","description":"Defines the billing cycles settings for a loan account","properties":{"days":{"type":"array","title":"days","description":"The billing cycle start days in case it is enabled","items":{"type":"integer"},"uniqueItems":true}},"additionalProperties":true},"InvestorFundaf30":{"type":"object","title":"InvestorFundaf30","description":"Contains the details about an investor fund including fields like encoded key, guarantor type, amount and guarantor key","properties":{"amount":{"type":"number","title":"amount","description":"The amount used by the client for the guaranty"},"interestCommission":{"type":"number","title":"interestCommission","description":"The constraint minimum value"},"depositAccountKey":{"type":"string","title":"depositAccountKey","description":"The key of the deposit account used by the guarantor (populated when the guaranty type is GUARANTOR). It can be null."},"assetName":{"type":"string","title":"assetName","description":"The name of a value the client guarantees with (populated when the guaranty type is ASSET)"},"encodedKey":{"type":"string","title":"encodedKey","description":"The encoded key of the entity, generated, globally unique"},"id":{"type":"string","title":"id","description":"Investor fund unique identifier. All versions of an investor fund will have same id."},"guarantorKey":{"type":"string","title":"guarantorKey","description":"The key of the client/group used as the guarantor."},"guarantorType":{"title":"guarantorType","description":"The type of the guarantor (client/group)","enum":["CLIENT","GROUP"]},"sharePercentage":{"type":"number","title":"sharePercentage","description":"Percentage of loan shares this investor owns"}},"required":["amount","guarantorKey","guarantorType"],"additionalProperties":true},"Balancesaf30":{"type":"object","title":"Balancesaf30","description":"The loan account balance details.","properties":{"interestFromArrearsPaid":{"type":"number","title":"interestFromArrearsPaid","description":"The interest from arrears paid, indicates total interest from arrears paid into the account."},"principalDue":{"type":"number","title":"principalDue","description":"The principal due, indicates how much principal it's due at this moment."},"interestBalance":{"type":"number","title":"interestBalance","description":"Represents the total interest owed by the client (total interest applied for account minus interest paid)."},"holdBalance":{"type":"number","title":"holdBalance","description":"The sum of all the authorization hold amounts on this account."},"principalPaid":{"type":"number","title":"principalPaid","description":"The principal paid, holds the value of the total paid into the account."},"penaltyDue":{"type":"number","title":"penaltyDue","description":"The penalty due. Represents the total penalty amount due for the account."},"feesBalance":{"type":"number","title":"feesBalance","description":"The fees balance. Represents the total fees expected to be paid on this account at a given moment."},"penaltyBalance":{"type":"number","title":"penaltyBalance","description":"The penalty balance. Represents the total penalty expected to be paid on this account at a given moment."},"redrawBalance":{"type":"number","title":"redrawBalance","description":"The total redraw amount owned by the client, from now on."},"interestFromArrearsBalance":{"type":"number","title":"interestFromArrearsBalance","description":"The interest from arrears balance. Indicates interest from arrears owned by the client, from now on. (total interest from arrears accrued for account - interest from arrears paid)."},"principalBalance":{"type":"number","title":"principalBalance","description":"The total principal owned by the client, from now on (principal disbursed - principal paid)."},"interestDue":{"type":"number","title":"interestDue","description":"The interest due. Indicates how much interest it's due for the account at this moment."},"penaltyPaid":{"type":"number","title":"penaltyPaid","description":"The Penalty paid. Represents the total penalty amount paid for the account."},"feesPaid":{"type":"number","title":"feesPaid","description":"The fees paid. Represents the total fees paid for the account."},"interestFromArrearsDue":{"type":"number","title":"interestFromArrearsDue","description":"The interest from arrears due. Indicates how much interest from arrears it's due for the account at this moment."},"feesDue":{"type":"number","title":"feesDue","description":"The fees due. Representing the total fees due for the account."},"interestPaid":{"type":"number","title":"interestPaid","description":"The interest paid, indicates total interest paid into the account."}},"additionalProperties":true},"PenaltySettingsaf30":{"type":"object","title":"PenaltySettingsaf30","description":"The penalty settings, holds all the fields regarding penalties","properties":{"loanPenaltyCalculationMethod":{"title":"loanPenaltyCalculationMethod","description":"The last penalty calculation method, represents on what amount are the penalties calculated.","enum":["NONE","OVERDUE_BALANCE","OVERDUE_BALANCE_AND_INTEREST","OUTSTANDING_PRINCIPAL"]},"penaltyRate":{"type":"number","title":"penaltyRate","description":"The penalty rate, represents the rate (in percent) which is charged as a penalty."}},"additionalProperties":true},"PrincipalPaymentAccountSettingsaf30":{"type":"object","title":"PrincipalPaymentAccountSettingsaf30","description":"The principal payment account settings, holds the required information for the principal payment process of an account.","properties":{"includeInterestInFloorAmount":{"type":"boolean","title":"includeInterestInFloorAmount","description":"Boolean flag, if true, the interest will be included along with the principal in the repayment floor amount, for a revolving credit account"},"totalDuePayment":{"title":"totalDuePayment","description":"The method of total due payment for revolving credit","enum":["FLAT","OUTSTANDING_PRINCIPAL_PERCENTAGE","PRINCIPAL_PERCENTAGE_LAST_DISB","TOTAL_BALANCE_PERCENTAGE","TOTAL_BALANCE_FLAT","TOTAL_PRINCIPAL_PERCENTAGE"]},"amount":{"type":"number","title":"amount","description":"Fixed amount for being used for the repayments principal due."},"principalFloorValue":{"type":"number","title":"principalFloorValue","description":"The minimum principal due amount a repayment made with this settings can have"},"principalPaymentMethod":{"title":"principalPaymentMethod","description":"The method of principal payment for revolving credit.","enum":["FLAT","OUTSTANDING_PRINCIPAL_PERCENTAGE","PRINCIPAL_PERCENTAGE_LAST_DISB","TOTAL_BALANCE_PERCENTAGE","TOTAL_BALANCE_FLAT","TOTAL_PRINCIPAL_PERCENTAGE"]},"percentage":{"type":"number","title":"percentage","description":"Percentage of principal amount used for the repayments principal due."},"includeFeesInFloorAmount":{"type":"boolean","title":"includeFeesInFloorAmount","description":"Boolean flag, if true, the fees will be included along with the principal in the repayment floor amount, for a revolving credit account"},"encodedKey":{"type":"string","title":"encodedKey","description":"The encoded key of the principal payment base settings, auto generated, unique."},"totalDueAmountFloor":{"type":"number","title":"totalDueAmountFloor","description":"The minimum total due amount a repayment made with this settings can have"},"principalCeilingValue":{"type":"number","title":"principalCeilingValue","description":"The maximum principal due amount a repayment made with this settings can have"}},"additionalProperties":true},"Guarantoraf30":{"type":"object","title":"Guarantoraf30","description":"Guarantor, holds information about a client guaranty entry. It can be defined based on another client which guarantees (including or not a savings account whether it is a client of the organization using Mambu or not) or based on a value the client holds (an asset)","properties":{"amount":{"type":"number","title":"amount","description":"The amount used by the client for the guaranty"},"depositAccountKey":{"type":"string","title":"depositAccountKey","description":"The key of the deposit account used by the guarantor (populated when the guaranty type is GUARANTOR). It can be null."},"assetName":{"type":"string","title":"assetName","description":"The name of a value the client guarantees with (populated when the guaranty type is ASSET)"},"encodedKey":{"type":"string","title":"encodedKey","description":"The encoded key of the security, auto generated, unique."},"guarantorKey":{"type":"string","title":"guarantorKey","description":"The key of the client/group used as the guarantor."},"guarantorType":{"title":"guarantorType","description":"The type of the guarantor (client/group)","enum":["CLIENT","GROUP"]}},"required":["amount","guarantorKey","guarantorType"],"additionalProperties":true},"AccountArrearsSettingsaf30":{"type":"object","title":"AccountArrearsSettingsaf30","description":"The account arrears settings, holds the required information for the arrears settings of an account.","properties":{"monthlyToleranceDay":{"type":"integer","title":"monthlyToleranceDay","description":"Defines monthly arrears tolerance day value."},"toleranceFloorAmount":{"type":"number","title":"toleranceFloorAmount","description":"The tolerance floor amount."},"nonWorkingDaysMethod":{"title":"nonWorkingDaysMethod","description":"Shows whether the non working days are taken in consideration or not when applying penaltees/late fees or when setting an account into arrears","enum":["INCLUDED","EXCLUDED"]},"tolerancePercentageOfOutstandingPrincipal":{"type":"number","title":"tolerancePercentageOfOutstandingPrincipal","description":"Defines the arrears tolerance amount."},"tolerancePeriod":{"type":"integer","title":"tolerancePeriod","description":"Defines the arrears tolerance period value."},"encodedKey":{"type":"string","title":"encodedKey","description":"The encoded key of the arrears base settings, auto generated, unique."},"toleranceCalculationMethod":{"title":"toleranceCalculationMethod","description":"Defines the tolerance calculation method","enum":["ARREARS_TOLERANCE_PERIOD","MONTHLY_ARREARS_TOLERANCE_DAY"]},"dateCalculationMethod":{"title":"dateCalculationMethod","description":"The arrears date calculation method.","enum":["ACCOUNT_FIRST_WENT_TO_ARREARS","LAST_LATE_REPAYMENT","ACCOUNT_FIRST_BREACHED_MATERIALITY_THRESHOLD"]}},"additionalProperties":true}}};const schema12 = {"type":"object","title":"LoanAccountaf30","description":"Represents a loan account. A loan account defines the amount that your organization lends to a client. The terms and conditions of a loan account are defined by a loan product. In a loan account, Mambu stores all the information related to disbursements, repayments, interest rates, and withdrawals.","properties":{"accountState":{"title":"accountState","description":"The state of the loan account.","enum":["PARTIAL_APPLICATION","PENDING_APPROVAL","APPROVED","ACTIVE","ACTIVE_IN_ARREARS","CLOSED"]},"prepaymentSettings":{"title":"prepaymentSettings","$ref":"#/$defs/PrepaymentSettingsaf30"},"migrationEventKey":{"type":"string","title":"migrationEventKey","description":"The migration event encoded key associated with this loan account. If this account was imported, track which 'migration event' they came from."},"lastSetToArrearsDate":{"type":"string","title":"lastSetToArrearsDate","description":"The date when the loan account was set to last standing or null; if never set, it is expressed in your organization time format and time zone.","format":"date-time"},"notes":{"type":"string","title":"notes","description":"The notes about this loan account."},"disbursementDetails":{"title":"disbursementDetails","$ref":"#/$defs/DisbursementDetailsaf30"},"redrawSettings":{"title":"redrawSettings","$ref":"#/$defs/LoanAccountRedrawSettingsaf30"},"plannedInstallmentFees":{"type":"array","title":"plannedInstallmentFees","description":"The list with manual fees planned on the installments of the loan account.","items":{"$ref":"#/$defs/PlannedInstallmentFeeaf30"}},"daysInArrears":{"type":"integer","title":"daysInArrears","description":"The number of days the loan account is in arrears."},"accountSubState":{"title":"accountSubState","description":"A second state for the loan account. Beside the account state, a second substate is sometimes necessary to provide more information about the exact lifecycle state of a loan account.For example, even if the account state of a loan account is `ACTIVE`, it can also have a substate of `LOCKED`.","enum":["PARTIALLY_DISBURSED","LOCKED","LOCKED_CAPPING","REFINANCED","RESCHEDULED","WITHDRAWN","REPAID","REJECTED","WRITTEN_OFF","TERMINATED"]},"loanName":{"type":"string","title":"loanName","description":"The name of the loan account."},"terminationDate":{"type":"string","title":"terminationDate","description":"The date this loan account was terminated.","format":"date-time"},"interestSettings":{"title":"interestSettings","$ref":"#/$defs/InterestSettingsaf30"},"assets":{"type":"array","title":"assets","description":"The list of assets associated with the current loan account.","items":{"$ref":"#/$defs/Assetaf30"}},"lastInterestReviewDate":{"type":"string","title":"lastInterestReviewDate","description":"The date the interest was reviewed last time, stored in the organization time format and time zone.","format":"date-time"},"id":{"type":"string","title":"id","description":"The ID of the loan account, it can be generated and customized, and must be unique."},"assignedUserKey":{"type":"string","title":"assignedUserKey","description":"The key of the user this loan account is assigned to."},"lockedAccountTotalDueType":{"title":"lockedAccountTotalDueType","description":"The locked account total due type.","enum":["BALANCE_AMOUNT","DUE_AMOUNT_ON_LATE_INSTALLMENTS"]},"futurePaymentsAcceptance":{"title":"futurePaymentsAcceptance","description":"Shows whether the repayment transactions with entry date set in the future are allowed or not for this loan account.","enum":["NO_FUTURE_PAYMENTS","ACCEPT_FUTURE_PAYMENTS","ACCEPT_OVERPAYMENTS"]},"originalAccountKey":{"type":"string","title":"originalAccountKey","description":"The key of the original rescheduled or refinanced loan account."},"lockedOperations":{"type":"array","title":"lockedOperations","description":"A list with operations which are locked when the account is in the AccountState.LOCKED substate.","items":{"enum":["APPLY_INTEREST","APPLY_FEES","APPLY_PENALTIES"]}},"accruedInterest":{"type":"number","title":"accruedInterest","description":"The amount of interest that has been accrued in the loan account."},"accruedPenalty":{"type":"number","title":"accruedPenalty","description":"The accrued penalty, represents the amount of penalty that has been accrued in the loan account."},"creationDate":{"type":"string","title":"creationDate","description":"The date the loan account was created.","format":"date-time"},"modifyInterestForFirstInstallment":{"type":"boolean","title":"modifyInterestForFirstInstallment","description":"Adjust the interest for the first repayment when the first repayment period is different than the repayment frequency"},"assignedCentreKey":{"type":"string","title":"assignedCentreKey","description":"The key of the centre this account is assigned to."},"tranches":{"type":"array","title":"tranches","description":"The list of disbursement tranches available for the loan account.","items":{"$ref":"#/$defs/LoanTrancheaf30"}},"approvedDate":{"type":"string","title":"approvedDate","description":"The date the loan account was approved.","format":"date-time"},"taxRate":{"type":"number","title":"taxRate","description":"The tax rate."},"lastTaxRateReviewDate":{"type":"string","title":"lastTaxRateReviewDate","description":"The date the tax rate on the loan account was last checked, expressed in the organization time format and time zone.","format":"date-time"},"interestFromArrearsAccrued":{"type":"number","title":"interestFromArrearsAccrued","description":"The amount of interest from arrears that has been accrued in the loan account."},"scheduleSettings":{"title":"scheduleSettings","$ref":"#/$defs/ScheduleSettingsaf30"},"daysLate":{"type":"integer","title":"daysLate","description":"The number of days a repayment for the loan account is late."},"paymentMethod":{"title":"paymentMethod","description":"The interest payment method that determines whether the payments are made horizontally (on the repayments) or vertically (on the loan account).","enum":["HORIZONTAL","VERTICAL"]},"accountHolderKey":{"type":"string","title":"accountHolderKey","description":"The encoded key of the account holder."},"latePaymentsRecalculationMethod":{"title":"latePaymentsRecalculationMethod","description":"The overdue payments recalculation method inherited from the loan product on which this loan account is based.","enum":["OVERDUE_INSTALLMENTS_INCREASE","LAST_INSTALLMENT_INCREASE"]},"fundingSources":{"type":"array","title":"fundingSources","description":"The list of funds associated with the loan account.","items":{"$ref":"#/$defs/InvestorFundaf30"}},"accountHolderType":{"title":"accountHolderType","description":"The type of the account holder.","enum":["CLIENT","GROUP"]},"arrearsTolerancePeriod":{"type":"integer","title":"arrearsTolerancePeriod","description":"The arrears tolerance (period or day of month) depending on the product settings."},"lastInterestAppliedDate":{"type":"string","title":"lastInterestAppliedDate","description":"The date of the last time the loan account had interest applied (stored to interest balance), expressed in the organization time format and time zone.","format":"date-time"},"rescheduledAccountKey":{"type":"string","title":"rescheduledAccountKey","description":"The key pointing to where this loan account was rescheduled or refinanced to. This value is only not null if rescheduled."},"paymentHolidaysAccruedInterest":{"type":"number","title":"paymentHolidaysAccruedInterest","description":"The amount of interest that has been accrued during payment holidays in the loan account."},"activationTransactionKey":{"type":"string","title":"activationTransactionKey","description":"The encoded key of the transaction that activated the loan account."},"interestAccruedInBillingCycle":{"type":"number","title":"interestAccruedInBillingCycle","description":"The interest that is accrued in the current billing cycle."},"assignedBranchKey":{"type":"string","title":"assignedBranchKey","description":"The key of the branch this loan account is assigned to. The branch is set to unassigned if no branch field is set."},"balances":{"title":"balances","$ref":"#/$defs/Balancesaf30"},"creditArrangementKey":{"type":"string","title":"creditArrangementKey","description":"The key to the line of credit where this account is registered to."},"interestCommission":{"type":"number","title":"interestCommission","description":"The value of the interest booked by the organization from the accounts funded by investors. Null if the funds are not enabled."},"encodedKey":{"type":"string","title":"encodedKey","description":"The encoded key of the loan account, it is auto generated, and must be unique."},"currency":{"title":"currency","$ref":"#/$defs/Currencyaf30"},"lastAccountAppraisalDate":{"type":"string","title":"lastAccountAppraisalDate","description":"The date the loan account has last been evaluated for interest, principal, fees, and penalties calculations expressed in the organization time format and time zone.","format":"date-time"},"penaltySettings":{"title":"penaltySettings","$ref":"#/$defs/PenaltySettingsaf30"},"settlementAccountKey":{"type":"string","title":"settlementAccountKey","description":"The encoded key of the settlement account."},"lastModifiedDate":{"type":"string","title":"lastModifiedDate","description":"The last date the loan was updated.","format":"date-time"},"principalPaymentSettings":{"title":"principalPaymentSettings","$ref":"#/$defs/PrincipalPaymentAccountSettingsaf30"},"lastLockedDate":{"type":"string","title":"lastLockedDate","description":"The date when the loan account was set for the last time in the `LOCKED` state expressed in the organization time format and time zone. If null, the account is not locked anymore.","format":"date-time"},"loanAmount":{"type":"number","title":"loanAmount","description":"The loan amount."},"closedDate":{"type":"string","title":"closedDate","description":"The date the loan was closed.","format":"date-time"},"productTypeKey":{"type":"string","title":"productTypeKey","description":"The key for the type of loan product that this loan account is based on."},"allowOffset":{"type":"boolean","title":"allowOffset","description":"DEPRECATED - Will always be false."},"guarantors":{"type":"array","title":"guarantors","description":"The list of guarantees associated with the loan account.","items":{"$ref":"#/$defs/Guarantoraf30"}},"accountArrearsSettings":{"title":"accountArrearsSettings","$ref":"#/$defs/AccountArrearsSettingsaf30"}},"required":["scheduleSettings","accountHolderKey","accountHolderType","loanAmount","productTypeKey"],"additionalProperties":true};const schema13 = {"type":"object","title":"PrepaymentSettingsaf30","description":"The prepayment settings, holds all prepayment properties.","properties":{"elementsRecalculationMethod":{"title":"elementsRecalculationMethod","description":"The elements recalculation method, indicates how the declining balance with equal installments repayments are recalculated.","enum":["PRINCIPAL_EXPECTED_FIXED","TOTAL_EXPECTED_FIXED"]},"principalPaidInstallmentStatus":{"title":"principalPaidInstallmentStatus","description":"Installment status for the case when principal is paid off (copied from loan product).","enum":["PARTIALLY_PAID","PAID","ORIGINAL_TOTAL_EXPECTED_PAID"]},"prepaymentRecalculationMethod":{"title":"prepaymentRecalculationMethod","description":"Prepayment recalculation method copied from the loan product on which this account is based.","enum":["NO_RECALCULATION","RESCHEDULE_REMAINING_REPAYMENTS","RECALCULATE_SCHEDULE_KEEP_SAME_NUMBER_OF_TERMS","RECALCULATE_SCHEDULE_KEEP_SAME_PRINCIPAL_AMOUNT","RECALCULATE_SCHEDULE_KEEP_SAME_TOTAL_REPAYMENT_AMOUNT","REDUCE_AMOUNT_PER_INSTALLMENT","REDUCE_NUMBER_OF_INSTALLMENTS","REDUCE_NUMBER_OF_INSTALLMENTS_NEW"]},"applyInterestOnPrepaymentMethod":{"title":"applyInterestOnPrepaymentMethod","description":"Apply interest on prepayment method copied from loan product on which this account is based.","enum":["AUTOMATIC","MANUAL"]}},"additionalProperties":true};const schema17 = {"type":"object","title":"LoanAccountRedrawSettingsaf30","description":"Represents the redraw settings for a loan account.","properties":{"restrictNextDueWithdrawal":{"type":"boolean","title":"restrictNextDueWithdrawal","description":"`TRUE` if withdrawing amounts that reduce the next due instalment repayment is restricted, `FALSE` otherwise."}},"required":["restrictNextDueWithdrawal"],"additionalProperties":true};const schema18 = {"type":"object","title":"PlannedInstallmentFeeaf30","description":"The planned fee details holds the information related to the installment key, predefined fee key and amount","properties":{"installmentNumber":{"type":"integer","title":"installmentNumber","description":"The number of the installment on which the predefined fee is planned. It is used only in the case when fees are created at the same time with the loan account creation or during preview schedule, before account creation, otherwise this should be empty and installmentKey will be used to identify an installment."},"amount":{"type":"number","title":"amount","description":"The amount of the planned fee."},"applyOnDate":{"type":"string","title":"applyOnDate","description":"The date when a planned fee should be applied, overriding installment's due date. It should match the interval of the installment. If it belong to first installment, it should be between disbursement date and installment due date.","format":"date-time"},"predefinedFeeKey":{"type":"string","title":"predefinedFeeKey","description":"The encoded key of the predefined fee which is planned."},"encodedKey":{"type":"string","title":"encodedKey","description":"The encoded key of the planned installment fee, auto generated, unique."},"installmentKey":{"type":"string","title":"installmentKey","description":"The encoded key of the installment on which the predefined fee is planned."}},"required":["predefinedFeeKey"],"additionalProperties":true};const schema30 = {"type":"object","title":"InvestorFundaf30","description":"Contains the details about an investor fund including fields like encoded key, guarantor type, amount and guarantor key","properties":{"amount":{"type":"number","title":"amount","description":"The amount used by the client for the guaranty"},"interestCommission":{"type":"number","title":"interestCommission","description":"The constraint minimum value"},"depositAccountKey":{"type":"string","title":"depositAccountKey","description":"The key of the deposit account used by the guarantor (populated when the guaranty type is GUARANTOR). It can be null."},"assetName":{"type":"string","title":"assetName","description":"The name of a value the client guarantees with (populated when the guaranty type is ASSET)"},"encodedKey":{"type":"string","title":"encodedKey","description":"The encoded key of the entity, generated, globally unique"},"id":{"type":"string","title":"id","description":"Investor fund unique identifier. All versions of an investor fund will have same id."},"guarantorKey":{"type":"string","title":"guarantorKey","description":"The key of the client/group used as the guarantor."},"guarantorType":{"title":"guarantorType","description":"The type of the guarantor (client/group)","enum":["CLIENT","GROUP"]},"sharePercentage":{"type":"number","title":"sharePercentage","description":"Percentage of loan shares this investor owns"}},"required":["amount","guarantorKey","guarantorType"],"additionalProperties":true};const schema31 = {"type":"object","title":"Balancesaf30","description":"The loan account balance details.","properties":{"interestFromArrearsPaid":{"type":"number","title":"interestFromArrearsPaid","description":"The interest from arrears paid, indicates total interest from arrears paid into the account."},"principalDue":{"type":"number","title":"principalDue","description":"The principal due, indicates how much principal it's due at this moment."},"interestBalance":{"type":"number","title":"interestBalance","description":"Represents the total interest owed by the client (total interest applied for account minus interest paid)."},"holdBalance":{"type":"number","title":"holdBalance","description":"The sum of all the authorization hold amounts on this account."},"principalPaid":{"type":"number","title":"principalPaid","description":"The principal paid, holds the value of the total paid into the account."},"penaltyDue":{"type":"number","title":"penaltyDue","description":"The penalty due. Represents the total penalty amount due for the account."},"feesBalance":{"type":"number","title":"feesBalance","description":"The fees balance. Represents the total fees expected to be paid on this account at a given moment."},"penaltyBalance":{"type":"number","title":"penaltyBalance","description":"The penalty balance. Represents the total penalty expected to be paid on this account at a given moment."},"redrawBalance":{"type":"number","title":"redrawBalance","description":"The total redraw amount owned by the client, from now on."},"interestFromArrearsBalance":{"type":"number","title":"interestFromArrearsBalance","description":"The interest from arrears balance. Indicates interest from arrears owned by the client, from now on. (total interest from arrears accrued for account - interest from arrears paid)."},"principalBalance":{"type":"number","title":"principalBalance","description":"The total principal owned by the client, from now on (principal disbursed - principal paid)."},"interestDue":{"type":"number","title":"interestDue","description":"The interest due. Indicates how much interest it's due for the account at this moment."},"penaltyPaid":{"type":"number","title":"penaltyPaid","description":"The Penalty paid. Represents the total penalty amount paid for the account."},"feesPaid":{"type":"number","title":"feesPaid","description":"The fees paid. Represents the total fees paid for the account."},"interestFromArrearsDue":{"type":"number","title":"interestFromArrearsDue","description":"The interest from arrears due. Indicates how much interest from arrears it's due for the account at this moment."},"feesDue":{"type":"number","title":"feesDue","description":"The fees due. Representing the total fees due for the account."},"interestPaid":{"type":"number","title":"interestPaid","description":"The interest paid, indicates total interest paid into the account."}},"additionalProperties":true};const schema22 = {"type":"object","title":"Currencyaf30","description":"Represents a currency eg. USD, EUR.","properties":{"currencyCode":{"type":"string","title":"currencyCode","description":"Currency code for NON_FIAT currency."},"code":{"title":"code","description":"Fiat(ISO-4217) currency code or NON_FIAT for non fiat currencies.","enum":["AED","AFN","ALL","AMD","ANG","AOA","ARS","AUD","AWG","AZN","BAM","BBD","BDT","BGN","BHD","BIF","BMD","BND","BOB","BOV","BRL","BSD","BTN","BWP","BYR","BYN","BZD","CAD","CDF","CHE","CHF","CHW","CLF","CLP","CNY","COP","COU","CRC","CUC","CUP","CVE","CZK","DJF","DKK","DOP","DZD","EGP","ERN","ETB","EUR","FJD","FKP","GBP","GEL","GHS","GIP","GMD","GNF","GTQ","GYD","HKD","HNL","HRK","HTG","HUF","IDR","ILS","INR","IQD","IRR","ISK","JMD","JOD","JPY","KES","KGS","KHR","KMF","KPW","KRW","KWD","KYD","KZT","LAK","LBP","LKR","LRD","LSL","LTL","LVL","LYD","MAD","MDL","MGA","MKD","MMK","MNT","MOP","MRO","MRU","MUR","MVR","MWK","MXN","MXV","MYR","MZN","NAD","NGN","NIO","NOK","NPR","NZD","OMR","PAB","PEN","PGK","PHP","PKR","PLN","PYG","QAR","RON","RSD","RUB","RWF","SAR","SBD","SCR","SDG","SEK","SGD","SHP","SLL","SOS","SRD","STD","STN","SVC","SYP","SZL","THB","TJS","TMT","TND","TOP","TRY","TTD","TWD","TZS","UAH","UGX","USD","USN","UYI","UYU","UYW","UZS","VED","VEF","VES","VND","VUV","WST","XAG","XAU","XAF","XBA","XBB","XBC","XBD","XCD","XDR","XOF","XPD","XPF","XPT","XSU","XTS","XUA","XXX","YER","ZAR","ZMK","ZWL","ZMW","SSP","NON_FIAT"]}},"additionalProperties":true};const schema33 = {"type":"object","title":"PenaltySettingsaf30","description":"The penalty settings, holds all the fields regarding penalties","properties":{"loanPenaltyCalculationMethod":{"title":"loanPenaltyCalculationMethod","description":"The last penalty calculation method, represents on what amount are the penalties calculated.","enum":["NONE","OVERDUE_BALANCE","OVERDUE_BALANCE_AND_INTEREST","OUTSTANDING_PRINCIPAL"]},"penaltyRate":{"type":"number","title":"penaltyRate","description":"The penalty rate, represents the rate (in percent) which is charged as a penalty."}},"additionalProperties":true};const schema34 = {"type":"object","title":"PrincipalPaymentAccountSettingsaf30","description":"The principal payment account settings, holds the required information for the principal payment process of an account.","properties":{"includeInterestInFloorAmount":{"type":"boolean","title":"includeInterestInFloorAmount","description":"Boolean flag, if true, the interest will be included along with the principal in the repayment floor amount, for a revolving credit account"},"totalDuePayment":{"title":"totalDuePayment","description":"The method of total due payment for revolving credit","enum":["FLAT","OUTSTANDING_PRINCIPAL_PERCENTAGE","PRINCIPAL_PERCENTAGE_LAST_DISB","TOTAL_BALANCE_PERCENTAGE","TOTAL_BALANCE_FLAT","TOTAL_PRINCIPAL_PERCENTAGE"]},"amount":{"type":"number","title":"amount","description":"Fixed amount for being used for the repayments principal due."},"principalFloorValue":{"type":"number","title":"principalFloorValue","description":"The minimum principal due amount a repayment made with this settings can have"},"principalPaymentMethod":{"title":"principalPaymentMethod","description":"The method of principal payment for revolving credit.","enum":["FLAT","OUTSTANDING_PRINCIPAL_PERCENTAGE","PRINCIPAL_PERCENTAGE_LAST_DISB","TOTAL_BALANCE_PERCENTAGE","TOTAL_BALANCE_FLAT","TOTAL_PRINCIPAL_PERCENTAGE"]},"percentage":{"type":"number","title":"percentage","description":"Percentage of principal amount used for the repayments principal due."},"includeFeesInFloorAmount":{"type":"boolean","title":"includeFeesInFloorAmount","description":"Boolean flag, if true, the fees will be included along with the principal in the repayment floor amount, for a revolving credit account"},"encodedKey":{"type":"string","title":"encodedKey","description":"The encoded key of the principal payment base settings, auto generated, unique."},"totalDueAmountFloor":{"type":"number","title":"totalDueAmountFloor","description":"The minimum total due amount a repayment made with this settings can have"},"principalCeilingValue":{"type":"number","title":"principalCeilingValue","description":"The maximum principal due amount a repayment made with this settings can have"}},"additionalProperties":true};const schema35 = {"type":"object","title":"Guarantoraf30","description":"Guarantor, holds information about a client guaranty entry. It can be defined based on another client which guarantees (including or not a savings account whether it is a client of the organization using Mambu or not) or based on a value the client holds (an asset)","properties":{"amount":{"type":"number","title":"amount","description":"The amount used by the client for the guaranty"},"depositAccountKey":{"type":"string","title":"depositAccountKey","description":"The key of the deposit account used by the guarantor (populated when the guaranty type is GUARANTOR). It can be null."},"assetName":{"type":"string","title":"assetName","description":"The name of a value the client guarantees with (populated when the guaranty type is ASSET)"},"encodedKey":{"type":"string","title":"encodedKey","description":"The encoded key of the security, auto generated, unique."},"guarantorKey":{"type":"string","title":"guarantorKey","description":"The key of the client/group used as the guarantor."},"guarantorType":{"title":"guarantorType","description":"The type of the guarantor (client/group)","enum":["CLIENT","GROUP"]}},"required":["amount","guarantorKey","guarantorType"],"additionalProperties":true};const schema36 = {"type":"object","title":"AccountArrearsSettingsaf30","description":"The account arrears settings, holds the required information for the arrears settings of an account.","properties":{"monthlyToleranceDay":{"type":"integer","title":"monthlyToleranceDay","description":"Defines monthly arrears tolerance day value."},"toleranceFloorAmount":{"type":"number","title":"toleranceFloorAmount","description":"The tolerance floor amount."},"nonWorkingDaysMethod":{"title":"nonWorkingDaysMethod","description":"Shows whether the non working days are taken in consideration or not when applying penaltees/late fees or when setting an account into arrears","enum":["INCLUDED","EXCLUDED"]},"tolerancePercentageOfOutstandingPrincipal":{"type":"number","title":"tolerancePercentageOfOutstandingPrincipal","description":"Defines the arrears tolerance amount."},"tolerancePeriod":{"type":"integer","title":"tolerancePeriod","description":"Defines the arrears tolerance period value."},"encodedKey":{"type":"string","title":"encodedKey","description":"The encoded key of the arrears base settings, auto generated, unique."},"toleranceCalculationMethod":{"title":"toleranceCalculationMethod","description":"Defines the tolerance calculation method","enum":["ARREARS_TOLERANCE_PERIOD","MONTHLY_ARREARS_TOLERANCE_DAY"]},"dateCalculationMethod":{"title":"dateCalculationMethod","description":"The arrears date calculation method.","enum":["ACCOUNT_FIRST_WENT_TO_ARREARS","LAST_LATE_REPAYMENT","ACCOUNT_FIRST_BREACHED_MATERIALITY_THRESHOLD"]}},"additionalProperties":true};const func0 = require("ajv/dist/runtime/equal").default;const schema14 = {"type":"object","title":"DisbursementDetailsaf30","description":"The the disbursement details it holds the information related to the disbursement details as disbursement date, first repayment date, disbursement fees.","properties":{"transactionDetails":{"title":"transactionDetails","$ref":"#/$defs/LoanTransactionDetailsaf30"},"expectedDisbursementDate":{"type":"string","title":"expectedDisbursementDate","description":"The date of the expected disbursement.Stored as Organization Time.","format":"date-time"},"fees":{"type":"array","title":"fees","description":"List of fees that should be applied at the disbursement time.","items":{"$ref":"#/$defs/CustomPredefinedFeeaf30"}},"firstRepaymentDate":{"type":"string","title":"firstRepaymentDate","description":"The date of the expected first repayment. Stored as Organization Time.","format":"date-time"},"disbursementDate":{"type":"string","title":"disbursementDate","description":"The activation date, the date when the disbursement actually took place.","format":"date-time"},"encodedKey":{"type":"string","title":"encodedKey","description":"The encoded key of the disbursement details, auto generated, unique"}},"additionalProperties":true};const schema15 = {"type":"object","title":"LoanTransactionDetailsaf30","description":"Represents the loan transaction details.","properties":{"encodedKey":{"type":"string","title":"encodedKey","description":"The encoded key of the entity, generated, globally unique"},"internalTransfer":{"type":"boolean","title":"internalTransfer","description":"Whether the transaction was transferred between loans or deposit accounts"},"transactionChannelKey":{"type":"string","title":"transactionChannelKey","description":"The encoded key of the transaction channel associated with the transaction details."},"transactionChannelId":{"type":"string","title":"transactionChannelId","description":"The ID of the transaction channel associated with the transaction details."},"targetDepositAccountKey":{"type":"string","title":"targetDepositAccountKey","description":"In case of a transaction to a deposit account this represent the deposit account key to which the transaction was made."}},"additionalProperties":true};const schema16 = {"type":"object","title":"CustomPredefinedFeeaf30","description":"The custom predefined fees, they may be used as the expected predefined fees that will be applied on the disbursement.","properties":{"predefinedFeeEncodedKey":{"type":"string","title":"predefinedFeeEncodedKey","description":"The encoded key of the predefined fee"},"encodedKey":{"type":"string","title":"encodedKey","description":"The encoded key of the custom predefined fee, auto generated, unique."},"amount":{"type":"number","title":"amount","description":"The amount of the custom fee."},"percentage":{"type":"number","title":"percentage","description":"The percentage of the custom fee."}},"additionalProperties":true};function validate12(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){let vErrors = null;let errors = 0;if(errors === 0){if(data && typeof data == "object" && !Array.isArray(data)){if(data.transactionDetails !== undefined){let data0 = data.transactionDetails;const _errs2 = errors;const _errs3 = errors;if(errors === _errs3){if(data0 && typeof data0 == "object" && !Array.isArray(data0)){if(data0.encodedKey !== undefined){const _errs6 = errors;if(typeof data0.encodedKey !== "string"){validate12.errors = [{instancePath:instancePath+"/transactionDetails/encodedKey",schemaPath:"#/$defs/LoanTransactionDetailsaf30/properties/encodedKey/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid2 = _errs6 === errors;}else {var valid2 = true;}if(valid2){if(data0.internalTransfer !== undefined){const _errs8 = errors;if(typeof data0.internalTransfer !== "boolean"){validate12.errors = [{instancePath:instancePath+"/transactionDetails/internalTransfer",schemaPath:"#/$defs/LoanTransactionDetailsaf30/properties/internalTransfer/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"}];return false;}var valid2 = _errs8 === errors;}else {var valid2 = true;}if(valid2){if(data0.transactionChannelKey !== undefined){const _errs10 = errors;if(typeof data0.transactionChannelKey !== "string"){validate12.errors = [{instancePath:instancePath+"/transactionDetails/transactionChannelKey",schemaPath:"#/$defs/LoanTransactionDetailsaf30/properties/transactionChannelKey/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid2 = _errs10 === errors;}else {var valid2 = true;}if(valid2){if(data0.transactionChannelId !== undefined){const _errs12 = errors;if(typeof data0.transactionChannelId !== "string"){validate12.errors = [{instancePath:instancePath+"/transactionDetails/transactionChannelId",schemaPath:"#/$defs/LoanTransactionDetailsaf30/properties/transactionChannelId/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid2 = _errs12 === errors;}else {var valid2 = true;}if(valid2){if(data0.targetDepositAccountKey !== undefined){const _errs14 = errors;if(typeof data0.targetDepositAccountKey !== "string"){validate12.errors = [{instancePath:instancePath+"/transactionDetails/targetDepositAccountKey",schemaPath:"#/$defs/LoanTransactionDetailsaf30/properties/targetDepositAccountKey/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid2 = _errs14 === errors;}else {var valid2 = true;}}}}}}else {validate12.errors = [{instancePath:instancePath+"/transactionDetails",schemaPath:"#/$defs/LoanTransactionDetailsaf30/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}var valid0 = _errs2 === errors;}else {var valid0 = true;}if(valid0){if(data.expectedDisbursementDate !== undefined){const _errs16 = errors;if(errors === _errs16){if(errors === _errs16){if(!(typeof data.expectedDisbursementDate === "string")){validate12.errors = [{instancePath:instancePath+"/expectedDisbursementDate",schemaPath:"#/properties/expectedDisbursementDate/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}}var valid0 = _errs16 === errors;}else {var valid0 = true;}if(valid0){if(data.fees !== undefined){let data7 = data.fees;const _errs18 = errors;if(errors === _errs18){if(Array.isArray(data7)){var valid3 = true;const len0 = data7.length;for(let i0=0; i0<len0; i0++){let data8 = data7[i0];const _errs20 = errors;const _errs21 = errors;if(errors === _errs21){if(data8 && typeof data8 == "object" && !Array.isArray(data8)){if(data8.predefinedFeeEncodedKey !== undefined){const _errs24 = errors;if(typeof data8.predefinedFeeEncodedKey !== "string"){validate12.errors = [{instancePath:instancePath+"/fees/" + i0+"/predefinedFeeEncodedKey",schemaPath:"#/$defs/CustomPredefinedFeeaf30/properties/predefinedFeeEncodedKey/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid5 = _errs24 === errors;}else {var valid5 = true;}if(valid5){if(data8.encodedKey !== undefined){const _errs26 = errors;if(typeof data8.encodedKey !== "string"){validate12.errors = [{instancePath:instancePath+"/fees/" + i0+"/encodedKey",schemaPath:"#/$defs/CustomPredefinedFeeaf30/properties/encodedKey/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid5 = _errs26 === errors;}else {var valid5 = true;}if(valid5){if(data8.amount !== undefined){let data11 = data8.amount;const _errs28 = errors;if(!((typeof data11 == "number") && (isFinite(data11)))){validate12.errors = [{instancePath:instancePath+"/fees/" + i0+"/amount",schemaPath:"#/$defs/CustomPredefinedFeeaf30/properties/amount/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid5 = _errs28 === errors;}else {var valid5 = true;}if(valid5){if(data8.percentage !== undefined){let data12 = data8.percentage;const _errs30 = errors;if(!((typeof data12 == "number") && (isFinite(data12)))){validate12.errors = [{instancePath:instancePath+"/fees/" + i0+"/percentage",schemaPath:"#/$defs/CustomPredefinedFeeaf30/properties/percentage/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid5 = _errs30 === errors;}else {var valid5 = true;}}}}}else {validate12.errors = [{instancePath:instancePath+"/fees/" + i0,schemaPath:"#/$defs/CustomPredefinedFeeaf30/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}var valid3 = _errs20 === errors;if(!valid3){break;}}}else {validate12.errors = [{instancePath:instancePath+"/fees",schemaPath:"#/properties/fees/type",keyword:"type",params:{type: "array"},message:"must be array"}];return false;}}var valid0 = _errs18 === errors;}else {var valid0 = true;}if(valid0){if(data.firstRepaymentDate !== undefined){const _errs32 = errors;if(errors === _errs32){if(errors === _errs32){if(!(typeof data.firstRepaymentDate === "string")){validate12.errors = [{instancePath:instancePath+"/firstRepaymentDate",schemaPath:"#/properties/firstRepaymentDate/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}}var valid0 = _errs32 === errors;}else {var valid0 = true;}if(valid0){if(data.disbursementDate !== undefined){const _errs34 = errors;if(errors === _errs34){if(errors === _errs34){if(!(typeof data.disbursementDate === "string")){validate12.errors = [{instancePath:instancePath+"/disbursementDate",schemaPath:"#/properties/disbursementDate/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}}var valid0 = _errs34 === errors;}else {var valid0 = true;}if(valid0){if(data.encodedKey !== undefined){const _errs36 = errors;if(typeof data.encodedKey !== "string"){validate12.errors = [{instancePath:instancePath+"/encodedKey",schemaPath:"#/properties/encodedKey/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid0 = _errs36 === errors;}else {var valid0 = true;}}}}}}}else {validate12.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}validate12.errors = vErrors;return errors === 0;}const schema19 = {"type":"object","title":"InterestSettingsaf30","description":"The interest settings, holds all the properties regarding interests for the loan account.","properties":{"interestRateReviewUnit":{"title":"interestRateReviewUnit","description":"The interest rate review unit. Defines the interest rate update frequency measurement unit.","enum":["DAYS","WEEKS","MONTHS"]},"interestRate":{"type":"number","title":"interestRate","description":"The interest rate. Represents the interest rate for the loan account. The interest on loans is accrued on a daily basis, which allows charging the clients only for the days they actually used the loan amount."},"interestRateSource":{"title":"interestRateSource","description":"The interest rate source. Represents the interest calculation method: fixed or (interest spread + active organization index interest rate)","enum":["FIXED_INTEREST_RATE","INDEX_INTEREST_RATE"]},"interestApplicationMethod":{"title":"interestApplicationMethod","description":"The interest application method. Represents the interest application method that determines whether the interest gets applied on the account's disbursement or on each repayment.","enum":["AFTER_DISBURSEMENT","REPAYMENT_DUE_DATE"]},"interestChargeFrequency":{"title":"interestChargeFrequency","description":"The interest change frequency. Holds the possible values for how often is interest charged on loan or deposit accounts","enum":["ANNUALIZED","EVERY_MONTH","EVERY_FOUR_WEEKS","EVERY_WEEK","EVERY_DAY","EVERY_X_DAYS"]},"interestType":{"title":"interestType","description":"The possible values for how we compute and apply the interest","enum":["SIMPLE_INTEREST","CAPITALIZED_INTEREST","COMPOUNDING_INTEREST"]},"accrueInterestAfterMaturity":{"type":"boolean","title":"accrueInterestAfterMaturity","description":"The accrue interest after maturity. If the product support this option, specify if the interest should be accrued after the account maturity date."},"interestBalanceCalculationMethod":{"title":"interestBalanceCalculationMethod","description":"The interest balance calculation method. Represents the option which determines the way the balance for the account's interest is computed.","enum":["ONLY_PRINCIPAL","PRINCIPAL_AND_INTEREST"]},"interestSpread":{"type":"number","title":"interestSpread","description":"Interest to be added to active organization index interest rate in order to find out actual interest rate"},"interestCalculationMethod":{"title":"interestCalculationMethod","description":"The interest calculation method. Holds the type of interest calculation method.","enum":["FLAT","DECLINING_BALANCE","DECLINING_BALANCE_DISCOUNTED"]},"interestRateReviewCount":{"type":"integer","title":"interestRateReviewCount","description":"Interest rate update frequency unit count."},"accrueLateInterest":{"type":"boolean","title":"accrueLateInterest","description":"Indicates whether late interest is accrued for this loan account"},"accountInterestRateSettings":{"type":"array","title":"accountInterestRateSettings","description":"Adjustable interest rates settings for loan account","items":{"$ref":"#/$defs/AccountInterestRateSettingsaf30"}}},"additionalProperties":true};const schema20 = {"type":"object","title":"AccountInterestRateSettingsaf30","description":"Adjustable interest rates settings for loan account","properties":{"interestRateReviewUnit":{"title":"interestRateReviewUnit","description":"Interest rate review frequency measurement unit. Valid only for index interest rate.","enum":["DAYS","WEEKS","MONTHS"]},"interestRate":{"type":"number","title":"interestRate","description":"Interest rate value."},"interestSpread":{"type":"number","title":"interestSpread","description":"Interest spread value."},"interestRateSource":{"title":"interestRateSource","description":"Interest calculation method: fixed or indexed(interest spread + active organization index interest rate)","enum":["FIXED_INTEREST_RATE","INDEX_INTEREST_RATE"]},"interestRateReviewCount":{"type":"integer","title":"interestRateReviewCount","description":"Interest rate review frequency unit count. Valid only for index interest rate."},"indexSourceKey":{"type":"string","title":"indexSourceKey","description":"Index rate source key."},"interestRateCeilingValue":{"type":"number","title":"interestRateCeilingValue","description":"Maximum value allowed for index based interest rate. Valid only for index interest rate."},"encodedKey":{"type":"string","title":"encodedKey","description":"The encoded key of the interest rate settings, auto generated, unique"},"validFrom":{"type":"string","title":"validFrom","description":"Date since an interest rate is valid","format":"date-time"},"interestRateFloorValue":{"type":"number","title":"interestRateFloorValue","description":"Minimum value allowed for index based interest rate. Valid only for index interest rate."}},"required":["interestRateSource","validFrom"],"additionalProperties":true};function validate14(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){let vErrors = null;let errors = 0;if(errors === 0){if(data && typeof data == "object" && !Array.isArray(data)){if(data.interestRateReviewUnit !== undefined){let data0 = data.interestRateReviewUnit;const _errs2 = errors;if(!(((data0 === "DAYS") || (data0 === "WEEKS")) || (data0 === "MONTHS"))){validate14.errors = [{instancePath:instancePath+"/interestRateReviewUnit",schemaPath:"#/properties/interestRateReviewUnit/enum",keyword:"enum",params:{allowedValues: schema19.properties.interestRateReviewUnit.enum},message:"must be equal to one of the allowed values"}];return false;}var valid0 = _errs2 === errors;}else {var valid0 = true;}if(valid0){if(data.interestRate !== undefined){let data1 = data.interestRate;const _errs3 = errors;if(!((typeof data1 == "number") && (isFinite(data1)))){validate14.errors = [{instancePath:instancePath+"/interestRate",schemaPath:"#/properties/interestRate/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid0 = _errs3 === errors;}else {var valid0 = true;}if(valid0){if(data.interestRateSource !== undefined){let data2 = data.interestRateSource;const _errs5 = errors;if(!((data2 === "FIXED_INTEREST_RATE") || (data2 === "INDEX_INTEREST_RATE"))){validate14.errors = [{instancePath:instancePath+"/interestRateSource",schemaPath:"#/properties/interestRateSource/enum",keyword:"enum",params:{allowedValues: schema19.properties.interestRateSource.enum},message:"must be equal to one of the allowed values"}];return false;}var valid0 = _errs5 === errors;}else {var valid0 = true;}if(valid0){if(data.interestApplicationMethod !== undefined){let data3 = data.interestApplicationMethod;const _errs6 = errors;if(!((data3 === "AFTER_DISBURSEMENT") || (data3 === "REPAYMENT_DUE_DATE"))){validate14.errors = [{instancePath:instancePath+"/interestApplicationMethod",schemaPath:"#/properties/interestApplicationMethod/enum",keyword:"enum",params:{allowedValues: schema19.properties.interestApplicationMethod.enum},message:"must be equal to one of the allowed values"}];return false;}var valid0 = _errs6 === errors;}else {var valid0 = true;}if(valid0){if(data.interestChargeFrequency !== undefined){const _errs7 = errors;let valid1;valid1 = false;for(const v0 of schema19.properties.interestChargeFrequency.enum){if(func0(data.interestChargeFrequency, v0)){valid1 = true;break;}}if(!valid1){validate14.errors = [{instancePath:instancePath+"/interestChargeFrequency",schemaPath:"#/properties/interestChargeFrequency/enum",keyword:"enum",params:{allowedValues: schema19.properties.interestChargeFrequency.enum},message:"must be equal to one of the allowed values"}];return false;}var valid0 = _errs7 === errors;}else {var valid0 = true;}if(valid0){if(data.interestType !== undefined){let data5 = data.interestType;const _errs8 = errors;if(!(((data5 === "SIMPLE_INTEREST") || (data5 === "CAPITALIZED_INTEREST")) || (data5 === "COMPOUNDING_INTEREST"))){validate14.errors = [{instancePath:instancePath+"/interestType",schemaPath:"#/properties/interestType/enum",keyword:"enum",params:{allowedValues: schema19.properties.interestType.enum},message:"must be equal to one of the allowed values"}];return false;}var valid0 = _errs8 === errors;}else {var valid0 = true;}if(valid0){if(data.accrueInterestAfterMaturity !== undefined){const _errs9 = errors;if(typeof data.accrueInterestAfterMaturity !== "boolean"){validate14.errors = [{instancePath:instancePath+"/accrueInterestAfterMaturity",schemaPath:"#/properties/accrueInterestAfterMaturity/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"}];return false;}var valid0 = _errs9 === errors;}else {var valid0 = true;}if(valid0){if(data.interestBalanceCalculationMethod !== undefined){let data7 = data.interestBalanceCalculationMethod;const _errs11 = errors;if(!((data7 === "ONLY_PRINCIPAL") || (data7 === "PRINCIPAL_AND_INTEREST"))){validate14.errors = [{instancePath:instancePath+"/interestBalanceCalculationMethod",schemaPath:"#/properties/interestBalanceCalculationMethod/enum",keyword:"enum",params:{allowedValues: schema19.properties.interestBalanceCalculationMethod.enum},message:"must be equal to one of the allowed values"}];return false;}var valid0 = _errs11 === errors;}else {var valid0 = true;}if(valid0){if(data.interestSpread !== undefined){let data8 = data.interestSpread;const _errs12 = errors;if(!((typeof data8 == "number") && (isFinite(data8)))){validate14.errors = [{instancePath:instancePath+"/interestSpread",schemaPath:"#/properties/interestSpread/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid0 = _errs12 === errors;}else {var valid0 = true;}if(valid0){if(data.interestCalculationMethod !== undefined){let data9 = data.interestCalculationMethod;const _errs14 = errors;if(!(((data9 === "FLAT") || (data9 === "DECLINING_BALANCE")) || (data9 === "DECLINING_BALANCE_DISCOUNTED"))){validate14.errors = [{instancePath:instancePath+"/interestCalculationMethod",schemaPath:"#/properties/interestCalculationMethod/enum",keyword:"enum",params:{allowedValues: schema19.properties.interestCalculationMethod.enum},message:"must be equal to one of the allowed values"}];return false;}var valid0 = _errs14 === errors;}else {var valid0 = true;}if(valid0){if(data.interestRateReviewCount !== undefined){let data10 = data.interestRateReviewCount;const _errs15 = errors;if(!(((typeof data10 == "number") && (!(data10 % 1) && !isNaN(data10))) && (isFinite(data10)))){validate14.errors = [{instancePath:instancePath+"/interestRateReviewCount",schemaPath:"#/properties/interestRateReviewCount/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];return false;}var valid0 = _errs15 === errors;}else {var valid0 = true;}if(valid0){if(data.accrueLateInterest !== undefined){const _errs17 = errors;if(typeof data.accrueLateInterest !== "boolean"){validate14.errors = [{instancePath:instancePath+"/accrueLateInterest",schemaPath:"#/properties/accrueLateInterest/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"}];return false;}var valid0 = _errs17 === errors;}else {var valid0 = true;}if(valid0){if(data.accountInterestRateSettings !== undefined){let data12 = data.accountInterestRateSettings;const _errs19 = errors;if(errors === _errs19){if(Array.isArray(data12)){var valid2 = true;const len0 = data12.length;for(let i0=0; i0<len0; i0++){let data13 = data12[i0];const _errs21 = errors;const _errs22 = errors;if(errors === _errs22){if(data13 && typeof data13 == "object" && !Array.isArray(data13)){let missing0;if(((data13.interestRateSource === undefined) && (missing0 = "interestRateSource")) || ((data13.validFrom === undefined) && (missing0 = "validFrom"))){validate14.errors = [{instancePath:instancePath+"/accountInterestRateSettings/" + i0,schemaPath:"#/$defs/AccountInterestRateSettingsaf30/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];return false;}else {if(data13.interestRateReviewUnit !== undefined){let data14 = data13.interestRateReviewUnit;const _errs25 = errors;if(!(((data14 === "DAYS") || (data14 === "WEEKS")) || (data14 === "MONTHS"))){validate14.errors = [{instancePath:instancePath+"/accountInterestRateSettings/" + i0+"/interestRateReviewUnit",schemaPath:"#/$defs/AccountInterestRateSettingsaf30/properties/interestRateReviewUnit/enum",keyword:"enum",params:{allowedValues: schema20.properties.interestRateReviewUnit.enum},message:"must be equal to one of the allowed values"}];return false;}var valid4 = _errs25 === errors;}else {var valid4 = true;}if(valid4){if(data13.interestRate !== undefined){let data15 = data13.interestRate;const _errs26 = errors;if(!((typeof data15 == "number") && (isFinite(data15)))){validate14.errors = [{instancePath:instancePath+"/accountInterestRateSettings/" + i0+"/interestRate",schemaPath:"#/$defs/AccountInterestRateSettingsaf30/properties/interestRate/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid4 = _errs26 === errors;}else {var valid4 = true;}if(valid4){if(data13.interestSpread !== undefined){let data16 = data13.interestSpread;const _errs28 = errors;if(!((typeof data16 == "number") && (isFinite(data16)))){validate14.errors = [{instancePath:instancePath+"/accountInterestRateSettings/" + i0+"/interestSpread",schemaPath:"#/$defs/AccountInterestRateSettingsaf30/properties/interestSpread/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid4 = _errs28 === errors;}else {var valid4 = true;}if(valid4){if(data13.interestRateSource !== undefined){let data17 = data13.interestRateSource;const _errs30 = errors;if(!((data17 === "FIXED_INTEREST_RATE") || (data17 === "INDEX_INTEREST_RATE"))){validate14.errors = [{instancePath:instancePath+"/accountInterestRateSettings/" + i0+"/interestRateSource",schemaPath:"#/$defs/AccountInterestRateSettingsaf30/properties/interestRateSource/enum",keyword:"enum",params:{allowedValues: schema20.properties.interestRateSource.enum},message:"must be equal to one of the allowed values"}];return false;}var valid4 = _errs30 === errors;}else {var valid4 = true;}if(valid4){if(data13.interestRateReviewCount !== undefined){let data18 = data13.interestRateReviewCount;const _errs31 = errors;if(!(((typeof data18 == "number") && (!(data18 % 1) && !isNaN(data18))) && (isFinite(data18)))){validate14.errors = [{instancePath:instancePath+"/accountInterestRateSettings/" + i0+"/interestRateReviewCount",schemaPath:"#/$defs/AccountInterestRateSettingsaf30/properties/interestRateReviewCount/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];return false;}var valid4 = _errs31 === errors;}else {var valid4 = true;}if(valid4){if(data13.indexSourceKey !== undefined){const _errs33 = errors;if(typeof data13.indexSourceKey !== "string"){validate14.errors = [{instancePath:instancePath+"/accountInterestRateSettings/" + i0+"/indexSourceKey",schemaPath:"#/$defs/AccountInterestRateSettingsaf30/properties/indexSourceKey/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid4 = _errs33 === errors;}else {var valid4 = true;}if(valid4){if(data13.interestRateCeilingValue !== undefined){let data20 = data13.interestRateCeilingValue;const _errs35 = errors;if(!((typeof data20 == "number") && (isFinite(data20)))){validate14.errors = [{instancePath:instancePath+"/accountInterestRateSettings/" + i0+"/interestRateCeilingValue",schemaPath:"#/$defs/AccountInterestRateSettingsaf30/properties/interestRateCeilingValue/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid4 = _errs35 === errors;}else {var valid4 = true;}if(valid4){if(data13.encodedKey !== undefined){const _errs37 = errors;if(typeof data13.encodedKey !== "string"){validate14.errors = [{instancePath:instancePath+"/accountInterestRateSettings/" + i0+"/encodedKey",schemaPath:"#/$defs/AccountInterestRateSettingsaf30/properties/encodedKey/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid4 = _errs37 === errors;}else {var valid4 = true;}if(valid4){if(data13.validFrom !== undefined){const _errs39 = errors;if(errors === _errs39){if(errors === _errs39){if(!(typeof data13.validFrom === "string")){validate14.errors = [{instancePath:instancePath+"/accountInterestRateSettings/" + i0+"/validFrom",schemaPath:"#/$defs/AccountInterestRateSettingsaf30/properties/validFrom/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}}var valid4 = _errs39 === errors;}else {var valid4 = true;}if(valid4){if(data13.interestRateFloorValue !== undefined){let data23 = data13.interestRateFloorValue;const _errs41 = errors;if(!((typeof data23 == "number") && (isFinite(data23)))){validate14.errors = [{instancePath:instancePath+"/accountInterestRateSettings/" + i0+"/interestRateFloorValue",schemaPath:"#/$defs/AccountInterestRateSettingsaf30/properties/interestRateFloorValue/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid4 = _errs41 === errors;}else {var valid4 = true;}}}}}}}}}}}}else {validate14.errors = [{instancePath:instancePath+"/accountInterestRateSettings/" + i0,schemaPath:"#/$defs/AccountInterestRateSettingsaf30/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}var valid2 = _errs21 === errors;if(!valid2){break;}}}else {validate14.errors = [{instancePath:instancePath+"/accountInterestRateSettings",schemaPath:"#/properties/accountInterestRateSettings/type",keyword:"type",params:{type: "array"},message:"must be array"}];return false;}}var valid0 = _errs19 === errors;}else {var valid0 = true;}}}}}}}}}}}}}}else {validate14.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}validate14.errors = vErrors;return errors === 0;}const schema21 = {"type":"object","title":"Assetaf30","description":"Asset, holds information about a client asset entry.","properties":{"amount":{"type":"number","title":"amount","description":"The amount used by the client for the guaranty"},"originalAmount":{"type":"number","title":"originalAmount","description":"The original amount used by the client for a collateral asset"},"depositAccountKey":{"type":"string","title":"depositAccountKey","description":"The key of the deposit account used by the guarantor (populated when the guaranty type is GUARANTOR). It can be null."},"assetName":{"type":"string","title":"assetName","description":"The name of a value the client guarantees with (populated when the guaranty type is ASSET)"},"encodedKey":{"type":"string","title":"encodedKey","description":"The encoded key of the security, auto generated, unique."},"guarantorKey":{"type":"string","title":"guarantorKey","description":"The key of the client/group used as the guarantor."},"guarantorType":{"title":"guarantorType","description":"The type of the guarantor (client/group)","enum":["CLIENT","GROUP"]},"originalCurrency":{"title":"originalCurrency","$ref":"#/$defs/Currencyaf30"}},"required":["amount","assetName"],"additionalProperties":true};function validate16(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){let vErrors = null;let errors = 0;if(errors === 0){if(data && typeof data == "object" && !Array.isArray(data)){let missing0;if(((data.amount === undefined) && (missing0 = "amount")) || ((data.assetName === undefined) && (missing0 = "assetName"))){validate16.errors = [{instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];return false;}else {if(data.amount !== undefined){let data0 = data.amount;const _errs2 = errors;if(!((typeof data0 == "number") && (isFinite(data0)))){validate16.errors = [{instancePath:instancePath+"/amount",schemaPath:"#/properties/amount/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid0 = _errs2 === errors;}else {var valid0 = true;}if(valid0){if(data.originalAmount !== undefined){let data1 = data.originalAmount;const _errs4 = errors;if(!((typeof data1 == "number") && (isFinite(data1)))){validate16.errors = [{instancePath:instancePath+"/originalAmount",schemaPath:"#/properties/originalAmount/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid0 = _errs4 === errors;}else {var valid0 = true;}if(valid0){if(data.depositAccountKey !== undefined){const _errs6 = errors;if(typeof data.depositAccountKey !== "string"){validate16.errors = [{instancePath:instancePath+"/depositAccountKey",schemaPath:"#/properties/depositAccountKey/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid0 = _errs6 === errors;}else {var valid0 = true;}if(valid0){if(data.assetName !== undefined){const _errs8 = errors;if(typeof data.assetName !== "string"){validate16.errors = [{instancePath:instancePath+"/assetName",schemaPath:"#/properties/assetName/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid0 = _errs8 === errors;}else {var valid0 = true;}if(valid0){if(data.encodedKey !== undefined){const _errs10 = errors;if(typeof data.encodedKey !== "string"){validate16.errors = [{instancePath:instancePath+"/encodedKey",schemaPath:"#/properties/encodedKey/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid0 = _errs10 === errors;}else {var valid0 = true;}if(valid0){if(data.guarantorKey !== undefined){const _errs12 = errors;if(typeof data.guarantorKey !== "string"){validate16.errors = [{instancePath:instancePath+"/guarantorKey",schemaPath:"#/properties/guarantorKey/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid0 = _errs12 === errors;}else {var valid0 = true;}if(valid0){if(data.guarantorType !== undefined){let data6 = data.guarantorType;const _errs14 = errors;if(!((data6 === "CLIENT") || (data6 === "GROUP"))){validate16.errors = [{instancePath:instancePath+"/guarantorType",schemaPath:"#/properties/guarantorType/enum",keyword:"enum",params:{allowedValues: schema21.properties.guarantorType.enum},message:"must be equal to one of the allowed values"}];return false;}var valid0 = _errs14 === errors;}else {var valid0 = true;}if(valid0){if(data.originalCurrency !== undefined){let data7 = data.originalCurrency;const _errs15 = errors;const _errs16 = errors;if(errors === _errs16){if(data7 && typeof data7 == "object" && !Array.isArray(data7)){if(data7.currencyCode !== undefined){const _errs19 = errors;if(typeof data7.currencyCode !== "string"){validate16.errors = [{instancePath:instancePath+"/originalCurrency/currencyCode",schemaPath:"#/$defs/Currencyaf30/properties/currencyCode/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid2 = _errs19 === errors;}else {var valid2 = true;}if(valid2){if(data7.code !== undefined){const _errs21 = errors;let valid3;valid3 = false;for(const v0 of schema22.properties.code.enum){if(func0(data7.code, v0)){valid3 = true;break;}}if(!valid3){validate16.errors = [{instancePath:instancePath+"/originalCurrency/code",schemaPath:"#/$defs/Currencyaf30/properties/code/enum",keyword:"enum",params:{allowedValues: schema22.properties.code.enum},message:"must be equal to one of the allowed values"}];return false;}var valid2 = _errs21 === errors;}else {var valid2 = true;}}}else {validate16.errors = [{instancePath:instancePath+"/originalCurrency",schemaPath:"#/$defs/Currencyaf30/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}var valid0 = _errs15 === errors;}else {var valid0 = true;}}}}}}}}}}else {validate16.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}validate16.errors = vErrors;return errors === 0;}const schema23 = {"type":"object","title":"LoanTrancheaf30","description":"In some cases organizations may approve loans but not disburse the full amount initially. They would like to spread the disbursement (and risk) over time. Likewise for the client, they may not need the full loan amount up front. They may want to have a loan to buy some equipment for their business but will make one purchase today and another purchase in a few months.  In these cases, they don't need the full amount and wouldn't want to pay interest on cash they don't need yet. A solution for this matter is the usage of disbursement in tranches. This class holds the information required for one of this tranche. ","properties":{"encodedKey":{"type":"string","title":"encodedKey","description":"The encoded key of the transaction details , auto generated, unique."},"amount":{"type":"number","title":"amount","description":"The amount this tranche has available for disburse"},"fees":{"type":"array","title":"fees","description":"Fees that are associated with this tranche","items":{"$ref":"#/$defs/CustomPredefinedFeeaf30"}},"disbursementDetails":{"title":"disbursementDetails","$ref":"#/$defs/TrancheDisbursementDetailsaf30"},"trancheNumber":{"type":"integer","title":"trancheNumber","description":"Index indicating the tranche number"}},"required":["amount"],"additionalProperties":true};const schema25 = {"type":"object","title":"TrancheDisbursementDetailsaf30","description":"The disbursement details regarding a loan tranche.","properties":{"expectedDisbursementDate":{"type":"string","title":"expectedDisbursementDate","description":"The date when this tranche is supposed to be disbursed (as Organization Time)","format":"date-time"},"disbursementTransactionKey":{"type":"string","title":"disbursementTransactionKey","description":"The key of the disbursement transaction logged when this tranche was disbursed. This field will be null until the tranche disbursement"}},"additionalProperties":true};function validate18(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){let vErrors = null;let errors = 0;if(errors === 0){if(data && typeof data == "object" && !Array.isArray(data)){let missing0;if((data.amount === undefined) && (missing0 = "amount")){validate18.errors = [{instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];return false;}else {if(data.encodedKey !== undefined){const _errs2 = errors;if(typeof data.encodedKey !== "string"){validate18.errors = [{instancePath:instancePath+"/encodedKey",schemaPath:"#/properties/encodedKey/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid0 = _errs2 === errors;}else {var valid0 = true;}if(valid0){if(data.amount !== undefined){let data1 = data.amount;const _errs4 = errors;if(!((typeof data1 == "number") && (isFinite(data1)))){validate18.errors = [{instancePath:instancePath+"/amount",schemaPath:"#/properties/amount/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid0 = _errs4 === errors;}else {var valid0 = true;}if(valid0){if(data.fees !== undefined){let data2 = data.fees;const _errs6 = errors;if(errors === _errs6){if(Array.isArray(data2)){var valid1 = true;const len0 = data2.length;for(let i0=0; i0<len0; i0++){let data3 = data2[i0];const _errs8 = errors;const _errs9 = errors;if(errors === _errs9){if(data3 && typeof data3 == "object" && !Array.isArray(data3)){if(data3.predefinedFeeEncodedKey !== undefined){const _errs12 = errors;if(typeof data3.predefinedFeeEncodedKey !== "string"){validate18.errors = [{instancePath:instancePath+"/fees/" + i0+"/predefinedFeeEncodedKey",schemaPath:"#/$defs/CustomPredefinedFeeaf30/properties/predefinedFeeEncodedKey/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid3 = _errs12 === errors;}else {var valid3 = true;}if(valid3){if(data3.encodedKey !== undefined){const _errs14 = errors;if(typeof data3.encodedKey !== "string"){validate18.errors = [{instancePath:instancePath+"/fees/" + i0+"/encodedKey",schemaPath:"#/$defs/CustomPredefinedFeeaf30/properties/encodedKey/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid3 = _errs14 === errors;}else {var valid3 = true;}if(valid3){if(data3.amount !== undefined){let data6 = data3.amount;const _errs16 = errors;if(!((typeof data6 == "number") && (isFinite(data6)))){validate18.errors = [{instancePath:instancePath+"/fees/" + i0+"/amount",schemaPath:"#/$defs/CustomPredefinedFeeaf30/properties/amount/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid3 = _errs16 === errors;}else {var valid3 = true;}if(valid3){if(data3.percentage !== undefined){let data7 = data3.percentage;const _errs18 = errors;if(!((typeof data7 == "number") && (isFinite(data7)))){validate18.errors = [{instancePath:instancePath+"/fees/" + i0+"/percentage",schemaPath:"#/$defs/CustomPredefinedFeeaf30/properties/percentage/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid3 = _errs18 === errors;}else {var valid3 = true;}}}}}else {validate18.errors = [{instancePath:instancePath+"/fees/" + i0,schemaPath:"#/$defs/CustomPredefinedFeeaf30/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}var valid1 = _errs8 === errors;if(!valid1){break;}}}else {validate18.errors = [{instancePath:instancePath+"/fees",schemaPath:"#/properties/fees/type",keyword:"type",params:{type: "array"},message:"must be array"}];return false;}}var valid0 = _errs6 === errors;}else {var valid0 = true;}if(valid0){if(data.disbursementDetails !== undefined){let data8 = data.disbursementDetails;const _errs20 = errors;const _errs21 = errors;if(errors === _errs21){if(data8 && typeof data8 == "object" && !Array.isArray(data8)){if(data8.expectedDisbursementDate !== undefined){const _errs24 = errors;if(errors === _errs24){if(errors === _errs24){if(!(typeof data8.expectedDisbursementDate === "string")){validate18.errors = [{instancePath:instancePath+"/disbursementDetails/expectedDisbursementDate",schemaPath:"#/$defs/TrancheDisbursementDetailsaf30/properties/expectedDisbursementDate/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}}var valid5 = _errs24 === errors;}else {var valid5 = true;}if(valid5){if(data8.disbursementTransactionKey !== undefined){const _errs26 = errors;if(typeof data8.disbursementTransactionKey !== "string"){validate18.errors = [{instancePath:instancePath+"/disbursementDetails/disbursementTransactionKey",schemaPath:"#/$defs/TrancheDisbursementDetailsaf30/properties/disbursementTransactionKey/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid5 = _errs26 === errors;}else {var valid5 = true;}}}else {validate18.errors = [{instancePath:instancePath+"/disbursementDetails",schemaPath:"#/$defs/TrancheDisbursementDetailsaf30/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}var valid0 = _errs20 === errors;}else {var valid0 = true;}if(valid0){if(data.trancheNumber !== undefined){let data11 = data.trancheNumber;const _errs28 = errors;if(!(((typeof data11 == "number") && (!(data11 % 1) && !isNaN(data11))) && (isFinite(data11)))){validate18.errors = [{instancePath:instancePath+"/trancheNumber",schemaPath:"#/properties/trancheNumber/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];return false;}var valid0 = _errs28 === errors;}else {var valid0 = true;}}}}}}}else {validate18.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}validate18.errors = vErrors;return errors === 0;}const schema26 = {"type":"object","title":"ScheduleSettingsaf30","description":"The schedule settings, holds all schedule properties.","properties":{"gracePeriod":{"type":"integer","title":"gracePeriod","description":"The grace period. Represents the grace period for loan repayment - in number of installments."},"periodicPayment":{"type":"number","title":"periodicPayment","description":"The periodic payment amount for the accounts which have balloon payments or Reduce Number of Installments and Optimized Payments"},"repaymentScheduleMethod":{"title":"repaymentScheduleMethod","description":"The repayment schedule method. Represents the method that determines whether the schedule will be fixed all over the loan account's life cycle or will be dynamically recomputed when required.","enum":["NONE","FIXED","DYNAMIC"]},"paymentPlan":{"type":"array","title":"paymentPlan","description":"A list of periodic payments for the current loan account.","items":{"$ref":"#/$defs/PeriodicPaymentaf30"}},"shortMonthHandlingMethod":{"title":"shortMonthHandlingMethod","description":"The short handling method. Determines how to handle the short months, if they select a fixed day of month > 28. Will be null if no such date is selected and also for the Interval methodology. Only available if the Repayment Methodology is FIXED_DAYS_OF_MONTH.","enum":["LAST_DAY_IN_MONTH","FIRST_DAY_OF_NEXT_MONTH"]},"repaymentInstallments":{"type":"integer","title":"repaymentInstallments","description":"The repayment installments. Represents how many installments are required to pay back the loan."},"gracePeriodType":{"title":"gracePeriodType","description":"The grace period type. Representing the type of grace period which is possible for a loan account.","enum":["NONE","PAY_INTEREST_ONLY","INTEREST_FORGIVENESS"]},"principalRepaymentInterval":{"type":"integer","title":"principalRepaymentInterval","description":"The principal repayment interval. Indicates the interval of repayments that the principal has to be paid."},"hasCustomSchedule":{"type":"boolean","title":"hasCustomSchedule","description":"Flag used when the repayments schedule for the current account was determined by the user, by editing the due dates or the principal due"},"repaymentPeriodUnit":{"title":"repaymentPeriodUnit","description":"The repayment period unit. Represents the frequency of loan repayment.","enum":["DAYS","WEEKS","MONTHS","YEARS"]},"previewSchedule":{"title":"previewSchedule","$ref":"#/$defs/RevolvingAccountSettingsaf30"},"fixedDaysOfMonth":{"type":"array","title":"fixedDaysOfMonth","description":"Specifies the days of the month when the repayment due dates should be. Only available if the Repayment Methodology is FIXED_DAYS_OF_MONTH.","items":{"type":"integer"}},"billingCycle":{"title":"billingCycle","$ref":"#/$defs/BillingCycleDaysaf30"},"scheduleDueDatesMethod":{"title":"scheduleDueDatesMethod","description":"The schedule due dates method. Represents the methodology used by this account to compute the due dates of the repayments.","enum":["INTERVAL","FIXED_DAYS_OF_MONTH"]},"repaymentPeriodCount":{"type":"integer","title":"repaymentPeriodCount","description":"The repayment period count. Represents how often the loan is to be repaid: stored based on the type repayment option."},"defaultFirstRepaymentDueDateOffset":{"type":"integer","title":"defaultFirstRepaymentDueDateOffset","description":"The default first repayment due date offset, indicates how many days the first repayment due date should be extended(all other due dates from the schedule are relative to first repayment due date - they will also be affected by the offset)"}},"required":["gracePeriod"],"additionalProperties":true};const schema27 = {"type":"object","title":"PeriodicPaymentaf30","description":"For fixed term loans there is the possibility to define a payment plan. A payment plan consists of multiple periodic payments. This class holds information about a periodic payment.","properties":{"toInstallment":{"type":"integer","title":"toInstallment","description":"The installment's position up to which the PMT will be used"},"encodedKey":{"type":"string","title":"encodedKey","description":"The encoded key of the periodic payment, auto generated, unique."},"amount":{"type":"number","title":"amount","description":"The PMT value used in periodic payment"}},"required":["toInstallment","amount"],"additionalProperties":true};const schema28 = {"type":"object","title":"RevolvingAccountSettingsaf30","description":"The number of previewed instalments for an account","properties":{"numberOfPreviewedInstalments":{"type":"integer","title":"numberOfPreviewedInstalments","description":"The number of previewed instalments"}},"additionalProperties":true};const schema29 = {"type":"object","title":"BillingCycleDaysaf30","description":"Defines the billing cycles settings for a loan account","properties":{"days":{"type":"array","title":"days","description":"The billing cycle start days in case it is enabled","items":{"type":"integer"},"uniqueItems":true}},"additionalProperties":true};function validate20(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){let vErrors = null;let errors = 0;if(errors === 0){if(data && typeof data == "object" && !Array.isArray(data)){let missing0;if((data.gracePeriod === undefined) && (missing0 = "gracePeriod")){validate20.errors = [{instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];return false;}else {if(data.gracePeriod !== undefined){let data0 = data.gracePeriod;const _errs2 = errors;if(!(((typeof data0 == "number") && (!(data0 % 1) && !isNaN(data0))) && (isFinite(data0)))){validate20.errors = [{instancePath:instancePath+"/gracePeriod",schemaPath:"#/properties/gracePeriod/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];return false;}var valid0 = _errs2 === errors;}else {var valid0 = true;}if(valid0){if(data.periodicPayment !== undefined){let data1 = data.periodicPayment;const _errs4 = errors;if(!((typeof data1 == "number") && (isFinite(data1)))){validate20.errors = [{instancePath:instancePath+"/periodicPayment",schemaPath:"#/properties/periodicPayment/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid0 = _errs4 === errors;}else {var valid0 = true;}if(valid0){if(data.repaymentScheduleMethod !== undefined){let data2 = data.repaymentScheduleMethod;const _errs6 = errors;if(!(((data2 === "NONE") || (data2 === "FIXED")) || (data2 === "DYNAMIC"))){validate20.errors = [{instancePath:instancePath+"/repaymentScheduleMethod",schemaPath:"#/properties/repaymentScheduleMethod/enum",keyword:"enum",params:{allowedValues: schema26.properties.repaymentScheduleMethod.enum},message:"must be equal to one of the allowed values"}];return false;}var valid0 = _errs6 === errors;}else {var valid0 = true;}if(valid0){if(data.paymentPlan !== undefined){let data3 = data.paymentPlan;const _errs7 = errors;if(errors === _errs7){if(Array.isArray(data3)){var valid1 = true;const len0 = data3.length;for(let i0=0; i0<len0; i0++){let data4 = data3[i0];const _errs9 = errors;const _errs10 = errors;if(errors === _errs10){if(data4 && typeof data4 == "object" && !Array.isArray(data4)){let missing1;if(((data4.toInstallment === undefined) && (missing1 = "toInstallment")) || ((data4.amount === undefined) && (missing1 = "amount"))){validate20.errors = [{instancePath:instancePath+"/paymentPlan/" + i0,schemaPath:"#/$defs/PeriodicPaymentaf30/required",keyword:"required",params:{missingProperty: missing1},message:"must have required property '"+missing1+"'"}];return false;}else {if(data4.toInstallment !== undefined){let data5 = data4.toInstallment;const _errs13 = errors;if(!(((typeof data5 == "number") && (!(data5 % 1) && !isNaN(data5))) && (isFinite(data5)))){validate20.errors = [{instancePath:instancePath+"/paymentPlan/" + i0+"/toInstallment",schemaPath:"#/$defs/PeriodicPaymentaf30/properties/toInstallment/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];return false;}var valid3 = _errs13 === errors;}else {var valid3 = true;}if(valid3){if(data4.encodedKey !== undefined){const _errs15 = errors;if(typeof data4.encodedKey !== "string"){validate20.errors = [{instancePath:instancePath+"/paymentPlan/" + i0+"/encodedKey",schemaPath:"#/$defs/PeriodicPaymentaf30/properties/encodedKey/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid3 = _errs15 === errors;}else {var valid3 = true;}if(valid3){if(data4.amount !== undefined){let data7 = data4.amount;const _errs17 = errors;if(!((typeof data7 == "number") && (isFinite(data7)))){validate20.errors = [{instancePath:instancePath+"/paymentPlan/" + i0+"/amount",schemaPath:"#/$defs/PeriodicPaymentaf30/properties/amount/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid3 = _errs17 === errors;}else {var valid3 = true;}}}}}else {validate20.errors = [{instancePath:instancePath+"/paymentPlan/" + i0,schemaPath:"#/$defs/PeriodicPaymentaf30/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}var valid1 = _errs9 === errors;if(!valid1){break;}}}else {validate20.errors = [{instancePath:instancePath+"/paymentPlan",schemaPath:"#/properties/paymentPlan/type",keyword:"type",params:{type: "array"},message:"must be array"}];return false;}}var valid0 = _errs7 === errors;}else {var valid0 = true;}if(valid0){if(data.shortMonthHandlingMethod !== undefined){let data8 = data.shortMonthHandlingMethod;const _errs19 = errors;if(!((data8 === "LAST_DAY_IN_MONTH") || (data8 === "FIRST_DAY_OF_NEXT_MONTH"))){validate20.errors = [{instancePath:instancePath+"/shortMonthHandlingMethod",schemaPath:"#/properties/shortMonthHandlingMethod/enum",keyword:"enum",params:{allowedValues: schema26.properties.shortMonthHandlingMethod.enum},message:"must be equal to one of the allowed values"}];return false;}var valid0 = _errs19 === errors;}else {var valid0 = true;}if(valid0){if(data.repaymentInstallments !== undefined){let data9 = data.repaymentInstallments;const _errs20 = errors;if(!(((typeof data9 == "number") && (!(data9 % 1) && !isNaN(data9))) && (isFinite(data9)))){validate20.errors = [{instancePath:instancePath+"/repaymentInstallments",schemaPath:"#/properties/repaymentInstallments/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];return false;}var valid0 = _errs20 === errors;}else {var valid0 = true;}if(valid0){if(data.gracePeriodType !== undefined){let data10 = data.gracePeriodType;const _errs22 = errors;if(!(((data10 === "NONE") || (data10 === "PAY_INTEREST_ONLY")) || (data10 === "INTEREST_FORGIVENESS"))){validate20.errors = [{instancePath:instancePath+"/gracePeriodType",schemaPath:"#/properties/gracePeriodType/enum",keyword:"enum",params:{allowedValues: schema26.properties.gracePeriodType.enum},message:"must be equal to one of the allowed values"}];return false;}var valid0 = _errs22 === errors;}else {var valid0 = true;}if(valid0){if(data.principalRepaymentInterval !== undefined){let data11 = data.principalRepaymentInterval;const _errs23 = errors;if(!(((typeof data11 == "number") && (!(data11 % 1) && !isNaN(data11))) && (isFinite(data11)))){validate20.errors = [{instancePath:instancePath+"/principalRepaymentInterval",schemaPath:"#/properties/principalRepaymentInterval/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];return false;}var valid0 = _errs23 === errors;}else {var valid0 = true;}if(valid0){if(data.hasCustomSchedule !== undefined){const _errs25 = errors;if(typeof data.hasCustomSchedule !== "boolean"){validate20.errors = [{instancePath:instancePath+"/hasCustomSchedule",schemaPath:"#/properties/hasCustomSchedule/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"}];return false;}var valid0 = _errs25 === errors;}else {var valid0 = true;}if(valid0){if(data.repaymentPeriodUnit !== undefined){let data13 = data.repaymentPeriodUnit;const _errs27 = errors;if(!((((data13 === "DAYS") || (data13 === "WEEKS")) || (data13 === "MONTHS")) || (data13 === "YEARS"))){validate20.errors = [{instancePath:instancePath+"/repaymentPeriodUnit",schemaPath:"#/properties/repaymentPeriodUnit/enum",keyword:"enum",params:{allowedValues: schema26.properties.repaymentPeriodUnit.enum},message:"must be equal to one of the allowed values"}];return false;}var valid0 = _errs27 === errors;}else {var valid0 = true;}if(valid0){if(data.previewSchedule !== undefined){let data14 = data.previewSchedule;const _errs28 = errors;const _errs29 = errors;if(errors === _errs29){if(data14 && typeof data14 == "object" && !Array.isArray(data14)){if(data14.numberOfPreviewedInstalments !== undefined){let data15 = data14.numberOfPreviewedInstalments;if(!(((typeof data15 == "number") && (!(data15 % 1) && !isNaN(data15))) && (isFinite(data15)))){validate20.errors = [{instancePath:instancePath+"/previewSchedule/numberOfPreviewedInstalments",schemaPath:"#/$defs/RevolvingAccountSettingsaf30/properties/numberOfPreviewedInstalments/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];return false;}}}else {validate20.errors = [{instancePath:instancePath+"/previewSchedule",schemaPath:"#/$defs/RevolvingAccountSettingsaf30/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}var valid0 = _errs28 === errors;}else {var valid0 = true;}if(valid0){if(data.fixedDaysOfMonth !== undefined){let data16 = data.fixedDaysOfMonth;const _errs34 = errors;if(errors === _errs34){if(Array.isArray(data16)){var valid6 = true;const len1 = data16.length;for(let i1=0; i1<len1; i1++){let data17 = data16[i1];const _errs36 = errors;if(!(((typeof data17 == "number") && (!(data17 % 1) && !isNaN(data17))) && (isFinite(data17)))){validate20.errors = [{instancePath:instancePath+"/fixedDaysOfMonth/" + i1,schemaPath:"#/properties/fixedDaysOfMonth/items/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];return false;}var valid6 = _errs36 === errors;if(!valid6){break;}}}else {validate20.errors = [{instancePath:instancePath+"/fixedDaysOfMonth",schemaPath:"#/properties/fixedDaysOfMonth/type",keyword:"type",params:{type: "array"},message:"must be array"}];return false;}}var valid0 = _errs34 === errors;}else {var valid0 = true;}if(valid0){if(data.billingCycle !== undefined){let data18 = data.billingCycle;const _errs38 = errors;const _errs39 = errors;if(errors === _errs39){if(data18 && typeof data18 == "object" && !Array.isArray(data18)){if(data18.days !== undefined){let data19 = data18.days;const _errs42 = errors;if(errors === _errs42){if(Array.isArray(data19)){var valid9 = true;const len2 = data19.length;for(let i2=0; i2<len2; i2++){let data20 = data19[i2];const _errs44 = errors;if(!(((typeof data20 == "number") && (!(data20 % 1) && !isNaN(data20))) && (isFinite(data20)))){validate20.errors = [{instancePath:instancePath+"/billingCycle/days/" + i2,schemaPath:"#/$defs/BillingCycleDaysaf30/properties/days/items/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];return false;}var valid9 = _errs44 === errors;if(!valid9){break;}}if(valid9){let i3 = data19.length;let j0;if(i3 > 1){const indices0 = {};for(;i3--;){let item0 = data19[i3];if(!(((typeof item0 == "number") && (!(item0 % 1) && !isNaN(item0))) && (isFinite(item0)))){continue;}if(typeof indices0[item0] == "number"){j0 = indices0[item0];validate20.errors = [{instancePath:instancePath+"/billingCycle/days",schemaPath:"#/$defs/BillingCycleDaysaf30/properties/days/uniqueItems",keyword:"uniqueItems",params:{i: i3, j: j0},message:"must NOT have duplicate items (items ## "+j0+" and "+i3+" are identical)"}];return false;break;}indices0[item0] = i3;}}}}else {validate20.errors = [{instancePath:instancePath+"/billingCycle/days",schemaPath:"#/$defs/BillingCycleDaysaf30/properties/days/type",keyword:"type",params:{type: "array"},message:"must be array"}];return false;}}}}else {validate20.errors = [{instancePath:instancePath+"/billingCycle",schemaPath:"#/$defs/BillingCycleDaysaf30/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}var valid0 = _errs38 === errors;}else {var valid0 = true;}if(valid0){if(data.scheduleDueDatesMethod !== undefined){let data21 = data.scheduleDueDatesMethod;const _errs46 = errors;if(!((data21 === "INTERVAL") || (data21 === "FIXED_DAYS_OF_MONTH"))){validate20.errors = [{instancePath:instancePath+"/scheduleDueDatesMethod",schemaPath:"#/properties/scheduleDueDatesMethod/enum",keyword:"enum",params:{allowedValues: schema26.properties.scheduleDueDatesMethod.enum},message:"must be equal to one of the allowed values"}];return false;}var valid0 = _errs46 === errors;}else {var valid0 = true;}if(valid0){if(data.repaymentPeriodCount !== undefined){let data22 = data.repaymentPeriodCount;const _errs47 = errors;if(!(((typeof data22 == "number") && (!(data22 % 1) && !isNaN(data22))) && (isFinite(data22)))){validate20.errors = [{instancePath:instancePath+"/repaymentPeriodCount",schemaPath:"#/properties/repaymentPeriodCount/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];return false;}var valid0 = _errs47 === errors;}else {var valid0 = true;}if(valid0){if(data.defaultFirstRepaymentDueDateOffset !== undefined){let data23 = data.defaultFirstRepaymentDueDateOffset;const _errs49 = errors;if(!(((typeof data23 == "number") && (!(data23 % 1) && !isNaN(data23))) && (isFinite(data23)))){validate20.errors = [{instancePath:instancePath+"/defaultFirstRepaymentDueDateOffset",schemaPath:"#/properties/defaultFirstRepaymentDueDateOffset/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];return false;}var valid0 = _errs49 === errors;}else {var valid0 = true;}}}}}}}}}}}}}}}}}}else {validate20.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}validate20.errors = vErrors;return errors === 0;}function validate11(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){let vErrors = null;let errors = 0;if(errors === 0){if(data && typeof data == "object" && !Array.isArray(data)){let missing0;let valid0 = true;for( missing0 of schema12.required){valid0 = data[missing0] !== undefined;if(!valid0){validate11.errors = [{instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];return false;break;}}if(valid0){if(data.accountState !== undefined){const _errs2 = errors;let valid2;valid2 = false;for(const v0 of schema12.properties.accountState.enum){if(func0(data.accountState, v0)){valid2 = true;break;}}if(!valid2){validate11.errors = [{instancePath:instancePath+"/accountState",schemaPath:"#/properties/accountState/enum",keyword:"enum",params:{allowedValues: schema12.properties.accountState.enum},message:"must be equal to one of the allowed values"}];return false;}var valid1 = _errs2 === errors;}else {var valid1 = true;}if(valid1){if(data.prepaymentSettings !== undefined){let data1 = data.prepaymentSettings;const _errs3 = errors;const _errs4 = errors;if(errors === _errs4){if(data1 && typeof data1 == "object" && !Array.isArray(data1)){if(data1.elementsRecalculationMethod !== undefined){let data2 = data1.elementsRecalculationMethod;const _errs7 = errors;if(!((data2 === "PRINCIPAL_EXPECTED_FIXED") || (data2 === "TOTAL_EXPECTED_FIXED"))){validate11.errors = [{instancePath:instancePath+"/prepaymentSettings/elementsRecalculationMethod",schemaPath:"#/$defs/PrepaymentSettingsaf30/properties/elementsRecalculationMethod/enum",keyword:"enum",params:{allowedValues: schema13.properties.elementsRecalculationMethod.enum},message:"must be equal to one of the allowed values"}];return false;}var valid4 = _errs7 === errors;}else {var valid4 = true;}if(valid4){if(data1.principalPaidInstallmentStatus !== undefined){let data3 = data1.principalPaidInstallmentStatus;const _errs8 = errors;if(!(((data3 === "PARTIALLY_PAID") || (data3 === "PAID")) || (data3 === "ORIGINAL_TOTAL_EXPECTED_PAID"))){validate11.errors = [{instancePath:instancePath+"/prepaymentSettings/principalPaidInstallmentStatus",schemaPath:"#/$defs/PrepaymentSettingsaf30/properties/principalPaidInstallmentStatus/enum",keyword:"enum",params:{allowedValues: schema13.properties.principalPaidInstallmentStatus.enum},message:"must be equal to one of the allowed values"}];return false;}var valid4 = _errs8 === errors;}else {var valid4 = true;}if(valid4){if(data1.prepaymentRecalculationMethod !== undefined){const _errs9 = errors;let valid5;valid5 = false;for(const v1 of schema13.properties.prepaymentRecalculationMethod.enum){if(func0(data1.prepaymentRecalculationMethod, v1)){valid5 = true;break;}}if(!valid5){validate11.errors = [{instancePath:instancePath+"/prepaymentSettings/prepaymentRecalculationMethod",schemaPath:"#/$defs/PrepaymentSettingsaf30/properties/prepaymentRecalculationMethod/enum",keyword:"enum",params:{allowedValues: schema13.properties.prepaymentRecalculationMethod.enum},message:"must be equal to one of the allowed values"}];return false;}var valid4 = _errs9 === errors;}else {var valid4 = true;}if(valid4){if(data1.applyInterestOnPrepaymentMethod !== undefined){let data5 = data1.applyInterestOnPrepaymentMethod;const _errs10 = errors;if(!((data5 === "AUTOMATIC") || (data5 === "MANUAL"))){validate11.errors = [{instancePath:instancePath+"/prepaymentSettings/applyInterestOnPrepaymentMethod",schemaPath:"#/$defs/PrepaymentSettingsaf30/properties/applyInterestOnPrepaymentMethod/enum",keyword:"enum",params:{allowedValues: schema13.properties.applyInterestOnPrepaymentMethod.enum},message:"must be equal to one of the allowed values"}];return false;}var valid4 = _errs10 === errors;}else {var valid4 = true;}}}}}else {validate11.errors = [{instancePath:instancePath+"/prepaymentSettings",schemaPath:"#/$defs/PrepaymentSettingsaf30/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}var valid1 = _errs3 === errors;}else {var valid1 = true;}if(valid1){if(data.migrationEventKey !== undefined){const _errs11 = errors;if(typeof data.migrationEventKey !== "string"){validate11.errors = [{instancePath:instancePath+"/migrationEventKey",schemaPath:"#/properties/migrationEventKey/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid1 = _errs11 === errors;}else {var valid1 = true;}if(valid1){if(data.lastSetToArrearsDate !== undefined){const _errs13 = errors;if(errors === _errs13){if(errors === _errs13){if(!(typeof data.lastSetToArrearsDate === "string")){validate11.errors = [{instancePath:instancePath+"/lastSetToArrearsDate",schemaPath:"#/properties/lastSetToArrearsDate/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}}var valid1 = _errs13 === errors;}else {var valid1 = true;}if(valid1){if(data.notes !== undefined){const _errs15 = errors;if(typeof data.notes !== "string"){validate11.errors = [{instancePath:instancePath+"/notes",schemaPath:"#/properties/notes/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid1 = _errs15 === errors;}else {var valid1 = true;}if(valid1){if(data.disbursementDetails !== undefined){const _errs17 = errors;if(!(validate12(data.disbursementDetails, {instancePath:instancePath+"/disbursementDetails",parentData:data,parentDataProperty:"disbursementDetails",rootData}))){vErrors = vErrors === null ? validate12.errors : vErrors.concat(validate12.errors);errors = vErrors.length;}var valid1 = _errs17 === errors;}else {var valid1 = true;}if(valid1){if(data.redrawSettings !== undefined){let data10 = data.redrawSettings;const _errs18 = errors;const _errs19 = errors;if(errors === _errs19){if(data10 && typeof data10 == "object" && !Array.isArray(data10)){let missing1;if((data10.restrictNextDueWithdrawal === undefined) && (missing1 = "restrictNextDueWithdrawal")){validate11.errors = [{instancePath:instancePath+"/redrawSettings",schemaPath:"#/$defs/LoanAccountRedrawSettingsaf30/required",keyword:"required",params:{missingProperty: missing1},message:"must have required property '"+missing1+"'"}];return false;}else {if(data10.restrictNextDueWithdrawal !== undefined){if(typeof data10.restrictNextDueWithdrawal !== "boolean"){validate11.errors = [{instancePath:instancePath+"/redrawSettings/restrictNextDueWithdrawal",schemaPath:"#/$defs/LoanAccountRedrawSettingsaf30/properties/restrictNextDueWithdrawal/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"}];return false;}}}}else {validate11.errors = [{instancePath:instancePath+"/redrawSettings",schemaPath:"#/$defs/LoanAccountRedrawSettingsaf30/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}var valid1 = _errs18 === errors;}else {var valid1 = true;}if(valid1){if(data.plannedInstallmentFees !== undefined){let data12 = data.plannedInstallmentFees;const _errs24 = errors;if(errors === _errs24){if(Array.isArray(data12)){var valid8 = true;const len0 = data12.length;for(let i0=0; i0<len0; i0++){let data13 = data12[i0];const _errs26 = errors;const _errs27 = errors;if(errors === _errs27){if(data13 && typeof data13 == "object" && !Array.isArray(data13)){let missing2;if((data13.predefinedFeeKey === undefined) && (missing2 = "predefinedFeeKey")){validate11.errors = [{instancePath:instancePath+"/plannedInstallmentFees/" + i0,schemaPath:"#/$defs/PlannedInstallmentFeeaf30/required",keyword:"required",params:{missingProperty: missing2},message:"must have required property '"+missing2+"'"}];return false;}else {if(data13.installmentNumber !== undefined){let data14 = data13.installmentNumber;const _errs30 = errors;if(!(((typeof data14 == "number") && (!(data14 % 1) && !isNaN(data14))) && (isFinite(data14)))){validate11.errors = [{instancePath:instancePath+"/plannedInstallmentFees/" + i0+"/installmentNumber",schemaPath:"#/$defs/PlannedInstallmentFeeaf30/properties/installmentNumber/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];return false;}var valid10 = _errs30 === errors;}else {var valid10 = true;}if(valid10){if(data13.amount !== undefined){let data15 = data13.amount;const _errs32 = errors;if(!((typeof data15 == "number") && (isFinite(data15)))){validate11.errors = [{instancePath:instancePath+"/plannedInstallmentFees/" + i0+"/amount",schemaPath:"#/$defs/PlannedInstallmentFeeaf30/properties/amount/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid10 = _errs32 === errors;}else {var valid10 = true;}if(valid10){if(data13.applyOnDate !== undefined){const _errs34 = errors;if(errors === _errs34){if(errors === _errs34){if(!(typeof data13.applyOnDate === "string")){validate11.errors = [{instancePath:instancePath+"/plannedInstallmentFees/" + i0+"/applyOnDate",schemaPath:"#/$defs/PlannedInstallmentFeeaf30/properties/applyOnDate/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}}var valid10 = _errs34 === errors;}else {var valid10 = true;}if(valid10){if(data13.predefinedFeeKey !== undefined){const _errs36 = errors;if(typeof data13.predefinedFeeKey !== "string"){validate11.errors = [{instancePath:instancePath+"/plannedInstallmentFees/" + i0+"/predefinedFeeKey",schemaPath:"#/$defs/PlannedInstallmentFeeaf30/properties/predefinedFeeKey/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid10 = _errs36 === errors;}else {var valid10 = true;}if(valid10){if(data13.encodedKey !== undefined){const _errs38 = errors;if(typeof data13.encodedKey !== "string"){validate11.errors = [{instancePath:instancePath+"/plannedInstallmentFees/" + i0+"/encodedKey",schemaPath:"#/$defs/PlannedInstallmentFeeaf30/properties/encodedKey/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid10 = _errs38 === errors;}else {var valid10 = true;}if(valid10){if(data13.installmentKey !== undefined){const _errs40 = errors;if(typeof data13.installmentKey !== "string"){validate11.errors = [{instancePath:instancePath+"/plannedInstallmentFees/" + i0+"/installmentKey",schemaPath:"#/$defs/PlannedInstallmentFeeaf30/properties/installmentKey/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid10 = _errs40 === errors;}else {var valid10 = true;}}}}}}}}else {validate11.errors = [{instancePath:instancePath+"/plannedInstallmentFees/" + i0,schemaPath:"#/$defs/PlannedInstallmentFeeaf30/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}var valid8 = _errs26 === errors;if(!valid8){break;}}}else {validate11.errors = [{instancePath:instancePath+"/plannedInstallmentFees",schemaPath:"#/properties/plannedInstallmentFees/type",keyword:"type",params:{type: "array"},message:"must be array"}];return false;}}var valid1 = _errs24 === errors;}else {var valid1 = true;}if(valid1){if(data.daysInArrears !== undefined){let data20 = data.daysInArrears;const _errs42 = errors;if(!(((typeof data20 == "number") && (!(data20 % 1) && !isNaN(data20))) && (isFinite(data20)))){validate11.errors = [{instancePath:instancePath+"/daysInArrears",schemaPath:"#/properties/daysInArrears/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];return false;}var valid1 = _errs42 === errors;}else {var valid1 = true;}if(valid1){if(data.accountSubState !== undefined){const _errs44 = errors;let valid11;valid11 = false;for(const v2 of schema12.properties.accountSubState.enum){if(func0(data.accountSubState, v2)){valid11 = true;break;}}if(!valid11){validate11.errors = [{instancePath:instancePath+"/accountSubState",schemaPath:"#/properties/accountSubState/enum",keyword:"enum",params:{allowedValues: schema12.properties.accountSubState.enum},message:"must be equal to one of the allowed values"}];return false;}var valid1 = _errs44 === errors;}else {var valid1 = true;}if(valid1){if(data.loanName !== undefined){const _errs45 = errors;if(typeof data.loanName !== "string"){validate11.errors = [{instancePath:instancePath+"/loanName",schemaPath:"#/properties/loanName/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid1 = _errs45 === errors;}else {var valid1 = true;}if(valid1){if(data.terminationDate !== undefined){const _errs47 = errors;if(errors === _errs47){if(errors === _errs47){if(!(typeof data.terminationDate === "string")){validate11.errors = [{instancePath:instancePath+"/terminationDate",schemaPath:"#/properties/terminationDate/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}}var valid1 = _errs47 === errors;}else {var valid1 = true;}if(valid1){if(data.interestSettings !== undefined){const _errs49 = errors;if(!(validate14(data.interestSettings, {instancePath:instancePath+"/interestSettings",parentData:data,parentDataProperty:"interestSettings",rootData}))){vErrors = vErrors === null ? validate14.errors : vErrors.concat(validate14.errors);errors = vErrors.length;}var valid1 = _errs49 === errors;}else {var valid1 = true;}if(valid1){if(data.assets !== undefined){let data25 = data.assets;const _errs50 = errors;if(errors === _errs50){if(Array.isArray(data25)){var valid12 = true;const len1 = data25.length;for(let i1=0; i1<len1; i1++){const _errs52 = errors;if(!(validate16(data25[i1], {instancePath:instancePath+"/assets/" + i1,parentData:data25,parentDataProperty:i1,rootData}))){vErrors = vErrors === null ? validate16.errors : vErrors.concat(validate16.errors);errors = vErrors.length;}var valid12 = _errs52 === errors;if(!valid12){break;}}}else {validate11.errors = [{instancePath:instancePath+"/assets",schemaPath:"#/properties/assets/type",keyword:"type",params:{type: "array"},message:"must be array"}];return false;}}var valid1 = _errs50 === errors;}else {var valid1 = true;}if(valid1){if(data.lastInterestReviewDate !== undefined){const _errs53 = errors;if(errors === _errs53){if(errors === _errs53){if(!(typeof data.lastInterestReviewDate === "string")){validate11.errors = [{instancePath:instancePath+"/lastInterestReviewDate",schemaPath:"#/properties/lastInterestReviewDate/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}}var valid1 = _errs53 === errors;}else {var valid1 = true;}if(valid1){if(data.id !== undefined){const _errs55 = errors;if(typeof data.id !== "string"){validate11.errors = [{instancePath:instancePath+"/id",schemaPath:"#/properties/id/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid1 = _errs55 === errors;}else {var valid1 = true;}if(valid1){if(data.assignedUserKey !== undefined){const _errs57 = errors;if(typeof data.assignedUserKey !== "string"){validate11.errors = [{instancePath:instancePath+"/assignedUserKey",schemaPath:"#/properties/assignedUserKey/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid1 = _errs57 === errors;}else {var valid1 = true;}if(valid1){if(data.lockedAccountTotalDueType !== undefined){let data30 = data.lockedAccountTotalDueType;const _errs59 = errors;if(!((data30 === "BALANCE_AMOUNT") || (data30 === "DUE_AMOUNT_ON_LATE_INSTALLMENTS"))){validate11.errors = [{instancePath:instancePath+"/lockedAccountTotalDueType",schemaPath:"#/properties/lockedAccountTotalDueType/enum",keyword:"enum",params:{allowedValues: schema12.properties.lockedAccountTotalDueType.enum},message:"must be equal to one of the allowed values"}];return false;}var valid1 = _errs59 === errors;}else {var valid1 = true;}if(valid1){if(data.futurePaymentsAcceptance !== undefined){let data31 = data.futurePaymentsAcceptance;const _errs60 = errors;if(!(((data31 === "NO_FUTURE_PAYMENTS") || (data31 === "ACCEPT_FUTURE_PAYMENTS")) || (data31 === "ACCEPT_OVERPAYMENTS"))){validate11.errors = [{instancePath:instancePath+"/futurePaymentsAcceptance",schemaPath:"#/properties/futurePaymentsAcceptance/enum",keyword:"enum",params:{allowedValues: schema12.properties.futurePaymentsAcceptance.enum},message:"must be equal to one of the allowed values"}];return false;}var valid1 = _errs60 === errors;}else {var valid1 = true;}if(valid1){if(data.originalAccountKey !== undefined){const _errs61 = errors;if(typeof data.originalAccountKey !== "string"){validate11.errors = [{instancePath:instancePath+"/originalAccountKey",schemaPath:"#/properties/originalAccountKey/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid1 = _errs61 === errors;}else {var valid1 = true;}if(valid1){if(data.lockedOperations !== undefined){let data33 = data.lockedOperations;const _errs63 = errors;if(errors === _errs63){if(Array.isArray(data33)){var valid13 = true;const len2 = data33.length;for(let i2=0; i2<len2; i2++){let data34 = data33[i2];const _errs65 = errors;if(!(((data34 === "APPLY_INTEREST") || (data34 === "APPLY_FEES")) || (data34 === "APPLY_PENALTIES"))){validate11.errors = [{instancePath:instancePath+"/lockedOperations/" + i2,schemaPath:"#/properties/lockedOperations/items/enum",keyword:"enum",params:{allowedValues: schema12.properties.lockedOperations.items.enum},message:"must be equal to one of the allowed values"}];return false;}var valid13 = _errs65 === errors;if(!valid13){break;}}}else {validate11.errors = [{instancePath:instancePath+"/lockedOperations",schemaPath:"#/properties/lockedOperations/type",keyword:"type",params:{type: "array"},message:"must be array"}];return false;}}var valid1 = _errs63 === errors;}else {var valid1 = true;}if(valid1){if(data.accruedInterest !== undefined){let data35 = data.accruedInterest;const _errs66 = errors;if(!((typeof data35 == "number") && (isFinite(data35)))){validate11.errors = [{instancePath:instancePath+"/accruedInterest",schemaPath:"#/properties/accruedInterest/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid1 = _errs66 === errors;}else {var valid1 = true;}if(valid1){if(data.accruedPenalty !== undefined){let data36 = data.accruedPenalty;const _errs68 = errors;if(!((typeof data36 == "number") && (isFinite(data36)))){validate11.errors = [{instancePath:instancePath+"/accruedPenalty",schemaPath:"#/properties/accruedPenalty/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid1 = _errs68 === errors;}else {var valid1 = true;}if(valid1){if(data.creationDate !== undefined){const _errs70 = errors;if(errors === _errs70){if(errors === _errs70){if(!(typeof data.creationDate === "string")){validate11.errors = [{instancePath:instancePath+"/creationDate",schemaPath:"#/properties/creationDate/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}}var valid1 = _errs70 === errors;}else {var valid1 = true;}if(valid1){if(data.modifyInterestForFirstInstallment !== undefined){const _errs72 = errors;if(typeof data.modifyInterestForFirstInstallment !== "boolean"){validate11.errors = [{instancePath:instancePath+"/modifyInterestForFirstInstallment",schemaPath:"#/properties/modifyInterestForFirstInstallment/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"}];return false;}var valid1 = _errs72 === errors;}else {var valid1 = true;}if(valid1){if(data.assignedCentreKey !== undefined){const _errs74 = errors;if(typeof data.assignedCentreKey !== "string"){validate11.errors = [{instancePath:instancePath+"/assignedCentreKey",schemaPath:"#/properties/assignedCentreKey/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid1 = _errs74 === errors;}else {var valid1 = true;}if(valid1){if(data.tranches !== undefined){let data40 = data.tranches;const _errs76 = errors;if(errors === _errs76){if(Array.isArray(data40)){var valid14 = true;const len3 = data40.length;for(let i3=0; i3<len3; i3++){const _errs78 = errors;if(!(validate18(data40[i3], {instancePath:instancePath+"/tranches/" + i3,parentData:data40,parentDataProperty:i3,rootData}))){vErrors = vErrors === null ? validate18.errors : vErrors.concat(validate18.errors);errors = vErrors.length;}var valid14 = _errs78 === errors;if(!valid14){break;}}}else {validate11.errors = [{instancePath:instancePath+"/tranches",schemaPath:"#/properties/tranches/type",keyword:"type",params:{type: "array"},message:"must be array"}];return false;}}var valid1 = _errs76 === errors;}else {var valid1 = true;}if(valid1){if(data.approvedDate !== undefined){const _errs79 = errors;if(errors === _errs79){if(errors === _errs79){if(!(typeof data.approvedDate === "string")){validate11.errors = [{instancePath:instancePath+"/approvedDate",schemaPath:"#/properties/approvedDate/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}}var valid1 = _errs79 === errors;}else {var valid1 = true;}if(valid1){if(data.taxRate !== undefined){let data43 = data.taxRate;const _errs81 = errors;if(!((typeof data43 == "number") && (isFinite(data43)))){validate11.errors = [{instancePath:instancePath+"/taxRate",schemaPath:"#/properties/taxRate/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid1 = _errs81 === errors;}else {var valid1 = true;}if(valid1){if(data.lastTaxRateReviewDate !== undefined){const _errs83 = errors;if(errors === _errs83){if(errors === _errs83){if(!(typeof data.lastTaxRateReviewDate === "string")){validate11.errors = [{instancePath:instancePath+"/lastTaxRateReviewDate",schemaPath:"#/properties/lastTaxRateReviewDate/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}}var valid1 = _errs83 === errors;}else {var valid1 = true;}if(valid1){if(data.interestFromArrearsAccrued !== undefined){let data45 = data.interestFromArrearsAccrued;const _errs85 = errors;if(!((typeof data45 == "number") && (isFinite(data45)))){validate11.errors = [{instancePath:instancePath+"/interestFromArrearsAccrued",schemaPath:"#/properties/interestFromArrearsAccrued/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid1 = _errs85 === errors;}else {var valid1 = true;}if(valid1){if(data.scheduleSettings !== undefined){const _errs87 = errors;if(!(validate20(data.scheduleSettings, {instancePath:instancePath+"/scheduleSettings",parentData:data,parentDataProperty:"scheduleSettings",rootData}))){vErrors = vErrors === null ? validate20.errors : vErrors.concat(validate20.errors);errors = vErrors.length;}var valid1 = _errs87 === errors;}else {var valid1 = true;}if(valid1){if(data.daysLate !== undefined){let data47 = data.daysLate;const _errs88 = errors;if(!(((typeof data47 == "number") && (!(data47 % 1) && !isNaN(data47))) && (isFinite(data47)))){validate11.errors = [{instancePath:instancePath+"/daysLate",schemaPath:"#/properties/daysLate/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];return false;}var valid1 = _errs88 === errors;}else {var valid1 = true;}if(valid1){if(data.paymentMethod !== undefined){let data48 = data.paymentMethod;const _errs90 = errors;if(!((data48 === "HORIZONTAL") || (data48 === "VERTICAL"))){validate11.errors = [{instancePath:instancePath+"/paymentMethod",schemaPath:"#/properties/paymentMethod/enum",keyword:"enum",params:{allowedValues: schema12.properties.paymentMethod.enum},message:"must be equal to one of the allowed values"}];return false;}var valid1 = _errs90 === errors;}else {var valid1 = true;}if(valid1){if(data.accountHolderKey !== undefined){const _errs91 = errors;if(typeof data.accountHolderKey !== "string"){validate11.errors = [{instancePath:instancePath+"/accountHolderKey",schemaPath:"#/properties/accountHolderKey/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid1 = _errs91 === errors;}else {var valid1 = true;}if(valid1){if(data.latePaymentsRecalculationMethod !== undefined){let data50 = data.latePaymentsRecalculationMethod;const _errs93 = errors;if(!((data50 === "OVERDUE_INSTALLMENTS_INCREASE") || (data50 === "LAST_INSTALLMENT_INCREASE"))){validate11.errors = [{instancePath:instancePath+"/latePaymentsRecalculationMethod",schemaPath:"#/properties/latePaymentsRecalculationMethod/enum",keyword:"enum",params:{allowedValues: schema12.properties.latePaymentsRecalculationMethod.enum},message:"must be equal to one of the allowed values"}];return false;}var valid1 = _errs93 === errors;}else {var valid1 = true;}if(valid1){if(data.fundingSources !== undefined){let data51 = data.fundingSources;const _errs94 = errors;if(errors === _errs94){if(Array.isArray(data51)){var valid15 = true;const len4 = data51.length;for(let i4=0; i4<len4; i4++){let data52 = data51[i4];const _errs96 = errors;const _errs97 = errors;if(errors === _errs97){if(data52 && typeof data52 == "object" && !Array.isArray(data52)){let missing3;if((((data52.amount === undefined) && (missing3 = "amount")) || ((data52.guarantorKey === undefined) && (missing3 = "guarantorKey"))) || ((data52.guarantorType === undefined) && (missing3 = "guarantorType"))){validate11.errors = [{instancePath:instancePath+"/fundingSources/" + i4,schemaPath:"#/$defs/InvestorFundaf30/required",keyword:"required",params:{missingProperty: missing3},message:"must have required property '"+missing3+"'"}];return false;}else {if(data52.amount !== undefined){let data53 = data52.amount;const _errs100 = errors;if(!((typeof data53 == "number") && (isFinite(data53)))){validate11.errors = [{instancePath:instancePath+"/fundingSources/" + i4+"/amount",schemaPath:"#/$defs/InvestorFundaf30/properties/amount/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid17 = _errs100 === errors;}else {var valid17 = true;}if(valid17){if(data52.interestCommission !== undefined){let data54 = data52.interestCommission;const _errs102 = errors;if(!((typeof data54 == "number") && (isFinite(data54)))){validate11.errors = [{instancePath:instancePath+"/fundingSources/" + i4+"/interestCommission",schemaPath:"#/$defs/InvestorFundaf30/properties/interestCommission/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid17 = _errs102 === errors;}else {var valid17 = true;}if(valid17){if(data52.depositAccountKey !== undefined){const _errs104 = errors;if(typeof data52.depositAccountKey !== "string"){validate11.errors = [{instancePath:instancePath+"/fundingSources/" + i4+"/depositAccountKey",schemaPath:"#/$defs/InvestorFundaf30/properties/depositAccountKey/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid17 = _errs104 === errors;}else {var valid17 = true;}if(valid17){if(data52.assetName !== undefined){const _errs106 = errors;if(typeof data52.assetName !== "string"){validate11.errors = [{instancePath:instancePath+"/fundingSources/" + i4+"/assetName",schemaPath:"#/$defs/InvestorFundaf30/properties/assetName/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid17 = _errs106 === errors;}else {var valid17 = true;}if(valid17){if(data52.encodedKey !== undefined){const _errs108 = errors;if(typeof data52.encodedKey !== "string"){validate11.errors = [{instancePath:instancePath+"/fundingSources/" + i4+"/encodedKey",schemaPath:"#/$defs/InvestorFundaf30/properties/encodedKey/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid17 = _errs108 === errors;}else {var valid17 = true;}if(valid17){if(data52.id !== undefined){const _errs110 = errors;if(typeof data52.id !== "string"){validate11.errors = [{instancePath:instancePath+"/fundingSources/" + i4+"/id",schemaPath:"#/$defs/InvestorFundaf30/properties/id/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid17 = _errs110 === errors;}else {var valid17 = true;}if(valid17){if(data52.guarantorKey !== undefined){const _errs112 = errors;if(typeof data52.guarantorKey !== "string"){validate11.errors = [{instancePath:instancePath+"/fundingSources/" + i4+"/guarantorKey",schemaPath:"#/$defs/InvestorFundaf30/properties/guarantorKey/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid17 = _errs112 === errors;}else {var valid17 = true;}if(valid17){if(data52.guarantorType !== undefined){let data60 = data52.guarantorType;const _errs114 = errors;if(!((data60 === "CLIENT") || (data60 === "GROUP"))){validate11.errors = [{instancePath:instancePath+"/fundingSources/" + i4+"/guarantorType",schemaPath:"#/$defs/InvestorFundaf30/properties/guarantorType/enum",keyword:"enum",params:{allowedValues: schema30.properties.guarantorType.enum},message:"must be equal to one of the allowed values"}];return false;}var valid17 = _errs114 === errors;}else {var valid17 = true;}if(valid17){if(data52.sharePercentage !== undefined){let data61 = data52.sharePercentage;const _errs115 = errors;if(!((typeof data61 == "number") && (isFinite(data61)))){validate11.errors = [{instancePath:instancePath+"/fundingSources/" + i4+"/sharePercentage",schemaPath:"#/$defs/InvestorFundaf30/properties/sharePercentage/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid17 = _errs115 === errors;}else {var valid17 = true;}}}}}}}}}}}else {validate11.errors = [{instancePath:instancePath+"/fundingSources/" + i4,schemaPath:"#/$defs/InvestorFundaf30/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}var valid15 = _errs96 === errors;if(!valid15){break;}}}else {validate11.errors = [{instancePath:instancePath+"/fundingSources",schemaPath:"#/properties/fundingSources/type",keyword:"type",params:{type: "array"},message:"must be array"}];return false;}}var valid1 = _errs94 === errors;}else {var valid1 = true;}if(valid1){if(data.accountHolderType !== undefined){let data62 = data.accountHolderType;const _errs117 = errors;if(!((data62 === "CLIENT") || (data62 === "GROUP"))){validate11.errors = [{instancePath:instancePath+"/accountHolderType",schemaPath:"#/properties/accountHolderType/enum",keyword:"enum",params:{allowedValues: schema12.properties.accountHolderType.enum},message:"must be equal to one of the allowed values"}];return false;}var valid1 = _errs117 === errors;}else {var valid1 = true;}if(valid1){if(data.arrearsTolerancePeriod !== undefined){let data63 = data.arrearsTolerancePeriod;const _errs118 = errors;if(!(((typeof data63 == "number") && (!(data63 % 1) && !isNaN(data63))) && (isFinite(data63)))){validate11.errors = [{instancePath:instancePath+"/arrearsTolerancePeriod",schemaPath:"#/properties/arrearsTolerancePeriod/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];return false;}var valid1 = _errs118 === errors;}else {var valid1 = true;}if(valid1){if(data.lastInterestAppliedDate !== undefined){const _errs120 = errors;if(errors === _errs120){if(errors === _errs120){if(!(typeof data.lastInterestAppliedDate === "string")){validate11.errors = [{instancePath:instancePath+"/lastInterestAppliedDate",schemaPath:"#/properties/lastInterestAppliedDate/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}}var valid1 = _errs120 === errors;}else {var valid1 = true;}if(valid1){if(data.rescheduledAccountKey !== undefined){const _errs122 = errors;if(typeof data.rescheduledAccountKey !== "string"){validate11.errors = [{instancePath:instancePath+"/rescheduledAccountKey",schemaPath:"#/properties/rescheduledAccountKey/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid1 = _errs122 === errors;}else {var valid1 = true;}if(valid1){if(data.paymentHolidaysAccruedInterest !== undefined){let data66 = data.paymentHolidaysAccruedInterest;const _errs124 = errors;if(!((typeof data66 == "number") && (isFinite(data66)))){validate11.errors = [{instancePath:instancePath+"/paymentHolidaysAccruedInterest",schemaPath:"#/properties/paymentHolidaysAccruedInterest/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid1 = _errs124 === errors;}else {var valid1 = true;}if(valid1){if(data.activationTransactionKey !== undefined){const _errs126 = errors;if(typeof data.activationTransactionKey !== "string"){validate11.errors = [{instancePath:instancePath+"/activationTransactionKey",schemaPath:"#/properties/activationTransactionKey/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid1 = _errs126 === errors;}else {var valid1 = true;}if(valid1){if(data.interestAccruedInBillingCycle !== undefined){let data68 = data.interestAccruedInBillingCycle;const _errs128 = errors;if(!((typeof data68 == "number") && (isFinite(data68)))){validate11.errors = [{instancePath:instancePath+"/interestAccruedInBillingCycle",schemaPath:"#/properties/interestAccruedInBillingCycle/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid1 = _errs128 === errors;}else {var valid1 = true;}if(valid1){if(data.assignedBranchKey !== undefined){const _errs130 = errors;if(typeof data.assignedBranchKey !== "string"){validate11.errors = [{instancePath:instancePath+"/assignedBranchKey",schemaPath:"#/properties/assignedBranchKey/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid1 = _errs130 === errors;}else {var valid1 = true;}if(valid1){if(data.balances !== undefined){let data70 = data.balances;const _errs132 = errors;const _errs133 = errors;if(errors === _errs133){if(data70 && typeof data70 == "object" && !Array.isArray(data70)){if(data70.interestFromArrearsPaid !== undefined){let data71 = data70.interestFromArrearsPaid;const _errs136 = errors;if(!((typeof data71 == "number") && (isFinite(data71)))){validate11.errors = [{instancePath:instancePath+"/balances/interestFromArrearsPaid",schemaPath:"#/$defs/Balancesaf30/properties/interestFromArrearsPaid/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid19 = _errs136 === errors;}else {var valid19 = true;}if(valid19){if(data70.principalDue !== undefined){let data72 = data70.principalDue;const _errs138 = errors;if(!((typeof data72 == "number") && (isFinite(data72)))){validate11.errors = [{instancePath:instancePath+"/balances/principalDue",schemaPath:"#/$defs/Balancesaf30/properties/principalDue/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid19 = _errs138 === errors;}else {var valid19 = true;}if(valid19){if(data70.interestBalance !== undefined){let data73 = data70.interestBalance;const _errs140 = errors;if(!((typeof data73 == "number") && (isFinite(data73)))){validate11.errors = [{instancePath:instancePath+"/balances/interestBalance",schemaPath:"#/$defs/Balancesaf30/properties/interestBalance/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid19 = _errs140 === errors;}else {var valid19 = true;}if(valid19){if(data70.holdBalance !== undefined){let data74 = data70.holdBalance;const _errs142 = errors;if(!((typeof data74 == "number") && (isFinite(data74)))){validate11.errors = [{instancePath:instancePath+"/balances/holdBalance",schemaPath:"#/$defs/Balancesaf30/properties/holdBalance/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid19 = _errs142 === errors;}else {var valid19 = true;}if(valid19){if(data70.principalPaid !== undefined){let data75 = data70.principalPaid;const _errs144 = errors;if(!((typeof data75 == "number") && (isFinite(data75)))){validate11.errors = [{instancePath:instancePath+"/balances/principalPaid",schemaPath:"#/$defs/Balancesaf30/properties/principalPaid/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid19 = _errs144 === errors;}else {var valid19 = true;}if(valid19){if(data70.penaltyDue !== undefined){let data76 = data70.penaltyDue;const _errs146 = errors;if(!((typeof data76 == "number") && (isFinite(data76)))){validate11.errors = [{instancePath:instancePath+"/balances/penaltyDue",schemaPath:"#/$defs/Balancesaf30/properties/penaltyDue/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid19 = _errs146 === errors;}else {var valid19 = true;}if(valid19){if(data70.feesBalance !== undefined){let data77 = data70.feesBalance;const _errs148 = errors;if(!((typeof data77 == "number") && (isFinite(data77)))){validate11.errors = [{instancePath:instancePath+"/balances/feesBalance",schemaPath:"#/$defs/Balancesaf30/properties/feesBalance/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid19 = _errs148 === errors;}else {var valid19 = true;}if(valid19){if(data70.penaltyBalance !== undefined){let data78 = data70.penaltyBalance;const _errs150 = errors;if(!((typeof data78 == "number") && (isFinite(data78)))){validate11.errors = [{instancePath:instancePath+"/balances/penaltyBalance",schemaPath:"#/$defs/Balancesaf30/properties/penaltyBalance/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid19 = _errs150 === errors;}else {var valid19 = true;}if(valid19){if(data70.redrawBalance !== undefined){let data79 = data70.redrawBalance;const _errs152 = errors;if(!((typeof data79 == "number") && (isFinite(data79)))){validate11.errors = [{instancePath:instancePath+"/balances/redrawBalance",schemaPath:"#/$defs/Balancesaf30/properties/redrawBalance/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid19 = _errs152 === errors;}else {var valid19 = true;}if(valid19){if(data70.interestFromArrearsBalance !== undefined){let data80 = data70.interestFromArrearsBalance;const _errs154 = errors;if(!((typeof data80 == "number") && (isFinite(data80)))){validate11.errors = [{instancePath:instancePath+"/balances/interestFromArrearsBalance",schemaPath:"#/$defs/Balancesaf30/properties/interestFromArrearsBalance/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid19 = _errs154 === errors;}else {var valid19 = true;}if(valid19){if(data70.principalBalance !== undefined){let data81 = data70.principalBalance;const _errs156 = errors;if(!((typeof data81 == "number") && (isFinite(data81)))){validate11.errors = [{instancePath:instancePath+"/balances/principalBalance",schemaPath:"#/$defs/Balancesaf30/properties/principalBalance/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid19 = _errs156 === errors;}else {var valid19 = true;}if(valid19){if(data70.interestDue !== undefined){let data82 = data70.interestDue;const _errs158 = errors;if(!((typeof data82 == "number") && (isFinite(data82)))){validate11.errors = [{instancePath:instancePath+"/balances/interestDue",schemaPath:"#/$defs/Balancesaf30/properties/interestDue/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid19 = _errs158 === errors;}else {var valid19 = true;}if(valid19){if(data70.penaltyPaid !== undefined){let data83 = data70.penaltyPaid;const _errs160 = errors;if(!((typeof data83 == "number") && (isFinite(data83)))){validate11.errors = [{instancePath:instancePath+"/balances/penaltyPaid",schemaPath:"#/$defs/Balancesaf30/properties/penaltyPaid/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid19 = _errs160 === errors;}else {var valid19 = true;}if(valid19){if(data70.feesPaid !== undefined){let data84 = data70.feesPaid;const _errs162 = errors;if(!((typeof data84 == "number") && (isFinite(data84)))){validate11.errors = [{instancePath:instancePath+"/balances/feesPaid",schemaPath:"#/$defs/Balancesaf30/properties/feesPaid/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid19 = _errs162 === errors;}else {var valid19 = true;}if(valid19){if(data70.interestFromArrearsDue !== undefined){let data85 = data70.interestFromArrearsDue;const _errs164 = errors;if(!((typeof data85 == "number") && (isFinite(data85)))){validate11.errors = [{instancePath:instancePath+"/balances/interestFromArrearsDue",schemaPath:"#/$defs/Balancesaf30/properties/interestFromArrearsDue/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid19 = _errs164 === errors;}else {var valid19 = true;}if(valid19){if(data70.feesDue !== undefined){let data86 = data70.feesDue;const _errs166 = errors;if(!((typeof data86 == "number") && (isFinite(data86)))){validate11.errors = [{instancePath:instancePath+"/balances/feesDue",schemaPath:"#/$defs/Balancesaf30/properties/feesDue/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid19 = _errs166 === errors;}else {var valid19 = true;}if(valid19){if(data70.interestPaid !== undefined){let data87 = data70.interestPaid;const _errs168 = errors;if(!((typeof data87 == "number") && (isFinite(data87)))){validate11.errors = [{instancePath:instancePath+"/balances/interestPaid",schemaPath:"#/$defs/Balancesaf30/properties/interestPaid/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid19 = _errs168 === errors;}else {var valid19 = true;}}}}}}}}}}}}}}}}}}else {validate11.errors = [{instancePath:instancePath+"/balances",schemaPath:"#/$defs/Balancesaf30/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}var valid1 = _errs132 === errors;}else {var valid1 = true;}if(valid1){if(data.creditArrangementKey !== undefined){const _errs170 = errors;if(typeof data.creditArrangementKey !== "string"){validate11.errors = [{instancePath:instancePath+"/creditArrangementKey",schemaPath:"#/properties/creditArrangementKey/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid1 = _errs170 === errors;}else {var valid1 = true;}if(valid1){if(data.interestCommission !== undefined){let data89 = data.interestCommission;const _errs172 = errors;if(!((typeof data89 == "number") && (isFinite(data89)))){validate11.errors = [{instancePath:instancePath+"/interestCommission",schemaPath:"#/properties/interestCommission/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid1 = _errs172 === errors;}else {var valid1 = true;}if(valid1){if(data.encodedKey !== undefined){const _errs174 = errors;if(typeof data.encodedKey !== "string"){validate11.errors = [{instancePath:instancePath+"/encodedKey",schemaPath:"#/properties/encodedKey/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid1 = _errs174 === errors;}else {var valid1 = true;}if(valid1){if(data.currency !== undefined){let data91 = data.currency;const _errs176 = errors;const _errs177 = errors;if(errors === _errs177){if(data91 && typeof data91 == "object" && !Array.isArray(data91)){if(data91.currencyCode !== undefined){const _errs180 = errors;if(typeof data91.currencyCode !== "string"){validate11.errors = [{instancePath:instancePath+"/currency/currencyCode",schemaPath:"#/$defs/Currencyaf30/properties/currencyCode/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid21 = _errs180 === errors;}else {var valid21 = true;}if(valid21){if(data91.code !== undefined){const _errs182 = errors;let valid22;valid22 = false;for(const v3 of schema22.properties.code.enum){if(func0(data91.code, v3)){valid22 = true;break;}}if(!valid22){validate11.errors = [{instancePath:instancePath+"/currency/code",schemaPath:"#/$defs/Currencyaf30/properties/code/enum",keyword:"enum",params:{allowedValues: schema22.properties.code.enum},message:"must be equal to one of the allowed values"}];return false;}var valid21 = _errs182 === errors;}else {var valid21 = true;}}}else {validate11.errors = [{instancePath:instancePath+"/currency",schemaPath:"#/$defs/Currencyaf30/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}var valid1 = _errs176 === errors;}else {var valid1 = true;}if(valid1){if(data.lastAccountAppraisalDate !== undefined){const _errs183 = errors;if(errors === _errs183){if(errors === _errs183){if(!(typeof data.lastAccountAppraisalDate === "string")){validate11.errors = [{instancePath:instancePath+"/lastAccountAppraisalDate",schemaPath:"#/properties/lastAccountAppraisalDate/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}}var valid1 = _errs183 === errors;}else {var valid1 = true;}if(valid1){if(data.penaltySettings !== undefined){let data95 = data.penaltySettings;const _errs185 = errors;const _errs186 = errors;if(errors === _errs186){if(data95 && typeof data95 == "object" && !Array.isArray(data95)){if(data95.loanPenaltyCalculationMethod !== undefined){let data96 = data95.loanPenaltyCalculationMethod;const _errs189 = errors;if(!((((data96 === "NONE") || (data96 === "OVERDUE_BALANCE")) || (data96 === "OVERDUE_BALANCE_AND_INTEREST")) || (data96 === "OUTSTANDING_PRINCIPAL"))){validate11.errors = [{instancePath:instancePath+"/penaltySettings/loanPenaltyCalculationMethod",schemaPath:"#/$defs/PenaltySettingsaf30/properties/loanPenaltyCalculationMethod/enum",keyword:"enum",params:{allowedValues: schema33.properties.loanPenaltyCalculationMethod.enum},message:"must be equal to one of the allowed values"}];return false;}var valid24 = _errs189 === errors;}else {var valid24 = true;}if(valid24){if(data95.penaltyRate !== undefined){let data97 = data95.penaltyRate;const _errs190 = errors;if(!((typeof data97 == "number") && (isFinite(data97)))){validate11.errors = [{instancePath:instancePath+"/penaltySettings/penaltyRate",schemaPath:"#/$defs/PenaltySettingsaf30/properties/penaltyRate/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid24 = _errs190 === errors;}else {var valid24 = true;}}}else {validate11.errors = [{instancePath:instancePath+"/penaltySettings",schemaPath:"#/$defs/PenaltySettingsaf30/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}var valid1 = _errs185 === errors;}else {var valid1 = true;}if(valid1){if(data.settlementAccountKey !== undefined){const _errs192 = errors;if(typeof data.settlementAccountKey !== "string"){validate11.errors = [{instancePath:instancePath+"/settlementAccountKey",schemaPath:"#/properties/settlementAccountKey/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid1 = _errs192 === errors;}else {var valid1 = true;}if(valid1){if(data.lastModifiedDate !== undefined){const _errs194 = errors;if(errors === _errs194){if(errors === _errs194){if(!(typeof data.lastModifiedDate === "string")){validate11.errors = [{instancePath:instancePath+"/lastModifiedDate",schemaPath:"#/properties/lastModifiedDate/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}}var valid1 = _errs194 === errors;}else {var valid1 = true;}if(valid1){if(data.principalPaymentSettings !== undefined){let data100 = data.principalPaymentSettings;const _errs196 = errors;const _errs197 = errors;if(errors === _errs197){if(data100 && typeof data100 == "object" && !Array.isArray(data100)){if(data100.includeInterestInFloorAmount !== undefined){const _errs200 = errors;if(typeof data100.includeInterestInFloorAmount !== "boolean"){validate11.errors = [{instancePath:instancePath+"/principalPaymentSettings/includeInterestInFloorAmount",schemaPath:"#/$defs/PrincipalPaymentAccountSettingsaf30/properties/includeInterestInFloorAmount/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"}];return false;}var valid26 = _errs200 === errors;}else {var valid26 = true;}if(valid26){if(data100.totalDuePayment !== undefined){const _errs202 = errors;let valid27;valid27 = false;for(const v4 of schema34.properties.totalDuePayment.enum){if(func0(data100.totalDuePayment, v4)){valid27 = true;break;}}if(!valid27){validate11.errors = [{instancePath:instancePath+"/principalPaymentSettings/totalDuePayment",schemaPath:"#/$defs/PrincipalPaymentAccountSettingsaf30/properties/totalDuePayment/enum",keyword:"enum",params:{allowedValues: schema34.properties.totalDuePayment.enum},message:"must be equal to one of the allowed values"}];return false;}var valid26 = _errs202 === errors;}else {var valid26 = true;}if(valid26){if(data100.amount !== undefined){let data103 = data100.amount;const _errs203 = errors;if(!((typeof data103 == "number") && (isFinite(data103)))){validate11.errors = [{instancePath:instancePath+"/principalPaymentSettings/amount",schemaPath:"#/$defs/PrincipalPaymentAccountSettingsaf30/properties/amount/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid26 = _errs203 === errors;}else {var valid26 = true;}if(valid26){if(data100.principalFloorValue !== undefined){let data104 = data100.principalFloorValue;const _errs205 = errors;if(!((typeof data104 == "number") && (isFinite(data104)))){validate11.errors = [{instancePath:instancePath+"/principalPaymentSettings/principalFloorValue",schemaPath:"#/$defs/PrincipalPaymentAccountSettingsaf30/properties/principalFloorValue/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid26 = _errs205 === errors;}else {var valid26 = true;}if(valid26){if(data100.principalPaymentMethod !== undefined){const _errs207 = errors;let valid28;valid28 = false;for(const v5 of schema34.properties.principalPaymentMethod.enum){if(func0(data100.principalPaymentMethod, v5)){valid28 = true;break;}}if(!valid28){validate11.errors = [{instancePath:instancePath+"/principalPaymentSettings/principalPaymentMethod",schemaPath:"#/$defs/PrincipalPaymentAccountSettingsaf30/properties/principalPaymentMethod/enum",keyword:"enum",params:{allowedValues: schema34.properties.principalPaymentMethod.enum},message:"must be equal to one of the allowed values"}];return false;}var valid26 = _errs207 === errors;}else {var valid26 = true;}if(valid26){if(data100.percentage !== undefined){let data106 = data100.percentage;const _errs208 = errors;if(!((typeof data106 == "number") && (isFinite(data106)))){validate11.errors = [{instancePath:instancePath+"/principalPaymentSettings/percentage",schemaPath:"#/$defs/PrincipalPaymentAccountSettingsaf30/properties/percentage/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid26 = _errs208 === errors;}else {var valid26 = true;}if(valid26){if(data100.includeFeesInFloorAmount !== undefined){const _errs210 = errors;if(typeof data100.includeFeesInFloorAmount !== "boolean"){validate11.errors = [{instancePath:instancePath+"/principalPaymentSettings/includeFeesInFloorAmount",schemaPath:"#/$defs/PrincipalPaymentAccountSettingsaf30/properties/includeFeesInFloorAmount/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"}];return false;}var valid26 = _errs210 === errors;}else {var valid26 = true;}if(valid26){if(data100.encodedKey !== undefined){const _errs212 = errors;if(typeof data100.encodedKey !== "string"){validate11.errors = [{instancePath:instancePath+"/principalPaymentSettings/encodedKey",schemaPath:"#/$defs/PrincipalPaymentAccountSettingsaf30/properties/encodedKey/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid26 = _errs212 === errors;}else {var valid26 = true;}if(valid26){if(data100.totalDueAmountFloor !== undefined){let data109 = data100.totalDueAmountFloor;const _errs214 = errors;if(!((typeof data109 == "number") && (isFinite(data109)))){validate11.errors = [{instancePath:instancePath+"/principalPaymentSettings/totalDueAmountFloor",schemaPath:"#/$defs/PrincipalPaymentAccountSettingsaf30/properties/totalDueAmountFloor/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid26 = _errs214 === errors;}else {var valid26 = true;}if(valid26){if(data100.principalCeilingValue !== undefined){let data110 = data100.principalCeilingValue;const _errs216 = errors;if(!((typeof data110 == "number") && (isFinite(data110)))){validate11.errors = [{instancePath:instancePath+"/principalPaymentSettings/principalCeilingValue",schemaPath:"#/$defs/PrincipalPaymentAccountSettingsaf30/properties/principalCeilingValue/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid26 = _errs216 === errors;}else {var valid26 = true;}}}}}}}}}}}else {validate11.errors = [{instancePath:instancePath+"/principalPaymentSettings",schemaPath:"#/$defs/PrincipalPaymentAccountSettingsaf30/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}var valid1 = _errs196 === errors;}else {var valid1 = true;}if(valid1){if(data.lastLockedDate !== undefined){const _errs218 = errors;if(errors === _errs218){if(errors === _errs218){if(!(typeof data.lastLockedDate === "string")){validate11.errors = [{instancePath:instancePath+"/lastLockedDate",schemaPath:"#/properties/lastLockedDate/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}}var valid1 = _errs218 === errors;}else {var valid1 = true;}if(valid1){if(data.loanAmount !== undefined){let data112 = data.loanAmount;const _errs220 = errors;if(!((typeof data112 == "number") && (isFinite(data112)))){validate11.errors = [{instancePath:instancePath+"/loanAmount",schemaPath:"#/properties/loanAmount/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid1 = _errs220 === errors;}else {var valid1 = true;}if(valid1){if(data.closedDate !== undefined){const _errs222 = errors;if(errors === _errs222){if(errors === _errs222){if(!(typeof data.closedDate === "string")){validate11.errors = [{instancePath:instancePath+"/closedDate",schemaPath:"#/properties/closedDate/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}}var valid1 = _errs222 === errors;}else {var valid1 = true;}if(valid1){if(data.productTypeKey !== undefined){const _errs224 = errors;if(typeof data.productTypeKey !== "string"){validate11.errors = [{instancePath:instancePath+"/productTypeKey",schemaPath:"#/properties/productTypeKey/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid1 = _errs224 === errors;}else {var valid1 = true;}if(valid1){if(data.allowOffset !== undefined){const _errs226 = errors;if(typeof data.allowOffset !== "boolean"){validate11.errors = [{instancePath:instancePath+"/allowOffset",schemaPath:"#/properties/allowOffset/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"}];return false;}var valid1 = _errs226 === errors;}else {var valid1 = true;}if(valid1){if(data.guarantors !== undefined){let data116 = data.guarantors;const _errs228 = errors;if(errors === _errs228){if(Array.isArray(data116)){var valid29 = true;const len5 = data116.length;for(let i5=0; i5<len5; i5++){let data117 = data116[i5];const _errs230 = errors;const _errs231 = errors;if(errors === _errs231){if(data117 && typeof data117 == "object" && !Array.isArray(data117)){let missing4;if((((data117.amount === undefined) && (missing4 = "amount")) || ((data117.guarantorKey === undefined) && (missing4 = "guarantorKey"))) || ((data117.guarantorType === undefined) && (missing4 = "guarantorType"))){validate11.errors = [{instancePath:instancePath+"/guarantors/" + i5,schemaPath:"#/$defs/Guarantoraf30/required",keyword:"required",params:{missingProperty: missing4},message:"must have required property '"+missing4+"'"}];return false;}else {if(data117.amount !== undefined){let data118 = data117.amount;const _errs234 = errors;if(!((typeof data118 == "number") && (isFinite(data118)))){validate11.errors = [{instancePath:instancePath+"/guarantors/" + i5+"/amount",schemaPath:"#/$defs/Guarantoraf30/properties/amount/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid31 = _errs234 === errors;}else {var valid31 = true;}if(valid31){if(data117.depositAccountKey !== undefined){const _errs236 = errors;if(typeof data117.depositAccountKey !== "string"){validate11.errors = [{instancePath:instancePath+"/guarantors/" + i5+"/depositAccountKey",schemaPath:"#/$defs/Guarantoraf30/properties/depositAccountKey/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid31 = _errs236 === errors;}else {var valid31 = true;}if(valid31){if(data117.assetName !== undefined){const _errs238 = errors;if(typeof data117.assetName !== "string"){validate11.errors = [{instancePath:instancePath+"/guarantors/" + i5+"/assetName",schemaPath:"#/$defs/Guarantoraf30/properties/assetName/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid31 = _errs238 === errors;}else {var valid31 = true;}if(valid31){if(data117.encodedKey !== undefined){const _errs240 = errors;if(typeof data117.encodedKey !== "string"){validate11.errors = [{instancePath:instancePath+"/guarantors/" + i5+"/encodedKey",schemaPath:"#/$defs/Guarantoraf30/properties/encodedKey/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid31 = _errs240 === errors;}else {var valid31 = true;}if(valid31){if(data117.guarantorKey !== undefined){const _errs242 = errors;if(typeof data117.guarantorKey !== "string"){validate11.errors = [{instancePath:instancePath+"/guarantors/" + i5+"/guarantorKey",schemaPath:"#/$defs/Guarantoraf30/properties/guarantorKey/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid31 = _errs242 === errors;}else {var valid31 = true;}if(valid31){if(data117.guarantorType !== undefined){let data123 = data117.guarantorType;const _errs244 = errors;if(!((data123 === "CLIENT") || (data123 === "GROUP"))){validate11.errors = [{instancePath:instancePath+"/guarantors/" + i5+"/guarantorType",schemaPath:"#/$defs/Guarantoraf30/properties/guarantorType/enum",keyword:"enum",params:{allowedValues: schema35.properties.guarantorType.enum},message:"must be equal to one of the allowed values"}];return false;}var valid31 = _errs244 === errors;}else {var valid31 = true;}}}}}}}}else {validate11.errors = [{instancePath:instancePath+"/guarantors/" + i5,schemaPath:"#/$defs/Guarantoraf30/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}var valid29 = _errs230 === errors;if(!valid29){break;}}}else {validate11.errors = [{instancePath:instancePath+"/guarantors",schemaPath:"#/properties/guarantors/type",keyword:"type",params:{type: "array"},message:"must be array"}];return false;}}var valid1 = _errs228 === errors;}else {var valid1 = true;}if(valid1){if(data.accountArrearsSettings !== undefined){let data124 = data.accountArrearsSettings;const _errs245 = errors;const _errs246 = errors;if(errors === _errs246){if(data124 && typeof data124 == "object" && !Array.isArray(data124)){if(data124.monthlyToleranceDay !== undefined){let data125 = data124.monthlyToleranceDay;const _errs249 = errors;if(!(((typeof data125 == "number") && (!(data125 % 1) && !isNaN(data125))) && (isFinite(data125)))){validate11.errors = [{instancePath:instancePath+"/accountArrearsSettings/monthlyToleranceDay",schemaPath:"#/$defs/AccountArrearsSettingsaf30/properties/monthlyToleranceDay/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];return false;}var valid33 = _errs249 === errors;}else {var valid33 = true;}if(valid33){if(data124.toleranceFloorAmount !== undefined){let data126 = data124.toleranceFloorAmount;const _errs251 = errors;if(!((typeof data126 == "number") && (isFinite(data126)))){validate11.errors = [{instancePath:instancePath+"/accountArrearsSettings/toleranceFloorAmount",schemaPath:"#/$defs/AccountArrearsSettingsaf30/properties/toleranceFloorAmount/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid33 = _errs251 === errors;}else {var valid33 = true;}if(valid33){if(data124.nonWorkingDaysMethod !== undefined){let data127 = data124.nonWorkingDaysMethod;const _errs253 = errors;if(!((data127 === "INCLUDED") || (data127 === "EXCLUDED"))){validate11.errors = [{instancePath:instancePath+"/accountArrearsSettings/nonWorkingDaysMethod",schemaPath:"#/$defs/AccountArrearsSettingsaf30/properties/nonWorkingDaysMethod/enum",keyword:"enum",params:{allowedValues: schema36.properties.nonWorkingDaysMethod.enum},message:"must be equal to one of the allowed values"}];return false;}var valid33 = _errs253 === errors;}else {var valid33 = true;}if(valid33){if(data124.tolerancePercentageOfOutstandingPrincipal !== undefined){let data128 = data124.tolerancePercentageOfOutstandingPrincipal;const _errs254 = errors;if(!((typeof data128 == "number") && (isFinite(data128)))){validate11.errors = [{instancePath:instancePath+"/accountArrearsSettings/tolerancePercentageOfOutstandingPrincipal",schemaPath:"#/$defs/AccountArrearsSettingsaf30/properties/tolerancePercentageOfOutstandingPrincipal/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid33 = _errs254 === errors;}else {var valid33 = true;}if(valid33){if(data124.tolerancePeriod !== undefined){let data129 = data124.tolerancePeriod;const _errs256 = errors;if(!(((typeof data129 == "number") && (!(data129 % 1) && !isNaN(data129))) && (isFinite(data129)))){validate11.errors = [{instancePath:instancePath+"/accountArrearsSettings/tolerancePeriod",schemaPath:"#/$defs/AccountArrearsSettingsaf30/properties/tolerancePeriod/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];return false;}var valid33 = _errs256 === errors;}else {var valid33 = true;}if(valid33){if(data124.encodedKey !== undefined){const _errs258 = errors;if(typeof data124.encodedKey !== "string"){validate11.errors = [{instancePath:instancePath+"/accountArrearsSettings/encodedKey",schemaPath:"#/$defs/AccountArrearsSettingsaf30/properties/encodedKey/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid33 = _errs258 === errors;}else {var valid33 = true;}if(valid33){if(data124.toleranceCalculationMethod !== undefined){let data131 = data124.toleranceCalculationMethod;const _errs260 = errors;if(!((data131 === "ARREARS_TOLERANCE_PERIOD") || (data131 === "MONTHLY_ARREARS_TOLERANCE_DAY"))){validate11.errors = [{instancePath:instancePath+"/accountArrearsSettings/toleranceCalculationMethod",schemaPath:"#/$defs/AccountArrearsSettingsaf30/properties/toleranceCalculationMethod/enum",keyword:"enum",params:{allowedValues: schema36.properties.toleranceCalculationMethod.enum},message:"must be equal to one of the allowed values"}];return false;}var valid33 = _errs260 === errors;}else {var valid33 = true;}if(valid33){if(data124.dateCalculationMethod !== undefined){let data132 = data124.dateCalculationMethod;const _errs261 = errors;if(!(((data132 === "ACCOUNT_FIRST_WENT_TO_ARREARS") || (data132 === "LAST_LATE_REPAYMENT")) || (data132 === "ACCOUNT_FIRST_BREACHED_MATERIALITY_THRESHOLD"))){validate11.errors = [{instancePath:instancePath+"/accountArrearsSettings/dateCalculationMethod",schemaPath:"#/$defs/AccountArrearsSettingsaf30/properties/dateCalculationMethod/enum",keyword:"enum",params:{allowedValues: schema36.properties.dateCalculationMethod.enum},message:"must be equal to one of the allowed values"}];return false;}var valid33 = _errs261 === errors;}else {var valid33 = true;}}}}}}}}}else {validate11.errors = [{instancePath:instancePath+"/accountArrearsSettings",schemaPath:"#/$defs/AccountArrearsSettingsaf30/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}var valid1 = _errs245 === errors;}else {var valid1 = true;}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}else {validate11.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}validate11.errors = vErrors;return errors === 0;}function validate10(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){let vErrors = null;let errors = 0;if(errors === 0){if(Array.isArray(data)){var valid0 = true;const len0 = data.length;for(let i0=0; i0<len0; i0++){const _errs1 = errors;if(!(validate11(data[i0], {instancePath:instancePath+"/" + i0,parentData:data,parentDataProperty:i0,rootData}))){vErrors = vErrors === null ? validate11.errors : vErrors.concat(validate11.errors);errors = vErrors.length;}var valid0 = _errs1 === errors;if(!valid0){break;}}}else {validate10.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "array"},message:"must be array"}];return false;}}validate10.errors = vErrors;return errors === 0;};validate.schema=schema11;