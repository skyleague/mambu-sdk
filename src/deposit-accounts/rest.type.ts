/**
 * Generated by @skyleague/therefore@v1.0.0-local
 * Do not manually touch this
 */
/* eslint-disable */

import type { DefinedError, ValidateFunction } from 'ajv'

import { validate as AccountAuthorizationHoldValidator } from './schemas/account-authorization-hold.schema.js'
import { validate as ApplyInterestInputValidator } from './schemas/apply-interest-input.schema.js'
import { validate as BlockFundValidator } from './schemas/block-fund.schema.js'
import { validate as BulkInterestAccountSettingsAvailabilityInputValidator } from './schemas/bulk-interest-account-settings-availability-input.schema.js'
import { validate as CardValidator } from './schemas/card.schema.js'
import { validate as ChangeInterestRateActionValidator } from './schemas/change-interest-rate-action.schema.js'
import { validate as ChangeWithholdingTaxActionValidator } from './schemas/change-withholding-tax-action.schema.js'
import { validate as DepositAccountActionValidator } from './schemas/deposit-account-action.schema.js'
import { validate as DepositAccountSearchCriteriaValidator } from './schemas/deposit-account-search-criteria.schema.js'
import { validate as DepositAccountValidator } from './schemas/deposit-account.schema.js'
import { validate as ErrorResponseValidator } from './schemas/error-response.schema.js'
import { validate as GetAllAuthorizationHoldsResponseValidator } from './schemas/get-all-authorization-holds-response.schema.js'
import { validate as GetAllBlocksResponseValidator } from './schemas/get-all-blocks-response.schema.js'
import { validate as GetAllCardsResponseValidator } from './schemas/get-all-cards-response.schema.js'
import { validate as GetAllResponseValidator } from './schemas/get-all-response.schema.js'
import { validate as GetDepositAccountDocumentResponseValidator } from './schemas/get-deposit-account-document-response.schema.js'
import { validate as GetFundedLoansResponseValidator } from './schemas/get-funded-loans-response.schema.js'
import { validate as GetInterestAvailabilitiesListResponseValidator } from './schemas/get-interest-availabilities-list-response.schema.js'
import { validate as GetWithholdingTaxHistoryResponseValidator } from './schemas/get-withholding-tax-history-response.schema.js'
import { validate as InterestAccountSettingsAvailabilityResponseValidator } from './schemas/interest-account-settings-availability-response.schema.js'
import { validate as InterestAccountSettingsAvailabilityUpdateValidator } from './schemas/interest-account-settings-availability-update.schema.js'
import { validate as InterestAccountSettingsAvailabilityValidator } from './schemas/interest-account-settings-availability.schema.js'
import { validate as LoanAccountScheduleValidator } from './schemas/loan-account-schedule.schema.js'
import { validate as PatchBlockFundRequestValidator } from './schemas/patch-block-fund-request.schema.js'
import { validate as PatchRequestValidator } from './schemas/patch-request.schema.js'
import { validate as ReopenDepositActionValidator } from './schemas/reopen-deposit-action.schema.js'
import { validate as SearchResponseValidator } from './schemas/search-response.schema.js'
import { validate as StartMaturityActionValidator } from './schemas/start-maturity-action.schema.js'
import { validate as UndoMaturityActionValidator } from './schemas/undo-maturity-action.schema.js'

/**
 * The account arrears settings, holds the required information for the arrears settings of an account.
 */
export interface AccountArrearsSettings {
    /**
     * The arrears date calculation method.
     */
    dateCalculationMethod?:
        | 'ACCOUNT_FIRST_WENT_TO_ARREARS'
        | 'LAST_LATE_REPAYMENT'
        | 'ACCOUNT_FIRST_BREACHED_MATERIALITY_THRESHOLD'
        | undefined
    /**
     * The encoded key of the arrears base settings, auto generated, unique.
     */
    encodedKey?: string | undefined
    /**
     * Defines monthly arrears tolerance day value.
     */
    monthlyToleranceDay?: number | undefined
    /**
     * Shows whether the non working days are taken in consideration or not when applying penaltees/late fees or when setting an account into arrears
     */
    nonWorkingDaysMethod?: 'INCLUDED' | 'EXCLUDED' | undefined
    /**
     * Defines the tolerance calculation method
     */
    toleranceCalculationMethod?: 'ARREARS_TOLERANCE_PERIOD' | 'MONTHLY_ARREARS_TOLERANCE_DAY' | undefined
    /**
     * The tolerance floor amount.
     */
    toleranceFloorAmount?: number | undefined
    /**
     * Defines the arrears tolerance amount.
     */
    tolerancePercentageOfOutstandingPrincipal?: number | undefined
    /**
     * Defines the arrears tolerance period value.
     */
    tolerancePeriod?: number | undefined
}

/**
 * The account authorization hold corresponding to a deposit account
 */
export interface AccountAuthorizationHold {
    /**
     * The key of the account linked with the authorization hold.
     */
    accountKey?: string | undefined
    /**
     * Whether the given request should be accepted without balance validations.
     */
    advice?: boolean | undefined
    /**
     * The amount of money to be held as a result of the authorization hold request.
     */
    amount: number
    cardAcceptor?: CardAcceptor | undefined
    /**
     * The reference token of the card.
     */
    cardToken?: string | undefined
    /**
     * The organization time when the authorization hold was created
     */
    creationDate?: string | undefined
    /**
     * Indicates whether the authorization hold amount is credited or debited. If not provided, the default value is DBIT.
     */
    creditDebitIndicator?: 'DBIT' | 'CRDT' | undefined
    /**
     * The ISO currency code in which the hold was created. The amounts are stored in the base currency, but the user could have enter it in a foreign currency.
     */
    currencyCode?: string | undefined
    /**
     * The exchange rate for the original currency.
     */
    exchangeRate?: number | undefined
    /**
     * The external reference ID to be used to reference the account hold in subsequent requests.
     */
    externalReferenceId: string
    /**
     * The original amount of money to be held as a result of the authorization hold request.
     */
    originalAmount?: number | undefined
    /**
     * The original currency in which the hold was created.
     */
    originalCurrency?: string | undefined
    /**
     * Indicates the source of the authorization hold.
     */
    source?: 'CARD' | 'ACCOUNT' | undefined
    /**
     * The authorization hold status.
     */
    status?: 'PENDING' | 'REVERSED' | 'SETTLED' | 'EXPIRED' | undefined
    /**
     * The formatted time at which the user made this authorization hold.
     */
    userTransactionTime?: string | undefined
}

export const AccountAuthorizationHold = {
    validate: AccountAuthorizationHoldValidator as ValidateFunction<AccountAuthorizationHold>,
    get schema() {
        return AccountAuthorizationHold.validate.schema
    },
    get errors() {
        return AccountAuthorizationHold.validate.errors ?? undefined
    },
    is: (o: unknown): o is AccountAuthorizationHold => AccountAuthorizationHold.validate(o) === true,
    parse: (o: unknown): { right: AccountAuthorizationHold } | { left: DefinedError[] } => {
        if (AccountAuthorizationHold.is(o)) {
            return { right: o }
        }
        return { left: (AccountAuthorizationHold.errors ?? []) as DefinedError[] }
    },
} as const

/**
 * Account balances presented to inquirer such as card processor
 */
export interface AccountBalances {
    /**
     * The unique account identifier
     */
    accountId?: string | undefined
    /**
     * The available balance of a deposit or credit account
     */
    availableBalance?: number | undefined
    /**
     * The card type either DEBIT or CREDIT
     */
    cardType?: 'DEBIT' | 'CREDIT' | undefined
    /**
     * The overdraft limit of a deposit account or the loan amount in case of a credit account
     */
    creditLimit?: number | undefined
    /**
     * Currency code used for the account
     */
    currencyCode?: string | undefined
    /**
     * The current balance of a deposit account or principal balance of a revolving credit
     */
    totalBalance?: number | undefined
}

/**
 * Adjustable interest rates settings for loan account
 */
export interface AccountInterestRateSettings {
    /**
     * The encoded key of the interest rate settings, auto generated, unique
     */
    encodedKey?: string | undefined
    /**
     * Index rate source key.
     */
    indexSourceKey?: string | undefined
    /**
     * Interest rate value.
     */
    interestRate?: number | undefined
    /**
     * Maximum value allowed for index based interest rate. Valid only for index interest rate.
     */
    interestRateCeilingValue?: number | undefined
    /**
     * Minimum value allowed for index based interest rate. Valid only for index interest rate.
     */
    interestRateFloorValue?: number | undefined
    /**
     * Interest rate review frequency unit count. Valid only for index interest rate.
     */
    interestRateReviewCount?: number | undefined
    /**
     * Interest rate review frequency measurement unit. Valid only for index interest rate.
     */
    interestRateReviewUnit?: 'DAYS' | 'WEEKS' | 'MONTHS' | undefined
    /**
     * Interest calculation method: fixed or indexed(interest spread + active organization index interest rate)
     */
    interestRateSource: 'FIXED_INTEREST_RATE' | 'INDEX_INTEREST_RATE'
    /**
     * Interest spread value.
     */
    interestSpread?: number | undefined
    /**
     * Date since an interest rate is valid
     */
    validFrom: string
}

/**
 * The account tax corresponding for deposit account
 */
export interface AccountTax {
    /**
     * The date when the rate availability was created.
     */
    creationDate?: string | undefined
    /**
     * The date when the tax source starts to be used by the account.
     */
    fromDate?: string | undefined
    /**
     * The last date when the rate availability was modified.
     */
    lastModifiedDate?: string | undefined
    rateSourceEncodedKey?: string | undefined
    /**
     * The id of the source
     */
    rateSourceId?: string | undefined
    /**
     * The name of the source
     */
    rateSourceName?: string | undefined
    savingsAccountEncodedKey?: string | undefined
    /**
     * The ending date of the tax source used by the account
     */
    toDate?: string | undefined
}

/**
 * Represents a simple installment amount structure.
 */
export interface Amount {
    /**
     * The due amount.
     */
    due?: number | undefined
    /**
     * The expected amount, which is sum of paid and due amounts.
     */
    expected?: number | undefined
    /**
     * The paid amount.
     */
    paid?: number | undefined
}

/**
 * Represents a simple installment amount structure.
 */
export interface AmountWithReduced {
    /**
     * The due amount.
     */
    due?: number | undefined
    /**
     * The expected amount, which is sum of paid and due amounts.
     */
    expected?: number | undefined
    /**
     * The paid amount.
     */
    paid?: number | undefined
    /**
     * The reduced amount.
     */
    reduced?: number | undefined
}

/**
 * Represents a request for applying the accrued interest
 */
export interface ApplyInterestInput {
    /**
     * The date up to which interest is to be posted
     */
    interestApplicationDate: string
    /**
     * Whether the interest amount to apply should be the regular one or the one accrued during the Payment Holidays. If nothing specified it will be the regular one.
     */
    isPaymentHolidaysInterest?: boolean | undefined
    /**
     * Additional information for this action
     */
    notes?: string | undefined
    /**
     * The amount of the Payment Holidays interest to apply
     */
    paymentHolidaysInterestAmount?: number | undefined
}

export const ApplyInterestInput = {
    validate: ApplyInterestInputValidator as ValidateFunction<ApplyInterestInput>,
    get schema() {
        return ApplyInterestInput.validate.schema
    },
    get errors() {
        return ApplyInterestInput.validate.errors ?? undefined
    },
    is: (o: unknown): o is ApplyInterestInput => ApplyInterestInput.validate(o) === true,
    parse: (o: unknown): { right: ApplyInterestInput } | { left: DefinedError[] } => {
        if (ApplyInterestInput.is(o)) {
            return { right: o }
        }
        return { left: (ApplyInterestInput.errors ?? []) as DefinedError[] }
    },
} as const

/**
 * Asset, holds information about a client asset entry.
 */
export interface Asset {
    /**
     * The amount used by the client for the guaranty
     */
    amount: number
    /**
     * The name of a value the client guarantees with (populated when the guaranty type is ASSET)
     */
    assetName: string
    /**
     * The key of the deposit account used by the guarantor (populated when the guaranty type is GUARANTOR). It can be null.
     */
    depositAccountKey?: string | undefined
    /**
     * The encoded key of the security, auto generated, unique.
     */
    encodedKey?: string | undefined
    /**
     * The key of the client/group used as the guarantor.
     */
    guarantorKey?: string | undefined
    /**
     * The type of the guarantor (client/group)
     */
    guarantorType?: 'CLIENT' | 'GROUP' | undefined
    /**
     * The original amount used by the client for a collateral asset
     */
    originalAmount?: number | undefined
    originalCurrency?: Currency | undefined
}

/**
 * The loan account balance details.
 */
export interface Balances {
    /**
     * The fees balance. Represents the total fees expected to be paid on this account at a given moment.
     */
    feesBalance?: number | undefined
    /**
     * The fees due. Representing the total fees due for the account.
     */
    feesDue?: number | undefined
    /**
     * The fees paid. Represents the total fees paid for the account.
     */
    feesPaid?: number | undefined
    /**
     * The sum of all the authorization hold amounts on this account.
     */
    holdBalance?: number | undefined
    /**
     * Represents the total interest owed by the client (total interest applied for account minus interest paid).
     */
    interestBalance?: number | undefined
    /**
     * The interest due. Indicates how much interest it's due for the account at this moment.
     */
    interestDue?: number | undefined
    /**
     * The interest from arrears balance. Indicates interest from arrears owned by the client, from now on. (total interest from arrears accrued for account - interest from arrears paid).
     */
    interestFromArrearsBalance?: number | undefined
    /**
     * The interest from arrears due. Indicates how much interest from arrears it's due for the account at this moment.
     */
    interestFromArrearsDue?: number | undefined
    /**
     * The interest from arrears paid, indicates total interest from arrears paid into the account.
     */
    interestFromArrearsPaid?: number | undefined
    /**
     * The interest paid, indicates total interest paid into the account.
     */
    interestPaid?: number | undefined
    /**
     * The penalty balance. Represents the total penalty expected to be paid on this account at a given moment.
     */
    penaltyBalance?: number | undefined
    /**
     * The penalty due. Represents the total penalty amount due for the account.
     */
    penaltyDue?: number | undefined
    /**
     * The Penalty paid. Represents the total penalty amount paid for the account.
     */
    penaltyPaid?: number | undefined
    /**
     * The total principal owned by the client, from now on (principal disbursed - principal paid).
     */
    principalBalance?: number | undefined
    /**
     * The principal due, indicates how much principal it's due at this moment.
     */
    principalDue?: number | undefined
    /**
     * The principal paid, holds the value of the total paid into the account.
     */
    principalPaid?: number | undefined
    /**
     * The total redraw amount owned by the client, from now on.
     */
    redrawBalance?: number | undefined
}

/**
 * Defines the billing cycles settings for a loan account
 */
export interface BillingCycleDays {
    /**
     * The billing cycle start days in case it is enabled
     */
    days?: number[] | undefined
}

/**
 * Represents the block fund amount that can be later seized on the account
 */
export interface BlockFund {
    /**
     * The key of the account which block fund belongs to
     */
    accountKey?: string | undefined
    /**
     * The amount to be blocked
     */
    amount: number
    /**
     * The date at which the block fund was created
     */
    creationDate?: string | undefined
    /**
     * The external reference ID to be used to reference the block fund in subsequent requests
     */
    externalReferenceId: string
    /**
     * The date at which the block fund was created
     */
    lastModifiedDate?: string | undefined
    /**
     * Notes about this block fund
     */
    notes?: string | undefined
    /**
     * The amount that has been seized
     */
    seizedAmount?: number | undefined
    /**
     * The state of the block fund
     */
    state?: 'PENDING' | 'SEIZED' | 'REMOVED' | 'PARTIALLY_SEIZED' | undefined
}

export const BlockFund = {
    validate: BlockFundValidator as ValidateFunction<BlockFund>,
    get schema() {
        return BlockFund.validate.schema
    },
    get errors() {
        return BlockFund.validate.errors ?? undefined
    },
    is: (o: unknown): o is BlockFund => BlockFund.validate(o) === true,
    parse: (o: unknown): { right: BlockFund } | { left: DefinedError[] } => {
        if (BlockFund.is(o)) {
            return { right: o }
        }
        return { left: (BlockFund.errors ?? []) as DefinedError[] }
    },
} as const

/**
 * Represents the filter to be used for selecting the accounts to which new interest availability settings will be pushed. One of the 2 fields: productId or ids should be supplied
 */
export interface BulkInterestAccountSettingsAvailabilityFilter {
    /**
     * Ids of accounts that should be processed
     */
    ids?: string[] | undefined
    /**
     * Product id to be used for selecting all accounts that should be processed
     */
    productId?: string | undefined
}

/**
 * Represents the bulk payload for storing interest availabilities to a group of accounts
 */
export interface BulkInterestAccountSettingsAvailabilityInput {
    accountFilter: BulkInterestAccountSettingsAvailabilityFilter
    interestAvailability: InterestAccountSettingsAvailability
}

export const BulkInterestAccountSettingsAvailabilityInput = {
    validate:
        BulkInterestAccountSettingsAvailabilityInputValidator as ValidateFunction<BulkInterestAccountSettingsAvailabilityInput>,
    get schema() {
        return BulkInterestAccountSettingsAvailabilityInput.validate.schema
    },
    get errors() {
        return BulkInterestAccountSettingsAvailabilityInput.validate.errors ?? undefined
    },
    is: (o: unknown): o is BulkInterestAccountSettingsAvailabilityInput =>
        BulkInterestAccountSettingsAvailabilityInput.validate(o) === true,
    parse: (o: unknown): { right: BulkInterestAccountSettingsAvailabilityInput } | { left: DefinedError[] } => {
        if (BulkInterestAccountSettingsAvailabilityInput.is(o)) {
            return { right: o }
        }
        return { left: (BulkInterestAccountSettingsAvailabilityInput.errors ?? []) as DefinedError[] }
    },
} as const

/**
 * Returns a card that can be associated to a deposit or loan  account. Cards consist only of card reference tokens and the card details are not stored in Mambu.
 */
export interface Card {
    /**
     * The card's reference token.
     */
    referenceToken: string
}

export const Card = {
    validate: CardValidator as ValidateFunction<Card>,
    get schema() {
        return Card.validate.schema
    },
    get errors() {
        return Card.validate.errors ?? undefined
    },
    is: (o: unknown): o is Card => Card.validate(o) === true,
    parse: (o: unknown): { right: Card } | { left: DefinedError[] } => {
        if (Card.is(o)) {
            return { right: o }
        }
        return { left: (Card.errors ?? []) as DefinedError[] }
    },
} as const

/**
 * The details of the card acceptor (merchant) in a transaction hold.
 */
export interface CardAcceptor {
    /**
     * The city in which the card acceptor has the business.
     */
    city?: string | undefined
    /**
     * The country in which the card acceptor has the business.
     */
    country?: string | undefined
    /**
     * The Merchant Category Code of the card acceptor.
     */
    mcc?: number | undefined
    /**
     * The name of the card acceptor.
     */
    name?: string | undefined
    /**
     * The state in which the card acceptor has the business.
     */
    state?: string | undefined
    /**
     * The street in which the card acceptor has the business.
     */
    street?: string | undefined
    /**
     * The ZIP code of the location in which the card acceptor has the business.
     */
    zip?: string | undefined
}

/**
 * Change deposit account interest rate
 */
export interface ChangeInterestRateAction {
    /**
     * The new interest rate to set on the account.
     */
    interestRate: number
    /**
     * The notes or description attached to this object.
     */
    notes?: string | undefined
    /**
     * The date when the interest rate is changed.
     */
    valueDate: string
}

export const ChangeInterestRateAction = {
    validate: ChangeInterestRateActionValidator as ValidateFunction<ChangeInterestRateAction>,
    get schema() {
        return ChangeInterestRateAction.validate.schema
    },
    get errors() {
        return ChangeInterestRateAction.validate.errors ?? undefined
    },
    is: (o: unknown): o is ChangeInterestRateAction => ChangeInterestRateAction.validate(o) === true,
    parse: (o: unknown): { right: ChangeInterestRateAction } | { left: DefinedError[] } => {
        if (ChangeInterestRateAction.is(o)) {
            return { right: o }
        }
        return { left: (ChangeInterestRateAction.errors ?? []) as DefinedError[] }
    },
} as const

/**
 * Change deposit account withholding tax rate
 */
export interface ChangeWithholdingTaxAction {
    /**
     * The ID or encoded key of the new withholding tax to use for the account.
     */
    withholdingTaxSourceKey: string
}

export const ChangeWithholdingTaxAction = {
    validate: ChangeWithholdingTaxActionValidator as ValidateFunction<ChangeWithholdingTaxAction>,
    get schema() {
        return ChangeWithholdingTaxAction.validate.schema
    },
    get errors() {
        return ChangeWithholdingTaxAction.validate.errors ?? undefined
    },
    is: (o: unknown): o is ChangeWithholdingTaxAction => ChangeWithholdingTaxAction.validate(o) === true,
    parse: (o: unknown): { right: ChangeWithholdingTaxAction } | { left: DefinedError[] } => {
        if (ChangeWithholdingTaxAction.is(o)) {
            return { right: o }
        }
        return { left: (ChangeWithholdingTaxAction.errors ?? []) as DefinedError[] }
    },
} as const

/**
 * Represents a currency eg. USD, EUR.
 */
export interface Currency {
    /**
     * Fiat(ISO-4217) currency code or NON_FIAT for non fiat currencies.
     */
    code?:
        | 'AED'
        | 'AFN'
        | 'ALL'
        | 'AMD'
        | 'ANG'
        | 'AOA'
        | 'ARS'
        | 'AUD'
        | 'AWG'
        | 'AZN'
        | 'BAM'
        | 'BBD'
        | 'BDT'
        | 'BGN'
        | 'BHD'
        | 'BIF'
        | 'BMD'
        | 'BND'
        | 'BOB'
        | 'BOV'
        | 'BRL'
        | 'BSD'
        | 'BTN'
        | 'BWP'
        | 'BYR'
        | 'BYN'
        | 'BZD'
        | 'CAD'
        | 'CDF'
        | 'CHE'
        | 'CHF'
        | 'CHW'
        | 'CLF'
        | 'CLP'
        | 'CNY'
        | 'COP'
        | 'COU'
        | 'CRC'
        | 'CUC'
        | 'CUP'
        | 'CVE'
        | 'CZK'
        | 'DJF'
        | 'DKK'
        | 'DOP'
        | 'DZD'
        | 'EGP'
        | 'ERN'
        | 'ETB'
        | 'EUR'
        | 'FJD'
        | 'FKP'
        | 'GBP'
        | 'GEL'
        | 'GHS'
        | 'GIP'
        | 'GMD'
        | 'GNF'
        | 'GTQ'
        | 'GYD'
        | 'HKD'
        | 'HNL'
        | 'HRK'
        | 'HTG'
        | 'HUF'
        | 'IDR'
        | 'ILS'
        | 'INR'
        | 'IQD'
        | 'IRR'
        | 'ISK'
        | 'JMD'
        | 'JOD'
        | 'JPY'
        | 'KES'
        | 'KGS'
        | 'KHR'
        | 'KMF'
        | 'KPW'
        | 'KRW'
        | 'KWD'
        | 'KYD'
        | 'KZT'
        | 'LAK'
        | 'LBP'
        | 'LKR'
        | 'LRD'
        | 'LSL'
        | 'LTL'
        | 'LVL'
        | 'LYD'
        | 'MAD'
        | 'MDL'
        | 'MGA'
        | 'MKD'
        | 'MMK'
        | 'MNT'
        | 'MOP'
        | 'MRO'
        | 'MRU'
        | 'MUR'
        | 'MVR'
        | 'MWK'
        | 'MXN'
        | 'MXV'
        | 'MYR'
        | 'MZN'
        | 'NAD'
        | 'NGN'
        | 'NIO'
        | 'NOK'
        | 'NPR'
        | 'NZD'
        | 'OMR'
        | 'PAB'
        | 'PEN'
        | 'PGK'
        | 'PHP'
        | 'PKR'
        | 'PLN'
        | 'PYG'
        | 'QAR'
        | 'RON'
        | 'RSD'
        | 'RUB'
        | 'RWF'
        | 'SAR'
        | 'SBD'
        | 'SCR'
        | 'SDG'
        | 'SEK'
        | 'SGD'
        | 'SHP'
        | 'SLL'
        | 'SOS'
        | 'SRD'
        | 'STD'
        | 'STN'
        | 'SVC'
        | 'SYP'
        | 'SZL'
        | 'THB'
        | 'TJS'
        | 'TMT'
        | 'TND'
        | 'TOP'
        | 'TRY'
        | 'TTD'
        | 'TWD'
        | 'TZS'
        | 'UAH'
        | 'UGX'
        | 'USD'
        | 'USN'
        | 'UYI'
        | 'UYU'
        | 'UYW'
        | 'UZS'
        | 'VED'
        | 'VEF'
        | 'VES'
        | 'VND'
        | 'VUV'
        | 'WST'
        | 'XAG'
        | 'XAU'
        | 'XAF'
        | 'XBA'
        | 'XBB'
        | 'XBC'
        | 'XBD'
        | 'XCD'
        | 'XDR'
        | 'XOF'
        | 'XPD'
        | 'XPF'
        | 'XPT'
        | 'XSU'
        | 'XTS'
        | 'XUA'
        | 'XXX'
        | 'YER'
        | 'ZAR'
        | 'ZIG'
        | 'ZMK'
        | 'ZWL'
        | 'ZMW'
        | 'SSP'
        | 'NON_FIAT'
        | undefined
    /**
     * Currency code for NON_FIAT currency.
     */
    currencyCode?: string | undefined
}

/**
 * The custom predefined fees, they may be used as the expected predefined fees that will be applied on the disbursement.
 */
export interface CustomPredefinedFee {
    /**
     * The amount of the custom fee.
     */
    amount?: number | undefined
    /**
     * The encoded key of the custom predefined fee, auto generated, unique.
     */
    encodedKey?: string | undefined
    /**
     * The percentage of the custom fee.
     */
    percentage?: number | undefined
    /**
     * The encoded key of the predefined fee
     */
    predefinedFeeEncodedKey?: string | undefined
}

/**
 * Enumeration for days of month and method of handling shorter months.
 */
export interface DaysInMonth {
    /**
     * Specifies the day(s) of the month when the interest application dates should be. Only available if the Interest Application Method is InterestApplicationMethodDTO#FIXED_DAYS_OF_MONTH. Currently only 1 value can be specified.
     */
    daysInMonth?: number[] | undefined
    /**
     * Determines how to handle the short months, if they select a fixed day of month > 28. Will be null if no such date is selected. Only available if the Interest Application Method is InterestApplicationMethodDTO#FIXED_DAYS_OF_MONTH.
     */
    shortMonthHandlingMethod?: 'LAST_DAY_IN_MONTH' | 'FIRST_DAY_OF_NEXT_MONTH' | undefined
}

/**
 * Represents information about a deposit account.
 */
export interface DepositAccount {
    /**
     * The encoded key of the account holder, which is an individual client or group.
     */
    accountHolderKey: string
    /**
     * The account holder type.
     */
    accountHolderType: 'CLIENT' | 'GROUP'
    /**
     * The state of the deposit account.
     */
    accountState?:
        | 'PENDING_APPROVAL'
        | 'APPROVED'
        | 'ACTIVE'
        | 'ACTIVE_IN_ARREARS'
        | 'MATURED'
        | 'LOCKED'
        | 'DORMANT'
        | 'CLOSED'
        | 'CLOSED_WRITTEN_OFF'
        | 'WITHDRAWN'
        | 'CLOSED_REJECTED'
        | undefined
    /**
     * The deposit account type and the product that it belongs to.
     */
    accountType?: 'CURRENT_ACCOUNT' | 'REGULAR_SAVINGS' | 'FIXED_DEPOSIT' | 'SAVINGS_PLAN' | 'INVESTOR_ACCOUNT' | undefined
    accruedAmounts?: DepositAccountAccruedAmounts | undefined
    /**
     * The date when the deposit account was activated, in the organization's timezone and time format.
     */
    activationDate?: string | undefined
    /**
     * The date when the deposit account was approved, in the organization's timezone and time format.
     */
    approvedDate?: string | undefined
    /**
     * The key of the branch that this deposit account is assigned to.
     */
    assignedBranchKey?: string | undefined
    /**
     * The key of the centre that this account is assigned to.
     */
    assignedCentreKey?: string | undefined
    /**
     * The key of the user that this deposit is assigned to.
     */
    assignedUserKey?: string | undefined
    balances?: DepositAccountBalances | undefined
    /**
     * The date when the deposit account was closed, in UTC.
     */
    closedDate?: string | undefined
    /**
     * The date this deposit account was created, in UTC.
     */
    creationDate?: string | undefined
    /**
     * The key to the credit arrangement where this account is registered.
     */
    creditArrangementKey?: string | undefined
    /**
     * The currency code.
     */
    currencyCode?: string | undefined
    /**
     * The encoded key of the deposit account, which is auto-generated and unique.
     */
    encodedKey?: string | undefined
    /**
     * The ID of the deposit account, which can be generated and customized - but must be unique.
     */
    id?: string | undefined
    interestSettings?: DepositAccountInterestSettings | undefined
    internalControls?: DepositAccountInternalControls | undefined
    /**
     * The date when the account was last evaluated for interest calculations and maturity, in the organization's timezone and time format.
     */
    lastAccountAppraisalDate?: string | undefined
    /**
     * The date when interest was last calculated for the account, in the organization's timezone and time format.
     */
    lastInterestCalculationDate?: string | undefined
    /**
     * The date when regular interest was last reviewed, in the organization's timezone and time format.
     */
    lastInterestReviewDate?: string | undefined
    /**
     * The date when interest was last applied on the account, in the organization's timezone and time format.
     */
    lastInterestStoredDate?: string | undefined
    /**
     * The last update date for the deposit account, in UTC.
     */
    lastModifiedDate?: string | undefined
    /**
     * The date when the overdraft interest was last reviewed, in the organization's timezone and time format.
     */
    lastOverdraftInterestReviewDate?: string | undefined
    /**
     * The date when the deposit account was set to In Arrears, or null if the account is not In Arrears. The date is in the organization's timezone and time format.
     */
    lastSetToArrearsDate?: string | undefined
    /**
     * Lists all loan account keys on which the deposit account is used as the settlement account.
     */
    linkedSettlementAccountKeys?: string[] | undefined
    /**
     * The date when the deposit account was locked, in the organization's timezone and time format.
     */
    lockedDate?: string | undefined
    /**
     * The date when the account matures, for fixed or compulsory savings plans, in the organization's timezone and time format.
     */
    maturityDate?: string | undefined
    /**
     * The migration event encoded key associated with this deposit account. If this account was imported, you can track which migration event it came from.
     */
    migrationEventKey?: string | undefined
    /**
     * The deposit account name.
     */
    name: string
    /**
     * The notes or description attached to this object.
     */
    notes?: string | undefined
    overdraftInterestSettings?: DepositAccountOverdraftInterestSettings | undefined
    overdraftSettings?: DepositAccountOverdraftSettings | undefined
    /**
     * The key to the product type that this account is based on.
     */
    productTypeKey: string
    /**
     * The tax source where the account withholding taxes will be updated.
     */
    withholdingTaxSourceKey?: string | undefined
}

export const DepositAccount = {
    validate: DepositAccountValidator as ValidateFunction<DepositAccount>,
    get schema() {
        return DepositAccount.validate.schema
    },
    get errors() {
        return DepositAccount.validate.errors ?? undefined
    },
    is: (o: unknown): o is DepositAccount => DepositAccount.validate(o) === true,
    parse: (o: unknown): { right: DepositAccount } | { left: DefinedError[] } => {
        if (DepositAccount.is(o)) {
            return { right: o }
        }
        return { left: (DepositAccount.errors ?? []) as DefinedError[] }
    },
} as const

/**
 * Represents information about the accrued amounts of deposit accounts.
 */
export interface DepositAccountAccruedAmounts {
    /**
     * The amount of positive interest that has been accrued in the account.
     */
    interestAccrued?: number | undefined
    /**
     * The amount of negative interest that has been accrued in the account.
     */
    negativeInterestAccrued?: number | undefined
    /**
     * The amount of overdraft interest that has been accrued in the account.
     */
    overdraftInterestAccrued?: number | undefined
    /**
     * The amount of technical overdraft interest that has been accrued in the account.
     */
    technicalOverdraftInterestAccrued?: number | undefined
}

/**
 * Represents the action details for a deposit account.
 */
export interface DepositAccountAction {
    /**
     * The action type to be applied.
     */
    action: 'APPROVE' | 'UNDO_APPROVE' | 'LOCK' | 'UNLOCK' | 'CLOSE' | 'CLOSE_WITHDRAW' | 'CLOSE_REJECT' | 'CLOSE_WRITE_OFF'
    /**
     * The notes related to the action performed.
     */
    notes?: string | undefined
}

export const DepositAccountAction = {
    validate: DepositAccountActionValidator as ValidateFunction<DepositAccountAction>,
    get schema() {
        return DepositAccountAction.validate.schema
    },
    get errors() {
        return DepositAccountAction.validate.errors ?? undefined
    },
    is: (o: unknown): o is DepositAccountAction => DepositAccountAction.validate(o) === true,
    parse: (o: unknown): { right: DepositAccountAction } | { left: DefinedError[] } => {
        if (DepositAccountAction.is(o)) {
            return { right: o }
        }
        return { left: (DepositAccountAction.errors ?? []) as DefinedError[] }
    },
} as const

/**
 * Represents information about the balances of a deposit account.
 */
export interface DepositAccountBalances {
    /**
     * The current available balance for deposit transactions.
     */
    availableBalance?: number | undefined
    /**
     * The sum of all the blocked amounts on an account.
     */
    blockedBalance?: number | undefined
    /**
     * The amount of fees due to be paid on this account.
     */
    feesDue?: number | undefined
    /**
     * The sum of all the authorization hold amounts that have `CRDT` as the `creditDebitIndicator` for an account.
     */
    forwardAvailableBalance?: number | undefined
    /**
     * The sum of all the authorization hold amounts that have `DBIT` as the `creditDebitIndicator` for an account.
     */
    holdBalance?: number | undefined
    /**
     * The locked amount that is not available for withdrawal in the account. For more information, see [Deposit Account Overview Details](https://support.mambu.com/docs/deposit-account-overview-details).
     */
    lockedBalance?: number | undefined
    /**
     * The overdraft amount that has been taken out in the account. For more information, see [Overdraft Products](https://support.mambu.com/docs/en/overdraft-products).
     */
    overdraftAmount?: number | undefined
    /**
     * The amount of interest due to be paid on an account as a result of an authorized overdraft.
     */
    overdraftInterestDue?: number | undefined
    /**
     * The technical overdraft amount that has been taken out in the account. For more information, see [Technical Overdraft](https://support.mambu.com/docs/en/overdraft-products#technical-overdraft).
     */
    technicalOverdraftAmount?: number | undefined
    /**
     * The amount of interest due to be paid on an account as a result of a technical overdraft.
     */
    technicalOverdraftInterestDue?: number | undefined
    /**
     * The current balance of the account.
     */
    totalBalance?: number | undefined
}

/**
 * Represents the filter list used for searching deposit accounts.
 */
export interface DepositAccountFilterCriteria {
    field:
        | 'encodedKey'
        | 'id'
        | 'name'
        | 'accountHolderKey'
        | 'clientId'
        | 'groupId'
        | 'accountHolderName'
        | 'accountState'
        | 'accountType'
        | 'creationDate'
        | 'activationDate'
        | 'approvedDate'
        | 'lastModifiedDate'
        | 'maturityDate'
        | 'lastSetToArrearsDate'
        | 'closedDate'
        | 'accruedAmounts.interestAccrued'
        | 'accruedAmounts.overdraftInterestAccrued'
        | 'accruedAmounts.technicalOverdraftInterestAccrued'
        | 'maxBalance'
        | 'balances.availableBalance'
        | 'balances.blockedBalance'
        | 'balances.feesDue'
        | 'balances.lockedBalance'
        | 'balances.overdraftAmount'
        | 'balances.overdraftInterestDue'
        | 'balances.technicalOverdraftAmount'
        | 'balances.totalBalance'
        | 'balances.holdBalance'
        | 'assignedBranchKey'
        | 'assignedCentreKey'
        | 'assignedUserKey'
        | 'currencyCode'
        | 'interestSettings.interestRate'
        | 'currentInterestTier.endingBalance'
        | 'currentInterestTier.index'
        | 'currentInterestTier.interestRate'
        | 'currentInterestTier.startingBalance'
        | 'internalControls.maxWithdrawalAmount'
        | 'internalControls.recommendedDepositAmount'
        | 'internalControls.targetAmount'
        | 'lengthInDays'
        | 'overdraftRiskLevelKey'
        | 'overdraftAvailableLimit'
        | 'overdraftDaysInArrears'
        | 'overdraftInArrears'
        | 'overdraftInterestSettings.interestRateSettings.interestRate'
        | 'overdraftInterestSettings.interestRateSettings.interestSpread'
        | 'currentOverdraftInterestTier.endingBalance'
        | 'currentOverdraftInterestTier.index'
        | 'currentOverdraftInterestTier.interestRate'
        | 'currentOverdraftInterestTier.startingBalance'
        | 'overdraftSettings.overdraftExpiryDate'
        | 'overdraftSettings.overdraftLimit'
        | 'overdraftSettings.allowOverdraft'
        | 'productTypeKey'
        | 'productCategory'
        | 'taxApplied'
        | 'withholdingTaxSourceKey'
        | 'taxRate'
        | string
    /**
     * | **Operator**                | **Affected values**  | **Available for**                                                    |
     * |---------------               |----------------------|----------------------------------------------------------------------|
     * | EQUALS                       | ONE_VALUE            | BIG_DECIMAL,BOOLEAN,LONG,MONEY,NUMBER,PERCENT,STRING,ENUM,KEY        |
     * | EQUALS_CASE_SENSITIVE        | ONE_VALUE            | BIG_DECIMAL,BOOLEAN,LONG,MONEY,NUMBER,PERCENT,STRING,ENUM,KEY 		  |
     * | MORE_THAN                    | ONE_VALUE            | BIG_DECIMAL,NUMBER,MONEY                                             |
     * | LESS_THAN                    | ONE_VALUE            | BIG_DECIMAL,NUMBER,MONEY                                             |
     * | BETWEEN                      | TWO_VALUES           | BIG_DECIMAL,NUMBER,MONEY,DATE,DATE_TIME                              |
     * | ON                           | ONE_VALUE            | DATE,DATE_TIME                                                       |
     * | AFTER                        | ONE_VALUE            | DATE,DATE_TIME                                                       |
     * | BEFORE                       | ONE_VALUE            | DATE,DATE_TIME                                                       |
     * | BEFORE_INCLUSIVE             | ONE_VALUE            | DATE,DATE_TIME                                                       |
     * | STARTS_WITH                  | ONE_VALUE            | STRING                                                               |
     * | STARTS_WITH_CASE_SENSITIVE   | ONE_VALUE            | STRING                                                               |
     * | IN                           | LIST                 | ENUM,KEY                                                             |
     * | TODAY                        | NO_VALUE             | DATE,DATE_TIME                                                       |
     * | THIS_WEEK                    | NO_VALUE             | DATE,DATE_TIME                                                       |
     * | THIS_MONTH                   | NO_VALUE             | DATE,DATE_TIME                                                       |
     * | THIS_YEAR                    | NO_VALUE             | DATE,DATE_TIME                                                       |
     * | LAST_DAYS                    | ONE_VALUE            | NUMBER                                                               |
     * | EMPTY                        | NO_VALUE             | BIG_DECIMAL,LONG,MONEY,NUMBER,PERCENT,STRING,ENUM,KEY,DATE,DATE_TIME |
     * | NOT_EMPTY                    | NO_VALUE             | BIG_DECIMAL,LONG,MONEY,NUMBER,PERCENT,STRING,ENUM,KEY,DATE,DATE_TIME |
     */
    operator:
        | 'EQUALS'
        | 'EQUALS_CASE_SENSITIVE'
        | 'DIFFERENT_THAN'
        | 'MORE_THAN'
        | 'LESS_THAN'
        | 'BETWEEN'
        | 'ON'
        | 'AFTER'
        | 'AFTER_INCLUSIVE'
        | 'BEFORE'
        | 'BEFORE_INCLUSIVE'
        | 'STARTS_WITH'
        | 'STARTS_WITH_CASE_SENSITIVE'
        | 'IN'
        | 'TODAY'
        | 'THIS_WEEK'
        | 'THIS_MONTH'
        | 'THIS_YEAR'
        | 'LAST_DAYS'
        | 'EMPTY'
        | 'NOT_EMPTY'
    /**
     * The second value to match the searching criteria, when the `BETWEEN` operator is used.
     */
    secondValue?: string | undefined
    /**
     * The value to match the searching criteria.
     */
    value?: string | undefined
    /**
     * List of values when the `IN` operator is used.
     */
    values?: string[] | undefined
}

/**
 * Interest Rate Settings for Deposit Account Interest Availability
 */
export interface DepositAccountInterestAvailabilitySettings {
    /**
     * The interest rate for the deposit account
     */
    interestRate?: number | undefined
    /**
     * The list of interest rate tiers. An interest rate tier holds the values to define how the interest is computed
     */
    interestRateTiers?: DepositAccountInterestRateTier[] | undefined
    /**
     * The rate based on which the interest is accrued and applied for accounts with InterestRateSource#INDEX_INTEREST_RATE
     */
    interestSpread?: number | undefined
}

/**
 * Represents information about the interest payment settings.
 */
export interface DepositAccountInterestPaymentSettings {
    /**
     * The list of all dates when the interest is paid into the deposit account.
     */
    interestPaymentDates?: MonthAndDay[] | undefined
    /**
     * The interest payment point, which specifies when the interest should be paid to the account.
     */
    interestPaymentPoint?:
        | 'FIRST_DAY_OF_MONTH'
        | 'EVERY_WEEK'
        | 'EVERY_OTHER_WEEK'
        | 'EVERY_MONTH'
        | 'EVERY_3_MONTHS'
        | 'ON_FIXED_DATES'
        | 'DAILY'
        | 'ANNUALLY'
        | 'BI_ANNUALLY'
        | 'ON_ACCOUNT_MATURITY'
        | undefined
}

/**
 * Represents information about the interest rate settings for deposit accounts.
 */
export interface DepositAccountInterestRateSettings {
    /**
     * The encoded key for the set of interest settings, which is auto-generated and unique.
     */
    encodedKey?: string | undefined
    /**
     * The interest charge frequency, which shows how often interest is charged on loan or deposit accounts.
     */
    interestChargeFrequency?:
        | 'ANNUALIZED'
        | 'EVERY_MONTH'
        | 'EVERY_FOUR_WEEKS'
        | 'EVERY_WEEK'
        | 'EVERY_DAY'
        | 'EVERY_X_DAYS'
        | undefined
    /**
     * The number of times to apply interest in a time period.
     */
    interestChargeFrequencyCount?: number | undefined
    /**
     * The interest rate for the deposit account.
     */
    interestRate?: number | undefined
    /**
     * The number of times to review the interest rate in a time period.
     */
    interestRateReviewCount?: number | undefined
    /**
     * The time unit to use to determine the frequency of interest rate reviews.
     */
    interestRateReviewUnit?: 'DAYS' | 'WEEKS' | 'MONTHS' | undefined
    /**
     * The interest calculation method used.
     */
    interestRateSource?: 'FIXED_INTEREST_RATE' | 'INDEX_INTEREST_RATE' | undefined
    /**
     * The terms for how interest rate is determined when accruing for an account.
     */
    interestRateTerms?: 'FIXED' | 'TIERED' | 'TIERED_PERIOD' | 'TIERED_BAND' | undefined
    /**
     * The list of interest rate tiers, which hold the values to define how interest is calculated.
     */
    interestRateTiers?: DepositAccountInterestRateTier[] | undefined
    /**
     * The index interest rate that is used to calculate the interest rate that is applied to accounts.
     */
    interestSpread?: number | undefined
}

/**
 * Represents information about how interest rate is calculated.
 */
export interface DepositAccountInterestRateTier {
    /**
     * The encoded key of the interest rate tier, auto generated, unique
     */
    encodedKey?: string | undefined
    /**
     * The top-limit value for the account balance in order to determine if this tier is used or not
     */
    endingBalance?: number | undefined
    /**
     * The end date for the account period. Used to determine if this interest rate tier is used or not.
     */
    endingDay?: number | undefined
    /**
     * The rate used for computing the interest for an account which has the balance less than the ending balance
     */
    interestRate: number
}

/**
 * Represents information about the deposit account's interest settings.
 */
export interface DepositAccountInterestSettings {
    interestPaymentSettings?: DepositAccountInterestPaymentSettings | undefined
    interestRateSettings?: DepositAccountInterestRateSettings | undefined
}

/**
 * Represents information about internal controls.
 */
export interface DepositAccountInternalControls {
    /**
     * The maximum deposit balance of the account.
     */
    maxDepositBalance?: number | undefined
    /**
     * The maximum amount allowed for a withdrawal.
     */
    maxWithdrawalAmount?: number | undefined
    /**
     * The recommended amount for a deposit.
     */
    recommendedDepositAmount?: number | undefined
    /**
     * The target amount for a deposit made towards a savings goal.
     */
    targetAmount?: number | undefined
}

/**
 * Represents information about overdraft interest rate settings for deposit accounts.
 */
export interface DepositAccountOverdraftInterestRateSettings {
    /**
     * The encoded key for the set of interest settings, which is auto-generated and unique.
     */
    encodedKey?: string | undefined
    /**
     * The interest charge frequency, which shows how often interest is charged on loan or deposit accounts.
     */
    interestChargeFrequency?:
        | 'ANNUALIZED'
        | 'EVERY_MONTH'
        | 'EVERY_FOUR_WEEKS'
        | 'EVERY_WEEK'
        | 'EVERY_DAY'
        | 'EVERY_X_DAYS'
        | undefined
    /**
     * The number of times to apply interest in a time period.
     */
    interestChargeFrequencyCount?: number | undefined
    /**
     * The interest rate for the deposit account.
     */
    interestRate?: number | undefined
    /**
     * The number of times to review the interest rate in a time period.
     */
    interestRateReviewCount?: number | undefined
    /**
     * The time unit to use to determine the frequency of interest rate reviews.
     */
    interestRateReviewUnit?: 'DAYS' | 'WEEKS' | 'MONTHS' | undefined
    /**
     * The interest calculation method used.
     */
    interestRateSource?: 'FIXED_INTEREST_RATE' | 'INDEX_INTEREST_RATE' | undefined
    /**
     * The terms for how interest rate is determined when accruing for an account.
     */
    interestRateTerms?: 'FIXED' | 'TIERED' | 'TIERED_PERIOD' | 'TIERED_BAND' | undefined
    /**
     * The list of interest rate tiers, which hold the values to define how interest is calculated.
     */
    interestRateTiers?: DepositAccountInterestRateTier[] | undefined
    /**
     * The index interest rate that is used to calculate the interest rate that is applied to accounts.
     */
    interestSpread?: number | undefined
}

/**
 * Represents information about a deposit account's overdraft interest settings.
 */
export interface DepositAccountOverdraftInterestSettings {
    interestRateSettings?: DepositAccountOverdraftInterestRateSettings | undefined
}

/**
 * Represents information about a deposit account's overdraft settings.
 */
export interface DepositAccountOverdraftSettings {
    /**
     * `TRUE` if this account supports overdraft, `FALSE` otherwise.
     */
    allowOverdraft?: boolean | undefined
    /**
     * The expiration date of an overdraft.
     */
    overdraftExpiryDate?: string | undefined
    /**
     * The limit amount that may be taken out as overdraft, where null means 0.
     */
    overdraftLimit?: number | undefined
}

/**
 * Represents the filtering criteria list and the sorting criteria for searching deposit accounts.
 */
export interface DepositAccountSearchCriteria {
    /**
     * The list of filtering criteria.
     */
    filterCriteria?: DepositAccountFilterCriteria[] | undefined
    sortingCriteria?: DepositAccountSortingCriteria | undefined
}

export const DepositAccountSearchCriteria = {
    validate: DepositAccountSearchCriteriaValidator as ValidateFunction<DepositAccountSearchCriteria>,
    get schema() {
        return DepositAccountSearchCriteria.validate.schema
    },
    get errors() {
        return DepositAccountSearchCriteria.validate.errors ?? undefined
    },
    is: (o: unknown): o is DepositAccountSearchCriteria => DepositAccountSearchCriteria.validate(o) === true,
    parse: (o: unknown): { right: DepositAccountSearchCriteria } | { left: DefinedError[] } => {
        if (DepositAccountSearchCriteria.is(o)) {
            return { right: o }
        }
        return { left: (DepositAccountSearchCriteria.errors ?? []) as DefinedError[] }
    },
} as const

/**
 * The sorting criteria used for searching deposit accounts.
 */
export interface DepositAccountSortingCriteria {
    /**
     * The field to use to sort the selection. This can be an enumerated value or a custom field using the format [customFieldSetId].[customFieldId].
     */
    field:
        | 'encodedKey'
        | 'id'
        | 'name'
        | 'creationDate'
        | 'activationDate'
        | 'approvedDate'
        | 'lastModifiedDate'
        | 'maturityDate'
        | 'lastSetToArrearsDate'
        | 'closedDate'
        | 'accountHolderName'
        | 'accruedAmounts.interestAccrued'
        | 'accruedAmounts.overdraftInterestAccrued'
        | 'accruedAmounts.technicalOverdraftInterestAccrued'
        | 'maxBalance'
        | 'balances.availableBalance'
        | 'balances.blockedBalance'
        | 'balances.feesDue'
        | 'balances.lockedBalance'
        | 'balances.overdraftAmount'
        | 'balances.technicalOverdraftAmount'
        | 'balances.totalBalance'
        | 'balances.holdBalance'
        | 'balances.overdraftInterestDue'
        | 'assignedBranchKey'
        | 'assignedCentreKey'
        | 'assignedUserKey'
        | 'interestSettings.interestRate'
        | 'currentInterestTier.startingBalance'
        | 'currentInterestTier.endingBalance'
        | 'currentInterestTier.index'
        | 'currentInterestTier.interestRate'
        | 'currentOverdraftInterestTier.startingBalance'
        | 'currentOverdraftInterestTier.endingBalance'
        | 'currentOverdraftInterestTier.index'
        | 'currentOverdraftInterestTier.interestRate'
        | 'internalControls.maxWithdrawalAmount'
        | 'internalControls.recommendedDepositAmount'
        | 'internalControls.targetAmount'
        | 'notes'
        | 'taxApplied'
        | 'taxRate'
        | 'withholdingTaxSourceKey'
        | 'lengthInDays'
        | 'productCategory'
        | 'overdraftInterestSettings.interestRateSettings.interestSpread'
        | 'overdraftInterestSettings.interestRateSettings.interestRate'
        | 'overdraftSettings.allowOverdraft'
        | 'overdraftSettings.overdraftExpiryDate'
        | 'overdraftSettings.overdraftLimit'
        | 'overdraftDaysInArrears'
        | 'overdraftInArrears'
        | 'overdraftAvailableLimit'
    /**
     * The sorting order: `ASC` or `DESC`. The default order is `DESC`.
     */
    order?: 'ASC' | 'DESC' | undefined
}

/**
 * The the disbursement details it holds the information related to the disbursement details as disbursement date, first repayment date, disbursement fees.
 */
export interface DisbursementDetails {
    /**
     * The activation date, the date when the disbursement actually took place.
     */
    disbursementDate?: string | undefined
    /**
     * The encoded key of the disbursement details, auto generated, unique
     */
    encodedKey?: string | undefined
    /**
     * The date of the expected disbursement.Stored as Organization Time.
     */
    expectedDisbursementDate?: string | undefined
    /**
     * List of fees that should be applied at the disbursement time.
     */
    fees?: CustomPredefinedFee[] | undefined
    /**
     * The date of the expected first repayment. Stored as Organization Time.
     */
    firstRepaymentDate?: string | undefined
    transactionDetails?: LoanTransactionDetails | undefined
}

export interface ErrorResponse {
    errors?: RestError[] | undefined
}

export const ErrorResponse = {
    validate: ErrorResponseValidator as ValidateFunction<ErrorResponse>,
    get schema() {
        return ErrorResponse.validate.schema
    },
    get errors() {
        return ErrorResponse.validate.errors ?? undefined
    },
    is: (o: unknown): o is ErrorResponse => ErrorResponse.validate(o) === true,
    parse: (o: unknown): { right: ErrorResponse } | { left: DefinedError[] } => {
        if (ErrorResponse.is(o)) {
            return { right: o }
        }
        return { left: (ErrorResponse.errors ?? []) as DefinedError[] }
    },
} as const

/**
 * Represents a fee amount.
 */
export interface FeeAmount {
    /**
     * The due amount.
     */
    due?: number | undefined
    /**
     * The expected amount, which is sum of paid and due amounts.
     */
    expected?: number | undefined
    /**
     * The expected amount, which is the sum of unapplied fee and planned fee due amounts.
     */
    expectedUnapplied?: number | undefined
    /**
     * The paid amount.
     */
    paid?: number | undefined
}

export type GetAllAuthorizationHoldsResponse = GetAuthorizationHold[]

export const GetAllAuthorizationHoldsResponse = {
    validate: GetAllAuthorizationHoldsResponseValidator as ValidateFunction<GetAllAuthorizationHoldsResponse>,
    get schema() {
        return GetAllAuthorizationHoldsResponse.validate.schema
    },
    get errors() {
        return GetAllAuthorizationHoldsResponse.validate.errors ?? undefined
    },
    is: (o: unknown): o is GetAllAuthorizationHoldsResponse => GetAllAuthorizationHoldsResponse.validate(o) === true,
    parse: (o: unknown): { right: GetAllAuthorizationHoldsResponse } | { left: DefinedError[] } => {
        if (GetAllAuthorizationHoldsResponse.is(o)) {
            return { right: o }
        }
        return { left: (GetAllAuthorizationHoldsResponse.errors ?? []) as DefinedError[] }
    },
} as const

export type GetAllBlocksResponse = BlockFund[]

export const GetAllBlocksResponse = {
    validate: GetAllBlocksResponseValidator as ValidateFunction<GetAllBlocksResponse>,
    get schema() {
        return GetAllBlocksResponse.validate.schema
    },
    get errors() {
        return GetAllBlocksResponse.validate.errors ?? undefined
    },
    is: (o: unknown): o is GetAllBlocksResponse => GetAllBlocksResponse.validate(o) === true,
    parse: (o: unknown): { right: GetAllBlocksResponse } | { left: DefinedError[] } => {
        if (GetAllBlocksResponse.is(o)) {
            return { right: o }
        }
        return { left: (GetAllBlocksResponse.errors ?? []) as DefinedError[] }
    },
} as const

export type GetAllCardsResponse = Card[]

export const GetAllCardsResponse = {
    validate: GetAllCardsResponseValidator as ValidateFunction<GetAllCardsResponse>,
    get schema() {
        return GetAllCardsResponse.validate.schema
    },
    get errors() {
        return GetAllCardsResponse.validate.errors ?? undefined
    },
    is: (o: unknown): o is GetAllCardsResponse => GetAllCardsResponse.validate(o) === true,
    parse: (o: unknown): { right: GetAllCardsResponse } | { left: DefinedError[] } => {
        if (GetAllCardsResponse.is(o)) {
            return { right: o }
        }
        return { left: (GetAllCardsResponse.errors ?? []) as DefinedError[] }
    },
} as const

export type GetAllResponse = DepositAccount[]

export const GetAllResponse = {
    validate: GetAllResponseValidator as ValidateFunction<GetAllResponse>,
    get schema() {
        return GetAllResponse.validate.schema
    },
    get errors() {
        return GetAllResponse.validate.errors ?? undefined
    },
    is: (o: unknown): o is GetAllResponse => GetAllResponse.validate(o) === true,
    parse: (o: unknown): { right: GetAllResponse } | { left: DefinedError[] } => {
        if (GetAllResponse.is(o)) {
            return { right: o }
        }
        return { left: (GetAllResponse.errors ?? []) as DefinedError[] }
    },
} as const

/**
 * Details for retrieving a authorization hold. Deprecated due to encodedKey field.
 */
export interface GetAuthorizationHold {
    /**
     * The key of the account linked with the authorization hold.
     */
    accountKey?: string | undefined
    /**
     * Whether the given request should be accepted without balance validations.
     */
    advice: boolean
    /**
     * The amount of money to be held as a result of the authorization hold request.
     */
    amount: number
    balances?: AccountBalances | undefined
    cardAcceptor?: CardAcceptor | undefined
    /**
     * The reference token of the card.
     */
    cardToken?: string | undefined
    /**
     * The organization time when the authorization hold was created
     */
    creationDate?: string | undefined
    /**
     * Indicates whether the authorization hold amount is credited or debited.If not provided, the default values is DBIT.
     */
    creditDebitIndicator?: 'DBIT' | 'CRDT' | undefined
    /**
     * The ISO currency code in which the hold was created. The amounts are stored in the base currency, but the user could have enter it in a foreign currency.
     */
    currencyCode?: string | undefined
    /**
     * The custom expiration period for the hold which overwrites mcc and default expiration periods
     */
    customExpirationPeriod?: number | undefined
    /**
     * The internal ID of the authorization hold, auto generated, unique.
     */
    encodedKey?: string | undefined
    /**
     * The exchange rate for the original currency.
     */
    exchangeRate?: number | undefined
    /**
     * The external reference ID to be used to reference the account hold in subsequent requests.
     */
    externalReferenceId: string
    /**
     * The original amount of money to be held as a result of the authorization hold request.
     */
    originalAmount?: number | undefined
    /**
     * The original currency in which the hold was created.
     */
    originalCurrency?: string | undefined
    /**
     * Indicates whether the authorization is partial or not
     */
    partial?: boolean | undefined
    /**
     * The date to consider as start date when calculating the number of days passed until expiration
     */
    referenceDateForExpiration?: string | undefined
    /**
     * Indicates the source of the authorization hold, the default values is CARD.
     */
    source?: 'CARD' | 'ACCOUNT' | undefined
    /**
     * The authorization hold status.
     */
    status?: 'PENDING' | 'REVERSED' | 'SETTLED' | 'EXPIRED' | undefined
    /**
     * The formatted time at which the user made this authorization hold.
     */
    userTransactionTime?: string | undefined
}

export type GetDepositAccountDocumentResponse = string

export const GetDepositAccountDocumentResponse = {
    validate: GetDepositAccountDocumentResponseValidator as ValidateFunction<GetDepositAccountDocumentResponse>,
    get schema() {
        return GetDepositAccountDocumentResponse.validate.schema
    },
    get errors() {
        return GetDepositAccountDocumentResponse.validate.errors ?? undefined
    },
    is: (o: unknown): o is GetDepositAccountDocumentResponse => GetDepositAccountDocumentResponse.validate(o) === true,
    parse: (o: unknown): { right: GetDepositAccountDocumentResponse } | { left: DefinedError[] } => {
        if (GetDepositAccountDocumentResponse.is(o)) {
            return { right: o }
        }
        return { left: (GetDepositAccountDocumentResponse.errors ?? []) as DefinedError[] }
    },
} as const

export type GetFundedLoansResponse = LoanAccount[]

export const GetFundedLoansResponse = {
    validate: GetFundedLoansResponseValidator as ValidateFunction<GetFundedLoansResponse>,
    get schema() {
        return GetFundedLoansResponse.validate.schema
    },
    get errors() {
        return GetFundedLoansResponse.validate.errors ?? undefined
    },
    is: (o: unknown): o is GetFundedLoansResponse => GetFundedLoansResponse.validate(o) === true,
    parse: (o: unknown): { right: GetFundedLoansResponse } | { left: DefinedError[] } => {
        if (GetFundedLoansResponse.is(o)) {
            return { right: o }
        }
        return { left: (GetFundedLoansResponse.errors ?? []) as DefinedError[] }
    },
} as const

export type GetInterestAvailabilitiesListResponse = InterestAccountSettingsAvailabilityResponse[]

export const GetInterestAvailabilitiesListResponse = {
    validate: GetInterestAvailabilitiesListResponseValidator as ValidateFunction<GetInterestAvailabilitiesListResponse>,
    get schema() {
        return GetInterestAvailabilitiesListResponse.validate.schema
    },
    get errors() {
        return GetInterestAvailabilitiesListResponse.validate.errors ?? undefined
    },
    is: (o: unknown): o is GetInterestAvailabilitiesListResponse => GetInterestAvailabilitiesListResponse.validate(o) === true,
    parse: (o: unknown): { right: GetInterestAvailabilitiesListResponse } | { left: DefinedError[] } => {
        if (GetInterestAvailabilitiesListResponse.is(o)) {
            return { right: o }
        }
        return { left: (GetInterestAvailabilitiesListResponse.errors ?? []) as DefinedError[] }
    },
} as const

export type GetWithholdingTaxHistoryResponse = AccountTax[]

export const GetWithholdingTaxHistoryResponse = {
    validate: GetWithholdingTaxHistoryResponseValidator as ValidateFunction<GetWithholdingTaxHistoryResponse>,
    get schema() {
        return GetWithholdingTaxHistoryResponse.validate.schema
    },
    get errors() {
        return GetWithholdingTaxHistoryResponse.validate.errors ?? undefined
    },
    is: (o: unknown): o is GetWithholdingTaxHistoryResponse => GetWithholdingTaxHistoryResponse.validate(o) === true,
    parse: (o: unknown): { right: GetWithholdingTaxHistoryResponse } | { left: DefinedError[] } => {
        if (GetWithholdingTaxHistoryResponse.is(o)) {
            return { right: o }
        }
        return { left: (GetWithholdingTaxHistoryResponse.errors ?? []) as DefinedError[] }
    },
} as const

/**
 * Guarantor, holds information about a client guaranty entry. It can be defined based on another client which guarantees (including or not a savings account whether it is a client of the organization using Mambu or not) or based on a value the client holds (an asset)
 */
export interface Guarantor {
    /**
     * The amount used by the client for the guaranty
     */
    amount: number
    /**
     * The name of a value the client guarantees with (populated when the guaranty type is ASSET)
     */
    assetName?: string | undefined
    /**
     * The key of the deposit account used by the guarantor (populated when the guaranty type is GUARANTOR). It can be null.
     */
    depositAccountKey?: string | undefined
    /**
     * The encoded key of the security, auto generated, unique.
     */
    encodedKey?: string | undefined
    /**
     * The key of the client/group used as the guarantor.
     */
    guarantorKey: string
    /**
     * The type of the guarantor (client/group)
     */
    guarantorType: 'CLIENT' | 'GROUP'
}

/**
 * Represents a single installment details structure.
 */
export interface Installment {
    /**
     * The installment due date.
     */
    dueDate?: string | undefined
    /**
     * The encoded key of the installment, which is auto generated, and unique.
     */
    encodedKey?: string | undefined
    /**
     * The expected closing balance is the remaining amount per installment only applicable for interest only equal installment products.
     */
    expectedClosingBalance?: number | undefined
    fee?: InstallmentFee | undefined
    /**
     * The breakdown of the fee amounts that have been applied to the loan account.
     */
    feeDetails?: InstallmentFeeDetails[] | undefined
    interest?: InstallmentAllocationElementTaxableAmount | undefined
    /**
     * The interest accrued calculated on previous repayment closing balance only applicable interest only equal installment products.
     */
    interestAccrued?: number | undefined
    /**
     * `TRUE` if a payment holiday is offered for the installment, `FALSE` otherwise.
     */
    isPaymentHoliday?: boolean | undefined
    /**
     * The installment last paid date.
     */
    lastPaidDate?: string | undefined
    /**
     * The order number of an installment among all the installments generated for a loan. Loan installments are put in ascending order by due date. The order number only applies to the content of a particular JSON response therefore it is not unique.
     */
    number?: string | undefined
    /**
     * The parent account key of the installment.
     */
    parentAccountKey?: string | undefined
    penalty?: InstallmentAllocationElementTaxableAmount | undefined
    principal?: InstallmentAllocationElementAmount | undefined
    /**
     * The installment repaid date.
     */
    repaidDate?: string | undefined
    /**
     * The installment state.
     */
    state?: 'PENDING' | 'LATE' | 'PAID' | 'PARTIALLY_PAID' | 'GRACE' | undefined
}

/**
 * Represents an installment allocation element amount structure.
 */
export interface InstallmentAllocationElementAmount {
    amount?: Amount | undefined
}

/**
 * Represents an installment allocation element taxable amount structure.
 */
export interface InstallmentAllocationElementTaxableAmount {
    amount?: Amount | undefined
    tax?: Amount | undefined
}

/**
 * Represents an installment fee structure.
 */
export interface InstallmentFee {
    amount?: FeeAmount | undefined
    tax?: Amount | undefined
}

/**
 * Represents fee details for an installment.
 */
export interface InstallmentFeeDetails {
    amount?: AmountWithReduced | undefined
    /**
     * The encoded key of the predefined fee, auto generated, unique
     */
    encodedKey?: string | undefined
    /**
     * The id of the fee, provided by the client
     */
    id?: string | undefined
    /**
     * The name of the fee
     */
    name?: string | undefined
    tax?: AmountWithReduced | undefined
}

/**
 * Interest Availability of a Deposit Account
 */
export interface InterestAccountSettingsAvailability {
    /**
     * The encoded key of the Interest Availability, auto generated, unique.
     */
    encodedKey?: string | undefined
    interestRateSettings: DepositAccountInterestAvailabilitySettings
    /**
     * Start date of the Interest Availability.
     */
    startDate: string
    /**
     * Type of the interest.
     */
    type: 'INTEREST' | 'OVERDRAFT' | 'TECHNICAL_OVERDRAFT'
}

export const InterestAccountSettingsAvailability = {
    validate: InterestAccountSettingsAvailabilityValidator as ValidateFunction<InterestAccountSettingsAvailability>,
    get schema() {
        return InterestAccountSettingsAvailability.validate.schema
    },
    get errors() {
        return InterestAccountSettingsAvailability.validate.errors ?? undefined
    },
    is: (o: unknown): o is InterestAccountSettingsAvailability => InterestAccountSettingsAvailability.validate(o) === true,
    parse: (o: unknown): { right: InterestAccountSettingsAvailability } | { left: DefinedError[] } => {
        if (InterestAccountSettingsAvailability.is(o)) {
            return { right: o }
        }
        return { left: (InterestAccountSettingsAvailability.errors ?? []) as DefinedError[] }
    },
} as const

/**
 * Interest Availability of a Deposit Account
 */
export interface InterestAccountSettingsAvailabilityResponse {
    /**
     * The encoded key of the Interest Availability, auto generated, unique.
     */
    encodedKey?: string | undefined
    interestRateSettings?: DepositAccountInterestRateSettings | undefined
    /**
     * Start date of the Interest Availability.
     */
    startDate?: string | undefined
    /**
     * Type of the interest.
     */
    type?: 'INTEREST' | 'OVERDRAFT' | 'TECHNICAL_OVERDRAFT' | undefined
}

export const InterestAccountSettingsAvailabilityResponse = {
    validate:
        InterestAccountSettingsAvailabilityResponseValidator as ValidateFunction<InterestAccountSettingsAvailabilityResponse>,
    get schema() {
        return InterestAccountSettingsAvailabilityResponse.validate.schema
    },
    get errors() {
        return InterestAccountSettingsAvailabilityResponse.validate.errors ?? undefined
    },
    is: (o: unknown): o is InterestAccountSettingsAvailabilityResponse =>
        InterestAccountSettingsAvailabilityResponse.validate(o) === true,
    parse: (o: unknown): { right: InterestAccountSettingsAvailabilityResponse } | { left: DefinedError[] } => {
        if (InterestAccountSettingsAvailabilityResponse.is(o)) {
            return { right: o }
        }
        return { left: (InterestAccountSettingsAvailabilityResponse.errors ?? []) as DefinedError[] }
    },
} as const

/**
 * Interest Availability of a Deposit Account
 */
export interface InterestAccountSettingsAvailabilityUpdate {
    /**
     * The encoded key of the Interest Availability, auto generated, unique.
     */
    encodedKey?: string | undefined
    interestRateSettings: DepositAccountInterestAvailabilitySettings
}

export const InterestAccountSettingsAvailabilityUpdate = {
    validate: InterestAccountSettingsAvailabilityUpdateValidator as ValidateFunction<InterestAccountSettingsAvailabilityUpdate>,
    get schema() {
        return InterestAccountSettingsAvailabilityUpdate.validate.schema
    },
    get errors() {
        return InterestAccountSettingsAvailabilityUpdate.validate.errors ?? undefined
    },
    is: (o: unknown): o is InterestAccountSettingsAvailabilityUpdate =>
        InterestAccountSettingsAvailabilityUpdate.validate(o) === true,
    parse: (o: unknown): { right: InterestAccountSettingsAvailabilityUpdate } | { left: DefinedError[] } => {
        if (InterestAccountSettingsAvailabilityUpdate.is(o)) {
            return { right: o }
        }
        return { left: (InterestAccountSettingsAvailabilityUpdate.errors ?? []) as DefinedError[] }
    },
} as const

/**
 * The interest settings, holds all the properties regarding interests for the loan account.
 */
export interface InterestSettings {
    /**
     * Adjustable interest rates settings for loan account
     */
    accountInterestRateSettings?: AccountInterestRateSettings[] | undefined
    /**
     * The accrue interest after maturity. If the product support this option, specify if the interest should be accrued after the account maturity date.
     */
    accrueInterestAfterMaturity?: boolean | undefined
    /**
     * Indicates whether late interest is accrued for this loan account
     */
    accrueLateInterest?: boolean | undefined
    interestApplicationDays?: DaysInMonth | undefined
    /**
     * The interest application method. Represents the interest application method that determines whether the interest gets applied on the account's disbursement or on each repayment.
     */
    interestApplicationMethod?: 'AFTER_DISBURSEMENT' | 'REPAYMENT_DUE_DATE' | 'FIXED_DAYS_OF_MONTH' | undefined
    /**
     * The interest balance calculation method. Represents the option which determines the way the balance for the account's interest is computed.
     */
    interestBalanceCalculationMethod?: 'ONLY_PRINCIPAL' | 'PRINCIPAL_AND_INTEREST' | undefined
    /**
     * The interest calculation method. Holds the type of interest calculation method.
     */
    interestCalculationMethod?: 'FLAT' | 'DECLINING_BALANCE' | 'DECLINING_BALANCE_DISCOUNTED' | 'EQUAL_INSTALLMENTS' | undefined
    /**
     * The interest change frequency. Holds the possible values for how often is interest charged on loan or deposit accounts
     */
    interestChargeFrequency?:
        | 'ANNUALIZED'
        | 'EVERY_MONTH'
        | 'EVERY_FOUR_WEEKS'
        | 'EVERY_WEEK'
        | 'EVERY_DAY'
        | 'EVERY_X_DAYS'
        | undefined
    /**
     * The interest rate. Represents the interest rate for the loan account. The interest on loans is accrued on a daily basis, which allows charging the clients only for the days they actually used the loan amount.
     */
    interestRate?: number | undefined
    /**
     * Interest rate update frequency unit count.
     */
    interestRateReviewCount?: number | undefined
    /**
     * The interest rate review unit. Defines the interest rate update frequency measurement unit.
     */
    interestRateReviewUnit?: 'DAYS' | 'WEEKS' | 'MONTHS' | undefined
    /**
     * The interest rate source. Represents the interest calculation method: fixed or (interest spread + active organization index interest rate)
     */
    interestRateSource?: 'FIXED_INTEREST_RATE' | 'INDEX_INTEREST_RATE' | undefined
    /**
     * Interest to be added to active organization index interest rate in order to find out actual interest rate
     */
    interestSpread?: number | undefined
    /**
     * The possible values for how we compute and apply the interest
     */
    interestType?: 'SIMPLE_INTEREST' | 'CAPITALIZED_INTEREST' | 'COMPOUNDING_INTEREST' | undefined
    pmtAdjustmentThreshold?: PMTAdjustmentThreshold | undefined
}

/**
 * Contains the details about an investor fund including fields like encoded key, guarantor type, amount and guarantor key
 */
export interface InvestorFund {
    /**
     * The amount used by the client for the guaranty
     */
    amount: number
    /**
     * The name of a value the client guarantees with (populated when the guaranty type is ASSET)
     */
    assetName?: string | undefined
    /**
     * The key of the deposit account used by the guarantor (populated when the guaranty type is GUARANTOR). It can be null.
     */
    depositAccountKey?: string | undefined
    /**
     * The encoded key of the entity, generated, globally unique
     */
    encodedKey?: string | undefined
    /**
     * The key of the client/group used as the guarantor.
     */
    guarantorKey: string
    /**
     * The type of the guarantor (client/group)
     */
    guarantorType: 'CLIENT' | 'GROUP'
    /**
     * Investor fund unique identifier. All versions of an investor fund will have same id.
     */
    id?: string | undefined
    /**
     * The constraint minimum value
     */
    interestCommission?: number | undefined
    /**
     * Percentage of loan shares this investor owns
     */
    sharePercentage?: number | undefined
}

/**
 * Represents a loan account. A loan account defines the amount that your organization lends to a client. The terms and conditions of a loan account are defined by a loan product. In a loan account, Mambu stores all the information related to disbursements, repayments, interest rates, and withdrawals.
 */
export interface LoanAccount {
    accountArrearsSettings?: AccountArrearsSettings | undefined
    /**
     * The encoded key of the account holder.
     */
    accountHolderKey: string
    /**
     * The type of the account holder.
     */
    accountHolderType: 'CLIENT' | 'GROUP'
    /**
     * The state of the loan account.
     */
    accountState?: 'PARTIAL_APPLICATION' | 'PENDING_APPROVAL' | 'APPROVED' | 'ACTIVE' | 'ACTIVE_IN_ARREARS' | 'CLOSED' | undefined
    /**
     * A second state for the loan account. Beside the account state, a second substate is sometimes necessary to provide more information about the exact lifecycle state of a loan account.For example, even if the account state of a loan account is `ACTIVE`, it can also have a substate of `LOCKED`.
     */
    accountSubState?:
        | 'PARTIALLY_DISBURSED'
        | 'LOCKED'
        | 'LOCKED_CAPPING'
        | 'REFINANCED'
        | 'RESCHEDULED'
        | 'WITHDRAWN'
        | 'REPAID'
        | 'REJECTED'
        | 'WRITTEN_OFF'
        | 'TERMINATED'
        | undefined
    /**
     * The amount of interest that has been accrued in the loan account.
     */
    accruedInterest?: number | undefined
    /**
     * The accrued penalty, represents the amount of penalty that has been accrued in the loan account.
     */
    accruedPenalty?: number | undefined
    /**
     * The encoded key of the transaction that activated the loan account.
     */
    activationTransactionKey?: string | undefined
    /**
     * DEPRECATED - Will always be false.
     */
    allowOffset?: boolean | undefined
    /**
     * The date the loan account was approved.
     */
    approvedDate?: string | undefined
    /**
     * The arrears tolerance (period or day of month) depending on the product settings.
     */
    arrearsTolerancePeriod?: number | undefined
    /**
     * The list of assets associated with the current loan account.
     */
    assets?: Asset[] | undefined
    /**
     * The key of the branch this loan account is assigned to. The branch is set to unassigned if no branch field is set.
     */
    assignedBranchKey?: string | undefined
    /**
     * The key of the centre this account is assigned to.
     */
    assignedCentreKey?: string | undefined
    /**
     * The key of the user this loan account is assigned to.
     */
    assignedUserKey?: string | undefined
    balances?: Balances | undefined
    /**
     * The date the loan was closed.
     */
    closedDate?: string | undefined
    /**
     * The date the loan account was created.
     */
    creationDate?: string | undefined
    /**
     * The key to the line of credit where this account is registered to.
     */
    creditArrangementKey?: string | undefined
    currency?: Currency | undefined
    /**
     * The number of days the loan account is in arrears.
     */
    daysInArrears?: number | undefined
    /**
     * The number of days a repayment for the loan account is late.
     */
    daysLate?: number | undefined
    disbursementDetails?: DisbursementDetails | undefined
    /**
     * The encoded key of the loan account, it is auto generated, and must be unique.
     */
    encodedKey?: string | undefined
    /**
     * The list of funds associated with the loan account.
     */
    fundingSources?: InvestorFund[] | undefined
    /**
     * Shows whether the repayment transactions with entry date set in the future are allowed or not for this loan account.
     */
    futurePaymentsAcceptance?: 'NO_FUTURE_PAYMENTS' | 'ACCEPT_FUTURE_PAYMENTS' | 'ACCEPT_OVERPAYMENTS' | undefined
    /**
     * The list of guarantees associated with the loan account.
     */
    guarantors?: Guarantor[] | undefined
    /**
     * The ID of the loan account, it can be generated and customized, and must be unique.
     */
    id?: string | undefined
    /**
     * The interest that is accrued in the current billing cycle.
     */
    interestAccruedInBillingCycle?: number | undefined
    /**
     * The value of the interest booked by the organization from the accounts funded by investors. Null if the funds are not enabled.
     */
    interestCommission?: number | undefined
    /**
     * The amount of interest from arrears that has been accrued in the loan account.
     */
    interestFromArrearsAccrued?: number | undefined
    interestSettings?: InterestSettings | undefined
    /**
     * The date the loan account has last been evaluated for interest, principal, fees, and penalties calculations expressed in the organization time format and time zone.
     */
    lastAccountAppraisalDate?: string | undefined
    /**
     * The date of the last time the loan account had interest applied (stored to interest balance), expressed in the organization time format and time zone.
     */
    lastInterestAppliedDate?: string | undefined
    /**
     * The date the interest was reviewed last time, stored in the organization time format and time zone.
     */
    lastInterestReviewDate?: string | undefined
    /**
     * The date when the loan account was set for the last time in the `LOCKED` state expressed in the organization time format and time zone. If null, the account is not locked anymore.
     */
    lastLockedDate?: string | undefined
    /**
     * The last date the loan was updated.
     */
    lastModifiedDate?: string | undefined
    /**
     * The date when the loan account was set to last standing or null; if never set, it is expressed in your organization time format and time zone.
     */
    lastSetToArrearsDate?: string | undefined
    /**
     * The date the tax rate on the loan account was last checked, expressed in the organization time format and time zone.
     */
    lastTaxRateReviewDate?: string | undefined
    /**
     * The overdue payments recalculation method inherited from the loan product on which this loan account is based.
     */
    latePaymentsRecalculationMethod?:
        | 'OVERDUE_INSTALLMENTS_INCREASE'
        | 'LAST_INSTALLMENT_INCREASE'
        | 'NO_RECALCULATION'
        | undefined
    /**
     * The loan amount.
     */
    loanAmount: number
    /**
     * The name of the loan account.
     */
    loanName?: string | undefined
    /**
     * The locked account total due type.
     */
    lockedAccountTotalDueType?: 'BALANCE_AMOUNT' | 'DUE_AMOUNT_ON_LATE_INSTALLMENTS' | undefined
    /**
     * A list with operations which are locked when the account is in the AccountState.LOCKED substate.
     */
    lockedOperations?: ('APPLY_INTEREST' | 'APPLY_FEES' | 'APPLY_PENALTIES')[] | undefined
    /**
     * The migration event encoded key associated with this loan account. If this account was imported, track which 'migration event' they came from.
     */
    migrationEventKey?: string | undefined
    /**
     * Adjust the interest for the first repayment when the first repayment period is different than the repayment frequency
     */
    modifyInterestForFirstInstallment?: boolean | undefined
    /**
     * The notes about this loan account.
     */
    notes?: string | undefined
    /**
     * The key of the original rescheduled or refinanced loan account.
     */
    originalAccountKey?: string | undefined
    /**
     * The amount of interest that has been accrued during payment holidays in the loan account.
     */
    paymentHolidaysAccruedInterest?: number | undefined
    /**
     * The interest payment method that determines whether the payments are made horizontally (on the repayments) or vertically (on the loan account).
     */
    paymentMethod?: 'HORIZONTAL' | 'VERTICAL' | undefined
    penaltySettings?: PenaltySettings | undefined
    /**
     * The list with manual fees planned on the installments of the loan account.
     */
    plannedInstallmentFees?: PlannedInstallmentFee[] | undefined
    prepaymentSettings?: PrepaymentSettings | undefined
    principalPaymentSettings?: PrincipalPaymentAccountSettings | undefined
    /**
     * The key for the type of loan product that this loan account is based on.
     */
    productTypeKey: string
    redrawSettings?: LoanAccountRedrawSettings | undefined
    /**
     * The key pointing to where this loan account was rescheduled or refinanced to. This value is only not null if rescheduled.
     */
    rescheduledAccountKey?: string | undefined
    scheduleSettings: ScheduleSettings
    /**
     * The encoded key of the settlement account.
     */
    settlementAccountKey?: string | undefined
    /**
     * The tax rate.
     */
    taxRate?: number | undefined
    /**
     * The date this loan account was terminated.
     */
    terminationDate?: string | undefined
    /**
     * The list of disbursement tranches available for the loan account.
     */
    tranches?: LoanTranche[] | undefined
}

/**
 * Represents the redraw settings for a loan account.
 */
export interface LoanAccountRedrawSettings {
    /**
     * `TRUE` if withdrawing amounts that reduce the next due instalment repayment is restricted, `FALSE` otherwise.
     */
    restrictNextDueWithdrawal: boolean
}

/**
 * Represents a single loan account schedule structure.
 */
export interface LoanAccountSchedule {
    currency?: Currency | undefined
    /**
     * The loan account schedule installments list.
     */
    installments?: Installment[] | undefined
}

export const LoanAccountSchedule = {
    validate: LoanAccountScheduleValidator as ValidateFunction<LoanAccountSchedule>,
    get schema() {
        return LoanAccountSchedule.validate.schema
    },
    get errors() {
        return LoanAccountSchedule.validate.errors ?? undefined
    },
    is: (o: unknown): o is LoanAccountSchedule => LoanAccountSchedule.validate(o) === true,
    parse: (o: unknown): { right: LoanAccountSchedule } | { left: DefinedError[] } => {
        if (LoanAccountSchedule.is(o)) {
            return { right: o }
        }
        return { left: (LoanAccountSchedule.errors ?? []) as DefinedError[] }
    },
} as const

/**
 * In some cases organizations may approve loans but not disburse the full amount initially. They would like to spread the disbursement (and risk) over time. Likewise for the client, they may not need the full loan amount up front. They may want to have a loan to buy some equipment for their business but will make one purchase today and another purchase in a few months.  In these cases, they don't need the full amount and wouldn't want to pay interest on cash they don't need yet. A solution for this matter is the usage of disbursement in tranches. This class holds the information required for one of this tranche.
 */
export interface LoanTranche {
    /**
     * The amount this tranche has available for disburse
     */
    amount: number
    disbursementDetails?: TrancheDisbursementDetails | undefined
    /**
     * The encoded key of the transaction details , auto generated, unique.
     */
    encodedKey?: string | undefined
    /**
     * Fees that are associated with this tranche
     */
    fees?: CustomPredefinedFee[] | undefined
    /**
     * Index indicating the tranche number
     */
    trancheNumber?: number | undefined
}

/**
 * Represents the loan transaction details.
 */
export interface LoanTransactionDetails {
    /**
     * The encoded key of the entity, generated, globally unique
     */
    encodedKey?: string | undefined
    /**
     * Whether the transaction was transferred between loans or deposit accounts
     */
    internalTransfer?: boolean | undefined
    /**
     * In case of a transaction to a deposit account this represent the deposit account key to which the transaction was made.
     */
    targetDepositAccountKey?: string | undefined
    /**
     * The ID of the transaction channel associated with the transaction details.
     */
    transactionChannelId?: string | undefined
    /**
     * The encoded key of the transaction channel associated with the transaction details.
     */
    transactionChannelKey?: string | undefined
}

/**
 * Wrapper for month and day for instances where the year isn't needed
 */
export interface MonthAndDay {
    /**
     * The day in the month
     */
    day?: number | undefined
    /**
     * The month of the year
     */
    month?: number | undefined
}

export type PatchBlockFundRequest = PatchOperation[]

export const PatchBlockFundRequest = {
    validate: PatchBlockFundRequestValidator as ValidateFunction<PatchBlockFundRequest>,
    get schema() {
        return PatchBlockFundRequest.validate.schema
    },
    get errors() {
        return PatchBlockFundRequest.validate.errors ?? undefined
    },
    is: (o: unknown): o is PatchBlockFundRequest => PatchBlockFundRequest.validate(o) === true,
    parse: (o: unknown): { right: PatchBlockFundRequest } | { left: DefinedError[] } => {
        if (PatchBlockFundRequest.is(o)) {
            return { right: o }
        }
        return { left: (PatchBlockFundRequest.errors ?? []) as DefinedError[] }
    },
} as const

/**
 * A single change that needs to be made to a resource
 */
export interface PatchOperation {
    /**
     * The field from where a value should be moved, when using move
     */
    from?: string | undefined
    /**
     * The change to perform
     */
    op: 'ADD' | 'REPLACE' | 'REMOVE' | 'MOVE'
    /**
     * The field to perform the operation on
     */
    path: string
    /**
     * The value of the field, can be null
     */
    value?: unknown
}

export type PatchRequest = PatchOperation[]

export const PatchRequest = {
    validate: PatchRequestValidator as ValidateFunction<PatchRequest>,
    get schema() {
        return PatchRequest.validate.schema
    },
    get errors() {
        return PatchRequest.validate.errors ?? undefined
    },
    is: (o: unknown): o is PatchRequest => PatchRequest.validate(o) === true,
    parse: (o: unknown): { right: PatchRequest } | { left: DefinedError[] } => {
        if (PatchRequest.is(o)) {
            return { right: o }
        }
        return { left: (PatchRequest.errors ?? []) as DefinedError[] }
    },
} as const

/**
 * The penalty settings, holds all the fields regarding penalties
 */
export interface PenaltySettings {
    /**
     * The last penalty calculation method, represents on what amount are the penalties calculated.
     */
    loanPenaltyCalculationMethod?:
        | 'NONE'
        | 'OVERDUE_BALANCE'
        | 'OVERDUE_BALANCE_AND_INTEREST'
        | 'OUTSTANDING_PRINCIPAL'
        | undefined
    /**
     * The penalty rate, represents the rate (in percent) which is charged as a penalty.
     */
    penaltyRate?: number | undefined
}

/**
 * For fixed term loans there is the possibility to define a payment plan. A payment plan consists of multiple periodic payments. This class holds information about a periodic payment.
 */
export interface PeriodicPayment {
    /**
     * The PMT value used in periodic payment
     */
    amount: number
    /**
     * The encoded key of the periodic payment, auto generated, unique.
     */
    encodedKey?: string | undefined
    /**
     * The installment's position up to which the PMT will be used
     */
    toInstallment: number
}

/**
 * The planned fee details holds the information related to the installment key, predefined fee key and amount
 */
export interface PlannedInstallmentFee {
    /**
     * The amount of the planned fee.
     */
    amount?: number | undefined
    /**
     * The date when a planned fee should be applied, overriding installment's due date. It should match the interval of the installment. If it belong to first installment, it should be between disbursement date and installment due date.
     */
    applyOnDate?: string | undefined
    /**
     * The encoded key of the planned installment fee, auto generated, unique.
     */
    encodedKey?: string | undefined
    /**
     * The encoded key of the installment on which the predefined fee is planned.
     */
    installmentKey?: string | undefined
    /**
     * The number of the installment on which the predefined fee is planned. It is used only in the case when fees are created at the same time with the loan account creation or during preview schedule, before account creation, otherwise this should be empty and installmentKey will be used to identify an installment.
     */
    installmentNumber?: number | undefined
    /**
     * The encoded key of the predefined fee which is planned.
     */
    predefinedFeeKey: string
}

/**
 * Represents PMT Adjustment threshold settings for loan accounts and loan products.
 */
export interface PMTAdjustmentThreshold {
    /**
     * The method used to calculate the PMT Adjustment threshold. Supported value is CALENDAR_DAYS
     */
    method?: 'WORKING_DAYS' | 'CALENDAR_DAYS' | undefined
    /**
     * The number of days that trigger a PMT Adjustment.
     */
    numberOfDays?: number | undefined
}

/**
 * The prepayment settings, holds all prepayment properties.
 */
export interface PrepaymentSettings {
    /**
     * Apply interest on prepayment method copied from loan product on which this account is based.
     */
    applyInterestOnPrepaymentMethod?: 'AUTOMATIC' | 'MANUAL' | undefined
    /**
     * The elements recalculation method, indicates how the declining balance with equal installments repayments are recalculated.
     */
    elementsRecalculationMethod?: 'PRINCIPAL_EXPECTED_FIXED' | 'TOTAL_EXPECTED_FIXED' | undefined
    ercFreeAllowanceAmount?: number | undefined
    /**
     * Early repayment charge fee free allowance in percentage per year
     */
    ercFreeAllowancePercentage?: number | undefined
    /**
     * Prepayment recalculation method copied from the loan product on which this account is based.
     */
    prepaymentRecalculationMethod?:
        | 'NO_RECALCULATION'
        | 'RESCHEDULE_REMAINING_REPAYMENTS'
        | 'RECALCULATE_SCHEDULE_KEEP_SAME_NUMBER_OF_TERMS'
        | 'RECALCULATE_SCHEDULE_KEEP_SAME_PRINCIPAL_AMOUNT'
        | 'RECALCULATE_SCHEDULE_KEEP_SAME_TOTAL_REPAYMENT_AMOUNT'
        | 'REDUCE_AMOUNT_PER_INSTALLMENT'
        | 'REDUCE_NUMBER_OF_INSTALLMENTS'
        | 'REDUCE_NUMBER_OF_INSTALLMENTS_NEW'
        | undefined
    /**
     * Installment status for the case when principal is paid off (copied from loan product).
     */
    principalPaidInstallmentStatus?: 'PARTIALLY_PAID' | 'PAID' | 'ORIGINAL_TOTAL_EXPECTED_PAID' | undefined
}

/**
 * The principal payment account settings, holds the required information for the principal payment process of an account.
 */
export interface PrincipalPaymentAccountSettings {
    /**
     * Fixed amount for being used for the repayments principal due.
     */
    amount?: number | undefined
    /**
     * The encoded key of the principal payment base settings, auto generated, unique.
     */
    encodedKey?: string | undefined
    /**
     * Boolean flag, if true, the fees will be included along with the principal in the repayment floor amount, for a revolving credit account
     */
    includeFeesInFloorAmount?: boolean | undefined
    /**
     * Boolean flag, if true, the interest will be included along with the principal in the repayment floor amount, for a revolving credit account
     */
    includeInterestInFloorAmount?: boolean | undefined
    /**
     * Percentage of principal amount used for the repayments principal due.
     */
    percentage?: number | undefined
    /**
     * The maximum principal due amount a repayment made with this settings can have
     */
    principalCeilingValue?: number | undefined
    /**
     * The minimum principal due amount a repayment made with this settings can have
     */
    principalFloorValue?: number | undefined
    /**
     * The method of principal payment for revolving credit.
     */
    principalPaymentMethod?:
        | 'FLAT'
        | 'OUTSTANDING_PRINCIPAL_PERCENTAGE'
        | 'PRINCIPAL_PERCENTAGE_LAST_DISB'
        | 'TOTAL_BALANCE_PERCENTAGE'
        | 'TOTAL_BALANCE_FLAT'
        | 'TOTAL_PRINCIPAL_PERCENTAGE'
        | undefined
    /**
     * The minimum total due amount a repayment made with this settings can have
     */
    totalDueAmountFloor?: number | undefined
    /**
     * The method of total due payment for revolving credit
     */
    totalDuePayment?:
        | 'FLAT'
        | 'OUTSTANDING_PRINCIPAL_PERCENTAGE'
        | 'PRINCIPAL_PERCENTAGE_LAST_DISB'
        | 'TOTAL_BALANCE_PERCENTAGE'
        | 'TOTAL_BALANCE_FLAT'
        | 'TOTAL_PRINCIPAL_PERCENTAGE'
        | undefined
}

/**
 * Reopen a deposit account
 */
export interface ReopenDepositAction {
    /**
     * The notes or description attached to this object.
     */
    notes?: string | undefined
}

export const ReopenDepositAction = {
    validate: ReopenDepositActionValidator as ValidateFunction<ReopenDepositAction>,
    get schema() {
        return ReopenDepositAction.validate.schema
    },
    get errors() {
        return ReopenDepositAction.validate.errors ?? undefined
    },
    is: (o: unknown): o is ReopenDepositAction => ReopenDepositAction.validate(o) === true,
    parse: (o: unknown): { right: ReopenDepositAction } | { left: DefinedError[] } => {
        if (ReopenDepositAction.is(o)) {
            return { right: o }
        }
        return { left: (ReopenDepositAction.errors ?? []) as DefinedError[] }
    },
} as const

export interface RestError {
    errorCode?: number | undefined
    errorReason?: string | undefined
    errorSource?: string | undefined
}

/**
 * The number of previewed instalments for an account
 */
export interface RevolvingAccountSettings {
    /**
     * The number of previewed instalments
     */
    numberOfPreviewedInstalments?: number | undefined
}

/**
 * The schedule settings, holds all schedule properties.
 */
export interface ScheduleSettings {
    /**
     * The PMT is calculated as the loan would have [amortizationPeriod] installments.
     */
    amortizationPeriod?: number | undefined
    billingCycle?: BillingCycleDays | undefined
    /**
     * The default first repayment due date offset, indicates how many days the first repayment due date should be extended(all other due dates from the schedule are relative to first repayment due date - they will also be affected by the offset)
     */
    defaultFirstRepaymentDueDateOffset?: number | undefined
    /**
     * Specifies the days of the month when the repayment due dates should be. Only available if the Repayment Methodology is FIXED_DAYS_OF_MONTH.
     */
    fixedDaysOfMonth?: number[] | undefined
    /**
     * The grace period. Represents the grace period for loan repayment - in number of installments.
     */
    gracePeriod: number
    /**
     * The grace period type. Representing the type of grace period which is possible for a loan account.
     */
    gracePeriodType?: 'NONE' | 'PAY_INTEREST_ONLY' | 'INTEREST_FORGIVENESS' | undefined
    /**
     * Flag used when the repayments schedule for the current account was determined by the user, by editing the due dates or the principal due
     */
    hasCustomSchedule?: boolean | undefined
    /**
     * A list of periodic payments for the current loan account.
     */
    paymentPlan?: PeriodicPayment[] | undefined
    /**
     * The periodic payment amount for the accounts which have balloon payments or Reduce Number of Installments and Optimized Payments
     */
    periodicPayment?: number | undefined
    previewSchedule?: RevolvingAccountSettings | undefined
    /**
     * The principal repayment interval. Indicates the interval of repayments that the principal has to be paid.
     */
    principalRepaymentInterval?: number | undefined
    /**
     * The repayment installments. Represents how many installments are required to pay back the loan.
     */
    repaymentInstallments?: number | undefined
    /**
     * The repayment period count. Represents how often the loan is to be repaid: stored based on the type repayment option.
     */
    repaymentPeriodCount?: number | undefined
    /**
     * The repayment period unit. Represents the frequency of loan repayment.
     */
    repaymentPeriodUnit?: 'DAYS' | 'WEEKS' | 'MONTHS' | 'YEARS' | undefined
    /**
     * The repayment schedule method. Represents the method that determines whether the schedule will be fixed all over the loan account's life cycle or will be dynamically recomputed when required.
     */
    repaymentScheduleMethod?: 'NONE' | 'FIXED' | 'DYNAMIC' | undefined
    /**
     * The schedule due dates method. Represents the methodology used by this account to compute the due dates of the repayments.
     */
    scheduleDueDatesMethod?: 'INTERVAL' | 'FIXED_DAYS_OF_MONTH' | undefined
    /**
     * The short handling method. Determines how to handle the short months, if they select a fixed day of month > 28. Will be null if no such date is selected and also for the Interval methodology. Only available if the Repayment Methodology is FIXED_DAYS_OF_MONTH.
     */
    shortMonthHandlingMethod?: 'LAST_DAY_IN_MONTH' | 'FIRST_DAY_OF_NEXT_MONTH' | undefined
}

export type SearchResponse = DepositAccount[]

export const SearchResponse = {
    validate: SearchResponseValidator as ValidateFunction<SearchResponse>,
    get schema() {
        return SearchResponse.validate.schema
    },
    get errors() {
        return SearchResponse.validate.errors ?? undefined
    },
    is: (o: unknown): o is SearchResponse => SearchResponse.validate(o) === true,
    parse: (o: unknown): { right: SearchResponse } | { left: DefinedError[] } => {
        if (SearchResponse.is(o)) {
            return { right: o }
        }
        return { left: (SearchResponse.errors ?? []) as DefinedError[] }
    },
} as const

/**
 * The action to start the maturity period for a deposit account
 */
export interface StartMaturityAction {
    /**
     * The date when the maturity period starts.
     */
    maturityDate?: string | undefined
    /**
     * The notes or description attached to this object.
     */
    notes?: string | undefined
}

export const StartMaturityAction = {
    validate: StartMaturityActionValidator as ValidateFunction<StartMaturityAction>,
    get schema() {
        return StartMaturityAction.validate.schema
    },
    get errors() {
        return StartMaturityAction.validate.errors ?? undefined
    },
    is: (o: unknown): o is StartMaturityAction => StartMaturityAction.validate(o) === true,
    parse: (o: unknown): { right: StartMaturityAction } | { left: DefinedError[] } => {
        if (StartMaturityAction.is(o)) {
            return { right: o }
        }
        return { left: (StartMaturityAction.errors ?? []) as DefinedError[] }
    },
} as const

/**
 * The disbursement details regarding a loan tranche.
 */
export interface TrancheDisbursementDetails {
    /**
     * The key of the disbursement transaction logged when this tranche was disbursed. This field will be null until the tranche disbursement
     */
    disbursementTransactionKey?: string | undefined
    /**
     * The date when this tranche is supposed to be disbursed (as Organization Time)
     */
    expectedDisbursementDate?: string | undefined
}

/**
 * The action to undo the maturity period for a deposit account
 */
export interface UndoMaturityAction {
    /**
     * The notes or description attached to this object.
     */
    notes?: string | undefined
}

export const UndoMaturityAction = {
    validate: UndoMaturityActionValidator as ValidateFunction<UndoMaturityAction>,
    get schema() {
        return UndoMaturityAction.validate.schema
    },
    get errors() {
        return UndoMaturityAction.validate.errors ?? undefined
    },
    is: (o: unknown): o is UndoMaturityAction => UndoMaturityAction.validate(o) === true,
    parse: (o: unknown): { right: UndoMaturityAction } | { left: DefinedError[] } => {
        if (UndoMaturityAction.is(o)) {
            return { right: o }
        }
        return { left: (UndoMaturityAction.errors ?? []) as DefinedError[] }
    },
} as const
