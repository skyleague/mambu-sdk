/* eslint-disable */
// @ts-nocheck
/**
 * Generated by Ajv https://ajv.js.org/guide/managing-schemas.html#standalone-validation-code
 */
import {createRequire} from 'module';const require = createRequire(import.meta.url);"use strict";
/** @type {unknown} */
export const validate = validate10;export default validate10;const schema11 = {"$schema":"http://json-schema.org/draft-07/schema#","title":"GetAllResponse","type":"array","items":{"$ref":"#/$defs/CustomFieldSetMeta"},"$defs":{"CustomFieldSetMeta":{"type":"object","description":"Model representation of a Custom Field Set","properties":{"availableFor":{"description":"Indicates the entity that the custom field set is associated with (eg. clients or any entity that allows CF definition)","enum":["CLIENT","GROUP","CREDIT_ARRANGEMENT","LOAN_ACCOUNT","GUARANTOR","ASSET","DEPOSIT_ACCOUNT","DEPOSIT_PRODUCT","TRANSACTION_CHANNEL","TRANSACTION_TYPE","BRANCH","CENTRE","USER"]},"creationDate":{"type":"string","description":"Date at which the custom field set was created","format":"date-time"},"customFields":{"type":"array","description":"This section lists all the custom fields associated with this set","items":{"$ref":"#/$defs/CustomFieldIdentity"}},"description":{"type":"string","description":"Free text field to store eventual notes with regard to custom field group purpose/details"},"displaySettings":{"$ref":"#/$defs/CustomFieldSetDisplaySettings"},"encodedKey":{"type":"string","description":"The encoded key of the entity, generated, globally unique"},"fieldSetType":{"description":"The usage decides how the custom field set will be used in the UI and how the custom field values will be stored. For STANDARD set type the custom field set can be used only once (i.e Personal Information). For GROUPED set type the custom field set can be used multiple times (i.e Addresses). For further details please see [here](https://support.mambu.com/customer/en/portal/articles/1986000-custom-fields?b_id=873#2)","enum":["STANDARD","GROUPED"]},"id":{"type":"string","description":"User-defined ID, gobally unique"}},"additionalProperties":true},"CustomFieldIdentity":{"type":"object","description":"A simple representation, holds only the information that identifies the custom field","properties":{"encodedKey":{"type":"string","description":"The encoded key of the entity, generated, globally unique"},"id":{"type":"string","description":"User-provided ID of the custom field"}},"additionalProperties":true},"CustomFieldSetDisplaySettings":{"type":"object","description":"Wrapper holds the display properties of a Custom Field Set","properties":{"builtIn":{"type":"boolean","description":"This is used only for builtIn custom field sets and can have two possible values:\nTrue - when this is a \"mambu\" field set,\nFalse - when this is a tenant-defined field set"},"displayName":{"type":"string","description":"User-provided name of the custom field set"},"position":{"type":"integer","description":"Represents the order of the custom field set (starts from 0)"}},"additionalProperties":true}}};const schema12 = {"type":"object","description":"Model representation of a Custom Field Set","properties":{"availableFor":{"description":"Indicates the entity that the custom field set is associated with (eg. clients or any entity that allows CF definition)","enum":["CLIENT","GROUP","CREDIT_ARRANGEMENT","LOAN_ACCOUNT","GUARANTOR","ASSET","DEPOSIT_ACCOUNT","DEPOSIT_PRODUCT","TRANSACTION_CHANNEL","TRANSACTION_TYPE","BRANCH","CENTRE","USER"]},"creationDate":{"type":"string","description":"Date at which the custom field set was created","format":"date-time"},"customFields":{"type":"array","description":"This section lists all the custom fields associated with this set","items":{"$ref":"#/$defs/CustomFieldIdentity"}},"description":{"type":"string","description":"Free text field to store eventual notes with regard to custom field group purpose/details"},"displaySettings":{"$ref":"#/$defs/CustomFieldSetDisplaySettings"},"encodedKey":{"type":"string","description":"The encoded key of the entity, generated, globally unique"},"fieldSetType":{"description":"The usage decides how the custom field set will be used in the UI and how the custom field values will be stored. For STANDARD set type the custom field set can be used only once (i.e Personal Information). For GROUPED set type the custom field set can be used multiple times (i.e Addresses). For further details please see [here](https://support.mambu.com/customer/en/portal/articles/1986000-custom-fields?b_id=873#2)","enum":["STANDARD","GROUPED"]},"id":{"type":"string","description":"User-defined ID, gobally unique"}},"additionalProperties":true};const schema13 = {"type":"object","description":"A simple representation, holds only the information that identifies the custom field","properties":{"encodedKey":{"type":"string","description":"The encoded key of the entity, generated, globally unique"},"id":{"type":"string","description":"User-provided ID of the custom field"}},"additionalProperties":true};const schema14 = {"type":"object","description":"Wrapper holds the display properties of a Custom Field Set","properties":{"builtIn":{"type":"boolean","description":"This is used only for builtIn custom field sets and can have two possible values:\nTrue - when this is a \"mambu\" field set,\nFalse - when this is a tenant-defined field set"},"displayName":{"type":"string","description":"User-provided name of the custom field set"},"position":{"type":"integer","description":"Represents the order of the custom field set (starts from 0)"}},"additionalProperties":true};const func0 = require("ajv/dist/runtime/equal").default;function validate11(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){let vErrors = null;let errors = 0;if(errors === 0){if(data && typeof data == "object" && !Array.isArray(data)){if(data.availableFor !== undefined){const _errs2 = errors;let valid1;valid1 = false;for(const v0 of schema12.properties.availableFor.enum){if(func0(data.availableFor, v0)){valid1 = true;break;}}if(!valid1){validate11.errors = [{instancePath:instancePath+"/availableFor",schemaPath:"#/properties/availableFor/enum",keyword:"enum",params:{allowedValues: schema12.properties.availableFor.enum},message:"must be equal to one of the allowed values"}];return false;}var valid0 = _errs2 === errors;}else {var valid0 = true;}if(valid0){if(data.creationDate !== undefined){const _errs3 = errors;if(errors === _errs3){if(errors === _errs3){if(!(typeof data.creationDate === "string")){validate11.errors = [{instancePath:instancePath+"/creationDate",schemaPath:"#/properties/creationDate/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}}var valid0 = _errs3 === errors;}else {var valid0 = true;}if(valid0){if(data.customFields !== undefined){let data2 = data.customFields;const _errs5 = errors;if(errors === _errs5){if(Array.isArray(data2)){var valid2 = true;const len0 = data2.length;for(let i0=0; i0<len0; i0++){let data3 = data2[i0];const _errs7 = errors;const _errs8 = errors;if(errors === _errs8){if(data3 && typeof data3 == "object" && !Array.isArray(data3)){if(data3.encodedKey !== undefined){const _errs11 = errors;if(typeof data3.encodedKey !== "string"){validate11.errors = [{instancePath:instancePath+"/customFields/" + i0+"/encodedKey",schemaPath:"#/$defs/CustomFieldIdentity/properties/encodedKey/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid4 = _errs11 === errors;}else {var valid4 = true;}if(valid4){if(data3.id !== undefined){const _errs13 = errors;if(typeof data3.id !== "string"){validate11.errors = [{instancePath:instancePath+"/customFields/" + i0+"/id",schemaPath:"#/$defs/CustomFieldIdentity/properties/id/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid4 = _errs13 === errors;}else {var valid4 = true;}}}else {validate11.errors = [{instancePath:instancePath+"/customFields/" + i0,schemaPath:"#/$defs/CustomFieldIdentity/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}var valid2 = _errs7 === errors;if(!valid2){break;}}}else {validate11.errors = [{instancePath:instancePath+"/customFields",schemaPath:"#/properties/customFields/type",keyword:"type",params:{type: "array"},message:"must be array"}];return false;}}var valid0 = _errs5 === errors;}else {var valid0 = true;}if(valid0){if(data.description !== undefined){const _errs15 = errors;if(typeof data.description !== "string"){validate11.errors = [{instancePath:instancePath+"/description",schemaPath:"#/properties/description/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid0 = _errs15 === errors;}else {var valid0 = true;}if(valid0){if(data.displaySettings !== undefined){let data7 = data.displaySettings;const _errs17 = errors;const _errs18 = errors;if(errors === _errs18){if(data7 && typeof data7 == "object" && !Array.isArray(data7)){if(data7.builtIn !== undefined){const _errs21 = errors;if(typeof data7.builtIn !== "boolean"){validate11.errors = [{instancePath:instancePath+"/displaySettings/builtIn",schemaPath:"#/$defs/CustomFieldSetDisplaySettings/properties/builtIn/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"}];return false;}var valid6 = _errs21 === errors;}else {var valid6 = true;}if(valid6){if(data7.displayName !== undefined){const _errs23 = errors;if(typeof data7.displayName !== "string"){validate11.errors = [{instancePath:instancePath+"/displaySettings/displayName",schemaPath:"#/$defs/CustomFieldSetDisplaySettings/properties/displayName/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid6 = _errs23 === errors;}else {var valid6 = true;}if(valid6){if(data7.position !== undefined){let data10 = data7.position;const _errs25 = errors;if(!(((typeof data10 == "number") && (!(data10 % 1) && !isNaN(data10))) && (isFinite(data10)))){validate11.errors = [{instancePath:instancePath+"/displaySettings/position",schemaPath:"#/$defs/CustomFieldSetDisplaySettings/properties/position/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];return false;}var valid6 = _errs25 === errors;}else {var valid6 = true;}}}}else {validate11.errors = [{instancePath:instancePath+"/displaySettings",schemaPath:"#/$defs/CustomFieldSetDisplaySettings/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}var valid0 = _errs17 === errors;}else {var valid0 = true;}if(valid0){if(data.encodedKey !== undefined){const _errs27 = errors;if(typeof data.encodedKey !== "string"){validate11.errors = [{instancePath:instancePath+"/encodedKey",schemaPath:"#/properties/encodedKey/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid0 = _errs27 === errors;}else {var valid0 = true;}if(valid0){if(data.fieldSetType !== undefined){let data12 = data.fieldSetType;const _errs29 = errors;if(!((data12 === "STANDARD") || (data12 === "GROUPED"))){validate11.errors = [{instancePath:instancePath+"/fieldSetType",schemaPath:"#/properties/fieldSetType/enum",keyword:"enum",params:{allowedValues: schema12.properties.fieldSetType.enum},message:"must be equal to one of the allowed values"}];return false;}var valid0 = _errs29 === errors;}else {var valid0 = true;}if(valid0){if(data.id !== undefined){const _errs30 = errors;if(typeof data.id !== "string"){validate11.errors = [{instancePath:instancePath+"/id",schemaPath:"#/properties/id/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid0 = _errs30 === errors;}else {var valid0 = true;}}}}}}}}}else {validate11.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}validate11.errors = vErrors;return errors === 0;}function validate10(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){let vErrors = null;let errors = 0;if(errors === 0){if(Array.isArray(data)){var valid0 = true;const len0 = data.length;for(let i0=0; i0<len0; i0++){const _errs1 = errors;if(!(validate11(data[i0], {instancePath:instancePath+"/" + i0,parentData:data,parentDataProperty:i0,rootData}))){vErrors = vErrors === null ? validate11.errors : vErrors.concat(validate11.errors);errors = vErrors.length;}var valid0 = _errs1 === errors;if(!valid0){break;}}}else {validate10.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "array"},message:"must be array"}];return false;}}validate10.errors = vErrors;return errors === 0;};validate.schema=schema11;