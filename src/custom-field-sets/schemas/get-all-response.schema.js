/**
 * Generated by @skyleague/therefore
 * eslint-disable
 */
"use strict";module.exports = validate10;module.exports.default = validate10;const schema11 = {"$schema":"http://json-schema.org/draft-07/schema#","title":"getAllResponse","type":"array","items":{"$ref":"#/$defs/CustomFieldSetMetaaf30"},"$defs":{"CustomFieldSetMetaaf30":{"type":"object","title":"CustomFieldSetMetaaf30","description":"Model representation of a Custom Field Set","properties":{"displaySettings":{"title":"displaySettings","$ref":"#/$defs/CustomFieldSetDisplaySettingsaf30"},"availableFor":{"title":"availableFor","description":"Indicates the entity that the custom field set is associated with (eg. clients or any entity that allows CF definition)","enum":["CLIENT","GROUP","CREDIT_ARRANGEMENT","LOAN_ACCOUNT","GUARANTOR","ASSET","DEPOSIT_ACCOUNT","DEPOSIT_PRODUCT","TRANSACTION_CHANNEL","TRANSACTION_TYPE","BRANCH","CENTRE","USER"]},"customFields":{"type":"array","title":"customFields","description":"This section lists all the custom fields associated with this set","items":{"description":"This section lists all the custom fields associated with this set","$ref":"#/$defs/CustomFieldIdentityaf30"}},"description":{"type":"string","title":"description","description":"Free text field to store eventual notes with regard to custom field group purpose/details"},"encodedKey":{"type":"string","title":"encodedKey","description":"The encoded key of the entity, generated, globally unique"},"id":{"type":"string","title":"id","description":"User-defined ID, gobally unique"},"creationDate":{"type":"string","title":"creationDate","description":"Date at which the custom field set was created","format":"date-time"},"fieldSetType":{"title":"fieldSetType","description":"The usage decides how the custom field set will be used in the UI and how the custom field values will be stored. For STANDARD set type the custom field set can be used only once (i.e Personal Information). For GROUPED set type the custom field set can be used multiple times (i.e Addresses). For further details please see [here](https://support.mambu.com/customer/en/portal/articles/1986000-custom-fields?b_id=873#2)","enum":["STANDARD","GROUPED"]}},"additionalProperties":false},"CustomFieldSetDisplaySettingsaf30":{"type":"object","title":"CustomFieldSetDisplaySettingsaf30","description":"Wrapper holds the display properties of a Custom Field Set","properties":{"position":{"type":"integer","title":"position","description":"Represents the order of the custom field set (starts from 0)"},"displayName":{"type":"string","title":"displayName","description":"User-provided name of the custom field set"},"builtIn":{"type":"boolean","title":"builtIn","description":"This is used only for builtIn custom field sets and can have two possible values:\nTrue - when this is a \"mambu\" field set,\nFalse - when this is a tenant-defined field set"}},"additionalProperties":false},"CustomFieldIdentityaf30":{"type":"object","title":"CustomFieldIdentityaf30","description":"A simple representation, holds only the information that identifies the custom field","properties":{"encodedKey":{"type":"string","title":"encodedKey","description":"The encoded key of the entity, generated, globally unique"},"id":{"type":"string","title":"id","description":"User-provided ID of the custom field"}},"additionalProperties":false}}};const schema12 = {"type":"object","title":"CustomFieldSetMetaaf30","description":"Model representation of a Custom Field Set","properties":{"displaySettings":{"title":"displaySettings","$ref":"#/$defs/CustomFieldSetDisplaySettingsaf30"},"availableFor":{"title":"availableFor","description":"Indicates the entity that the custom field set is associated with (eg. clients or any entity that allows CF definition)","enum":["CLIENT","GROUP","CREDIT_ARRANGEMENT","LOAN_ACCOUNT","GUARANTOR","ASSET","DEPOSIT_ACCOUNT","DEPOSIT_PRODUCT","TRANSACTION_CHANNEL","TRANSACTION_TYPE","BRANCH","CENTRE","USER"]},"customFields":{"type":"array","title":"customFields","description":"This section lists all the custom fields associated with this set","items":{"description":"This section lists all the custom fields associated with this set","$ref":"#/$defs/CustomFieldIdentityaf30"}},"description":{"type":"string","title":"description","description":"Free text field to store eventual notes with regard to custom field group purpose/details"},"encodedKey":{"type":"string","title":"encodedKey","description":"The encoded key of the entity, generated, globally unique"},"id":{"type":"string","title":"id","description":"User-defined ID, gobally unique"},"creationDate":{"type":"string","title":"creationDate","description":"Date at which the custom field set was created","format":"date-time"},"fieldSetType":{"title":"fieldSetType","description":"The usage decides how the custom field set will be used in the UI and how the custom field values will be stored. For STANDARD set type the custom field set can be used only once (i.e Personal Information). For GROUPED set type the custom field set can be used multiple times (i.e Addresses). For further details please see [here](https://support.mambu.com/customer/en/portal/articles/1986000-custom-fields?b_id=873#2)","enum":["STANDARD","GROUPED"]}},"additionalProperties":false};const schema13 = {"type":"object","title":"CustomFieldSetDisplaySettingsaf30","description":"Wrapper holds the display properties of a Custom Field Set","properties":{"position":{"type":"integer","title":"position","description":"Represents the order of the custom field set (starts from 0)"},"displayName":{"type":"string","title":"displayName","description":"User-provided name of the custom field set"},"builtIn":{"type":"boolean","title":"builtIn","description":"This is used only for builtIn custom field sets and can have two possible values:\nTrue - when this is a \"mambu\" field set,\nFalse - when this is a tenant-defined field set"}},"additionalProperties":false};const schema14 = {"type":"object","title":"CustomFieldIdentityaf30","description":"A simple representation, holds only the information that identifies the custom field","properties":{"encodedKey":{"type":"string","title":"encodedKey","description":"The encoded key of the entity, generated, globally unique"},"id":{"type":"string","title":"id","description":"User-provided ID of the custom field"}},"additionalProperties":false};const func0 = require("ajv/dist/runtime/equal").default;function validate11(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){let vErrors = null;let errors = 0;if(errors === 0){if(data && typeof data == "object" && !Array.isArray(data)){const _errs1 = errors;for(const key0 in data){if(!((((((((key0 === "displaySettings") || (key0 === "availableFor")) || (key0 === "customFields")) || (key0 === "description")) || (key0 === "encodedKey")) || (key0 === "id")) || (key0 === "creationDate")) || (key0 === "fieldSetType"))){validate11.errors = [{instancePath,schemaPath:"#/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key0},message:"must NOT have additional properties"}];return false;break;}}if(_errs1 === errors){if(data.displaySettings !== undefined){let data0 = data.displaySettings;const _errs2 = errors;const _errs3 = errors;if(errors === _errs3){if(data0 && typeof data0 == "object" && !Array.isArray(data0)){const _errs5 = errors;for(const key1 in data0){if(!(((key1 === "position") || (key1 === "displayName")) || (key1 === "builtIn"))){validate11.errors = [{instancePath:instancePath+"/displaySettings",schemaPath:"#/$defs/CustomFieldSetDisplaySettingsaf30/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key1},message:"must NOT have additional properties"}];return false;break;}}if(_errs5 === errors){if(data0.position !== undefined){let data1 = data0.position;const _errs6 = errors;if(!(((typeof data1 == "number") && (!(data1 % 1) && !isNaN(data1))) && (isFinite(data1)))){validate11.errors = [{instancePath:instancePath+"/displaySettings/position",schemaPath:"#/$defs/CustomFieldSetDisplaySettingsaf30/properties/position/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];return false;}var valid2 = _errs6 === errors;}else {var valid2 = true;}if(valid2){if(data0.displayName !== undefined){const _errs8 = errors;if(typeof data0.displayName !== "string"){validate11.errors = [{instancePath:instancePath+"/displaySettings/displayName",schemaPath:"#/$defs/CustomFieldSetDisplaySettingsaf30/properties/displayName/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid2 = _errs8 === errors;}else {var valid2 = true;}if(valid2){if(data0.builtIn !== undefined){const _errs10 = errors;if(typeof data0.builtIn !== "boolean"){validate11.errors = [{instancePath:instancePath+"/displaySettings/builtIn",schemaPath:"#/$defs/CustomFieldSetDisplaySettingsaf30/properties/builtIn/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"}];return false;}var valid2 = _errs10 === errors;}else {var valid2 = true;}}}}}else {validate11.errors = [{instancePath:instancePath+"/displaySettings",schemaPath:"#/$defs/CustomFieldSetDisplaySettingsaf30/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}var valid0 = _errs2 === errors;}else {var valid0 = true;}if(valid0){if(data.availableFor !== undefined){const _errs12 = errors;let valid3;valid3 = false;for(const v0 of schema12.properties.availableFor.enum){if(func0(data.availableFor, v0)){valid3 = true;break;}}if(!valid3){validate11.errors = [{instancePath:instancePath+"/availableFor",schemaPath:"#/properties/availableFor/enum",keyword:"enum",params:{allowedValues: schema12.properties.availableFor.enum},message:"must be equal to one of the allowed values"}];return false;}var valid0 = _errs12 === errors;}else {var valid0 = true;}if(valid0){if(data.customFields !== undefined){let data5 = data.customFields;const _errs13 = errors;if(errors === _errs13){if(Array.isArray(data5)){var valid4 = true;const len0 = data5.length;for(let i0=0; i0<len0; i0++){let data6 = data5[i0];const _errs15 = errors;const _errs16 = errors;if(errors === _errs16){if(data6 && typeof data6 == "object" && !Array.isArray(data6)){const _errs18 = errors;for(const key2 in data6){if(!((key2 === "encodedKey") || (key2 === "id"))){validate11.errors = [{instancePath:instancePath+"/customFields/" + i0,schemaPath:"#/$defs/CustomFieldIdentityaf30/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key2},message:"must NOT have additional properties"}];return false;break;}}if(_errs18 === errors){if(data6.encodedKey !== undefined){const _errs19 = errors;if(typeof data6.encodedKey !== "string"){validate11.errors = [{instancePath:instancePath+"/customFields/" + i0+"/encodedKey",schemaPath:"#/$defs/CustomFieldIdentityaf30/properties/encodedKey/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid6 = _errs19 === errors;}else {var valid6 = true;}if(valid6){if(data6.id !== undefined){const _errs21 = errors;if(typeof data6.id !== "string"){validate11.errors = [{instancePath:instancePath+"/customFields/" + i0+"/id",schemaPath:"#/$defs/CustomFieldIdentityaf30/properties/id/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid6 = _errs21 === errors;}else {var valid6 = true;}}}}else {validate11.errors = [{instancePath:instancePath+"/customFields/" + i0,schemaPath:"#/$defs/CustomFieldIdentityaf30/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}var valid4 = _errs15 === errors;if(!valid4){break;}}}else {validate11.errors = [{instancePath:instancePath+"/customFields",schemaPath:"#/properties/customFields/type",keyword:"type",params:{type: "array"},message:"must be array"}];return false;}}var valid0 = _errs13 === errors;}else {var valid0 = true;}if(valid0){if(data.description !== undefined){const _errs23 = errors;if(typeof data.description !== "string"){validate11.errors = [{instancePath:instancePath+"/description",schemaPath:"#/properties/description/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid0 = _errs23 === errors;}else {var valid0 = true;}if(valid0){if(data.encodedKey !== undefined){const _errs25 = errors;if(typeof data.encodedKey !== "string"){validate11.errors = [{instancePath:instancePath+"/encodedKey",schemaPath:"#/properties/encodedKey/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid0 = _errs25 === errors;}else {var valid0 = true;}if(valid0){if(data.id !== undefined){const _errs27 = errors;if(typeof data.id !== "string"){validate11.errors = [{instancePath:instancePath+"/id",schemaPath:"#/properties/id/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid0 = _errs27 === errors;}else {var valid0 = true;}if(valid0){if(data.creationDate !== undefined){const _errs29 = errors;if(errors === _errs29){if(errors === _errs29){if(!(typeof data.creationDate === "string")){validate11.errors = [{instancePath:instancePath+"/creationDate",schemaPath:"#/properties/creationDate/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}}var valid0 = _errs29 === errors;}else {var valid0 = true;}if(valid0){if(data.fieldSetType !== undefined){let data13 = data.fieldSetType;const _errs31 = errors;if(!((data13 === "STANDARD") || (data13 === "GROUPED"))){validate11.errors = [{instancePath:instancePath+"/fieldSetType",schemaPath:"#/properties/fieldSetType/enum",keyword:"enum",params:{allowedValues: schema12.properties.fieldSetType.enum},message:"must be equal to one of the allowed values"}];return false;}var valid0 = _errs31 === errors;}else {var valid0 = true;}}}}}}}}}}else {validate11.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}validate11.errors = vErrors;return errors === 0;}function validate10(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){let vErrors = null;let errors = 0;if(errors === 0){if(Array.isArray(data)){var valid0 = true;const len0 = data.length;for(let i0=0; i0<len0; i0++){const _errs1 = errors;if(!(validate11(data[i0], {instancePath:instancePath+"/" + i0,parentData:data,parentDataProperty:i0,rootData}))){vErrors = vErrors === null ? validate11.errors : vErrors.concat(validate11.errors);errors = vErrors.length;}var valid0 = _errs1 === errors;if(!valid0){break;}}}else {validate10.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "array"},message:"must be array"}];return false;}}validate10.errors = vErrors;return errors === 0;};validate10.schema=schema11;