/**
 * Generated by @skyleague/therefore
 * eslint-disable
 */
"use strict";module.exports = validate10;module.exports.default = validate10;const schema11 = {"$schema":"http://json-schema.org/draft-07/schema#","type":"array","title":"getAllResponse","items":{"$ref":"#/$defs/Task"},"$defs":{"Task":{"type":"object","title":"Task","description":"Represents a human task that can be assigned by a user to another. When a Task is created, it's set to status OPEN","properties":{"lastModifiedDate":{"type":"string","title":"lastModifiedDate","description":"The last date at which the task was modified","format":"date-time"},"createdByUserKey":{"type":"string","title":"createdByUserKey","description":"The key of the user that created this task. The value is not editable and it is populated at task creation with the current user key"},"dueDate":{"type":"string","title":"dueDate","description":"The due date of the task, at which the task has to be completed","format":"date"},"description":{"type":"string","title":"description","description":"Description of the task"},"creationDate":{"type":"string","title":"creationDate","description":"The date at which the task was created","format":"date-time"},"title":{"type":"string","title":"title","description":"Title of the task"},"taskLinkKey":{"type":"string","title":"taskLinkKey","description":"Who is the link of this task. If null, means nobody is linked to this task"},"createdByFullName":{"type":"string","title":"createdByFullName","description":"Name of the user who created the task"},"encodedKey":{"type":"string","title":"encodedKey","description":"The encoded key of the task, auto generated, unique"},"id":{"type":"integer","title":"id","description":"The id of the task, uniquely generated for the task"},"assignedUserKey":{"type":"string","title":"assignedUserKey","description":"Key of the user this task is assigned to"},"taskLinkType":{"title":"taskLinkType","description":"The type of the owner represented by the task link key","enum":["CLIENT","GROUP","LOAN_PRODUCT","SAVINGS_PRODUCT","CENTRE","BRANCH","USER","LOAN_ACCOUNT","DEPOSIT_ACCOUNT","ID_DOCUMENT","LINE_OF_CREDIT","GL_JOURNAL_ENTRY"]},"status":{"title":"status","description":"The status of this task, a new task is always OPEN","enum":["OPEN","COMPLETED"]},"templateKey":{"type":"string","title":"templateKey","description":"What template key was used to create the task"}},"required":["dueDate"],"additionalProperties":false}}};const schema12 = {"type":"object","title":"Task","description":"Represents a human task that can be assigned by a user to another. When a Task is created, it's set to status OPEN","properties":{"lastModifiedDate":{"type":"string","title":"lastModifiedDate","description":"The last date at which the task was modified","format":"date-time"},"createdByUserKey":{"type":"string","title":"createdByUserKey","description":"The key of the user that created this task. The value is not editable and it is populated at task creation with the current user key"},"dueDate":{"type":"string","title":"dueDate","description":"The due date of the task, at which the task has to be completed","format":"date"},"description":{"type":"string","title":"description","description":"Description of the task"},"creationDate":{"type":"string","title":"creationDate","description":"The date at which the task was created","format":"date-time"},"title":{"type":"string","title":"title","description":"Title of the task"},"taskLinkKey":{"type":"string","title":"taskLinkKey","description":"Who is the link of this task. If null, means nobody is linked to this task"},"createdByFullName":{"type":"string","title":"createdByFullName","description":"Name of the user who created the task"},"encodedKey":{"type":"string","title":"encodedKey","description":"The encoded key of the task, auto generated, unique"},"id":{"type":"integer","title":"id","description":"The id of the task, uniquely generated for the task"},"assignedUserKey":{"type":"string","title":"assignedUserKey","description":"Key of the user this task is assigned to"},"taskLinkType":{"title":"taskLinkType","description":"The type of the owner represented by the task link key","enum":["CLIENT","GROUP","LOAN_PRODUCT","SAVINGS_PRODUCT","CENTRE","BRANCH","USER","LOAN_ACCOUNT","DEPOSIT_ACCOUNT","ID_DOCUMENT","LINE_OF_CREDIT","GL_JOURNAL_ENTRY"]},"status":{"title":"status","description":"The status of this task, a new task is always OPEN","enum":["OPEN","COMPLETED"]},"templateKey":{"type":"string","title":"templateKey","description":"What template key was used to create the task"}},"required":["dueDate"],"additionalProperties":false};const func4 = Object.prototype.hasOwnProperty;const func0 = require("ajv/dist/runtime/equal").default;function validate10(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){let vErrors = null;let errors = 0;if(errors === 0){if(Array.isArray(data)){var valid0 = true;const len0 = data.length;for(let i0=0; i0<len0; i0++){let data0 = data[i0];const _errs1 = errors;const _errs2 = errors;if(errors === _errs2){if(data0 && typeof data0 == "object" && !Array.isArray(data0)){let missing0;if((data0.dueDate === undefined) && (missing0 = "dueDate")){validate10.errors = [{instancePath:instancePath+"/" + i0,schemaPath:"#/$defs/Task/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];return false;}else {const _errs4 = errors;for(const key0 in data0){if(!(func4.call(schema12.properties, key0))){validate10.errors = [{instancePath:instancePath+"/" + i0,schemaPath:"#/$defs/Task/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key0},message:"must NOT have additional properties"}];return false;break;}}if(_errs4 === errors){if(data0.lastModifiedDate !== undefined){const _errs5 = errors;if(errors === _errs5){if(errors === _errs5){if(!(typeof data0.lastModifiedDate === "string")){validate10.errors = [{instancePath:instancePath+"/" + i0+"/lastModifiedDate",schemaPath:"#/$defs/Task/properties/lastModifiedDate/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}}var valid2 = _errs5 === errors;}else {var valid2 = true;}if(valid2){if(data0.createdByUserKey !== undefined){const _errs7 = errors;if(typeof data0.createdByUserKey !== "string"){validate10.errors = [{instancePath:instancePath+"/" + i0+"/createdByUserKey",schemaPath:"#/$defs/Task/properties/createdByUserKey/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid2 = _errs7 === errors;}else {var valid2 = true;}if(valid2){if(data0.dueDate !== undefined){const _errs9 = errors;if(errors === _errs9){if(errors === _errs9){if(!(typeof data0.dueDate === "string")){validate10.errors = [{instancePath:instancePath+"/" + i0+"/dueDate",schemaPath:"#/$defs/Task/properties/dueDate/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}}var valid2 = _errs9 === errors;}else {var valid2 = true;}if(valid2){if(data0.description !== undefined){const _errs11 = errors;if(typeof data0.description !== "string"){validate10.errors = [{instancePath:instancePath+"/" + i0+"/description",schemaPath:"#/$defs/Task/properties/description/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid2 = _errs11 === errors;}else {var valid2 = true;}if(valid2){if(data0.creationDate !== undefined){const _errs13 = errors;if(errors === _errs13){if(errors === _errs13){if(!(typeof data0.creationDate === "string")){validate10.errors = [{instancePath:instancePath+"/" + i0+"/creationDate",schemaPath:"#/$defs/Task/properties/creationDate/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}}var valid2 = _errs13 === errors;}else {var valid2 = true;}if(valid2){if(data0.title !== undefined){const _errs15 = errors;if(typeof data0.title !== "string"){validate10.errors = [{instancePath:instancePath+"/" + i0+"/title",schemaPath:"#/$defs/Task/properties/title/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid2 = _errs15 === errors;}else {var valid2 = true;}if(valid2){if(data0.taskLinkKey !== undefined){const _errs17 = errors;if(typeof data0.taskLinkKey !== "string"){validate10.errors = [{instancePath:instancePath+"/" + i0+"/taskLinkKey",schemaPath:"#/$defs/Task/properties/taskLinkKey/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid2 = _errs17 === errors;}else {var valid2 = true;}if(valid2){if(data0.createdByFullName !== undefined){const _errs19 = errors;if(typeof data0.createdByFullName !== "string"){validate10.errors = [{instancePath:instancePath+"/" + i0+"/createdByFullName",schemaPath:"#/$defs/Task/properties/createdByFullName/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid2 = _errs19 === errors;}else {var valid2 = true;}if(valid2){if(data0.encodedKey !== undefined){const _errs21 = errors;if(typeof data0.encodedKey !== "string"){validate10.errors = [{instancePath:instancePath+"/" + i0+"/encodedKey",schemaPath:"#/$defs/Task/properties/encodedKey/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid2 = _errs21 === errors;}else {var valid2 = true;}if(valid2){if(data0.id !== undefined){let data10 = data0.id;const _errs23 = errors;if(!(((typeof data10 == "number") && (!(data10 % 1) && !isNaN(data10))) && (isFinite(data10)))){validate10.errors = [{instancePath:instancePath+"/" + i0+"/id",schemaPath:"#/$defs/Task/properties/id/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];return false;}var valid2 = _errs23 === errors;}else {var valid2 = true;}if(valid2){if(data0.assignedUserKey !== undefined){const _errs25 = errors;if(typeof data0.assignedUserKey !== "string"){validate10.errors = [{instancePath:instancePath+"/" + i0+"/assignedUserKey",schemaPath:"#/$defs/Task/properties/assignedUserKey/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid2 = _errs25 === errors;}else {var valid2 = true;}if(valid2){if(data0.taskLinkType !== undefined){const _errs27 = errors;let valid3;valid3 = false;for(const v0 of schema12.properties.taskLinkType.enum){if(func0(data0.taskLinkType, v0)){valid3 = true;break;}}if(!valid3){validate10.errors = [{instancePath:instancePath+"/" + i0+"/taskLinkType",schemaPath:"#/$defs/Task/properties/taskLinkType/enum",keyword:"enum",params:{allowedValues: schema12.properties.taskLinkType.enum},message:"must be equal to one of the allowed values"}];return false;}var valid2 = _errs27 === errors;}else {var valid2 = true;}if(valid2){if(data0.status !== undefined){let data13 = data0.status;const _errs28 = errors;if(!((data13 === "OPEN") || (data13 === "COMPLETED"))){validate10.errors = [{instancePath:instancePath+"/" + i0+"/status",schemaPath:"#/$defs/Task/properties/status/enum",keyword:"enum",params:{allowedValues: schema12.properties.status.enum},message:"must be equal to one of the allowed values"}];return false;}var valid2 = _errs28 === errors;}else {var valid2 = true;}if(valid2){if(data0.templateKey !== undefined){const _errs29 = errors;if(typeof data0.templateKey !== "string"){validate10.errors = [{instancePath:instancePath+"/" + i0+"/templateKey",schemaPath:"#/$defs/Task/properties/templateKey/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid2 = _errs29 === errors;}else {var valid2 = true;}}}}}}}}}}}}}}}}}else {validate10.errors = [{instancePath:instancePath+"/" + i0,schemaPath:"#/$defs/Task/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}var valid0 = _errs1 === errors;if(!valid0){break;}}}else {validate10.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "array"},message:"must be array"}];return false;}}validate10.errors = vErrors;return errors === 0;};validate10.schema=schema11;