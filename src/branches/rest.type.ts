/**
 * Generated by @skyleague/therefore@v1.0.0-local
 * Do not manually touch this
 */
/* eslint-disable */
import type { ValidateFunction } from 'ajv'

/**
 * Branch Date Transfer Object
 */
export interface Branch {
    /**
     * branch email address
     */
    emailAddress?: string
    /**
     * list of branch addresses
     */
    addresses?: Address[]
    /**
     * branch phone number, as a string
     */
    phoneNumber?: string
    /**
     * notes about this branch
     */
    notes?: string
    /**
     * last date when the branch was modified
     */
    lastModifiedDate?: string
    /**
     * branch name
     */
    name?: string
    /**
     * The encoded key of the entity, generated, globally unique
     */
    encodedKey?: string
    /**
     * branch ID, unique
     */
    id?: string
    /**
     * branch state
     */
    state?: 'ACTIVE' | 'INACTIVE'
    /**
     * creation date of the branch
     */
    creationDate?: string
    /**
     * list of branch holidays
     */
    branchHolidays?: Holiday[]
}

export const Branch = {
    validate: require('./schemas/branch.schema.js') as ValidateFunction<Branch>,
    get schema() {
        return Branch.validate.schema
    },
    is: (o: unknown): o is Branch => Branch.validate(o) === true,
} as const

export interface ErrorResponse {
    errors?: RestError[]
}

export const ErrorResponse = {
    validate: require('./schemas/error-response.schema.js') as ValidateFunction<ErrorResponse>,
    get schema() {
        return ErrorResponse.validate.schema
    },
    is: (o: unknown): o is ErrorResponse => ErrorResponse.validate(o) === true,
} as const

export type GetAllResponse = Branch[]

export const GetAllResponse = {
    validate: require('./schemas/get-all-response.schema.js') as ValidateFunction<GetAllResponse>,
    get schema() {
        return GetAllResponse.validate.schema
    },
    is: (o: unknown): o is GetAllResponse => GetAllResponse.validate(o) === true,
} as const

/**
 * Address Data Transfer Object
 */
export interface Address {
    /**
     * The country
     */
    country?: string
    /**
     * Address parent key, the object owning this address, client, centre, branch
     */
    parentKey?: string
    /**
     * The city for this address
     */
    city?: string
    /**
     * The GPS latitude of this address in signed degrees format (DDD.dddd) with 6 decimal positions, ranging from -90 to +90
     */
    latitude?: number
    /**
     * The post code
     */
    postcode?: string
    /**
     * Index of this address in the list of addresses
     */
    indexInList?: number
    /**
     * Address encoded key, unique, generated
     */
    encodedKey?: string
    /**
     * The region that is part of the address
     */
    region?: string
    /**
     * The second line for the address, in case the first one doesn't fit the information, this is completely optional
     */
    line2?: string
    /**
     * The first line of the address
     */
    line1?: string
    /**
     * The GPS longitude of this address in signed degrees format (DDD.dddd) with 6 decimal positions, ranging from -180 to +180
     */
    longitude?: number
}

/**
 * Holiday Date Transfer Object
 */
export interface Holiday {
    /**
     * holiday date
     */
    date?: string
    /**
     * if is annually recurring
     */
    isAnnuallyRecurring?: boolean
    /**
     * holiday name
     */
    name?: string
    /**
     * The encoded key of the entity, generated, globally unique
     */
    encodedKey?: string
    /**
     * holiday id
     */
    id?: number
    /**
     * holiday creation date
     */
    creationDate?: string
}

export interface RestError {
    errorCode?: number
    errorSource?: string
    errorReason?: string
}
