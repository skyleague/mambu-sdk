/**
 * Generated by @skyleague/therefore
 * Do not manually touch this
 */
/* eslint-disable */

import { z } from 'zod'

export const RestError = z.object({
    errorCode: z.number().int().optional(),
    errorReason: z.string().optional(),
    errorSource: z.string().optional(),
})

export type RestError = z.infer<typeof RestError>

export const ExchangeRate = z
    .object({
        buyRate: z.number().describe('The buy exchange rate.').optional(),
        endDate: z.string().datetime({ offset: true }).describe('The exchange rate applies starting with this date.').optional(),
        fromCurrencyCode: z.string().describe('Organisation currency code').optional(),
        sellRate: z.number().describe('The sell exchange rate.').optional(),
        startDate: z
            .string()
            .datetime({ offset: true })
            .describe('The exchange rate applies starting with this date.')
            .optional(),
        toCurrencyCode: z.string().describe('Foreign currency code').optional(),
        userKey: z.string().describe('The key for the user that last modified the exchange rate.').optional(),
    })
    .describe('Model representation of an exchange rates.')

export type ExchangeRate = z.infer<typeof ExchangeRate>

export const ErrorResponse = z.object({
    errors: RestError.array().optional(),
})

export type ErrorResponse = z.infer<typeof ErrorResponse>

export const ExchangeRateInput = z
    .object({
        buyRate: z.number().describe('The buy exchange rate.'),
        sellRate: z.number().describe('The sell exchange rate.'),
        startDate: z
            .string()
            .datetime({ offset: true })
            .describe('The exchange rate applies starting with this date.')
            .optional(),
    })
    .describe('Model representation of an exchange rate inputs for filtering.')

export type ExchangeRateInput = z.infer<typeof ExchangeRateInput>

export const GetAllResponse = ExchangeRate.array()

export type GetAllResponse = z.infer<typeof GetAllResponse>
