/**
 * Generated by @skyleague/therefore@v1.0.0-local
 * Do not manually touch this
 */
/* eslint-disable */
import type { ValidateFunction } from 'ajv'
import { ValidationError } from 'ajv'

export interface ErrorResponse {
    errors?: RestError[]
}

export const ErrorResponse = {
    validate: (await import('./schemas/error-response.schema.js')).validate as ValidateFunction<ErrorResponse>,
    get schema() {
        return ErrorResponse.validate.schema
    },
    get errors() {
        return ErrorResponse.validate.errors ?? undefined
    },
    is: (o: unknown): o is ErrorResponse => ErrorResponse.validate(o) === true,
    assert: (o: unknown) => {
        if (!ErrorResponse.validate(o)) {
            throw new ValidationError(ErrorResponse.errors ?? [])
        }
    },
} as const

export type GetAllIndexRateSourcesResponse = IndexRateSource[]

export const GetAllIndexRateSourcesResponse = {
    validate: (await import('./schemas/get-all-index-rate-sources-response.schema.js'))
        .validate as ValidateFunction<GetAllIndexRateSourcesResponse>,
    get schema() {
        return GetAllIndexRateSourcesResponse.validate.schema
    },
    get errors() {
        return GetAllIndexRateSourcesResponse.validate.errors ?? undefined
    },
    is: (o: unknown): o is GetAllIndexRateSourcesResponse => GetAllIndexRateSourcesResponse.validate(o) === true,
} as const

export type GetAllIndexRatesResponse = IndexRate[]

export const GetAllIndexRatesResponse = {
    validate: (await import('./schemas/get-all-index-rates-response.schema.js'))
        .validate as ValidateFunction<GetAllIndexRatesResponse>,
    get schema() {
        return GetAllIndexRatesResponse.validate.schema
    },
    get errors() {
        return GetAllIndexRatesResponse.validate.errors ?? undefined
    },
    is: (o: unknown): o is GetAllIndexRatesResponse => GetAllIndexRatesResponse.validate(o) === true,
} as const

/**
 * Represents an index rate.
 */
export interface IndexRate {
    /**
     * The index rate source that the index rate belongs to.
     */
    assignedIndexRateSourceKey?: string
    /**
     * The encoded key of the index rate, which is auto generated, and unique.
     */
    encodedKey?: string
    /**
     * The ID of the index rate, which can be generated and customized, and must be unique.
     */
    id?: string
    /**
     * The notes or description attached to this object.
     */
    notes?: string
    /**
     * The percentage value of the index rate.
     */
    rate?: number
    /**
     * The date when the index rate starts being the active rate for its source.
     */
    startDate?: string
    /**
     * The key for the user that last modified the index rate.
     */
    userKey?: string
}

export const IndexRate = {
    validate: (await import('./schemas/index-rate.schema.js')).validate as ValidateFunction<IndexRate>,
    get schema() {
        return IndexRate.validate.schema
    },
    get errors() {
        return IndexRate.validate.errors ?? undefined
    },
    is: (o: unknown): o is IndexRate => IndexRate.validate(o) === true,
    assert: (o: unknown) => {
        if (!IndexRate.validate(o)) {
            throw new ValidationError(IndexRate.errors ?? [])
        }
    },
} as const

/**
 * Represents an index rate source.
 */
export interface IndexRateSource {
    /**
     * The creation date of the index rate source
     */
    creationDate?: string
    /**
     * The encoded key of the index rate source, which is auto generated, and unique.
     */
    encodedKey?: string
    /**
     * The ID of the index rate source, which can be generated and customized, and must be unique.
     */
    id?: string
    /**
     * The last date this rate source was modified
     */
    lastModifiedDate?: string
    /**
     * The name of the index rate source.
     */
    name?: string
    /**
     * The notes about the the index rate source.
     */
    notes?: string
    /**
     * The type of index rate source.
     */
    type?: 'INTEREST_RATE' | 'TAX_RATE' | 'WITHHOLDING_TAX_RATE' | 'PRINCIPAL_TAX_RATE'
}

export const IndexRateSource = {
    validate: (await import('./schemas/index-rate-source.schema.js')).validate as ValidateFunction<IndexRateSource>,
    get schema() {
        return IndexRateSource.validate.schema
    },
    get errors() {
        return IndexRateSource.validate.errors ?? undefined
    },
    is: (o: unknown): o is IndexRateSource => IndexRateSource.validate(o) === true,
    assert: (o: unknown) => {
        if (!IndexRateSource.validate(o)) {
            throw new ValidationError(IndexRateSource.errors ?? [])
        }
    },
} as const

export interface RestError {
    errorCode?: number
    errorReason?: string
    errorSource?: string
}
