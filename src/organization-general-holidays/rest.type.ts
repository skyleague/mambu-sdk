/**
 * Generated by @skyleague/therefore@v1.0.0-local
 * Do not manually touch this
 */
/* eslint-disable */

import type { DefinedError, ValidateFunction } from 'ajv'

import { validate as CreateRequestValidator } from './schemas/create-request.schema.js'
import { validate as CreateResponseValidator } from './schemas/create-response.schema.js'
import { validate as ErrorResponseValidator } from './schemas/error-response.schema.js'
import { validate as HolidayValidator } from './schemas/holiday.schema.js'

export type CreateRequest = Holiday[]

export const CreateRequest = {
    validate: CreateRequestValidator as ValidateFunction<CreateRequest>,
    get schema() {
        return CreateRequest.validate.schema
    },
    get errors() {
        return CreateRequest.validate.errors ?? undefined
    },
    is: (o: unknown): o is CreateRequest => CreateRequest.validate(o) === true,
    parse: (o: unknown): { right: CreateRequest } | { left: DefinedError[] } => {
        if (CreateRequest.is(o)) {
            return { right: o }
        }
        return { left: (CreateRequest.errors ?? []) as DefinedError[] }
    },
} as const

export type CreateResponse = Holiday[]

export const CreateResponse = {
    validate: CreateResponseValidator as ValidateFunction<CreateResponse>,
    get schema() {
        return CreateResponse.validate.schema
    },
    get errors() {
        return CreateResponse.validate.errors ?? undefined
    },
    is: (o: unknown): o is CreateResponse => CreateResponse.validate(o) === true,
    parse: (o: unknown): { right: CreateResponse } | { left: DefinedError[] } => {
        if (CreateResponse.is(o)) {
            return { right: o }
        }
        return { left: (CreateResponse.errors ?? []) as DefinedError[] }
    },
} as const

export interface ErrorResponse {
    errors?: RestError[] | undefined
}

export const ErrorResponse = {
    validate: ErrorResponseValidator as ValidateFunction<ErrorResponse>,
    get schema() {
        return ErrorResponse.validate.schema
    },
    get errors() {
        return ErrorResponse.validate.errors ?? undefined
    },
    is: (o: unknown): o is ErrorResponse => ErrorResponse.validate(o) === true,
    parse: (o: unknown): { right: ErrorResponse } | { left: DefinedError[] } => {
        if (ErrorResponse.is(o)) {
            return { right: o }
        }
        return { left: (ErrorResponse.errors ?? []) as DefinedError[] }
    },
} as const

/**
 * Represents the holiday.
 */
export interface Holiday {
    /**
     * The date when the holiday was created.
     */
    creationDate?: string | undefined
    /**
     * The date the holiday takes place.
     */
    date?: string | undefined
    /**
     * The encoded key of the entity, generated, globally unique
     */
    encodedKey?: string | undefined
    /**
     * The ID of the holiday.
     */
    id?: number | undefined
    /**
     * `TRUE` if a holiday is annually recurring, `FALSE` otherwise.
     */
    isAnnuallyRecurring?: boolean | undefined
    /**
     * The name of the holiday.
     */
    name?: string | undefined
}

export const Holiday = {
    validate: HolidayValidator as ValidateFunction<Holiday>,
    get schema() {
        return Holiday.validate.schema
    },
    get errors() {
        return Holiday.validate.errors ?? undefined
    },
    is: (o: unknown): o is Holiday => Holiday.validate(o) === true,
    parse: (o: unknown): { right: Holiday } | { left: DefinedError[] } => {
        if (Holiday.is(o)) {
            return { right: o }
        }
        return { left: (Holiday.errors ?? []) as DefinedError[] }
    },
} as const

export interface RestError {
    errorCode?: number | undefined
    errorReason?: string | undefined
    errorSource?: string | undefined
}
