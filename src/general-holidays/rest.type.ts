/**
 * Generated by @skyleague/therefore@v1.0.0-local
 * Do not manually touch this
 */
/* eslint-disable */
import AjvValidator from 'ajv'
import type { ValidateFunction } from 'ajv'

/**
 * Holiday Date Transfer Object
 */
export interface Holiday {
    /**
     * holiday date
     */
    date?: string
    /**
     * if is annually recurring
     */
    isAnnuallyRecurring?: boolean
    /**
     * holiday name
     */
    name?: string
    /**
     * The encoded key of the entity, generated, globally unique
     */
    encodedKey?: string
    /**
     * holiday id
     */
    id?: number
    /**
     * holiday creation date
     */
    creationDate?: string
}

export const Holiday = {
    validate: require('./schemas/holiday.schema.js') as ValidateFunction<Holiday>,
    get schema() {
        return Holiday.validate.schema
    },
    is: (o: unknown): o is Holiday => Holiday.validate(o) === true,
} as const

export interface ErrorResponse {
    errors?: RestError[]
}

export const ErrorResponse = {
    validate: require('./schemas/error-response.schema.js') as ValidateFunction<ErrorResponse>,
    get schema() {
        return ErrorResponse.validate.schema
    },
    is: (o: unknown): o is ErrorResponse => ErrorResponse.validate(o) === true,
} as const

export type CreateRequest = Holiday[]

export const CreateRequest = {
    validate: require('./schemas/create-request.schema.js') as ValidateFunction<CreateRequest>,
    get schema() {
        return CreateRequest.validate.schema
    },
    is: (o: unknown): o is CreateRequest => CreateRequest.validate(o) === true,
    assert: (o: unknown) => {
        if (!CreateRequest.validate(o)) {
            throw new AjvValidator.ValidationError(CreateRequest.validate.errors ?? [])
        }
    },
} as const

export type CreateResponse = Holiday[]

export const CreateResponse = {
    validate: require('./schemas/create-response.schema.js') as ValidateFunction<CreateResponse>,
    get schema() {
        return CreateResponse.validate.schema
    },
    is: (o: unknown): o is CreateResponse => CreateResponse.validate(o) === true,
} as const

export interface RestError {
    errorCode?: number
    errorSource?: string
    errorReason?: string
}
