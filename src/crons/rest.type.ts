/**
 * Generated by @skyleague/therefore@v1.0.0-local
 * Do not manually touch this
 */
/* eslint-disable */

import type { DefinedError, ValidateFunction } from 'ajv'

import { validate as ErrorResponseValidator } from './schemas/error-response.schema.js'
import { validate as TriggerHourlyAndEndOfDayProcessingResponseValidator } from './schemas/trigger-hourly-and-end-of-day-processing-response.schema.js'

export interface ErrorResponse {
    errors?: RestError[] | undefined
}

export const ErrorResponse = {
    validate: ErrorResponseValidator as ValidateFunction<ErrorResponse>,
    get schema() {
        return ErrorResponse.validate.schema
    },
    get errors() {
        return ErrorResponse.validate.errors ?? undefined
    },
    is: (o: unknown): o is ErrorResponse => ErrorResponse.validate(o) === true,
    parse: (o: unknown): { right: ErrorResponse } | { left: DefinedError[] } => {
        if (ErrorResponse.is(o)) {
            return { right: o }
        }
        return { left: (ErrorResponse.errors ?? []) as DefinedError[] }
    },
} as const

export interface RestError {
    errorCode?: number | undefined
    errorReason?: string | undefined
    errorSource?: string | undefined
}

/**
 * Represents the response for triggering hourly and end of day processing
 */
export interface TriggerHourlyAndEndOfDayProcessingResponse {
    /**
     * The state of the hourly end of day processing
     */
    state?:
        | 'QUEUED'
        | 'IN_PROGRESS'
        | 'COMPLETE'
        | 'NOT_FOUND'
        | 'CANCEL'
        | 'TO_BE_CANCELED'
        | 'TIMED_OUT'
        | 'ERROR'
        | 'TRANSIENT_ERROR'
        | 'OVERRIDDEN'
        | 'RECOVERABLE_ERROR'
        | undefined
}

export const TriggerHourlyAndEndOfDayProcessingResponse = {
    validate: TriggerHourlyAndEndOfDayProcessingResponseValidator as ValidateFunction<TriggerHourlyAndEndOfDayProcessingResponse>,
    get schema() {
        return TriggerHourlyAndEndOfDayProcessingResponse.validate.schema
    },
    get errors() {
        return TriggerHourlyAndEndOfDayProcessingResponse.validate.errors ?? undefined
    },
    is: (o: unknown): o is TriggerHourlyAndEndOfDayProcessingResponse =>
        TriggerHourlyAndEndOfDayProcessingResponse.validate(o) === true,
    parse: (o: unknown): { right: TriggerHourlyAndEndOfDayProcessingResponse } | { left: DefinedError[] } => {
        if (TriggerHourlyAndEndOfDayProcessingResponse.is(o)) {
            return { right: o }
        }
        return { left: (TriggerHourlyAndEndOfDayProcessingResponse.errors ?? []) as DefinedError[] }
    },
} as const
