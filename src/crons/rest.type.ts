/**
 * Generated by @skyleague/therefore@v1.0.0-local
 * Do not manually touch this
 */
/* eslint-disable */
import type { ValidateFunction } from 'ajv'
import { ValidationError } from 'ajv'

/**
 * Represents the response for triggering hourly and end of day processing
 */
export interface TriggerHourlyAndEndOfDayProcessingResponse {
    /**
     * The state of the hourly end of day processing
     */
    state?:
        | 'QUEUED'
        | 'IN_PROGRESS'
        | 'COMPLETE'
        | 'NOT_FOUND'
        | 'CANCEL'
        | 'TO_BE_CANCELED'
        | 'TIMED_OUT'
        | 'ERROR'
        | 'TRANSIENT_ERROR'
        | 'OVERRIDDEN'
        | 'RECOVERABLE_ERROR'
}

export const TriggerHourlyAndEndOfDayProcessingResponse = {
    validate: (await import('./schemas/trigger-hourly-and-end-of-day-processing-response.schema.js'))
        .validate as ValidateFunction<TriggerHourlyAndEndOfDayProcessingResponse>,
    get schema() {
        return TriggerHourlyAndEndOfDayProcessingResponse.validate.schema
    },
    get errors() {
        return TriggerHourlyAndEndOfDayProcessingResponse.validate.errors ?? undefined
    },
    is: (o: unknown): o is TriggerHourlyAndEndOfDayProcessingResponse =>
        TriggerHourlyAndEndOfDayProcessingResponse.validate(o) === true,
} as const

export interface ErrorResponse {
    errors?: RestError[]
}

export const ErrorResponse = {
    validate: (await import('./schemas/error-response.schema.js')).validate as ValidateFunction<ErrorResponse>,
    get schema() {
        return ErrorResponse.validate.schema
    },
    get errors() {
        return ErrorResponse.validate.errors ?? undefined
    },
    is: (o: unknown): o is ErrorResponse => ErrorResponse.validate(o) === true,
    assert: (o: unknown) => {
        if (!ErrorResponse.validate(o)) {
            throw new ValidationError(ErrorResponse.errors ?? [])
        }
    },
} as const

export interface RestError {
    errorCode?: number
    errorSource?: string
    errorReason?: string
}
