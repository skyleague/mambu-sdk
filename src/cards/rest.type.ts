/**
 * Generated by @skyleague/therefore@v1.0.0-local
 * Do not manually touch this
 */
/* eslint-disable */
import AjvValidator from 'ajv'
import type { ValidateFunction } from 'ajv'

/**
 * A request to decrease/increase the amount of an authorization hold.
 */
export interface AuthorizationHoldAmountAdjustmentRequest {
    /**
     * The external reference ID of the decrease/increase request (not of the authorization hold).
     */
    externalReferenceId?: string
    /**
     * The encoded key of the entity, generated, globally unique
     */
    encodedKey?: string
    /**
     * The amount of money to be subtracted/added to the authorization hold amount. For the decrease: if the amount is greater or equal to the authorization hold amount, then the authorization hold is reversed.
     */
    amount: number
    /**
     * The ISO currency code in which the hold was created.
     */
    currencyCode?: string
    /**
     * Whether the given request should be accepted without balance validations.
     */
    advice?: boolean
}

export const AuthorizationHoldAmountAdjustmentRequest = {
    validate:
        require('./schemas/authorization-hold-amount-adjustment-request.schema.js') as ValidateFunction<AuthorizationHoldAmountAdjustmentRequest>,
    get schema() {
        return AuthorizationHoldAmountAdjustmentRequest.validate.schema
    },
    is: (o: unknown): o is AuthorizationHoldAmountAdjustmentRequest =>
        AuthorizationHoldAmountAdjustmentRequest.validate(o) === true,
    assert: (o: unknown) => {
        if (!AuthorizationHoldAmountAdjustmentRequest.validate(o)) {
            throw new AjvValidator.ValidationError(AuthorizationHoldAmountAdjustmentRequest.validate.errors ?? [])
        }
    },
} as const

export interface ErrorResponse {
    errors?: RestError[]
}

export const ErrorResponse = {
    validate: require('./schemas/error-response.schema.js') as ValidateFunction<ErrorResponse>,
    get schema() {
        return ErrorResponse.validate.schema
    },
    is: (o: unknown): o is ErrorResponse => ErrorResponse.validate(o) === true,
} as const

/**
 * Details for retrieving a authorization hold. Deprecated due to encodedKey field.
 */
export interface GetAuthorizationHold {
    /**
     * The amount of money to be held as a result of the authorization hold request.
     */
    amount: number
    /**
     * Whether the given request should be accepted without balance validations.
     */
    advice: boolean
    cardAcceptor?: CardAcceptor
    /**
     * Indicates the source of the authorization hold, the default values is CARD.
     */
    source?: 'CARD' | 'ACCOUNT'
    /**
     * The organization time when the authorization hold was created
     */
    creationDate?: string
    /**
     * Indicates whether the authorization hold amount is credited or debited.If not provided, the default values is DBIT.
     */
    creditDebitIndicator?: 'DBIT' | 'CRDT'
    /**
     * The reference token of the card.
     */
    cardToken?: string
    /**
     * The key of the account linked with the authorization hold.
     */
    accountKey?: string
    /**
     * The external reference ID to be used to reference the account hold in subsequent requests.
     */
    externalReferenceId: string
    /**
     * The original amount of money to be held as a result of the authorization hold request.
     */
    originalAmount?: number
    /**
     * The exchange rate for the original currency.
     */
    exchangeRate?: number
    /**
     * The internal ID of the authorization hold, auto generated, unique.
     */
    encodedKey?: string
    /**
     * The formatted time at which the user made this authorization hold.
     */
    userTransactionTime?: string
    /**
     * The original currency in which the hold was created.
     */
    originalCurrency?: string
    /**
     * The ISO currency code in which the hold was created. The amounts are stored in the base currency, but the user could have enter it in a foreign currency.
     */
    currencyCode?: string
    /**
     * The authorization hold status.
     */
    status?: 'PENDING' | 'REVERSED' | 'SETTLED' | 'EXPIRED'
}

export const GetAuthorizationHold = {
    validate: require('./schemas/get-authorization-hold.schema.js') as ValidateFunction<GetAuthorizationHold>,
    get schema() {
        return GetAuthorizationHold.validate.schema
    },
    is: (o: unknown): o is GetAuthorizationHold => GetAuthorizationHold.validate(o) === true,
} as const

/**
 * Account balances presented to inquirer such as card processor
 */
export interface AccountBalances {
    /**
     * The unique account identifier
     */
    accountId?: string
    /**
     * The current balance of a deposit account or principal balance of a revolving credit
     */
    totalBalance?: number
    /**
     * The card type either DEBIT or CREDIT
     */
    cardType?: 'DEBIT' | 'CREDIT'
    /**
     * The overdraft limit of a deposit account or the loan amount in case of a credit account
     */
    creditLimit?: number
    /**
     * Currency code used for the account
     */
    currencyCode?: string
    /**
     * The available balance of a deposit or credit account
     */
    availableBalance?: number
}

export const AccountBalances = {
    validate: require('./schemas/account-balances.schema.js') as ValidateFunction<AccountBalances>,
    get schema() {
        return AccountBalances.validate.schema
    },
    is: (o: unknown): o is AccountBalances => AccountBalances.validate(o) === true,
} as const

/**
 * A full or partial reversal of a card transaction.
 */
export interface CardTransactionReversal {
    /**
     * The external reference ID to be used to reference the card reversal transaction in subsequent requests.
     */
    externalReferenceId: string
    /**
     * The encoded key of the entity, generated, globally unique
     */
    encodedKey?: string
    /**
     * The amount of money to be credited in the client's account from the original card transaction.
     */
    amount: number
    /**
     * The ISO currency code in which the card reversal transaction is posted. The amounts are stored in the base currency, but the transaction can be created with a foreign currency.
     */
    currencyCode?: string
    /**
     * The ID of the channel through which the payment is done. If the value is not present, the value from the source card transaction is copied.
     */
    transactionChannelId?: string
}

export const CardTransactionReversal = {
    validate: require('./schemas/card-transaction-reversal.schema.js') as ValidateFunction<CardTransactionReversal>,
    get schema() {
        return CardTransactionReversal.validate.schema
    },
    is: (o: unknown): o is CardTransactionReversal => CardTransactionReversal.validate(o) === true,
    assert: (o: unknown) => {
        if (!CardTransactionReversal.validate(o)) {
            throw new AjvValidator.ValidationError(CardTransactionReversal.validate.errors ?? [])
        }
    },
} as const

/**
 * A card transaction entry which will have a corresponding a financial transaction performed.
 */
export interface CardTransactionInput {
    /**
     * Increase available amount if needed
     */
    increaseAmountIfNeeded?: boolean
    /**
     * The amount of money to be withdrawn in the financial transaction.
     */
    amount: number
    /**
     * Whether the given request should be accepted without balance validations.
     */
    advice: boolean
    cardAcceptor?: CardAcceptor
    /**
     * The ID of the channel through which the payment is done.
     */
    transactionChannelId: string
    /**
     * If present, indicates that the card transaction is a refund, and whether is credited or debited
     */
    creditDebitIndicator?: 'DBIT' | 'CRDT'
    /**
     * The reference token of the card.
     */
    cardToken?: string
    /**
     * The external reference ID to be used to reference the card transaction in subsequent requests.
     */
    externalReferenceId: string
    /**
     * The date of the first repayment for the loan account (as Organization Time)
     */
    firstRepaymentDate?: string
    /**
     * The external authorization hold reference ID, which relates this card transaction to a previous authorization hold.
     */
    externalAuthorizationReferenceId?: string
    /**
     * The encoded key of the entity, generated, globally unique
     */
    encodedKey?: string
    /**
     * The formatted time at which the user made this card transaction.
     */
    userTransactionTime?: string
    /**
     * The ISO currency code in which the card reversal transaction is posted. The amounts are stored in the base currency, but the transaction can be created with a foreign currency.
     */
    currencyCode?: string
}

export const CardTransactionInput = {
    validate: require('./schemas/card-transaction-input.schema.js') as ValidateFunction<CardTransactionInput>,
    get schema() {
        return CardTransactionInput.validate.schema
    },
    is: (o: unknown): o is CardTransactionInput => CardTransactionInput.validate(o) === true,
    assert: (o: unknown) => {
        if (!CardTransactionInput.validate(o)) {
            throw new AjvValidator.ValidationError(CardTransactionInput.validate.errors ?? [])
        }
    },
} as const

/**
 * A card transaction output after a financial transaction was performed.
 */
export interface CardTransactionOutput {
    /**
     * Increase available amount if needed
     */
    increaseAmountIfNeeded?: boolean
    /**
     * The amount of money to be withdrawn in the financial transaction.
     */
    amount: number
    /**
     * Whether the given request should be accepted without balance validations.
     */
    advice: boolean
    cardAcceptor?: CardAcceptor
    /**
     * The ID of the channel through which the payment is done.
     */
    transactionChannelId: string
    /**
     * If present, indicates that the card transaction is a refund, and whether is credited or debited
     */
    creditDebitIndicator?: 'DBIT' | 'CRDT'
    /**
     * The reference token of the card.
     */
    cardToken?: string
    /**
     * The external reference ID to be used to reference the card transaction in subsequent requests.
     */
    externalReferenceId: string
    /**
     * The date of the first repayment for the loan account (as Organization Time)
     */
    firstRepaymentDate?: string
    /**
     * The external authorization hold reference ID, which relates this card transaction to a previous authorization hold.
     */
    externalAuthorizationReferenceId?: string
    /**
     * The encoded key of the entity, generated, globally unique
     */
    encodedKey?: string
    /**
     * The formatted time at which the user made this card transaction.
     */
    userTransactionTime?: string
    linkedTransaction?: LinkedTransaction
    /**
     * The ISO currency code in which the card reversal transaction is posted. The amounts are stored in the base currency, but the transaction can be created with a foreign currency.
     */
    currencyCode?: string
}

export const CardTransactionOutput = {
    validate: require('./schemas/card-transaction-output.schema.js') as ValidateFunction<CardTransactionOutput>,
    get schema() {
        return CardTransactionOutput.validate.schema
    },
    is: (o: unknown): o is CardTransactionOutput => CardTransactionOutput.validate(o) === true,
} as const

/**
 * The authorization hold corresponding to a card token
 */
export interface AuthorizationHold {
    /**
     * The amount of money to be held as a result of the authorization hold request.
     */
    amount: number
    /**
     * Whether the given request should be accepted without balance validations.
     */
    advice: boolean
    cardAcceptor?: CardAcceptor
    /**
     * Indicates the source of the authorization hold, the default values is CARD.
     */
    source?: 'CARD' | 'ACCOUNT'
    /**
     * The organization time when the authorization hold was created
     */
    creationDate?: string
    /**
     * Indicates whether the authorization hold amount is credited or debited.If not provided, the default values is DBIT.
     */
    creditDebitIndicator?: 'DBIT' | 'CRDT'
    /**
     * The reference token of the card.
     */
    cardToken?: string
    /**
     * The key of the account linked with the authorization hold.
     */
    accountKey?: string
    /**
     * The external reference ID to be used to reference the account hold in subsequent requests.
     */
    externalReferenceId: string
    /**
     * The original amount of money to be held as a result of the authorization hold request.
     */
    originalAmount?: number
    /**
     * The exchange rate for the original currency.
     */
    exchangeRate?: number
    /**
     * The formatted time at which the user made this authorization hold.
     */
    userTransactionTime?: string
    /**
     * The original currency in which the hold was created.
     */
    originalCurrency?: string
    /**
     * The ISO currency code in which the hold was created. The amounts are stored in the base currency, but the user could have enter it in a foreign currency.
     */
    currencyCode?: string
    /**
     * The authorization hold status.
     */
    status?: 'PENDING' | 'REVERSED' | 'SETTLED' | 'EXPIRED'
}

export const AuthorizationHold = {
    validate: require('./schemas/authorization-hold.schema.js') as ValidateFunction<AuthorizationHold>,
    get schema() {
        return AuthorizationHold.validate.schema
    },
    is: (o: unknown): o is AuthorizationHold => AuthorizationHold.validate(o) === true,
    assert: (o: unknown) => {
        if (!AuthorizationHold.validate(o)) {
            throw new AjvValidator.ValidationError(AuthorizationHold.validate.errors ?? [])
        }
    },
} as const

export interface RestError {
    errorCode?: number
    errorSource?: string
    errorReason?: string
}

/**
 * The details of the card acceptor (merchant) in a transaction hold.
 */
export interface CardAcceptor {
    /**
     * The ZIP code of the location in which the card acceptor has the business.
     */
    zip?: string
    /**
     * The country in which the card acceptor has the business.
     */
    country?: string
    /**
     * The city in which the card acceptor has the business.
     */
    city?: string
    /**
     * The street in which the card acceptor has the business.
     */
    street?: string
    /**
     * The name of the card acceptor.
     */
    name?: string
    /**
     * The state in which the card acceptor has the business.
     */
    state?: string
    /**
     * The Merchant Category Code of the card acceptor.
     */
    mcc?: number
}

/**
 * The details of the linked financial transaction triggered by the card transaction.
 */
export interface LinkedTransaction {
    /**
     * The type of the linked transaction (Deposit / Loan).
     */
    linkedTransactionType?: 'LOAN' | 'DEPOSIT'
    /**
     * The encodedKey of the linked financial transaction.
     */
    linkedTransactionKey?: string
}
