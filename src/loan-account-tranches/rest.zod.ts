/**
 * Generated by @skyleague/therefore
 * Do not manually touch this
 */
/* eslint-disable */

import { z } from 'zod'

export const CustomPredefinedFee = z
    .object({
        amount: z.number().describe('The amount of the custom fee.').optional(),
        encodedKey: z.string().describe('The encoded key of the custom predefined fee, auto generated, unique.').optional(),
        percentage: z.number().describe('The percentage of the custom fee.').optional(),
        predefinedFeeEncodedKey: z.string().describe('The encoded key of the predefined fee').optional(),
    })
    .describe(
        'The custom predefined fees, they may be used as the expected predefined fees that will be applied on the disbursement.',
    )

export type CustomPredefinedFee = z.infer<typeof CustomPredefinedFee>

export const TrancheDisbursementDetails = z
    .object({
        disbursementTransactionKey: z
            .string()
            .describe(
                'The key of the disbursement transaction logged when this tranche was disbursed. This field will be null until the tranche disbursement',
            )
            .optional(),
        expectedDisbursementDate: z
            .string()
            .datetime({ offset: true })
            .describe('The date when this tranche is supposed to be disbursed (as Organization Time)')
            .optional(),
    })
    .describe('The disbursement details regarding a loan tranche.')

export type TrancheDisbursementDetails = z.infer<typeof TrancheDisbursementDetails>

export const LoanTranche = z
    .object({
        amount: z.number().describe('The amount this tranche has available for disburse'),
        disbursementDetails: TrancheDisbursementDetails.optional(),
        encodedKey: z.string().describe('The encoded key of the transaction details , auto generated, unique.').optional(),
        fees: CustomPredefinedFee.array().describe('Fees that are associated with this tranche').optional(),
        trancheNumber: z.number().int().describe('Index indicating the tranche number').optional(),
    })
    .describe(
        `In some cases organizations may approve loans but not disburse the full amount initially. They would like to spread the disbursement (and risk) over time. Likewise for the client, they may not need the full loan amount up front. They may want to have a loan to buy some equipment for their business but will make one purchase today and another purchase in a few months.  In these cases, they don't need the full amount and wouldn't want to pay interest on cash they don't need yet. A solution for this matter is the usage of disbursement in tranches. This class holds the information required for one of this tranche. `,
    )

export type LoanTranche = z.infer<typeof LoanTranche>

export const RestError = z.object({
    errorCode: z.number().int().optional(),
    errorReason: z.string().optional(),
    errorSource: z.string().optional(),
})

export type RestError = z.infer<typeof RestError>

export const EditTranchesRequest = LoanTranche.array()

export type EditTranchesRequest = z.infer<typeof EditTranchesRequest>

export const EditTranchesResponse = LoanTranche.array()

export type EditTranchesResponse = z.infer<typeof EditTranchesResponse>

export const ErrorResponse = z.object({
    errors: RestError.array().optional(),
})

export type ErrorResponse = z.infer<typeof ErrorResponse>

export const GetTranchesResponse = LoanTranche.array()

export type GetTranchesResponse = z.infer<typeof GetTranchesResponse>
