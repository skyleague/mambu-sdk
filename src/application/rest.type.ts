/**
 * Generated by @skyleague/therefore@v1.0.0-local
 * Do not manually touch this
 */
/* eslint-disable */

import type { DefinedError, ValidateFunction } from 'ajv'

import { validate as ApplicationStatusValidator } from './schemas/application-status.schema.js'
import { validate as ErrorResponseValidator } from './schemas/error-response.schema.js'

/**
 * Describes the application status regarding the data access
 */
export interface ApplicationStatus {
    /**
     * Data access state
     */
    dataAccessState?: 'READ_ONLY_STATE' | 'WRITE_READ_STATE' | undefined
}

export const ApplicationStatus = {
    validate: ApplicationStatusValidator as ValidateFunction<ApplicationStatus>,
    get schema() {
        return ApplicationStatus.validate.schema
    },
    get errors() {
        return ApplicationStatus.validate.errors ?? undefined
    },
    is: (o: unknown): o is ApplicationStatus => ApplicationStatus.validate(o) === true,
    parse: (o: unknown): { right: ApplicationStatus } | { left: DefinedError[] } => {
        if (ApplicationStatus.is(o)) {
            return { right: o }
        }
        return { left: (ApplicationStatus.errors ?? []) as DefinedError[] }
    },
} as const

export interface ErrorResponse {
    errors?: RestError[] | undefined
}

export const ErrorResponse = {
    validate: ErrorResponseValidator as ValidateFunction<ErrorResponse>,
    get schema() {
        return ErrorResponse.validate.schema
    },
    get errors() {
        return ErrorResponse.validate.errors ?? undefined
    },
    is: (o: unknown): o is ErrorResponse => ErrorResponse.validate(o) === true,
    parse: (o: unknown): { right: ErrorResponse } | { left: DefinedError[] } => {
        if (ErrorResponse.is(o)) {
            return { right: o }
        }
        return { left: (ErrorResponse.errors ?? []) as DefinedError[] }
    },
} as const

export interface RestError {
    errorCode?: number | undefined
    errorReason?: string | undefined
    errorSource?: string | undefined
}
