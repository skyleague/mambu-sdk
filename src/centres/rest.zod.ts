/**
 * Generated by @skyleague/therefore
 * Do not manually touch this
 */
/* eslint-disable */

import { z } from 'zod'

export const Address = z
    .object({
        city: z.string().describe('The city for the address.').optional(),
        country: z.string().describe('The country.').optional(),
        encodedKey: z.string().describe('The address encoded key, which is unique and generated.').optional(),
        indexInList: z.number().int().describe('The index of this address in the list of addresses.').optional(),
        latitude: z
            .number()
            .describe(
                'The GPS latitude of this address in signed degrees format (DDD.dddd) with 6 decimal positions, ranging from -90 to +90.',
            )
            .optional(),
        line1: z.string().describe('The first line of the address.').optional(),
        line2: z.string().describe('The second line of the address.').optional(),
        longitude: z
            .number()
            .describe(
                'The GPS longitude of this address in signed degrees format (DDD.dddd) with 6 decimal positions, ranging from -180 to +180.',
            )
            .optional(),
        parentKey: z
            .string()
            .describe('The address parent key indicating the object owning this address. For example: client, centre, or branch.')
            .optional(),
        postcode: z.string().describe('The post code.').optional(),
        region: z.string().describe('The region for the address.').optional(),
    })
    .describe('Represents an address.')

export type Address = z.infer<typeof Address>

export const RestError = z.object({
    errorCode: z.number().int().optional(),
    errorReason: z.string().optional(),
    errorSource: z.string().optional(),
})

export type RestError = z.infer<typeof RestError>

export const Centre = z
    .object({
        addresses: Address.array().describe('The addresses of this centre.').optional(),
        assignedBranchKey: z.string().describe('The encoded key of the branch this centre is assigned to.').optional(),
        creationDate: z.string().datetime({ offset: true }).describe('The date the centre was created.').optional(),
        encodedKey: z.string().describe('The encoded key of the entity, generated, globally unique').optional(),
        id: z.string().describe('The ID of the centre, which must be unique, and can be generated and customized.').optional(),
        lastModifiedDate: z.string().datetime({ offset: true }).describe('The last time the centre was modified.').optional(),
        meetingDay: z
            .string()
            .describe(
                'The day of the week when repayments are collected. This influences the repayments schedule, upon update all repayments are updated to this day of the week.',
            )
            .optional(),
        name: z.string().describe('The name of the centre.').optional(),
        notes: z.string().describe('The notes or description attached to this object.').optional(),
        state: z.enum(['ACTIVE', 'INACTIVE']).describe('The state of the centre.').optional(),
    })
    .passthrough()
    .describe(
        'Represents a centre. A centre is a common meeting area that credit officers and the individual and group clients go to. Each centre is assigned to a branch (a branch can have multiple centres) and might have a specific meeting day and location.',
    )

export type Centre = z.infer<typeof Centre>

export const ErrorResponse = z.object({
    errors: RestError.array().optional(),
})

export type ErrorResponse = z.infer<typeof ErrorResponse>

export const GetAllResponse = Centre.array()

export type GetAllResponse = z.infer<typeof GetAllResponse>
