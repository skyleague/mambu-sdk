/**
 * Generated by @skyleague/therefore@v1.0.0-local
 * Do not manually touch this
 */
/* eslint-disable */
import type { ValidateFunction } from 'ajv'

/**
 * A Centre is a common meeting area that credit officers and the individual and group clients go to. Each centre is assigned to a branch (a branch can have multiple centres) and might have a specific meeting day and location.
 */
export interface Centre {
    /**
     * The addresses of this centre
     */
    addresses?: Address[]
    /**
     * Extra notes about this centre
     */
    notes?: string
    /**
     * The last time the centre was modified
     */
    lastModifiedDate?: string
    /**
     * Name of the centre
     */
    name?: string
    /**
     * Day of the week when repayments are collected, influences repayments schedule, upon update all repayments are update to this day of the week
     */
    meetingDay?: string
    /**
     * The encoded key of the entity, generated, globally unique
     */
    encodedKey?: string
    /**
     * Id of the centre, unique, can be generated and customized
     */
    id?: string
    /**
     * The state of the centre
     */
    state?: 'ACTIVE' | 'INACTIVE'
    /**
     * Date the centre was created
     */
    creationDate?: string
    /**
     * Encoded key of the branch this centre is assigned to
     */
    assignedBranchKey?: string
}

export const Centre = {
    validate: require('./schemas/centre.schema.js') as ValidateFunction<Centre>,
    get schema() {
        return Centre.validate.schema
    },
    is: (o: unknown): o is Centre => Centre.validate(o) === true,
} as const

export interface ErrorResponse {
    errors?: RestError[]
}

export const ErrorResponse = {
    validate: require('./schemas/error-response.schema.js') as ValidateFunction<ErrorResponse>,
    get schema() {
        return ErrorResponse.validate.schema
    },
    is: (o: unknown): o is ErrorResponse => ErrorResponse.validate(o) === true,
} as const

export type GetAllResponse = Centre[]

export const GetAllResponse = {
    validate: require('./schemas/get-all-response.schema.js') as ValidateFunction<GetAllResponse>,
    get schema() {
        return GetAllResponse.validate.schema
    },
    is: (o: unknown): o is GetAllResponse => GetAllResponse.validate(o) === true,
} as const

/**
 * Address Data Transfer Object
 */
export interface Address {
    /**
     * The country
     */
    country?: string
    /**
     * Address parent key, the object owning this address, client, centre, branch
     */
    parentKey?: string
    /**
     * The city for this address
     */
    city?: string
    /**
     * The GPS latitude of this address in signed degrees format (DDD.dddd) with 6 decimal positions, ranging from -90 to +90
     */
    latitude?: number
    /**
     * The post code
     */
    postcode?: string
    /**
     * Index of this address in the list of addresses
     */
    indexInList?: number
    /**
     * Address encoded key, unique, generated
     */
    encodedKey?: string
    /**
     * The region that is part of the address
     */
    region?: string
    /**
     * The second line for the address, in case the first one doesn't fit the information, this is completely optional
     */
    line2?: string
    /**
     * The first line of the address
     */
    line1?: string
    /**
     * The GPS longitude of this address in signed degrees format (DDD.dddd) with 6 decimal positions, ranging from -180 to +180
     */
    longitude?: number
}

export interface RestError {
    errorCode?: number
    errorSource?: string
    errorReason?: string
}
