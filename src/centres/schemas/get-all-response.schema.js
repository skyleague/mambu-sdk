/**
 * Generated by @skyleague/therefore
 * eslint-disable
 */
"use strict";module.exports = validate10;module.exports.default = validate10;const schema11 = {"$schema":"http://json-schema.org/draft-07/schema#","type":"array","title":"getAllResponse","items":{"$ref":"#/$defs/Centre"},"$defs":{"Centre":{"type":"object","title":"Centre","description":"A Centre is a common meeting area that credit officers and the individual and group clients go to. Each centre is assigned to a branch (a branch can have multiple centres) and might have a specific meeting day and location.","properties":{"addresses":{"type":"array","title":"addresses","description":"The addresses of this centre","items":{"description":"The addresses of this centre","$ref":"#/$defs/Address6d0a"}},"notes":{"type":"string","title":"notes","description":"Extra notes about this centre"},"lastModifiedDate":{"type":"string","title":"lastModifiedDate","description":"The last time the centre was modified","format":"date-time"},"name":{"type":"string","title":"name","description":"Name of the centre"},"meetingDay":{"type":"string","title":"meetingDay","description":"Day of the week when repayments are collected, influences repayments schedule, upon update all repayments are update to this day of the week"},"encodedKey":{"type":"string","title":"encodedKey","description":"The encoded key of the entity, generated, globally unique"},"id":{"type":"string","title":"id","description":"Id of the centre, unique, can be generated and customized"},"state":{"title":"state","description":"The state of the centre","enum":["ACTIVE","INACTIVE"]},"creationDate":{"type":"string","title":"creationDate","description":"Date the centre was created","format":"date-time"},"assignedBranchKey":{"type":"string","title":"assignedBranchKey","description":"Encoded key of the branch this centre is assigned to"}},"additionalProperties":false},"Address6d0a":{"type":"object","title":"Address","description":"Address Data Transfer Object","properties":{"country":{"type":"string","title":"country","description":"The country"},"parentKey":{"type":"string","title":"parentKey","description":"Address parent key, the object owning this address, client, centre, branch"},"city":{"type":"string","title":"city","description":"The city for this address"},"latitude":{"type":"number","title":"latitude","description":"The GPS latitude of this address in signed degrees format (DDD.dddd) with 6 decimal positions, ranging from -90 to +90"},"postcode":{"type":"string","title":"postcode","description":"The post code"},"indexInList":{"type":"integer","title":"indexInList","description":"Index of this address in the list of addresses"},"encodedKey":{"type":"string","title":"encodedKey","description":"Address encoded key, unique, generated"},"region":{"type":"string","title":"region","description":"The region that is part of the address"},"line2":{"type":"string","title":"line2","description":"The second line for the address, in case the first one doesn't fit the information, this is completely optional"},"line1":{"type":"string","title":"line1","description":"The first line of the address"},"longitude":{"type":"number","title":"longitude","description":"The GPS longitude of this address in signed degrees format (DDD.dddd) with 6 decimal positions, ranging from -180 to +180"}},"additionalProperties":false}}};const schema12 = {"type":"object","title":"Centre","description":"A Centre is a common meeting area that credit officers and the individual and group clients go to. Each centre is assigned to a branch (a branch can have multiple centres) and might have a specific meeting day and location.","properties":{"addresses":{"type":"array","title":"addresses","description":"The addresses of this centre","items":{"description":"The addresses of this centre","$ref":"#/$defs/Address6d0a"}},"notes":{"type":"string","title":"notes","description":"Extra notes about this centre"},"lastModifiedDate":{"type":"string","title":"lastModifiedDate","description":"The last time the centre was modified","format":"date-time"},"name":{"type":"string","title":"name","description":"Name of the centre"},"meetingDay":{"type":"string","title":"meetingDay","description":"Day of the week when repayments are collected, influences repayments schedule, upon update all repayments are update to this day of the week"},"encodedKey":{"type":"string","title":"encodedKey","description":"The encoded key of the entity, generated, globally unique"},"id":{"type":"string","title":"id","description":"Id of the centre, unique, can be generated and customized"},"state":{"title":"state","description":"The state of the centre","enum":["ACTIVE","INACTIVE"]},"creationDate":{"type":"string","title":"creationDate","description":"Date the centre was created","format":"date-time"},"assignedBranchKey":{"type":"string","title":"assignedBranchKey","description":"Encoded key of the branch this centre is assigned to"}},"additionalProperties":false};const schema13 = {"type":"object","title":"Address","description":"Address Data Transfer Object","properties":{"country":{"type":"string","title":"country","description":"The country"},"parentKey":{"type":"string","title":"parentKey","description":"Address parent key, the object owning this address, client, centre, branch"},"city":{"type":"string","title":"city","description":"The city for this address"},"latitude":{"type":"number","title":"latitude","description":"The GPS latitude of this address in signed degrees format (DDD.dddd) with 6 decimal positions, ranging from -90 to +90"},"postcode":{"type":"string","title":"postcode","description":"The post code"},"indexInList":{"type":"integer","title":"indexInList","description":"Index of this address in the list of addresses"},"encodedKey":{"type":"string","title":"encodedKey","description":"Address encoded key, unique, generated"},"region":{"type":"string","title":"region","description":"The region that is part of the address"},"line2":{"type":"string","title":"line2","description":"The second line for the address, in case the first one doesn't fit the information, this is completely optional"},"line1":{"type":"string","title":"line1","description":"The first line of the address"},"longitude":{"type":"number","title":"longitude","description":"The GPS longitude of this address in signed degrees format (DDD.dddd) with 6 decimal positions, ranging from -180 to +180"}},"additionalProperties":false};const func2 = Object.prototype.hasOwnProperty;function validate11(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){let vErrors = null;let errors = 0;if(errors === 0){if(data && typeof data == "object" && !Array.isArray(data)){const _errs1 = errors;for(const key0 in data){if(!(func2.call(schema12.properties, key0))){validate11.errors = [{instancePath,schemaPath:"#/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key0},message:"must NOT have additional properties"}];return false;break;}}if(_errs1 === errors){if(data.addresses !== undefined){let data0 = data.addresses;const _errs2 = errors;if(errors === _errs2){if(Array.isArray(data0)){var valid1 = true;const len0 = data0.length;for(let i0=0; i0<len0; i0++){let data1 = data0[i0];const _errs4 = errors;const _errs5 = errors;if(errors === _errs5){if(data1 && typeof data1 == "object" && !Array.isArray(data1)){const _errs7 = errors;for(const key1 in data1){if(!(func2.call(schema13.properties, key1))){validate11.errors = [{instancePath:instancePath+"/addresses/" + i0,schemaPath:"#/$defs/Address6d0a/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key1},message:"must NOT have additional properties"}];return false;break;}}if(_errs7 === errors){if(data1.country !== undefined){const _errs8 = errors;if(typeof data1.country !== "string"){validate11.errors = [{instancePath:instancePath+"/addresses/" + i0+"/country",schemaPath:"#/$defs/Address6d0a/properties/country/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid3 = _errs8 === errors;}else {var valid3 = true;}if(valid3){if(data1.parentKey !== undefined){const _errs10 = errors;if(typeof data1.parentKey !== "string"){validate11.errors = [{instancePath:instancePath+"/addresses/" + i0+"/parentKey",schemaPath:"#/$defs/Address6d0a/properties/parentKey/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid3 = _errs10 === errors;}else {var valid3 = true;}if(valid3){if(data1.city !== undefined){const _errs12 = errors;if(typeof data1.city !== "string"){validate11.errors = [{instancePath:instancePath+"/addresses/" + i0+"/city",schemaPath:"#/$defs/Address6d0a/properties/city/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid3 = _errs12 === errors;}else {var valid3 = true;}if(valid3){if(data1.latitude !== undefined){let data5 = data1.latitude;const _errs14 = errors;if(!((typeof data5 == "number") && (isFinite(data5)))){validate11.errors = [{instancePath:instancePath+"/addresses/" + i0+"/latitude",schemaPath:"#/$defs/Address6d0a/properties/latitude/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid3 = _errs14 === errors;}else {var valid3 = true;}if(valid3){if(data1.postcode !== undefined){const _errs16 = errors;if(typeof data1.postcode !== "string"){validate11.errors = [{instancePath:instancePath+"/addresses/" + i0+"/postcode",schemaPath:"#/$defs/Address6d0a/properties/postcode/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid3 = _errs16 === errors;}else {var valid3 = true;}if(valid3){if(data1.indexInList !== undefined){let data7 = data1.indexInList;const _errs18 = errors;if(!(((typeof data7 == "number") && (!(data7 % 1) && !isNaN(data7))) && (isFinite(data7)))){validate11.errors = [{instancePath:instancePath+"/addresses/" + i0+"/indexInList",schemaPath:"#/$defs/Address6d0a/properties/indexInList/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];return false;}var valid3 = _errs18 === errors;}else {var valid3 = true;}if(valid3){if(data1.encodedKey !== undefined){const _errs20 = errors;if(typeof data1.encodedKey !== "string"){validate11.errors = [{instancePath:instancePath+"/addresses/" + i0+"/encodedKey",schemaPath:"#/$defs/Address6d0a/properties/encodedKey/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid3 = _errs20 === errors;}else {var valid3 = true;}if(valid3){if(data1.region !== undefined){const _errs22 = errors;if(typeof data1.region !== "string"){validate11.errors = [{instancePath:instancePath+"/addresses/" + i0+"/region",schemaPath:"#/$defs/Address6d0a/properties/region/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid3 = _errs22 === errors;}else {var valid3 = true;}if(valid3){if(data1.line2 !== undefined){const _errs24 = errors;if(typeof data1.line2 !== "string"){validate11.errors = [{instancePath:instancePath+"/addresses/" + i0+"/line2",schemaPath:"#/$defs/Address6d0a/properties/line2/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid3 = _errs24 === errors;}else {var valid3 = true;}if(valid3){if(data1.line1 !== undefined){const _errs26 = errors;if(typeof data1.line1 !== "string"){validate11.errors = [{instancePath:instancePath+"/addresses/" + i0+"/line1",schemaPath:"#/$defs/Address6d0a/properties/line1/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid3 = _errs26 === errors;}else {var valid3 = true;}if(valid3){if(data1.longitude !== undefined){let data12 = data1.longitude;const _errs28 = errors;if(!((typeof data12 == "number") && (isFinite(data12)))){validate11.errors = [{instancePath:instancePath+"/addresses/" + i0+"/longitude",schemaPath:"#/$defs/Address6d0a/properties/longitude/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid3 = _errs28 === errors;}else {var valid3 = true;}}}}}}}}}}}}}else {validate11.errors = [{instancePath:instancePath+"/addresses/" + i0,schemaPath:"#/$defs/Address6d0a/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}var valid1 = _errs4 === errors;if(!valid1){break;}}}else {validate11.errors = [{instancePath:instancePath+"/addresses",schemaPath:"#/properties/addresses/type",keyword:"type",params:{type: "array"},message:"must be array"}];return false;}}var valid0 = _errs2 === errors;}else {var valid0 = true;}if(valid0){if(data.notes !== undefined){const _errs30 = errors;if(typeof data.notes !== "string"){validate11.errors = [{instancePath:instancePath+"/notes",schemaPath:"#/properties/notes/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid0 = _errs30 === errors;}else {var valid0 = true;}if(valid0){if(data.lastModifiedDate !== undefined){const _errs32 = errors;if(errors === _errs32){if(errors === _errs32){if(!(typeof data.lastModifiedDate === "string")){validate11.errors = [{instancePath:instancePath+"/lastModifiedDate",schemaPath:"#/properties/lastModifiedDate/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}}var valid0 = _errs32 === errors;}else {var valid0 = true;}if(valid0){if(data.name !== undefined){const _errs34 = errors;if(typeof data.name !== "string"){validate11.errors = [{instancePath:instancePath+"/name",schemaPath:"#/properties/name/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid0 = _errs34 === errors;}else {var valid0 = true;}if(valid0){if(data.meetingDay !== undefined){const _errs36 = errors;if(typeof data.meetingDay !== "string"){validate11.errors = [{instancePath:instancePath+"/meetingDay",schemaPath:"#/properties/meetingDay/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid0 = _errs36 === errors;}else {var valid0 = true;}if(valid0){if(data.encodedKey !== undefined){const _errs38 = errors;if(typeof data.encodedKey !== "string"){validate11.errors = [{instancePath:instancePath+"/encodedKey",schemaPath:"#/properties/encodedKey/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid0 = _errs38 === errors;}else {var valid0 = true;}if(valid0){if(data.id !== undefined){const _errs40 = errors;if(typeof data.id !== "string"){validate11.errors = [{instancePath:instancePath+"/id",schemaPath:"#/properties/id/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid0 = _errs40 === errors;}else {var valid0 = true;}if(valid0){if(data.state !== undefined){let data19 = data.state;const _errs42 = errors;if(!((data19 === "ACTIVE") || (data19 === "INACTIVE"))){validate11.errors = [{instancePath:instancePath+"/state",schemaPath:"#/properties/state/enum",keyword:"enum",params:{allowedValues: schema12.properties.state.enum},message:"must be equal to one of the allowed values"}];return false;}var valid0 = _errs42 === errors;}else {var valid0 = true;}if(valid0){if(data.creationDate !== undefined){const _errs43 = errors;if(errors === _errs43){if(errors === _errs43){if(!(typeof data.creationDate === "string")){validate11.errors = [{instancePath:instancePath+"/creationDate",schemaPath:"#/properties/creationDate/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}}var valid0 = _errs43 === errors;}else {var valid0 = true;}if(valid0){if(data.assignedBranchKey !== undefined){const _errs45 = errors;if(typeof data.assignedBranchKey !== "string"){validate11.errors = [{instancePath:instancePath+"/assignedBranchKey",schemaPath:"#/properties/assignedBranchKey/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid0 = _errs45 === errors;}else {var valid0 = true;}}}}}}}}}}}}else {validate11.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}validate11.errors = vErrors;return errors === 0;}function validate10(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){let vErrors = null;let errors = 0;if(errors === 0){if(Array.isArray(data)){var valid0 = true;const len0 = data.length;for(let i0=0; i0<len0; i0++){const _errs1 = errors;if(!(validate11(data[i0], {instancePath:instancePath+"/" + i0,parentData:data,parentDataProperty:i0,rootData}))){vErrors = vErrors === null ? validate11.errors : vErrors.concat(validate11.errors);errors = vErrors.length;}var valid0 = _errs1 === errors;if(!valid0){break;}}}else {validate10.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "array"},message:"must be array"}];return false;}}validate10.errors = vErrors;return errors === 0;}