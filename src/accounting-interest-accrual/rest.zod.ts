/**
 * Generated by @skyleague/therefore
 * Do not manually touch this
 */
/* eslint-disable */

import { z } from 'zod'

export const Currency = z
    .object({
        code: z
            .enum([
                'AED',
                'AFN',
                'ALL',
                'AMD',
                'ANG',
                'AOA',
                'ARS',
                'AUD',
                'AWG',
                'AZN',
                'BAM',
                'BBD',
                'BDT',
                'BGN',
                'BHD',
                'BIF',
                'BMD',
                'BND',
                'BOB',
                'BOV',
                'BRL',
                'BSD',
                'BTN',
                'BWP',
                'BYR',
                'BYN',
                'BZD',
                'CAD',
                'CDF',
                'CHE',
                'CHF',
                'CHW',
                'CLF',
                'CLP',
                'CNY',
                'COP',
                'COU',
                'CRC',
                'CUC',
                'CUP',
                'CVE',
                'CZK',
                'DJF',
                'DKK',
                'DOP',
                'DZD',
                'EGP',
                'ERN',
                'ETB',
                'EUR',
                'FJD',
                'FKP',
                'GBP',
                'GEL',
                'GHS',
                'GIP',
                'GMD',
                'GNF',
                'GTQ',
                'GYD',
                'HKD',
                'HNL',
                'HRK',
                'HTG',
                'HUF',
                'IDR',
                'ILS',
                'INR',
                'IQD',
                'IRR',
                'ISK',
                'JMD',
                'JOD',
                'JPY',
                'KES',
                'KGS',
                'KHR',
                'KMF',
                'KPW',
                'KRW',
                'KWD',
                'KYD',
                'KZT',
                'LAK',
                'LBP',
                'LKR',
                'LRD',
                'LSL',
                'LTL',
                'LVL',
                'LYD',
                'MAD',
                'MDL',
                'MGA',
                'MKD',
                'MMK',
                'MNT',
                'MOP',
                'MRO',
                'MRU',
                'MUR',
                'MVR',
                'MWK',
                'MXN',
                'MXV',
                'MYR',
                'MZN',
                'NAD',
                'NGN',
                'NIO',
                'NOK',
                'NPR',
                'NZD',
                'OMR',
                'PAB',
                'PEN',
                'PGK',
                'PHP',
                'PKR',
                'PLN',
                'PYG',
                'QAR',
                'RON',
                'RSD',
                'RUB',
                'RWF',
                'SAR',
                'SBD',
                'SCR',
                'SDG',
                'SEK',
                'SGD',
                'SHP',
                'SLL',
                'SOS',
                'SRD',
                'STD',
                'STN',
                'SVC',
                'SYP',
                'SZL',
                'THB',
                'TJS',
                'TMT',
                'TND',
                'TOP',
                'TRY',
                'TTD',
                'TWD',
                'TZS',
                'UAH',
                'UGX',
                'USD',
                'USN',
                'UYI',
                'UYU',
                'UYW',
                'UZS',
                'VED',
                'VEF',
                'VES',
                'VND',
                'VUV',
                'WST',
                'XAG',
                'XAU',
                'XAF',
                'XBA',
                'XBB',
                'XBC',
                'XBD',
                'XCD',
                'XDR',
                'XOF',
                'XPD',
                'XPF',
                'XPT',
                'XSU',
                'XTS',
                'XUA',
                'XXX',
                'YER',
                'ZAR',
                'ZIG',
                'ZMK',
                'ZWL',
                'ZMW',
                'SSP',
                'NON_FIAT',
            ])
            .describe('Fiat(ISO-4217) currency code or NON_FIAT for non fiat currencies.')
            .optional(),
        currencyCode: z.string().describe('Currency code for NON_FIAT currency.').optional(),
    })
    .describe('Represents a currency eg. USD, EUR.')

export type Currency = z.infer<typeof Currency>

export const AccountingRate = z
    .object({
        encodedKey: z.string().describe('The encoded key of the accounting rate, auto generated, unique').optional(),
        endDate: z.string().datetime({ offset: true }).describe('Rate validity end date (as Organization Time)').optional(),
        fromCurrencyCode: z.string().describe('Organisation currency code').optional(),
        rate: z.number().describe('Value of rate to be used for accounting conversions').optional(),
        startDate: z.string().datetime({ offset: true }).describe('Rate validity start date (as Organization Time)').optional(),
        toCurrencyCode: z.string().describe('Foreign currency code').optional(),
    })
    .describe('Represents the conversion rate used in accounting to convert amounts from one currency to organisation currency')

export type AccountingRate = z.infer<typeof AccountingRate>

export const ForeignAmount = z
    .object({
        accountingRate: AccountingRate.optional(),
        amount: z.number().describe('The foreign currency amount of the accounting entry.').optional(),
        currency: Currency.optional(),
    })
    .describe('Represents the details of general ledger journal entries posted in foreign currency.')

export type ForeignAmount = z.infer<typeof ForeignAmount>

export const RestError = z.object({
    errorCode: z.number().int().optional(),
    errorReason: z.string().optional(),
    errorSource: z.string().optional(),
})

export type RestError = z.infer<typeof RestError>

export const InterestAccrualSortingCriteria = z
    .object({
        field: z
            .enum([
                'entryId',
                'parentEntryId',
                'bookingDate',
                'creationDate',
                'transactionId',
                'glAccountType',
                'debit',
                'credit',
                'accountId',
                'foreignCredit',
                'foreignDebit',
                'foreignCurrencyCode',
            ])
            .describe('The field to use as the sorting criteria.'),
        order: z.enum(['ASC', 'DESC']).describe('The sorting order: `ASC` or `DESC`. The default order is `DESC`.').optional(),
    })
    .describe('The sorting criteria used for sorting interest accrual entries.')

export type InterestAccrualSortingCriteria = z.infer<typeof InterestAccrualSortingCriteria>

export const InterestAccrualFilterCriteria = z
    .object({
        field: z.union([
            z
                .enum([
                    'entryId',
                    'glAccountKey',
                    'parentEntryId',
                    'productType',
                    'bookingDate',
                    'creationDate',
                    'transactionId',
                    'glAccountId',
                    'glAccountType',
                    'debit',
                    'credit',
                    'branchKey',
                    'accountKey',
                    'productKey',
                    'accountId',
                    'foreignCredit',
                    'foreignDebit',
                    'foreignCurrencyCode',
                ])
                .describe('Contains the fields to use for searching.'),
            z.string(),
        ]),
        operator: z
            .enum([
                'EQUALS',
                'EQUALS_CASE_SENSITIVE',
                'DIFFERENT_THAN',
                'MORE_THAN',
                'LESS_THAN',
                'BETWEEN',
                'ON',
                'AFTER',
                'AFTER_INCLUSIVE',
                'BEFORE',
                'BEFORE_INCLUSIVE',
                'STARTS_WITH',
                'STARTS_WITH_CASE_SENSITIVE',
                'IN',
                'TODAY',
                'THIS_WEEK',
                'THIS_MONTH',
                'THIS_YEAR',
                'LAST_DAYS',
                'EMPTY',
                'NOT_EMPTY',
            ])
            .describe(
                '| **Operator**                | **Affected values**  | **Available for**                                                    |\\n|---------------               |----------------------|----------------------------------------------------------------------|\\n| EQUALS                       | ONE_VALUE            | BIG_DECIMAL,BOOLEAN,LONG,MONEY,NUMBER,PERCENT,STRING,ENUM,KEY        |\\n| EQUALS_CASE_SENSITIVE        | ONE_VALUE            | BIG_DECIMAL,BOOLEAN,LONG,MONEY,NUMBER,PERCENT,STRING,ENUM,KEY 		  |\\n| MORE_THAN                    | ONE_VALUE            | BIG_DECIMAL,NUMBER,MONEY                                             |\\n| LESS_THAN                    | ONE_VALUE            | BIG_DECIMAL,NUMBER,MONEY                                             |\\n| BETWEEN                      | TWO_VALUES           | BIG_DECIMAL,NUMBER,MONEY,DATE,DATE_TIME                              |\\n| ON                           | ONE_VALUE            | DATE,DATE_TIME                                                       |\\n| AFTER                        | ONE_VALUE            | DATE,DATE_TIME                                                       |\\n| BEFORE                       | ONE_VALUE            | DATE,DATE_TIME                                                       |\\n| BEFORE_INCLUSIVE             | ONE_VALUE            | DATE,DATE_TIME                                                       |\\n| STARTS_WITH                  | ONE_VALUE            | STRING                                                               |\\n| STARTS_WITH_CASE_SENSITIVE   | ONE_VALUE            | STRING                                                               |\\n| IN                           | LIST                 | ENUM,KEY                                                             |\\n| TODAY                        | NO_VALUE             | DATE,DATE_TIME                                                       |\\n| THIS_WEEK                    | NO_VALUE             | DATE,DATE_TIME                                                       |\\n| THIS_MONTH                   | NO_VALUE             | DATE,DATE_TIME                                                       |\\n| THIS_YEAR                    | NO_VALUE             | DATE,DATE_TIME                                                       |\\n| LAST_DAYS                    | ONE_VALUE            | NUMBER                                                               |\\n| EMPTY                        | NO_VALUE             | BIG_DECIMAL,LONG,MONEY,NUMBER,PERCENT,STRING,ENUM,KEY,DATE,DATE_TIME |\\n| NOT_EMPTY                    | NO_VALUE             | BIG_DECIMAL,LONG,MONEY,NUMBER,PERCENT,STRING,ENUM,KEY,DATE,DATE_TIME |',
            ),
        secondValue: z
            .string()
            .describe('The second value to match the searching criteria, when the `BETWEEN` operator is used.')
            .optional(),
        value: z.string().describe('The value to match the searching criteria.').optional(),
        values: z.string().array().describe('List of values when the `IN` operator is used.').optional(),
    })
    .describe('Represents the filter criteria used for searching interest accrual entries.')

export type InterestAccrualFilterCriteria = z.infer<typeof InterestAccrualFilterCriteria>

export const InterestAccrualBreakdown = z
    .object({
        accountId: z.string().describe('The loan or deposit account ID for which interest is accrued.').optional(),
        accountKey: z
            .string()
            .describe('The encoded key of the loan or deposit account for which interest is accrued.')
            .optional(),
        amount: z.number().describe('The interest accrued amount for the account in this entry.').optional(),
        bookingDate: z.string().describe(`The booking date in the organization's timezone.`).optional(),
        branchKey: z.string().describe(`The encoded key of the account's branch.`).optional(),
        branchName: z.string().describe(`The name of the account's branch`).optional(),
        creationDate: z.string().describe('The creation date and time of the entry in UTC.').optional(),
        entryId: z.number().int().describe('The generated ID of the interest accrual per account entry.').optional(),
        entryType: z.string().describe('Debit or Credit.').optional(),
        foreignAmount: ForeignAmount.optional(),
        glAccountId: z.string().describe('The ID of the general ledger account.').optional(),
        glAccountKey: z
            .string()
            .describe('The encoded key of the general ledger account used for logging the interest accrual.')
            .optional(),
        glAccountName: z.string().describe('The name of the general ledger account.').optional(),
        glAccountType: z
            .string()
            .describe('The general ledger account type, which can be: `ASSET`, `LIABILITY`, `EQUITY`, `INCOME`, or `EXPENSE`.')
            .optional(),
        parentEntryId: z
            .number()
            .int()
            .describe(
                'The ID of the general ledger journal entry that logged the interest accrual sum for all accounts of the same product.',
            )
            .optional(),
        productId: z.string().describe(`The ID of the account's product.`).optional(),
        productKey: z.string().describe(`The encoded key of the account's product.`).optional(),
        productType: z.string().describe('The product type.').optional(),
        transactionId: z.string().describe('The journal entry transaction ID.').optional(),
    })
    .describe('Represents an interest accrual breakdown entry.')

export type InterestAccrualBreakdown = z.infer<typeof InterestAccrualBreakdown>

export const ErrorResponse = z.object({
    errors: RestError.array().optional(),
})

export type ErrorResponse = z.infer<typeof ErrorResponse>

export const InterestAccrualSearchCriteria = z
    .object({
        filterCriteria: InterestAccrualFilterCriteria.array().describe('The list of filtering criteria.').optional(),
        sortingCriteria: InterestAccrualSortingCriteria.optional(),
    })
    .describe('Represents the filtering criteria list and sorting criteria for searching interest accrual entries.')

export type InterestAccrualSearchCriteria = z.infer<typeof InterestAccrualSearchCriteria>

export const SearchResponse = InterestAccrualBreakdown.array()

export type SearchResponse = z.infer<typeof SearchResponse>
