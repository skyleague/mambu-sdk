/* eslint-disable */
// @ts-nocheck
/**
 * Generated by Ajv https://ajv.js.org/guide/managing-schemas.html#standalone-validation-code
 */
import {createRequire} from 'module';const require = createRequire(import.meta.url);"use strict";
/** @type {unknown} */
export const validate = validate10;export default validate10;const schema11 = {"$schema":"http://json-schema.org/draft-07/schema#","title":"SearchResponse","type":"array","items":{"$ref":"#/$defs/InterestAccrualBreakdown"},"$defs":{"InterestAccrualBreakdown":{"type":"object","description":"Represents an interest accrual breakdown entry.","properties":{"accountId":{"type":"string","description":"The loan or deposit account ID for which interest is accrued."},"accountKey":{"type":"string","description":"The encoded key of the loan or deposit account for which interest is accrued."},"amount":{"type":"number","description":"The interest accrued amount for the account in this entry."},"bookingDate":{"type":"string","description":"The booking date in the organization's timezone."},"branchKey":{"type":"string","description":"The encoded key of the account's branch."},"branchName":{"type":"string","description":"The name of the account's branch"},"creationDate":{"type":"string","description":"The creation date and time of the entry in UTC."},"entryId":{"type":"integer","description":"The generated ID of the interest accrual per account entry."},"entryType":{"type":"string","description":"Debit or Credit."},"foreignAmount":{"$ref":"#/$defs/ForeignAmount"},"glAccountId":{"type":"string","description":"The ID of the general ledger account."},"glAccountKey":{"type":"string","description":"The encoded key of the general ledger account used for logging the interest accrual."},"glAccountName":{"type":"string","description":"The name of the general ledger account."},"glAccountType":{"type":"string","description":"The general ledger account type, which can be: `ASSET`, `LIABILITY`, `EQUITY`, `INCOME`, or `EXPENSE`."},"parentEntryId":{"type":"integer","description":"The ID of the general ledger journal entry that logged the interest accrual sum for all accounts of the same product."},"productId":{"type":"string","description":"The ID of the account's product."},"productKey":{"type":"string","description":"The encoded key of the account's product."},"productType":{"type":"string","description":"The product type."},"transactionId":{"type":"string","description":"The journal entry transaction ID."}},"additionalProperties":true},"ForeignAmount":{"type":"object","description":"Represents the details of general ledger journal entries posted in foreign currency.","properties":{"accountingRate":{"$ref":"#/$defs/AccountingRate"},"amount":{"type":"number","description":"The foreign currency amount of the accounting entry."},"currency":{"$ref":"#/$defs/Currency"}},"additionalProperties":true},"AccountingRate":{"type":"object","description":"Represents the conversion rate used in accounting to convert amounts from one currency to organisation currency","properties":{"encodedKey":{"type":"string","description":"The encoded key of the accounting rate, auto generated, unique"},"endDate":{"type":"string","description":"Rate validity end date (as Organization Time)","format":"date-time"},"fromCurrencyCode":{"type":"string","description":"Organisation currency code"},"rate":{"type":"number","description":"Value of rate to be used for accounting conversions"},"startDate":{"type":"string","description":"Rate validity start date (as Organization Time)","format":"date-time"},"toCurrencyCode":{"type":"string","description":"Foreign currency code"}},"additionalProperties":true},"Currency":{"type":"object","description":"Represents a currency eg. USD, EUR.","properties":{"code":{"description":"Fiat(ISO-4217) currency code or NON_FIAT for non fiat currencies.","enum":["AED","AFN","ALL","AMD","ANG","AOA","ARS","AUD","AWG","AZN","BAM","BBD","BDT","BGN","BHD","BIF","BMD","BND","BOB","BOV","BRL","BSD","BTN","BWP","BYR","BYN","BZD","CAD","CDF","CHE","CHF","CHW","CLF","CLP","CNY","COP","COU","CRC","CUC","CUP","CVE","CZK","DJF","DKK","DOP","DZD","EGP","ERN","ETB","EUR","FJD","FKP","GBP","GEL","GHS","GIP","GMD","GNF","GTQ","GYD","HKD","HNL","HRK","HTG","HUF","IDR","ILS","INR","IQD","IRR","ISK","JMD","JOD","JPY","KES","KGS","KHR","KMF","KPW","KRW","KWD","KYD","KZT","LAK","LBP","LKR","LRD","LSL","LTL","LVL","LYD","MAD","MDL","MGA","MKD","MMK","MNT","MOP","MRO","MRU","MUR","MVR","MWK","MXN","MXV","MYR","MZN","NAD","NGN","NIO","NOK","NPR","NZD","OMR","PAB","PEN","PGK","PHP","PKR","PLN","PYG","QAR","RON","RSD","RUB","RWF","SAR","SBD","SCR","SDG","SEK","SGD","SHP","SLL","SOS","SRD","STD","STN","SVC","SYP","SZL","THB","TJS","TMT","TND","TOP","TRY","TTD","TWD","TZS","UAH","UGX","USD","USN","UYI","UYU","UYW","UZS","VED","VEF","VES","VND","VUV","WST","XAG","XAU","XAF","XBA","XBB","XBC","XBD","XCD","XDR","XOF","XPD","XPF","XPT","XSU","XTS","XUA","XXX","YER","ZAR","ZIG","ZMK","ZWL","ZMW","SSP","NON_FIAT"]},"currencyCode":{"type":"string","description":"Currency code for NON_FIAT currency."}},"additionalProperties":true}}};const schema12 = {"type":"object","description":"Represents an interest accrual breakdown entry.","properties":{"accountId":{"type":"string","description":"The loan or deposit account ID for which interest is accrued."},"accountKey":{"type":"string","description":"The encoded key of the loan or deposit account for which interest is accrued."},"amount":{"type":"number","description":"The interest accrued amount for the account in this entry."},"bookingDate":{"type":"string","description":"The booking date in the organization's timezone."},"branchKey":{"type":"string","description":"The encoded key of the account's branch."},"branchName":{"type":"string","description":"The name of the account's branch"},"creationDate":{"type":"string","description":"The creation date and time of the entry in UTC."},"entryId":{"type":"integer","description":"The generated ID of the interest accrual per account entry."},"entryType":{"type":"string","description":"Debit or Credit."},"foreignAmount":{"$ref":"#/$defs/ForeignAmount"},"glAccountId":{"type":"string","description":"The ID of the general ledger account."},"glAccountKey":{"type":"string","description":"The encoded key of the general ledger account used for logging the interest accrual."},"glAccountName":{"type":"string","description":"The name of the general ledger account."},"glAccountType":{"type":"string","description":"The general ledger account type, which can be: `ASSET`, `LIABILITY`, `EQUITY`, `INCOME`, or `EXPENSE`."},"parentEntryId":{"type":"integer","description":"The ID of the general ledger journal entry that logged the interest accrual sum for all accounts of the same product."},"productId":{"type":"string","description":"The ID of the account's product."},"productKey":{"type":"string","description":"The encoded key of the account's product."},"productType":{"type":"string","description":"The product type."},"transactionId":{"type":"string","description":"The journal entry transaction ID."}},"additionalProperties":true};const schema13 = {"type":"object","description":"Represents the details of general ledger journal entries posted in foreign currency.","properties":{"accountingRate":{"$ref":"#/$defs/AccountingRate"},"amount":{"type":"number","description":"The foreign currency amount of the accounting entry."},"currency":{"$ref":"#/$defs/Currency"}},"additionalProperties":true};const schema14 = {"type":"object","description":"Represents the conversion rate used in accounting to convert amounts from one currency to organisation currency","properties":{"encodedKey":{"type":"string","description":"The encoded key of the accounting rate, auto generated, unique"},"endDate":{"type":"string","description":"Rate validity end date (as Organization Time)","format":"date-time"},"fromCurrencyCode":{"type":"string","description":"Organisation currency code"},"rate":{"type":"number","description":"Value of rate to be used for accounting conversions"},"startDate":{"type":"string","description":"Rate validity start date (as Organization Time)","format":"date-time"},"toCurrencyCode":{"type":"string","description":"Foreign currency code"}},"additionalProperties":true};const schema15 = {"type":"object","description":"Represents a currency eg. USD, EUR.","properties":{"code":{"description":"Fiat(ISO-4217) currency code or NON_FIAT for non fiat currencies.","enum":["AED","AFN","ALL","AMD","ANG","AOA","ARS","AUD","AWG","AZN","BAM","BBD","BDT","BGN","BHD","BIF","BMD","BND","BOB","BOV","BRL","BSD","BTN","BWP","BYR","BYN","BZD","CAD","CDF","CHE","CHF","CHW","CLF","CLP","CNY","COP","COU","CRC","CUC","CUP","CVE","CZK","DJF","DKK","DOP","DZD","EGP","ERN","ETB","EUR","FJD","FKP","GBP","GEL","GHS","GIP","GMD","GNF","GTQ","GYD","HKD","HNL","HRK","HTG","HUF","IDR","ILS","INR","IQD","IRR","ISK","JMD","JOD","JPY","KES","KGS","KHR","KMF","KPW","KRW","KWD","KYD","KZT","LAK","LBP","LKR","LRD","LSL","LTL","LVL","LYD","MAD","MDL","MGA","MKD","MMK","MNT","MOP","MRO","MRU","MUR","MVR","MWK","MXN","MXV","MYR","MZN","NAD","NGN","NIO","NOK","NPR","NZD","OMR","PAB","PEN","PGK","PHP","PKR","PLN","PYG","QAR","RON","RSD","RUB","RWF","SAR","SBD","SCR","SDG","SEK","SGD","SHP","SLL","SOS","SRD","STD","STN","SVC","SYP","SZL","THB","TJS","TMT","TND","TOP","TRY","TTD","TWD","TZS","UAH","UGX","USD","USN","UYI","UYU","UYW","UZS","VED","VEF","VES","VND","VUV","WST","XAG","XAU","XAF","XBA","XBB","XBC","XBD","XCD","XDR","XOF","XPD","XPF","XPT","XSU","XTS","XUA","XXX","YER","ZAR","ZIG","ZMK","ZWL","ZMW","SSP","NON_FIAT"]},"currencyCode":{"type":"string","description":"Currency code for NON_FIAT currency."}},"additionalProperties":true};const func0 = require("ajv/dist/runtime/equal").default;function validate12(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){let vErrors = null;let errors = 0;if(errors === 0){if(data && typeof data == "object" && !Array.isArray(data)){if(data.accountingRate !== undefined){let data0 = data.accountingRate;const _errs2 = errors;const _errs3 = errors;if(errors === _errs3){if(data0 && typeof data0 == "object" && !Array.isArray(data0)){if(data0.encodedKey !== undefined){const _errs6 = errors;if(typeof data0.encodedKey !== "string"){validate12.errors = [{instancePath:instancePath+"/accountingRate/encodedKey",schemaPath:"#/$defs/AccountingRate/properties/encodedKey/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid2 = _errs6 === errors;}else {var valid2 = true;}if(valid2){if(data0.endDate !== undefined){const _errs8 = errors;if(errors === _errs8){if(errors === _errs8){if(!(typeof data0.endDate === "string")){validate12.errors = [{instancePath:instancePath+"/accountingRate/endDate",schemaPath:"#/$defs/AccountingRate/properties/endDate/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}}var valid2 = _errs8 === errors;}else {var valid2 = true;}if(valid2){if(data0.fromCurrencyCode !== undefined){const _errs10 = errors;if(typeof data0.fromCurrencyCode !== "string"){validate12.errors = [{instancePath:instancePath+"/accountingRate/fromCurrencyCode",schemaPath:"#/$defs/AccountingRate/properties/fromCurrencyCode/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid2 = _errs10 === errors;}else {var valid2 = true;}if(valid2){if(data0.rate !== undefined){let data4 = data0.rate;const _errs12 = errors;if(!((typeof data4 == "number") && (isFinite(data4)))){validate12.errors = [{instancePath:instancePath+"/accountingRate/rate",schemaPath:"#/$defs/AccountingRate/properties/rate/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid2 = _errs12 === errors;}else {var valid2 = true;}if(valid2){if(data0.startDate !== undefined){const _errs14 = errors;if(errors === _errs14){if(errors === _errs14){if(!(typeof data0.startDate === "string")){validate12.errors = [{instancePath:instancePath+"/accountingRate/startDate",schemaPath:"#/$defs/AccountingRate/properties/startDate/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}}var valid2 = _errs14 === errors;}else {var valid2 = true;}if(valid2){if(data0.toCurrencyCode !== undefined){const _errs16 = errors;if(typeof data0.toCurrencyCode !== "string"){validate12.errors = [{instancePath:instancePath+"/accountingRate/toCurrencyCode",schemaPath:"#/$defs/AccountingRate/properties/toCurrencyCode/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid2 = _errs16 === errors;}else {var valid2 = true;}}}}}}}else {validate12.errors = [{instancePath:instancePath+"/accountingRate",schemaPath:"#/$defs/AccountingRate/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}var valid0 = _errs2 === errors;}else {var valid0 = true;}if(valid0){if(data.amount !== undefined){let data7 = data.amount;const _errs18 = errors;if(!((typeof data7 == "number") && (isFinite(data7)))){validate12.errors = [{instancePath:instancePath+"/amount",schemaPath:"#/properties/amount/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid0 = _errs18 === errors;}else {var valid0 = true;}if(valid0){if(data.currency !== undefined){let data8 = data.currency;const _errs20 = errors;const _errs21 = errors;if(errors === _errs21){if(data8 && typeof data8 == "object" && !Array.isArray(data8)){if(data8.code !== undefined){const _errs24 = errors;let valid5;valid5 = false;for(const v0 of schema15.properties.code.enum){if(func0(data8.code, v0)){valid5 = true;break;}}if(!valid5){validate12.errors = [{instancePath:instancePath+"/currency/code",schemaPath:"#/$defs/Currency/properties/code/enum",keyword:"enum",params:{allowedValues: schema15.properties.code.enum},message:"must be equal to one of the allowed values"}];return false;}var valid4 = _errs24 === errors;}else {var valid4 = true;}if(valid4){if(data8.currencyCode !== undefined){const _errs25 = errors;if(typeof data8.currencyCode !== "string"){validate12.errors = [{instancePath:instancePath+"/currency/currencyCode",schemaPath:"#/$defs/Currency/properties/currencyCode/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid4 = _errs25 === errors;}else {var valid4 = true;}}}else {validate12.errors = [{instancePath:instancePath+"/currency",schemaPath:"#/$defs/Currency/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}var valid0 = _errs20 === errors;}else {var valid0 = true;}}}}else {validate12.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}validate12.errors = vErrors;return errors === 0;}function validate11(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){let vErrors = null;let errors = 0;if(errors === 0){if(data && typeof data == "object" && !Array.isArray(data)){if(data.accountId !== undefined){const _errs2 = errors;if(typeof data.accountId !== "string"){validate11.errors = [{instancePath:instancePath+"/accountId",schemaPath:"#/properties/accountId/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid0 = _errs2 === errors;}else {var valid0 = true;}if(valid0){if(data.accountKey !== undefined){const _errs4 = errors;if(typeof data.accountKey !== "string"){validate11.errors = [{instancePath:instancePath+"/accountKey",schemaPath:"#/properties/accountKey/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid0 = _errs4 === errors;}else {var valid0 = true;}if(valid0){if(data.amount !== undefined){let data2 = data.amount;const _errs6 = errors;if(!((typeof data2 == "number") && (isFinite(data2)))){validate11.errors = [{instancePath:instancePath+"/amount",schemaPath:"#/properties/amount/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid0 = _errs6 === errors;}else {var valid0 = true;}if(valid0){if(data.bookingDate !== undefined){const _errs8 = errors;if(typeof data.bookingDate !== "string"){validate11.errors = [{instancePath:instancePath+"/bookingDate",schemaPath:"#/properties/bookingDate/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid0 = _errs8 === errors;}else {var valid0 = true;}if(valid0){if(data.branchKey !== undefined){const _errs10 = errors;if(typeof data.branchKey !== "string"){validate11.errors = [{instancePath:instancePath+"/branchKey",schemaPath:"#/properties/branchKey/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid0 = _errs10 === errors;}else {var valid0 = true;}if(valid0){if(data.branchName !== undefined){const _errs12 = errors;if(typeof data.branchName !== "string"){validate11.errors = [{instancePath:instancePath+"/branchName",schemaPath:"#/properties/branchName/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid0 = _errs12 === errors;}else {var valid0 = true;}if(valid0){if(data.creationDate !== undefined){const _errs14 = errors;if(typeof data.creationDate !== "string"){validate11.errors = [{instancePath:instancePath+"/creationDate",schemaPath:"#/properties/creationDate/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid0 = _errs14 === errors;}else {var valid0 = true;}if(valid0){if(data.entryId !== undefined){let data7 = data.entryId;const _errs16 = errors;if(!(((typeof data7 == "number") && (!(data7 % 1) && !isNaN(data7))) && (isFinite(data7)))){validate11.errors = [{instancePath:instancePath+"/entryId",schemaPath:"#/properties/entryId/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];return false;}var valid0 = _errs16 === errors;}else {var valid0 = true;}if(valid0){if(data.entryType !== undefined){const _errs18 = errors;if(typeof data.entryType !== "string"){validate11.errors = [{instancePath:instancePath+"/entryType",schemaPath:"#/properties/entryType/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid0 = _errs18 === errors;}else {var valid0 = true;}if(valid0){if(data.foreignAmount !== undefined){const _errs20 = errors;if(!(validate12(data.foreignAmount, {instancePath:instancePath+"/foreignAmount",parentData:data,parentDataProperty:"foreignAmount",rootData}))){vErrors = vErrors === null ? validate12.errors : vErrors.concat(validate12.errors);errors = vErrors.length;}var valid0 = _errs20 === errors;}else {var valid0 = true;}if(valid0){if(data.glAccountId !== undefined){const _errs21 = errors;if(typeof data.glAccountId !== "string"){validate11.errors = [{instancePath:instancePath+"/glAccountId",schemaPath:"#/properties/glAccountId/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid0 = _errs21 === errors;}else {var valid0 = true;}if(valid0){if(data.glAccountKey !== undefined){const _errs23 = errors;if(typeof data.glAccountKey !== "string"){validate11.errors = [{instancePath:instancePath+"/glAccountKey",schemaPath:"#/properties/glAccountKey/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid0 = _errs23 === errors;}else {var valid0 = true;}if(valid0){if(data.glAccountName !== undefined){const _errs25 = errors;if(typeof data.glAccountName !== "string"){validate11.errors = [{instancePath:instancePath+"/glAccountName",schemaPath:"#/properties/glAccountName/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid0 = _errs25 === errors;}else {var valid0 = true;}if(valid0){if(data.glAccountType !== undefined){const _errs27 = errors;if(typeof data.glAccountType !== "string"){validate11.errors = [{instancePath:instancePath+"/glAccountType",schemaPath:"#/properties/glAccountType/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid0 = _errs27 === errors;}else {var valid0 = true;}if(valid0){if(data.parentEntryId !== undefined){let data14 = data.parentEntryId;const _errs29 = errors;if(!(((typeof data14 == "number") && (!(data14 % 1) && !isNaN(data14))) && (isFinite(data14)))){validate11.errors = [{instancePath:instancePath+"/parentEntryId",schemaPath:"#/properties/parentEntryId/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];return false;}var valid0 = _errs29 === errors;}else {var valid0 = true;}if(valid0){if(data.productId !== undefined){const _errs31 = errors;if(typeof data.productId !== "string"){validate11.errors = [{instancePath:instancePath+"/productId",schemaPath:"#/properties/productId/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid0 = _errs31 === errors;}else {var valid0 = true;}if(valid0){if(data.productKey !== undefined){const _errs33 = errors;if(typeof data.productKey !== "string"){validate11.errors = [{instancePath:instancePath+"/productKey",schemaPath:"#/properties/productKey/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid0 = _errs33 === errors;}else {var valid0 = true;}if(valid0){if(data.productType !== undefined){const _errs35 = errors;if(typeof data.productType !== "string"){validate11.errors = [{instancePath:instancePath+"/productType",schemaPath:"#/properties/productType/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid0 = _errs35 === errors;}else {var valid0 = true;}if(valid0){if(data.transactionId !== undefined){const _errs37 = errors;if(typeof data.transactionId !== "string"){validate11.errors = [{instancePath:instancePath+"/transactionId",schemaPath:"#/properties/transactionId/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid0 = _errs37 === errors;}else {var valid0 = true;}}}}}}}}}}}}}}}}}}}}else {validate11.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}validate11.errors = vErrors;return errors === 0;}function validate10(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){let vErrors = null;let errors = 0;if(errors === 0){if(Array.isArray(data)){var valid0 = true;const len0 = data.length;for(let i0=0; i0<len0; i0++){const _errs1 = errors;if(!(validate11(data[i0], {instancePath:instancePath+"/" + i0,parentData:data,parentDataProperty:i0,rootData}))){vErrors = vErrors === null ? validate11.errors : vErrors.concat(validate11.errors);errors = vErrors.length;}var valid0 = _errs1 === errors;if(!valid0){break;}}}else {validate10.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "array"},message:"must be array"}];return false;}}validate10.errors = vErrors;return errors === 0;};validate.schema=schema11;