/**
 * Generated by @skyleague/therefore@v1.0.0-local
 * Do not manually touch this
 */
/* eslint-disable */
import AjvValidator from 'ajv'
import type { ValidateFunction } from 'ajv'

export type GetAllResponse = IdentificationDocumentTemplate[]

export const GetAllResponse = {
    validate: (await import('./schemas/get-all-response.schema.js')).validate10 as unknown as ValidateFunction<GetAllResponse>,
    get schema() {
        return GetAllResponse.validate.schema
    },
    get errors() {
        return GetAllResponse.validate.errors ?? undefined
    },
    is: (o: unknown): o is GetAllResponse => GetAllResponse.validate(o) === true,
} as const

export interface ErrorResponse {
    errors?: RestError[]
}

export const ErrorResponse = {
    validate: (await import('./schemas/error-response.schema.js')).validate10 as unknown as ValidateFunction<ErrorResponse>,
    get schema() {
        return ErrorResponse.validate.schema
    },
    get errors() {
        return ErrorResponse.validate.errors ?? undefined
    },
    is: (o: unknown): o is ErrorResponse => ErrorResponse.validate(o) === true,
    assert: (o: unknown) => {
        if (!ErrorResponse.validate(o)) {
            throw new AjvValidator.ValidationError(ErrorResponse.errors ?? [])
        }
    },
} as const

/**
 * Template for identification documents
 */
export interface IdentificationDocumentTemplate {
    /**
     * The authority that issued the document
     */
    issuingAuthority?: string
    /**
     * The type of the document
     */
    documentType?: string
    /**
     * The encoded key of the identification document template, auto generated, unique
     */
    encodedKey?: string
    /**
     * Unique identifier for the template
     */
    id?: string
    /**
     * The document id template constraint, that contains letters (@) and digits (#) symbols used to validate the id
     */
    documentIdTemplate?: string
    /**
     * Whether this template is mandatory for individual clients or not
     */
    mandatory?: boolean
    /**
     * Whether this template allows attachments or not
     */
    allowAttachments?: boolean
}

export interface RestError {
    errorCode?: number
    errorSource?: string
    errorReason?: string
}
