/**
 * Generated by @skyleague/therefore
 * Do not manually touch this
 */
// biome-ignore-all lint: this file is generated
/* eslint-disable */

import { z } from 'zod/v4'

export const RestError = z.object({
    errorCode: z.number().int().optional(),
    errorReason: z.string().optional(),
    errorSource: z.string().optional(),
})

export type RestError = z.infer<typeof RestError>

export const ArchivedDepositTransaction = z
    .object({
        transactionId: z.number().int().describe('The id of the archived deposit transaction, unique'),
        valueDate: z.iso
            .datetime({ offset: true })
            .describe('The date of entry created for the deposit transaction to be archived')
            .optional(),
    })
    .describe('Represents the archived custom field values of a deposit transaction.')

export type ArchivedDepositTransaction = z.infer<typeof ArchivedDepositTransaction>

export const ErrorResponse = z.object({
    errors: RestError.array().optional(),
})

export type ErrorResponse = z.infer<typeof ErrorResponse>

export const FilterCriteriaValueDateBetweenDTO = z
    .object({
        dateFrom: z.string().describe('The start date for searching archived data.').optional(),
        dateTo: z.string().describe('The end date for searching archived data.').optional(),
    })
    .describe('Specifies range of dates to be used in searching')

export type FilterCriteriaValueDateBetweenDTO = z.infer<typeof FilterCriteriaValueDateBetweenDTO>

export const SearchResponse = ArchivedDepositTransaction.array()

export type SearchResponse = z.infer<typeof SearchResponse>
