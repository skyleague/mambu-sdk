/**
 * Generated by @skyleague/therefore@v1.0.0-local
 * Do not manually touch this
 */
/* eslint-disable */

import type { DefinedError, ValidateFunction } from 'ajv'

import { validate as ApplyInterestInputValidator } from './schemas/apply-interest-input.schema.js'
import { validate as ApplyPlannedFeesResponseValidator } from './schemas/apply-planned-fees-response.schema.js'
import { validate as CardValidator } from './schemas/card.schema.js'
import { validate as ChangeArrearsSettingsInputValidator } from './schemas/change-arrears-settings-input.schema.js'
import { validate as ChangeDueDatesSettingsInputValidator } from './schemas/change-due-dates-settings-input.schema.js'
import { validate as ChangeInterestRateLoanAccountInputValidator } from './schemas/change-interest-rate-loan-account-input.schema.js'
import { validate as ChangePeriodicPaymentLoanAccountInputValidator } from './schemas/change-periodic-payment-loan-account-input.schema.js'
import { validate as ChangeRepaymentValueLoanAccountInputValidator } from './schemas/change-repayment-value-loan-account-input.schema.js'
import { validate as CollateralAssetFilterValidator } from './schemas/collateral-asset-filter.schema.js'
import { validate as CollateralAssetsReevaluationResponseValidator } from './schemas/collateral-assets-reevaluation-response.schema.js'
import { validate as CreateLoanAccountFundingSourcesRequestValidator } from './schemas/create-loan-account-funding-sources-request.schema.js'
import { validate as CreateLoanAccountFundingSourcesResponseValidator } from './schemas/create-loan-account-funding-sources-response.schema.js'
import { validate as CreatePlannedFeesRequestValidator } from './schemas/create-planned-fees-request.schema.js'
import { validate as CreatePlannedFeesResponseValidator } from './schemas/create-planned-fees-response.schema.js'
import { validate as ErrorResponseValidator } from './schemas/error-response.schema.js'
import { validate as GetAllAuthorizationHoldsResponseValidator } from './schemas/get-all-authorization-holds-response.schema.js'
import { validate as GetAllCardsResponseValidator } from './schemas/get-all-cards-response.schema.js'
import { validate as GetAllPlannedFeesResponseValidator } from './schemas/get-all-planned-fees-response.schema.js'
import { validate as GetAllResponseValidator } from './schemas/get-all-response.schema.js'
import { validate as GetLoanAccountDocumentResponseValidator } from './schemas/get-loan-account-document-response.schema.js'
import { validate as GetVersionsByIdResponseValidator } from './schemas/get-versions-by-id-response.schema.js'
import { validate as LoanAccountActionValidator } from './schemas/loan-account-action.schema.js'
import { validate as LoanAccountPayOffInputValidator } from './schemas/loan-account-pay-off-input.schema.js'
import { validate as LoanAccountScheduleValidator } from './schemas/loan-account-schedule.schema.js'
import { validate as LoanAccountSearchCriteriaValidator } from './schemas/loan-account-search-criteria.schema.js'
import { validate as LoanAccountValidator } from './schemas/loan-account.schema.js'
import { validate as LoanActionDetailsValidator } from './schemas/loan-action-details.schema.js'
import { validate as PatchFundingSourceRequestValidator } from './schemas/patch-funding-source-request.schema.js'
import { validate as PatchRequestValidator } from './schemas/patch-request.schema.js'
import { validate as PlannedFeeKeysValidator } from './schemas/planned-fee-keys.schema.js'
import { validate as PreviewLoanAccountScheduleValidator } from './schemas/preview-loan-account-schedule.schema.js'
import { validate as PreviewPayOffDueAmountsInAFutureDateInputValidator } from './schemas/preview-pay-off-due-amounts-in-a-future-date-input.schema.js'
import { validate as PreviewPayOffDueAmountsInAFutureDateWrapperValidator } from './schemas/preview-pay-off-due-amounts-in-a-future-date-wrapper.schema.js'
import { validate as RefinanceLoanAccountActionValidator } from './schemas/refinance-loan-account-action.schema.js'
import { validate as RescheduleLoanAccountActionValidator } from './schemas/reschedule-loan-account-action.schema.js'
import { validate as SearchResponseValidator } from './schemas/search-response.schema.js'
import { validate as TerminateLoanAccountInputValidator } from './schemas/terminate-loan-account-input.schema.js'
import { validate as UpdateLoanAccountFundingSourcesRequestValidator } from './schemas/update-loan-account-funding-sources-request.schema.js'
import { validate as UpdateLoanAccountFundingSourcesResponseValidator } from './schemas/update-loan-account-funding-sources-response.schema.js'
import { validate as UpdatePlannedFeesRequestValidator } from './schemas/update-planned-fees-request.schema.js'
import { validate as UpdatePlannedFeesResponseValidator } from './schemas/update-planned-fees-response.schema.js'

/**
 * The account arrears settings, holds the required information for the arrears settings of an account.
 */
export interface AccountArrearsSettings {
    /**
     * The arrears date calculation method.
     */
    dateCalculationMethod?:
        | 'ACCOUNT_FIRST_WENT_TO_ARREARS'
        | 'LAST_LATE_REPAYMENT'
        | 'ACCOUNT_FIRST_BREACHED_MATERIALITY_THRESHOLD'
        | undefined
    /**
     * The encoded key of the arrears base settings, auto generated, unique.
     */
    encodedKey?: string | undefined
    /**
     * Defines monthly arrears tolerance day value.
     */
    monthlyToleranceDay?: number | undefined
    /**
     * Shows whether the non working days are taken in consideration or not when applying penaltees/late fees or when setting an account into arrears
     */
    nonWorkingDaysMethod?: 'INCLUDED' | 'EXCLUDED' | undefined
    /**
     * Defines the tolerance calculation method
     */
    toleranceCalculationMethod?: 'ARREARS_TOLERANCE_PERIOD' | 'MONTHLY_ARREARS_TOLERANCE_DAY' | undefined
    /**
     * The tolerance floor amount.
     */
    toleranceFloorAmount?: number | undefined
    /**
     * Defines the arrears tolerance amount.
     */
    tolerancePercentageOfOutstandingPrincipal?: number | undefined
    /**
     * Defines the arrears tolerance period value.
     */
    tolerancePeriod?: number | undefined
}

/**
 * Account balances presented to inquirer such as card processor
 */
export interface AccountBalances {
    /**
     * The unique account identifier
     */
    accountId?: string | undefined
    /**
     * The available balance of a deposit or credit account
     */
    availableBalance?: number | undefined
    /**
     * The card type either DEBIT or CREDIT
     */
    cardType?: 'DEBIT' | 'CREDIT' | undefined
    /**
     * The overdraft limit of a deposit account or the loan amount in case of a credit account
     */
    creditLimit?: number | undefined
    /**
     * Currency code used for the account
     */
    currencyCode?: string | undefined
    /**
     * The current balance of a deposit account or principal balance of a revolving credit
     */
    totalBalance?: number | undefined
}

/**
 * Adjustable interest rates settings for loan account
 */
export interface AccountInterestRateSettings {
    /**
     * The encoded key of the interest rate settings, auto generated, unique
     */
    encodedKey?: string | undefined
    /**
     * Index rate source key.
     */
    indexSourceKey?: string | undefined
    /**
     * Interest rate value.
     */
    interestRate?: number | undefined
    /**
     * Maximum value allowed for index based interest rate. Valid only for index interest rate.
     */
    interestRateCeilingValue?: number | undefined
    /**
     * Minimum value allowed for index based interest rate. Valid only for index interest rate.
     */
    interestRateFloorValue?: number | undefined
    /**
     * Interest rate review frequency unit count. Valid only for index interest rate.
     */
    interestRateReviewCount?: number | undefined
    /**
     * Interest rate review frequency measurement unit. Valid only for index interest rate.
     */
    interestRateReviewUnit?: 'DAYS' | 'WEEKS' | 'MONTHS' | undefined
    /**
     * Interest calculation method: fixed or indexed(interest spread + active organization index interest rate)
     */
    interestRateSource: 'FIXED_INTEREST_RATE' | 'INDEX_INTEREST_RATE'
    /**
     * Interest spread value.
     */
    interestSpread?: number | undefined
    /**
     * Date since an interest rate is valid
     */
    validFrom: string
}

/**
 * Represents a simple installment amount structure.
 */
export interface Amount {
    /**
     * The due amount.
     */
    due?: number | undefined
    /**
     * The expected amount, which is sum of paid and due amounts.
     */
    expected?: number | undefined
    /**
     * The paid amount.
     */
    paid?: number | undefined
}

/**
 * Represents a simple installment amount structure.
 */
export interface AmountWithReduced {
    /**
     * The due amount.
     */
    due?: number | undefined
    /**
     * The expected amount, which is sum of paid and due amounts.
     */
    expected?: number | undefined
    /**
     * The paid amount.
     */
    paid?: number | undefined
    /**
     * The reduced amount.
     */
    reduced?: number | undefined
}

/**
 * Represents a request for applying the accrued interest
 */
export interface ApplyInterestInput {
    /**
     * The date up to which interest is to be posted
     */
    interestApplicationDate: string
    /**
     * Whether the interest amount to apply should be the regular one or the one accrued during the Payment Holidays. If nothing specified it will be the regular one.
     */
    isPaymentHolidaysInterest?: boolean | undefined
    /**
     * Additional information for this action
     */
    notes?: string | undefined
    /**
     * The amount of the Payment Holidays interest to apply
     */
    paymentHolidaysInterestAmount?: number | undefined
}

export const ApplyInterestInput = {
    validate: ApplyInterestInputValidator as ValidateFunction<ApplyInterestInput>,
    get schema() {
        return ApplyInterestInput.validate.schema
    },
    get errors() {
        return ApplyInterestInput.validate.errors ?? undefined
    },
    is: (o: unknown): o is ApplyInterestInput => ApplyInterestInput.validate(o) === true,
    parse: (o: unknown): { right: ApplyInterestInput } | { left: DefinedError[] } => {
        if (ApplyInterestInput.is(o)) {
            return { right: o }
        }
        return { left: (ApplyInterestInput.errors ?? []) as DefinedError[] }
    },
} as const

export type ApplyPlannedFeesResponse = LoanTransaction[]

export const ApplyPlannedFeesResponse = {
    validate: ApplyPlannedFeesResponseValidator as ValidateFunction<ApplyPlannedFeesResponse>,
    get schema() {
        return ApplyPlannedFeesResponse.validate.schema
    },
    get errors() {
        return ApplyPlannedFeesResponse.validate.errors ?? undefined
    },
    is: (o: unknown): o is ApplyPlannedFeesResponse => ApplyPlannedFeesResponse.validate(o) === true,
    parse: (o: unknown): { right: ApplyPlannedFeesResponse } | { left: DefinedError[] } => {
        if (ApplyPlannedFeesResponse.is(o)) {
            return { right: o }
        }
        return { left: (ApplyPlannedFeesResponse.errors ?? []) as DefinedError[] }
    },
} as const

/**
 * Asset, holds information about a client asset entry.
 */
export interface Asset {
    /**
     * The amount used by the client for the guaranty
     */
    amount: number
    /**
     * The name of a value the client guarantees with (populated when the guaranty type is ASSET)
     */
    assetName: string
    /**
     * The key of the deposit account used by the guarantor (populated when the guaranty type is GUARANTOR). It can be null.
     */
    depositAccountKey?: string | undefined
    /**
     * The encoded key of the security, auto generated, unique.
     */
    encodedKey?: string | undefined
    /**
     * The key of the client/group used as the guarantor.
     */
    guarantorKey?: string | undefined
    /**
     * The type of the guarantor (client/group)
     */
    guarantorType?: 'CLIENT' | 'GROUP' | undefined
    /**
     * The original amount used by the client for a collateral asset
     */
    originalAmount?: number | undefined
    originalCurrency?: Currency | undefined
}

/**
 * The loan account balance details.
 */
export interface Balances {
    /**
     * The fees balance. Represents the total fees expected to be paid on this account at a given moment.
     */
    feesBalance?: number | undefined
    /**
     * The fees due. Representing the total fees due for the account.
     */
    feesDue?: number | undefined
    /**
     * The fees paid. Represents the total fees paid for the account.
     */
    feesPaid?: number | undefined
    /**
     * The sum of all the authorization hold amounts on this account.
     */
    holdBalance?: number | undefined
    /**
     * Represents the total interest owed by the client (total interest applied for account minus interest paid).
     */
    interestBalance?: number | undefined
    /**
     * The interest due. Indicates how much interest it's due for the account at this moment.
     */
    interestDue?: number | undefined
    /**
     * The interest from arrears balance. Indicates interest from arrears owned by the client, from now on. (total interest from arrears accrued for account - interest from arrears paid).
     */
    interestFromArrearsBalance?: number | undefined
    /**
     * The interest from arrears due. Indicates how much interest from arrears it's due for the account at this moment.
     */
    interestFromArrearsDue?: number | undefined
    /**
     * The interest from arrears paid, indicates total interest from arrears paid into the account.
     */
    interestFromArrearsPaid?: number | undefined
    /**
     * The interest paid, indicates total interest paid into the account.
     */
    interestPaid?: number | undefined
    /**
     * The penalty balance. Represents the total penalty expected to be paid on this account at a given moment.
     */
    penaltyBalance?: number | undefined
    /**
     * The penalty due. Represents the total penalty amount due for the account.
     */
    penaltyDue?: number | undefined
    /**
     * The Penalty paid. Represents the total penalty amount paid for the account.
     */
    penaltyPaid?: number | undefined
    /**
     * The total principal owned by the client, from now on (principal disbursed - principal paid).
     */
    principalBalance?: number | undefined
    /**
     * The principal due, indicates how much principal it's due at this moment.
     */
    principalDue?: number | undefined
    /**
     * The principal paid, holds the value of the total paid into the account.
     */
    principalPaid?: number | undefined
    /**
     * The total redraw amount owned by the client, from now on.
     */
    redrawBalance?: number | undefined
}

/**
 * Defines the billing cycles settings for a loan account
 */
export interface BillingCycleDays {
    /**
     * The billing cycle start days in case it is enabled
     */
    days?: number[] | undefined
}

/**
 * Returns a card that can be associated to a deposit or loan  account. Cards consist only of card reference tokens and the card details are not stored in Mambu.
 */
export interface Card {
    /**
     * The card's reference token.
     */
    referenceToken: string
}

export const Card = {
    validate: CardValidator as ValidateFunction<Card>,
    get schema() {
        return Card.validate.schema
    },
    get errors() {
        return Card.validate.errors ?? undefined
    },
    is: (o: unknown): o is Card => Card.validate(o) === true,
    parse: (o: unknown): { right: Card } | { left: DefinedError[] } => {
        if (Card.is(o)) {
            return { right: o }
        }
        return { left: (Card.errors ?? []) as DefinedError[] }
    },
} as const

/**
 * The details of the card acceptor (merchant) in a transaction hold.
 */
export interface CardAcceptor {
    /**
     * The city in which the card acceptor has the business.
     */
    city?: string | undefined
    /**
     * The country in which the card acceptor has the business.
     */
    country?: string | undefined
    /**
     * The Merchant Category Code of the card acceptor.
     */
    mcc?: number | undefined
    /**
     * The name of the card acceptor.
     */
    name?: string | undefined
    /**
     * The state in which the card acceptor has the business.
     */
    state?: string | undefined
    /**
     * The street in which the card acceptor has the business.
     */
    street?: string | undefined
    /**
     * The ZIP code of the location in which the card acceptor has the business.
     */
    zip?: string | undefined
}

/**
 * A card transaction entry which will have a corresponding a financial transaction performed.
 */
export interface CardTransaction {
    /**
     * Whether the given request should be accepted without balance validations.
     */
    advice: boolean
    /**
     * The amount of money to be withdrawn in the financial transaction.
     */
    amount: number
    cardAcceptor?: CardAcceptor | undefined
    /**
     * The reference token of the card.
     */
    cardToken?: string | undefined
    /**
     * The ISO currency code in which the card reversal transaction is posted. The amounts are stored in the base currency, but the transaction can be created with a foreign currency.
     */
    currencyCode?: string | undefined
    /**
     * The encoded key of the entity, generated, globally unique
     */
    encodedKey?: string | undefined
    /**
     * The external authorization hold reference ID, which relates this card transaction to a previous authorization hold.
     */
    externalAuthorizationReferenceId?: string | undefined
    /**
     * The external reference ID to be used to reference the card transaction in subsequent requests.
     */
    externalReferenceId: string
    /**
     * The formatted time at which the user made this card transaction.
     */
    userTransactionTime?: string | undefined
}

/**
 * Represents the request payload for performing an arrears settings change action
 */
export interface ChangeArrearsSettingsInput {
    /**
     * The new arrears tolerance period to be available on the account
     */
    arrearsTolerancePeriod: number
    /**
     * The date when to change the arrears settings
     */
    entryDate: string
    /**
     * The notes for the change arrears settings action performed on the loan account
     */
    notes?: string | undefined
}

export const ChangeArrearsSettingsInput = {
    validate: ChangeArrearsSettingsInputValidator as ValidateFunction<ChangeArrearsSettingsInput>,
    get schema() {
        return ChangeArrearsSettingsInput.validate.schema
    },
    get errors() {
        return ChangeArrearsSettingsInput.validate.errors ?? undefined
    },
    is: (o: unknown): o is ChangeArrearsSettingsInput => ChangeArrearsSettingsInput.validate(o) === true,
    parse: (o: unknown): { right: ChangeArrearsSettingsInput } | { left: DefinedError[] } => {
        if (ChangeArrearsSettingsInput.is(o)) {
            return { right: o }
        }
        return { left: (ChangeArrearsSettingsInput.errors ?? []) as DefinedError[] }
    },
} as const

/**
 * Represents the request payload for performing change due dates settings action
 */
export interface ChangeDueDatesSettingsInput {
    /**
     * The date when to change the due dates settings - deprecated, use valueDate instead
     */
    entryDate?: string | undefined
    /**
     * The new fixed days of month to be used on the account
     */
    fixedDaysOfMonth: number[]
    /**
     * The notes for the change due dates settings action performed on the loan account
     */
    notes?: string | undefined
    /**
     * The date when to change the due dates settings
     */
    valueDate?: string | undefined
}

export const ChangeDueDatesSettingsInput = {
    validate: ChangeDueDatesSettingsInputValidator as ValidateFunction<ChangeDueDatesSettingsInput>,
    get schema() {
        return ChangeDueDatesSettingsInput.validate.schema
    },
    get errors() {
        return ChangeDueDatesSettingsInput.validate.errors ?? undefined
    },
    is: (o: unknown): o is ChangeDueDatesSettingsInput => ChangeDueDatesSettingsInput.validate(o) === true,
    parse: (o: unknown): { right: ChangeDueDatesSettingsInput } | { left: DefinedError[] } => {
        if (ChangeDueDatesSettingsInput.is(o)) {
            return { right: o }
        }
        return { left: (ChangeDueDatesSettingsInput.errors ?? []) as DefinedError[] }
    },
} as const

/**
 * Represents the request payload for performing an PMT Adjustment action
 */
export interface ChangeInterestRateLoanAccountInput {
    /**
     * The new interest rate to be available on the account
     */
    interestRate?: number | undefined
    /**
     * The new interest spread to be available on the account
     */
    interestSpread?: number | undefined
    /**
     * The notes for the change interest rate action performed on the loan account
     */
    notes?: string | undefined
    /**
     * The date when to change the interest rate (as Organization Time)
     */
    valueDate: string
}

export const ChangeInterestRateLoanAccountInput = {
    validate: ChangeInterestRateLoanAccountInputValidator as ValidateFunction<ChangeInterestRateLoanAccountInput>,
    get schema() {
        return ChangeInterestRateLoanAccountInput.validate.schema
    },
    get errors() {
        return ChangeInterestRateLoanAccountInput.validate.errors ?? undefined
    },
    is: (o: unknown): o is ChangeInterestRateLoanAccountInput => ChangeInterestRateLoanAccountInput.validate(o) === true,
    parse: (o: unknown): { right: ChangeInterestRateLoanAccountInput } | { left: DefinedError[] } => {
        if (ChangeInterestRateLoanAccountInput.is(o)) {
            return { right: o }
        }
        return { left: (ChangeInterestRateLoanAccountInput.errors ?? []) as DefinedError[] }
    },
} as const

/**
 * Represents the request payload for performing a periodic payment change action
 */
export interface ChangePeriodicPaymentLoanAccountInput {
    /**
     * The notes for the change periodic payment action performed on the loan account
     */
    notes?: string | undefined
    /**
     * The new periodic payment to be available on the account
     */
    periodicPayment: number
    /**
     * The date when to change the periodic payment (as Organization Time)
     */
    valueDate: string
}

export const ChangePeriodicPaymentLoanAccountInput = {
    validate: ChangePeriodicPaymentLoanAccountInputValidator as ValidateFunction<ChangePeriodicPaymentLoanAccountInput>,
    get schema() {
        return ChangePeriodicPaymentLoanAccountInput.validate.schema
    },
    get errors() {
        return ChangePeriodicPaymentLoanAccountInput.validate.errors ?? undefined
    },
    is: (o: unknown): o is ChangePeriodicPaymentLoanAccountInput => ChangePeriodicPaymentLoanAccountInput.validate(o) === true,
    parse: (o: unknown): { right: ChangePeriodicPaymentLoanAccountInput } | { left: DefinedError[] } => {
        if (ChangePeriodicPaymentLoanAccountInput.is(o)) {
            return { right: o }
        }
        return { left: (ChangePeriodicPaymentLoanAccountInput.errors ?? []) as DefinedError[] }
    },
} as const

/**
 * Represents the request payload for performing a repayment value change action
 */
export interface ChangeRepaymentValueLoanAccountInput {
    /**
     * Fixed amount for being used for the repayments principal due
     */
    amount?: number | undefined
    /**
     * Notes for the repayment value change action performed on the loan account
     */
    notes?: string | undefined
    /**
     * Percentage of principal amount used for the repayments principal due
     */
    percentage?: number | undefined
    /**
     * Date when to change the repayment value (as Organization Time)
     */
    valueDate: string
}

export const ChangeRepaymentValueLoanAccountInput = {
    validate: ChangeRepaymentValueLoanAccountInputValidator as ValidateFunction<ChangeRepaymentValueLoanAccountInput>,
    get schema() {
        return ChangeRepaymentValueLoanAccountInput.validate.schema
    },
    get errors() {
        return ChangeRepaymentValueLoanAccountInput.validate.errors ?? undefined
    },
    is: (o: unknown): o is ChangeRepaymentValueLoanAccountInput => ChangeRepaymentValueLoanAccountInput.validate(o) === true,
    parse: (o: unknown): { right: ChangeRepaymentValueLoanAccountInput } | { left: DefinedError[] } => {
        if (ChangeRepaymentValueLoanAccountInput.is(o)) {
            return { right: o }
        }
        return { left: (ChangeRepaymentValueLoanAccountInput.errors ?? []) as DefinedError[] }
    },
} as const

/**
 * Represents the input for the collateral assets reevaluation background task.
 */
export interface CollateralAssetFilter {
    /**
     * Assets of the loan accounts that will be filtered by the branch keys in the background process
     */
    branchKeys?: string[] | undefined
    /**
     * Assets of the loan accounts that will be filtered by the currency codes in the background process
     */
    currencies?: string[] | undefined
    /**
     * Assets of the loan accounts that will be filtered by the product keys in the background process
     */
    productKeys?: string[] | undefined
}

export const CollateralAssetFilter = {
    validate: CollateralAssetFilterValidator as ValidateFunction<CollateralAssetFilter>,
    get schema() {
        return CollateralAssetFilter.validate.schema
    },
    get errors() {
        return CollateralAssetFilter.validate.errors ?? undefined
    },
    is: (o: unknown): o is CollateralAssetFilter => CollateralAssetFilter.validate(o) === true,
    parse: (o: unknown): { right: CollateralAssetFilter } | { left: DefinedError[] } => {
        if (CollateralAssetFilter.is(o)) {
            return { right: o }
        }
        return { left: (CollateralAssetFilter.errors ?? []) as DefinedError[] }
    },
} as const

/**
 * Holds the information about collateral assets reevaluation status.
 */
export interface CollateralAssetsReevaluationResponse {
    /**
     * The encoded key of the collateral assets reevaluation task
     */
    bulkProcessKey?: string | undefined
    /**
     * The collateral assets reevaluation status
     */
    status?:
        | 'QUEUED'
        | 'IN_PROGRESS'
        | 'COMPLETE'
        | 'NOT_FOUND'
        | 'CANCEL'
        | 'TO_BE_CANCELED'
        | 'TIMED_OUT'
        | 'ERROR'
        | 'TRANSIENT_ERROR'
        | 'OVERRIDDEN'
        | 'RECOVERABLE_ERROR'
        | undefined
}

export const CollateralAssetsReevaluationResponse = {
    validate: CollateralAssetsReevaluationResponseValidator as ValidateFunction<CollateralAssetsReevaluationResponse>,
    get schema() {
        return CollateralAssetsReevaluationResponse.validate.schema
    },
    get errors() {
        return CollateralAssetsReevaluationResponse.validate.errors ?? undefined
    },
    is: (o: unknown): o is CollateralAssetsReevaluationResponse => CollateralAssetsReevaluationResponse.validate(o) === true,
    parse: (o: unknown): { right: CollateralAssetsReevaluationResponse } | { left: DefinedError[] } => {
        if (CollateralAssetsReevaluationResponse.is(o)) {
            return { right: o }
        }
        return { left: (CollateralAssetsReevaluationResponse.errors ?? []) as DefinedError[] }
    },
} as const

export type CreateLoanAccountFundingSourcesRequest = InvestorFund[]

export const CreateLoanAccountFundingSourcesRequest = {
    validate: CreateLoanAccountFundingSourcesRequestValidator as ValidateFunction<CreateLoanAccountFundingSourcesRequest>,
    get schema() {
        return CreateLoanAccountFundingSourcesRequest.validate.schema
    },
    get errors() {
        return CreateLoanAccountFundingSourcesRequest.validate.errors ?? undefined
    },
    is: (o: unknown): o is CreateLoanAccountFundingSourcesRequest => CreateLoanAccountFundingSourcesRequest.validate(o) === true,
    parse: (o: unknown): { right: CreateLoanAccountFundingSourcesRequest } | { left: DefinedError[] } => {
        if (CreateLoanAccountFundingSourcesRequest.is(o)) {
            return { right: o }
        }
        return { left: (CreateLoanAccountFundingSourcesRequest.errors ?? []) as DefinedError[] }
    },
} as const

export type CreateLoanAccountFundingSourcesResponse = InvestorFund[]

export const CreateLoanAccountFundingSourcesResponse = {
    validate: CreateLoanAccountFundingSourcesResponseValidator as ValidateFunction<CreateLoanAccountFundingSourcesResponse>,
    get schema() {
        return CreateLoanAccountFundingSourcesResponse.validate.schema
    },
    get errors() {
        return CreateLoanAccountFundingSourcesResponse.validate.errors ?? undefined
    },
    is: (o: unknown): o is CreateLoanAccountFundingSourcesResponse =>
        CreateLoanAccountFundingSourcesResponse.validate(o) === true,
    parse: (o: unknown): { right: CreateLoanAccountFundingSourcesResponse } | { left: DefinedError[] } => {
        if (CreateLoanAccountFundingSourcesResponse.is(o)) {
            return { right: o }
        }
        return { left: (CreateLoanAccountFundingSourcesResponse.errors ?? []) as DefinedError[] }
    },
} as const

export type CreatePlannedFeesRequest = PlannedInstallmentFee[]

export const CreatePlannedFeesRequest = {
    validate: CreatePlannedFeesRequestValidator as ValidateFunction<CreatePlannedFeesRequest>,
    get schema() {
        return CreatePlannedFeesRequest.validate.schema
    },
    get errors() {
        return CreatePlannedFeesRequest.validate.errors ?? undefined
    },
    is: (o: unknown): o is CreatePlannedFeesRequest => CreatePlannedFeesRequest.validate(o) === true,
    parse: (o: unknown): { right: CreatePlannedFeesRequest } | { left: DefinedError[] } => {
        if (CreatePlannedFeesRequest.is(o)) {
            return { right: o }
        }
        return { left: (CreatePlannedFeesRequest.errors ?? []) as DefinedError[] }
    },
} as const

export type CreatePlannedFeesResponse = PlannedInstallmentFee[]

export const CreatePlannedFeesResponse = {
    validate: CreatePlannedFeesResponseValidator as ValidateFunction<CreatePlannedFeesResponse>,
    get schema() {
        return CreatePlannedFeesResponse.validate.schema
    },
    get errors() {
        return CreatePlannedFeesResponse.validate.errors ?? undefined
    },
    is: (o: unknown): o is CreatePlannedFeesResponse => CreatePlannedFeesResponse.validate(o) === true,
    parse: (o: unknown): { right: CreatePlannedFeesResponse } | { left: DefinedError[] } => {
        if (CreatePlannedFeesResponse.is(o)) {
            return { right: o }
        }
        return { left: (CreatePlannedFeesResponse.errors ?? []) as DefinedError[] }
    },
} as const

/**
 * Represents a currency eg. USD, EUR.
 */
export interface Currency {
    /**
     * Fiat(ISO-4217) currency code or NON_FIAT for non fiat currencies.
     */
    code?:
        | 'AED'
        | 'AFN'
        | 'ALL'
        | 'AMD'
        | 'ANG'
        | 'AOA'
        | 'ARS'
        | 'AUD'
        | 'AWG'
        | 'AZN'
        | 'BAM'
        | 'BBD'
        | 'BDT'
        | 'BGN'
        | 'BHD'
        | 'BIF'
        | 'BMD'
        | 'BND'
        | 'BOB'
        | 'BOV'
        | 'BRL'
        | 'BSD'
        | 'BTN'
        | 'BWP'
        | 'BYR'
        | 'BYN'
        | 'BZD'
        | 'CAD'
        | 'CDF'
        | 'CHE'
        | 'CHF'
        | 'CHW'
        | 'CLF'
        | 'CLP'
        | 'CNY'
        | 'COP'
        | 'COU'
        | 'CRC'
        | 'CUC'
        | 'CUP'
        | 'CVE'
        | 'CZK'
        | 'DJF'
        | 'DKK'
        | 'DOP'
        | 'DZD'
        | 'EGP'
        | 'ERN'
        | 'ETB'
        | 'EUR'
        | 'FJD'
        | 'FKP'
        | 'GBP'
        | 'GEL'
        | 'GHS'
        | 'GIP'
        | 'GMD'
        | 'GNF'
        | 'GTQ'
        | 'GYD'
        | 'HKD'
        | 'HNL'
        | 'HRK'
        | 'HTG'
        | 'HUF'
        | 'IDR'
        | 'ILS'
        | 'INR'
        | 'IQD'
        | 'IRR'
        | 'ISK'
        | 'JMD'
        | 'JOD'
        | 'JPY'
        | 'KES'
        | 'KGS'
        | 'KHR'
        | 'KMF'
        | 'KPW'
        | 'KRW'
        | 'KWD'
        | 'KYD'
        | 'KZT'
        | 'LAK'
        | 'LBP'
        | 'LKR'
        | 'LRD'
        | 'LSL'
        | 'LTL'
        | 'LVL'
        | 'LYD'
        | 'MAD'
        | 'MDL'
        | 'MGA'
        | 'MKD'
        | 'MMK'
        | 'MNT'
        | 'MOP'
        | 'MRO'
        | 'MRU'
        | 'MUR'
        | 'MVR'
        | 'MWK'
        | 'MXN'
        | 'MXV'
        | 'MYR'
        | 'MZN'
        | 'NAD'
        | 'NGN'
        | 'NIO'
        | 'NOK'
        | 'NPR'
        | 'NZD'
        | 'OMR'
        | 'PAB'
        | 'PEN'
        | 'PGK'
        | 'PHP'
        | 'PKR'
        | 'PLN'
        | 'PYG'
        | 'QAR'
        | 'RON'
        | 'RSD'
        | 'RUB'
        | 'RWF'
        | 'SAR'
        | 'SBD'
        | 'SCR'
        | 'SDG'
        | 'SEK'
        | 'SGD'
        | 'SHP'
        | 'SLL'
        | 'SOS'
        | 'SRD'
        | 'STD'
        | 'STN'
        | 'SVC'
        | 'SYP'
        | 'SZL'
        | 'THB'
        | 'TJS'
        | 'TMT'
        | 'TND'
        | 'TOP'
        | 'TRY'
        | 'TTD'
        | 'TWD'
        | 'TZS'
        | 'UAH'
        | 'UGX'
        | 'USD'
        | 'USN'
        | 'UYI'
        | 'UYU'
        | 'UYW'
        | 'UZS'
        | 'VED'
        | 'VEF'
        | 'VES'
        | 'VND'
        | 'VUV'
        | 'WST'
        | 'XAG'
        | 'XAU'
        | 'XAF'
        | 'XBA'
        | 'XBB'
        | 'XBC'
        | 'XBD'
        | 'XCD'
        | 'XDR'
        | 'XOF'
        | 'XPD'
        | 'XPF'
        | 'XPT'
        | 'XSU'
        | 'XTS'
        | 'XUA'
        | 'XXX'
        | 'YER'
        | 'ZAR'
        | 'ZIG'
        | 'ZMK'
        | 'ZWL'
        | 'ZMW'
        | 'SSP'
        | 'NON_FIAT'
        | undefined
    /**
     * Currency code for NON_FIAT currency.
     */
    currencyCode?: string | undefined
}

/**
 * Custom payment amount for a specific element type
 */
export interface CustomPaymentAmount {
    /**
     * The amount of the payment paid in the transaction for the given type.
     */
    amount: number
    /**
     * The type of the custom payment
     */
    customPaymentAmountType:
        | 'PRINCIPAL'
        | 'INTEREST'
        | 'MANUAL_FEE'
        | 'UPFRONT_DISBURSEMENT_FEE'
        | 'LATE_REPAYMENT_FEE'
        | 'PAYMENT_DUE_FEE'
        | 'PENALTY'
    /**
     * The encodedKey of the predefined fee to be paid.
     */
    predefinedFeeKey?: string | undefined
    /**
     * The amount of the taxes paid in the transaction for the given type.
     */
    taxOnAmount?: number | undefined
}

/**
 * The custom predefined fees, they may be used as the expected predefined fees that will be applied on the disbursement.
 */
export interface CustomPredefinedFee {
    /**
     * The amount of the custom fee.
     */
    amount?: number | undefined
    /**
     * The encoded key of the custom predefined fee, auto generated, unique.
     */
    encodedKey?: string | undefined
    /**
     * The percentage of the custom fee.
     */
    percentage?: number | undefined
    /**
     * The encoded key of the predefined fee
     */
    predefinedFeeEncodedKey?: string | undefined
}

/**
 * Enumeration for days of month and method of handling shorter months.
 */
export interface DaysInMonth {
    /**
     * Specifies the day(s) of the month when the interest application dates should be. Only available if the Interest Application Method is InterestApplicationMethodDTO#FIXED_DAYS_OF_MONTH. Currently only 1 value can be specified.
     */
    daysInMonth?: number[] | undefined
    /**
     * Determines how to handle the short months, if they select a fixed day of month > 28. Will be null if no such date is selected. Only available if the Interest Application Method is InterestApplicationMethodDTO#FIXED_DAYS_OF_MONTH.
     */
    shortMonthHandlingMethod?: 'LAST_DAY_IN_MONTH' | 'FIRST_DAY_OF_NEXT_MONTH' | undefined
}

/**
 * The the disbursement details it holds the information related to the disbursement details as disbursement date, first repayment date, disbursement fees.
 */
export interface DisbursementDetails {
    /**
     * The activation date, the date when the disbursement actually took place.
     */
    disbursementDate?: string | undefined
    /**
     * The encoded key of the disbursement details, auto generated, unique
     */
    encodedKey?: string | undefined
    /**
     * The date of the expected disbursement.Stored as Organization Time.
     */
    expectedDisbursementDate?: string | undefined
    /**
     * List of fees that should be applied at the disbursement time.
     */
    fees?: CustomPredefinedFee[] | undefined
    /**
     * The date of the expected first repayment. Stored as Organization Time.
     */
    firstRepaymentDate?: string | undefined
    transactionDetails?: LoanTransactionDetails | undefined
}

/**
 * The the disbursement details it holds the information related to the disbursement details as disbursement date, first repayment date, disbursement fees.
 */
export interface DisbursementDetailsForSchedulePreview {
    /**
     * The date of the expected disbursement.Stored as Organization Time.
     */
    expectedDisbursementDate?: string | undefined
    /**
     * List of fees that should be applied at the disbursement time.
     */
    fees?: CustomPredefinedFee[] | undefined
    /**
     * The date of the expected first repayment. Stored as Organization Time.
     */
    firstRepaymentDate?: string | undefined
}

export interface ErrorResponse {
    errors?: RestError[] | undefined
}

export const ErrorResponse = {
    validate: ErrorResponseValidator as ValidateFunction<ErrorResponse>,
    get schema() {
        return ErrorResponse.validate.schema
    },
    get errors() {
        return ErrorResponse.validate.errors ?? undefined
    },
    is: (o: unknown): o is ErrorResponse => ErrorResponse.validate(o) === true,
    parse: (o: unknown): { right: ErrorResponse } | { left: DefinedError[] } => {
        if (ErrorResponse.is(o)) {
            return { right: o }
        }
        return { left: (ErrorResponse.errors ?? []) as DefinedError[] }
    },
} as const

/**
 * An amount of predefined fee that was applied or paid on an account.
 */
export interface Fee {
    /**
     * The amount of the fee that was applied/paid in the transaction for the given predefined fee.
     */
    amount?: number | undefined
    /**
     * The name of the predefined fee
     */
    name?: string | undefined
    /**
     * The encoded key of the predefined fee, auto generated, unique
     */
    predefinedFeeKey: string
    /**
     * The amount of the taxes on fee that was applied/paid in the transaction.
     */
    taxAmount?: number | undefined
    /**
     * Shows the event that will trigger a fee
     */
    trigger?:
        | 'MANUAL'
        | 'MANUAL_PLANNED'
        | 'DISBURSEMENT'
        | 'CAPITALIZED_DISBURSEMENT'
        | 'UPFRONT_DISBURSEMENT'
        | 'LATE_REPAYMENT'
        | 'PAYMENT_DUE'
        | 'PAYMENT_DUE_APPLIED_ON_DUE_DATES'
        | 'ARBITRARY'
        | 'IOF'
        | 'EARLY_REPAYMENT_CHARGE'
        | undefined
}

/**
 * Represents a fee amount.
 */
export interface FeeAmount {
    /**
     * The due amount.
     */
    due?: number | undefined
    /**
     * The expected amount, which is sum of paid and due amounts.
     */
    expected?: number | undefined
    /**
     * The expected amount, which is the sum of unapplied fee and planned fee due amounts.
     */
    expectedUnapplied?: number | undefined
    /**
     * The paid amount.
     */
    paid?: number | undefined
}

export type GetAllAuthorizationHoldsResponse = GetAuthorizationHold[]

export const GetAllAuthorizationHoldsResponse = {
    validate: GetAllAuthorizationHoldsResponseValidator as ValidateFunction<GetAllAuthorizationHoldsResponse>,
    get schema() {
        return GetAllAuthorizationHoldsResponse.validate.schema
    },
    get errors() {
        return GetAllAuthorizationHoldsResponse.validate.errors ?? undefined
    },
    is: (o: unknown): o is GetAllAuthorizationHoldsResponse => GetAllAuthorizationHoldsResponse.validate(o) === true,
    parse: (o: unknown): { right: GetAllAuthorizationHoldsResponse } | { left: DefinedError[] } => {
        if (GetAllAuthorizationHoldsResponse.is(o)) {
            return { right: o }
        }
        return { left: (GetAllAuthorizationHoldsResponse.errors ?? []) as DefinedError[] }
    },
} as const

export type GetAllCardsResponse = Card[]

export const GetAllCardsResponse = {
    validate: GetAllCardsResponseValidator as ValidateFunction<GetAllCardsResponse>,
    get schema() {
        return GetAllCardsResponse.validate.schema
    },
    get errors() {
        return GetAllCardsResponse.validate.errors ?? undefined
    },
    is: (o: unknown): o is GetAllCardsResponse => GetAllCardsResponse.validate(o) === true,
    parse: (o: unknown): { right: GetAllCardsResponse } | { left: DefinedError[] } => {
        if (GetAllCardsResponse.is(o)) {
            return { right: o }
        }
        return { left: (GetAllCardsResponse.errors ?? []) as DefinedError[] }
    },
} as const

export type GetAllPlannedFeesResponse = PlannedInstallmentFee[]

export const GetAllPlannedFeesResponse = {
    validate: GetAllPlannedFeesResponseValidator as ValidateFunction<GetAllPlannedFeesResponse>,
    get schema() {
        return GetAllPlannedFeesResponse.validate.schema
    },
    get errors() {
        return GetAllPlannedFeesResponse.validate.errors ?? undefined
    },
    is: (o: unknown): o is GetAllPlannedFeesResponse => GetAllPlannedFeesResponse.validate(o) === true,
    parse: (o: unknown): { right: GetAllPlannedFeesResponse } | { left: DefinedError[] } => {
        if (GetAllPlannedFeesResponse.is(o)) {
            return { right: o }
        }
        return { left: (GetAllPlannedFeesResponse.errors ?? []) as DefinedError[] }
    },
} as const

export type GetAllResponse = LoanAccount[]

export const GetAllResponse = {
    validate: GetAllResponseValidator as ValidateFunction<GetAllResponse>,
    get schema() {
        return GetAllResponse.validate.schema
    },
    get errors() {
        return GetAllResponse.validate.errors ?? undefined
    },
    is: (o: unknown): o is GetAllResponse => GetAllResponse.validate(o) === true,
    parse: (o: unknown): { right: GetAllResponse } | { left: DefinedError[] } => {
        if (GetAllResponse.is(o)) {
            return { right: o }
        }
        return { left: (GetAllResponse.errors ?? []) as DefinedError[] }
    },
} as const

/**
 * Details for retrieving a authorization hold. Deprecated due to encodedKey field.
 */
export interface GetAuthorizationHold {
    /**
     * The key of the account linked with the authorization hold.
     */
    accountKey?: string | undefined
    /**
     * Whether the given request should be accepted without balance validations.
     */
    advice: boolean
    /**
     * The amount of money to be held as a result of the authorization hold request.
     */
    amount: number
    balances?: AccountBalances | undefined
    cardAcceptor?: CardAcceptor | undefined
    /**
     * The reference token of the card.
     */
    cardToken?: string | undefined
    /**
     * The organization time when the authorization hold was created
     */
    creationDate?: string | undefined
    /**
     * Indicates whether the authorization hold amount is credited or debited.If not provided, the default values is DBIT.
     */
    creditDebitIndicator?: 'DBIT' | 'CRDT' | undefined
    /**
     * The ISO currency code in which the hold was created. The amounts are stored in the base currency, but the user could have enter it in a foreign currency.
     */
    currencyCode?: string | undefined
    /**
     * The custom expiration period for the hold which overwrites mcc and default expiration periods
     */
    customExpirationPeriod?: number | undefined
    /**
     * The internal ID of the authorization hold, auto generated, unique.
     */
    encodedKey?: string | undefined
    /**
     * The exchange rate for the original currency.
     */
    exchangeRate?: number | undefined
    /**
     * The external reference ID to be used to reference the account hold in subsequent requests.
     */
    externalReferenceId: string
    /**
     * The original amount of money to be held as a result of the authorization hold request.
     */
    originalAmount?: number | undefined
    /**
     * The original currency in which the hold was created.
     */
    originalCurrency?: string | undefined
    /**
     * Indicates whether the authorization is partial or not
     */
    partial?: boolean | undefined
    /**
     * The date to consider as start date when calculating the number of days passed until expiration
     */
    referenceDateForExpiration?: string | undefined
    /**
     * Indicates the source of the authorization hold, the default values is CARD.
     */
    source?: 'CARD' | 'ACCOUNT' | undefined
    /**
     * The authorization hold status.
     */
    status?: 'PENDING' | 'REVERSED' | 'SETTLED' | 'EXPIRED' | undefined
    /**
     * The formatted time at which the user made this authorization hold.
     */
    userTransactionTime?: string | undefined
}

export type GetLoanAccountDocumentResponse = string

export const GetLoanAccountDocumentResponse = {
    validate: GetLoanAccountDocumentResponseValidator as ValidateFunction<GetLoanAccountDocumentResponse>,
    get schema() {
        return GetLoanAccountDocumentResponse.validate.schema
    },
    get errors() {
        return GetLoanAccountDocumentResponse.validate.errors ?? undefined
    },
    is: (o: unknown): o is GetLoanAccountDocumentResponse => GetLoanAccountDocumentResponse.validate(o) === true,
    parse: (o: unknown): { right: GetLoanAccountDocumentResponse } | { left: DefinedError[] } => {
        if (GetLoanAccountDocumentResponse.is(o)) {
            return { right: o }
        }
        return { left: (GetLoanAccountDocumentResponse.errors ?? []) as DefinedError[] }
    },
} as const

export type GetVersionsByIdResponse = LoanAccount[]

export const GetVersionsByIdResponse = {
    validate: GetVersionsByIdResponseValidator as ValidateFunction<GetVersionsByIdResponse>,
    get schema() {
        return GetVersionsByIdResponse.validate.schema
    },
    get errors() {
        return GetVersionsByIdResponse.validate.errors ?? undefined
    },
    is: (o: unknown): o is GetVersionsByIdResponse => GetVersionsByIdResponse.validate(o) === true,
    parse: (o: unknown): { right: GetVersionsByIdResponse } | { left: DefinedError[] } => {
        if (GetVersionsByIdResponse.is(o)) {
            return { right: o }
        }
        return { left: (GetVersionsByIdResponse.errors ?? []) as DefinedError[] }
    },
} as const

/**
 * Guarantor, holds information about a client guaranty entry. It can be defined based on another client which guarantees (including or not a savings account whether it is a client of the organization using Mambu or not) or based on a value the client holds (an asset)
 */
export interface Guarantor {
    /**
     * The amount used by the client for the guaranty
     */
    amount: number
    /**
     * The name of a value the client guarantees with (populated when the guaranty type is ASSET)
     */
    assetName?: string | undefined
    /**
     * The key of the deposit account used by the guarantor (populated when the guaranty type is GUARANTOR). It can be null.
     */
    depositAccountKey?: string | undefined
    /**
     * The encoded key of the security, auto generated, unique.
     */
    encodedKey?: string | undefined
    /**
     * The key of the client/group used as the guarantor.
     */
    guarantorKey: string
    /**
     * The type of the guarantor (client/group)
     */
    guarantorType: 'CLIENT' | 'GROUP'
}

/**
 * Represents a single installment details structure.
 */
export interface Installment {
    /**
     * The installment due date.
     */
    dueDate?: string | undefined
    /**
     * The encoded key of the installment, which is auto generated, and unique.
     */
    encodedKey?: string | undefined
    /**
     * The expected closing balance is the remaining amount per installment only applicable for interest only equal installment products.
     */
    expectedClosingBalance?: number | undefined
    fee?: InstallmentFee | undefined
    /**
     * The breakdown of the fee amounts that have been applied to the loan account.
     */
    feeDetails?: InstallmentFeeDetails[] | undefined
    interest?: InstallmentAllocationElementTaxableAmount | undefined
    /**
     * The interest accrued calculated on previous repayment closing balance only applicable interest only equal installment products.
     */
    interestAccrued?: number | undefined
    /**
     * `TRUE` if a payment holiday is offered for the installment, `FALSE` otherwise.
     */
    isPaymentHoliday?: boolean | undefined
    /**
     * The installment last paid date.
     */
    lastPaidDate?: string | undefined
    /**
     * The order number of an installment among all the installments generated for a loan. Loan installments are put in ascending order by due date. The order number only applies to the content of a particular JSON response therefore it is not unique.
     */
    number?: string | undefined
    /**
     * The parent account key of the installment.
     */
    parentAccountKey?: string | undefined
    penalty?: InstallmentAllocationElementTaxableAmount | undefined
    principal?: InstallmentAllocationElementAmount | undefined
    /**
     * The installment repaid date.
     */
    repaidDate?: string | undefined
    /**
     * The installment state.
     */
    state?: 'PENDING' | 'LATE' | 'PAID' | 'PARTIALLY_PAID' | 'GRACE' | undefined
}

/**
 * Represents an installment allocation element amount structure.
 */
export interface InstallmentAllocationElementAmount {
    amount?: Amount | undefined
}

/**
 * Represents an installment allocation element taxable amount structure.
 */
export interface InstallmentAllocationElementTaxableAmount {
    amount?: Amount | undefined
    tax?: Amount | undefined
}

/**
 * Represents an installment fee structure.
 */
export interface InstallmentFee {
    amount?: FeeAmount | undefined
    tax?: Amount | undefined
}

/**
 * Represents fee details for an installment.
 */
export interface InstallmentFeeDetails {
    amount?: AmountWithReduced | undefined
    /**
     * The encoded key of the predefined fee, auto generated, unique
     */
    encodedKey?: string | undefined
    /**
     * The id of the fee, provided by the client
     */
    id?: string | undefined
    /**
     * The name of the fee
     */
    name?: string | undefined
    tax?: AmountWithReduced | undefined
}

/**
 * The interest settings, holds all the properties regarding interests for the loan account.
 */
export interface InterestSettings {
    /**
     * Adjustable interest rates settings for loan account
     */
    accountInterestRateSettings?: AccountInterestRateSettings[] | undefined
    /**
     * The accrue interest after maturity. If the product support this option, specify if the interest should be accrued after the account maturity date.
     */
    accrueInterestAfterMaturity?: boolean | undefined
    /**
     * Indicates whether late interest is accrued for this loan account
     */
    accrueLateInterest?: boolean | undefined
    interestApplicationDays?: DaysInMonth | undefined
    /**
     * The interest application method. Represents the interest application method that determines whether the interest gets applied on the account's disbursement or on each repayment.
     */
    interestApplicationMethod?: 'AFTER_DISBURSEMENT' | 'REPAYMENT_DUE_DATE' | 'FIXED_DAYS_OF_MONTH' | undefined
    /**
     * The interest balance calculation method. Represents the option which determines the way the balance for the account's interest is computed.
     */
    interestBalanceCalculationMethod?: 'ONLY_PRINCIPAL' | 'PRINCIPAL_AND_INTEREST' | undefined
    /**
     * The interest calculation method. Holds the type of interest calculation method.
     */
    interestCalculationMethod?: 'FLAT' | 'DECLINING_BALANCE' | 'DECLINING_BALANCE_DISCOUNTED' | 'EQUAL_INSTALLMENTS' | undefined
    /**
     * The interest change frequency. Holds the possible values for how often is interest charged on loan or deposit accounts
     */
    interestChargeFrequency?:
        | 'ANNUALIZED'
        | 'EVERY_MONTH'
        | 'EVERY_FOUR_WEEKS'
        | 'EVERY_WEEK'
        | 'EVERY_DAY'
        | 'EVERY_X_DAYS'
        | undefined
    /**
     * The interest rate. Represents the interest rate for the loan account. The interest on loans is accrued on a daily basis, which allows charging the clients only for the days they actually used the loan amount.
     */
    interestRate?: number | undefined
    /**
     * Interest rate update frequency unit count.
     */
    interestRateReviewCount?: number | undefined
    /**
     * The interest rate review unit. Defines the interest rate update frequency measurement unit.
     */
    interestRateReviewUnit?: 'DAYS' | 'WEEKS' | 'MONTHS' | undefined
    /**
     * The interest rate source. Represents the interest calculation method: fixed or (interest spread + active organization index interest rate)
     */
    interestRateSource?: 'FIXED_INTEREST_RATE' | 'INDEX_INTEREST_RATE' | undefined
    /**
     * Interest to be added to active organization index interest rate in order to find out actual interest rate
     */
    interestSpread?: number | undefined
    /**
     * The possible values for how we compute and apply the interest
     */
    interestType?: 'SIMPLE_INTEREST' | 'CAPITALIZED_INTEREST' | 'COMPOUNDING_INTEREST' | undefined
    pmtAdjustmentThreshold?: PMTAdjustmentThreshold | undefined
}

/**
 * The interest settings, holds all the properties regarding interests for the loan account.
 */
export interface InterestSettingsForSchedulePreview {
    /**
     * The interest settings details for schedule preview.
     */
    accountInterestRateSettings?: AccountInterestRateSettings[] | undefined
    /**
     * The interest rate. Represents the interest rate for the loan account. The interest on loans is accrued on a daily basis, which allows charging the clients only for the days they actually used the loan amount.
     */
    interestRate?: number | undefined
    /**
     * Interest to be added to active organization index interest rate in order to find out actual interest rate
     */
    interestSpread?: number | undefined
}

/**
 * Contains the details about an investor fund including fields like encoded key, guarantor type, amount and guarantor key
 */
export interface InvestorFund {
    /**
     * The amount used by the client for the guaranty
     */
    amount: number
    /**
     * The name of a value the client guarantees with (populated when the guaranty type is ASSET)
     */
    assetName?: string | undefined
    /**
     * The key of the deposit account used by the guarantor (populated when the guaranty type is GUARANTOR). It can be null.
     */
    depositAccountKey?: string | undefined
    /**
     * The encoded key of the entity, generated, globally unique
     */
    encodedKey?: string | undefined
    /**
     * The key of the client/group used as the guarantor.
     */
    guarantorKey: string
    /**
     * The type of the guarantor (client/group)
     */
    guarantorType: 'CLIENT' | 'GROUP'
    /**
     * Investor fund unique identifier. All versions of an investor fund will have same id.
     */
    id?: string | undefined
    /**
     * The constraint minimum value
     */
    interestCommission?: number | undefined
    /**
     * Percentage of loan shares this investor owns
     */
    sharePercentage?: number | undefined
}

/**
 * Represents a loan account. A loan account defines the amount that your organization lends to a client. The terms and conditions of a loan account are defined by a loan product. In a loan account, Mambu stores all the information related to disbursements, repayments, interest rates, and withdrawals.
 */
export interface LoanAccount {
    accountArrearsSettings?: AccountArrearsSettings | undefined
    /**
     * The encoded key of the account holder.
     */
    accountHolderKey: string
    /**
     * The type of the account holder.
     */
    accountHolderType: 'CLIENT' | 'GROUP'
    /**
     * The state of the loan account.
     */
    accountState?: 'PARTIAL_APPLICATION' | 'PENDING_APPROVAL' | 'APPROVED' | 'ACTIVE' | 'ACTIVE_IN_ARREARS' | 'CLOSED' | undefined
    /**
     * A second state for the loan account. Beside the account state, a second substate is sometimes necessary to provide more information about the exact lifecycle state of a loan account.For example, even if the account state of a loan account is `ACTIVE`, it can also have a substate of `LOCKED`.
     */
    accountSubState?:
        | 'PARTIALLY_DISBURSED'
        | 'LOCKED'
        | 'LOCKED_CAPPING'
        | 'REFINANCED'
        | 'RESCHEDULED'
        | 'WITHDRAWN'
        | 'REPAID'
        | 'REJECTED'
        | 'WRITTEN_OFF'
        | 'TERMINATED'
        | undefined
    /**
     * The amount of interest that has been accrued in the loan account.
     */
    accruedInterest?: number | undefined
    /**
     * The accrued penalty, represents the amount of penalty that has been accrued in the loan account.
     */
    accruedPenalty?: number | undefined
    /**
     * The encoded key of the transaction that activated the loan account.
     */
    activationTransactionKey?: string | undefined
    /**
     * DEPRECATED - Will always be false.
     */
    allowOffset?: boolean | undefined
    /**
     * The date the loan account was approved.
     */
    approvedDate?: string | undefined
    /**
     * The arrears tolerance (period or day of month) depending on the product settings.
     */
    arrearsTolerancePeriod?: number | undefined
    /**
     * The list of assets associated with the current loan account.
     */
    assets?: Asset[] | undefined
    /**
     * The key of the branch this loan account is assigned to. The branch is set to unassigned if no branch field is set.
     */
    assignedBranchKey?: string | undefined
    /**
     * The key of the centre this account is assigned to.
     */
    assignedCentreKey?: string | undefined
    /**
     * The key of the user this loan account is assigned to.
     */
    assignedUserKey?: string | undefined
    balances?: Balances | undefined
    /**
     * The date the loan was closed.
     */
    closedDate?: string | undefined
    /**
     * The date the loan account was created.
     */
    creationDate?: string | undefined
    /**
     * The key to the line of credit where this account is registered to.
     */
    creditArrangementKey?: string | undefined
    currency?: Currency | undefined
    /**
     * The number of days the loan account is in arrears.
     */
    daysInArrears?: number | undefined
    /**
     * The number of days a repayment for the loan account is late.
     */
    daysLate?: number | undefined
    disbursementDetails?: DisbursementDetails | undefined
    /**
     * The encoded key of the loan account, it is auto generated, and must be unique.
     */
    encodedKey?: string | undefined
    /**
     * The list of funds associated with the loan account.
     */
    fundingSources?: InvestorFund[] | undefined
    /**
     * Shows whether the repayment transactions with entry date set in the future are allowed or not for this loan account.
     */
    futurePaymentsAcceptance?: 'NO_FUTURE_PAYMENTS' | 'ACCEPT_FUTURE_PAYMENTS' | 'ACCEPT_OVERPAYMENTS' | undefined
    /**
     * The list of guarantees associated with the loan account.
     */
    guarantors?: Guarantor[] | undefined
    /**
     * The ID of the loan account, it can be generated and customized, and must be unique.
     */
    id?: string | undefined
    /**
     * The interest that is accrued in the current billing cycle.
     */
    interestAccruedInBillingCycle?: number | undefined
    /**
     * The value of the interest booked by the organization from the accounts funded by investors. Null if the funds are not enabled.
     */
    interestCommission?: number | undefined
    /**
     * The amount of interest from arrears that has been accrued in the loan account.
     */
    interestFromArrearsAccrued?: number | undefined
    interestSettings?: InterestSettings | undefined
    /**
     * The date the loan account has last been evaluated for interest, principal, fees, and penalties calculations expressed in the organization time format and time zone.
     */
    lastAccountAppraisalDate?: string | undefined
    /**
     * The date of the last time the loan account had interest applied (stored to interest balance), expressed in the organization time format and time zone.
     */
    lastInterestAppliedDate?: string | undefined
    /**
     * The date the interest was reviewed last time, stored in the organization time format and time zone.
     */
    lastInterestReviewDate?: string | undefined
    /**
     * The date when the loan account was set for the last time in the `LOCKED` state expressed in the organization time format and time zone. If null, the account is not locked anymore.
     */
    lastLockedDate?: string | undefined
    /**
     * The last date the loan was updated.
     */
    lastModifiedDate?: string | undefined
    /**
     * The date when the loan account was set to last standing or null; if never set, it is expressed in your organization time format and time zone.
     */
    lastSetToArrearsDate?: string | undefined
    /**
     * The date the tax rate on the loan account was last checked, expressed in the organization time format and time zone.
     */
    lastTaxRateReviewDate?: string | undefined
    /**
     * The overdue payments recalculation method inherited from the loan product on which this loan account is based.
     */
    latePaymentsRecalculationMethod?:
        | 'OVERDUE_INSTALLMENTS_INCREASE'
        | 'LAST_INSTALLMENT_INCREASE'
        | 'NO_RECALCULATION'
        | undefined
    /**
     * The loan amount.
     */
    loanAmount: number
    /**
     * The name of the loan account.
     */
    loanName?: string | undefined
    /**
     * The locked account total due type.
     */
    lockedAccountTotalDueType?: 'BALANCE_AMOUNT' | 'DUE_AMOUNT_ON_LATE_INSTALLMENTS' | undefined
    /**
     * A list with operations which are locked when the account is in the AccountState.LOCKED substate.
     */
    lockedOperations?: ('APPLY_INTEREST' | 'APPLY_FEES' | 'APPLY_PENALTIES')[] | undefined
    /**
     * The migration event encoded key associated with this loan account. If this account was imported, track which 'migration event' they came from.
     */
    migrationEventKey?: string | undefined
    /**
     * Adjust the interest for the first repayment when the first repayment period is different than the repayment frequency
     */
    modifyInterestForFirstInstallment?: boolean | undefined
    /**
     * The notes about this loan account.
     */
    notes?: string | undefined
    /**
     * The key of the original rescheduled or refinanced loan account.
     */
    originalAccountKey?: string | undefined
    /**
     * The amount of interest that has been accrued during payment holidays in the loan account.
     */
    paymentHolidaysAccruedInterest?: number | undefined
    /**
     * The interest payment method that determines whether the payments are made horizontally (on the repayments) or vertically (on the loan account).
     */
    paymentMethod?: 'HORIZONTAL' | 'VERTICAL' | undefined
    penaltySettings?: PenaltySettings | undefined
    /**
     * The list with manual fees planned on the installments of the loan account.
     */
    plannedInstallmentFees?: PlannedInstallmentFee[] | undefined
    prepaymentSettings?: PrepaymentSettings | undefined
    principalPaymentSettings?: PrincipalPaymentAccountSettings | undefined
    /**
     * The key for the type of loan product that this loan account is based on.
     */
    productTypeKey: string
    redrawSettings?: LoanAccountRedrawSettings | undefined
    /**
     * The key pointing to where this loan account was rescheduled or refinanced to. This value is only not null if rescheduled.
     */
    rescheduledAccountKey?: string | undefined
    scheduleSettings: ScheduleSettings
    /**
     * The encoded key of the settlement account.
     */
    settlementAccountKey?: string | undefined
    /**
     * The tax rate.
     */
    taxRate?: number | undefined
    /**
     * The date this loan account was terminated.
     */
    terminationDate?: string | undefined
    /**
     * The list of disbursement tranches available for the loan account.
     */
    tranches?: LoanTranche[] | undefined
}

export const LoanAccount = {
    validate: LoanAccountValidator as ValidateFunction<LoanAccount>,
    get schema() {
        return LoanAccount.validate.schema
    },
    get errors() {
        return LoanAccount.validate.errors ?? undefined
    },
    is: (o: unknown): o is LoanAccount => LoanAccount.validate(o) === true,
    parse: (o: unknown): { right: LoanAccount } | { left: DefinedError[] } => {
        if (LoanAccount.is(o)) {
            return { right: o }
        }
        return { left: (LoanAccount.errors ?? []) as DefinedError[] }
    },
} as const

/**
 * Represents information for an action to perform on a loan account.
 */
export interface LoanAccountAction {
    /**
     * The action type to be applied.
     */
    action:
        | 'REQUEST_APPROVAL'
        | 'SET_INCOMPLETE'
        | 'APPROVE'
        | 'UNDO_APPROVE'
        | 'REJECT'
        | 'WITHDRAW'
        | 'CLOSE'
        | 'UNDO_REJECT'
        | 'UNDO_WITHDRAW'
        | 'UNDO_CLOSE'
    /**
     * The notes related to the action performed.
     */
    notes?: string | undefined
}

export const LoanAccountAction = {
    validate: LoanAccountActionValidator as ValidateFunction<LoanAccountAction>,
    get schema() {
        return LoanAccountAction.validate.schema
    },
    get errors() {
        return LoanAccountAction.validate.errors ?? undefined
    },
    is: (o: unknown): o is LoanAccountAction => LoanAccountAction.validate(o) === true,
    parse: (o: unknown): { right: LoanAccountAction } | { left: DefinedError[] } => {
        if (LoanAccountAction.is(o)) {
            return { right: o }
        }
        return { left: (LoanAccountAction.errors ?? []) as DefinedError[] }
    },
} as const

/**
 * Wrapper that holds a list of filtering criteria and a sorting criteria for Loan account directed query
 */
export interface LoanAccountFilterCriteria {
    field:
        | 'accountHolderKey'
        | 'productTypeKey'
        | 'loanRiskLevelKey'
        | 'encodedKey'
        | 'loanName'
        | 'id'
        | 'accountHolderId'
        | 'recipient'
        | 'creationDate'
        | 'approvedDate'
        | 'lastModifiedDate'
        | 'lastSetToArrearsDate'
        | 'lastLockedDate'
        | 'closedDate'
        | 'daysInArrears'
        | 'daysLate'
        | 'accountSubState'
        | 'accountState'
        | 'loanAmount'
        | 'numInstallments'
        | 'balances.principalDue'
        | 'balances.principalPaid'
        | 'balances.principalBalance'
        | 'balances.interestDue'
        | 'balances.interestPaid'
        | 'balance.interestBalance'
        | 'accruedInterest'
        | 'balances.feesDue'
        | 'balances.feesBalance'
        | 'balances.feesPaid'
        | 'penaltySettings.loanPenaltyCalculationMethod'
        | 'balances.penaltyDue'
        | 'balances.penaltyPaid'
        | 'balances.penaltyBalance'
        | 'accruedPenalty'
        | 'penaltySettings.penaltyRate'
        | 'arrearsTolerancePeriod'
        | 'interestSettings.interestRate'
        | 'interestSettings.interestSpread'
        | 'totalPaid'
        | 'totalBalance'
        | 'totalDue'
        | 'firstRepaymentDate'
        | 'lastPaymentDate'
        | 'lastPaymentAmount'
        | 'expectedMaturityDate'
        | 'rescheduledAccountKey'
        | 'refinancedAccountId'
        | 'originalAccountKey'
        | 'taxRate'
        | 'taxPaid'
        | 'taxDue'
        | 'settlementAccountKey'
        | 'interestCommission'
        | 'fundingSources.amount'
        | 'fundingSources.sharePercentage'
        | 'numberOfFunds'
        | 'fundsEnabled'
        | 'availableAmount'
        | 'wasRescheduled'
        | 'wasRefinanced'
        | 'prepaymentSettings.prepaymentRecalculationMethod'
        | 'prepaymentSettings.applyInterestOnPrepaymentMethod'
        | 'latePaymentsRecalculationMethod'
        | 'balances.redrawBalance'
        | 'expectedPrincipalRedraw'
        | 'tranches.parentAccountKey'
        | 'tranches.disbursementDetails.disbursementTransactionKey'
        | 'tranches.amount'
        | 'tranches.disbursementDetails.expectedDisbursementDate'
        | 'disbursementDetails.expectedDisbursementDate'
        | 'disbursementDetails.disbursementDate'
        | 'lastAccountAppraisalDate'
        | string
    /**
     * | **Operator**                | **Affected values**  | **Available for**                                                    |
     * |---------------               |----------------------|----------------------------------------------------------------------|
     * | EQUALS                       | ONE_VALUE            | BIG_DECIMAL,BOOLEAN,LONG,MONEY,NUMBER,PERCENT,STRING,ENUM,KEY        |
     * | EQUALS_CASE_SENSITIVE        | ONE_VALUE            | BIG_DECIMAL,BOOLEAN,LONG,MONEY,NUMBER,PERCENT,STRING,ENUM,KEY 		  |
     * | MORE_THAN                    | ONE_VALUE            | BIG_DECIMAL,NUMBER,MONEY                                             |
     * | LESS_THAN                    | ONE_VALUE            | BIG_DECIMAL,NUMBER,MONEY                                             |
     * | BETWEEN                      | TWO_VALUES           | BIG_DECIMAL,NUMBER,MONEY,DATE,DATE_TIME                              |
     * | ON                           | ONE_VALUE            | DATE,DATE_TIME                                                       |
     * | AFTER                        | ONE_VALUE            | DATE,DATE_TIME                                                       |
     * | BEFORE                       | ONE_VALUE            | DATE,DATE_TIME                                                       |
     * | BEFORE_INCLUSIVE             | ONE_VALUE            | DATE,DATE_TIME                                                       |
     * | STARTS_WITH                  | ONE_VALUE            | STRING                                                               |
     * | STARTS_WITH_CASE_SENSITIVE   | ONE_VALUE            | STRING                                                               |
     * | IN                           | LIST                 | ENUM,KEY                                                             |
     * | TODAY                        | NO_VALUE             | DATE,DATE_TIME                                                       |
     * | THIS_WEEK                    | NO_VALUE             | DATE,DATE_TIME                                                       |
     * | THIS_MONTH                   | NO_VALUE             | DATE,DATE_TIME                                                       |
     * | THIS_YEAR                    | NO_VALUE             | DATE,DATE_TIME                                                       |
     * | LAST_DAYS                    | ONE_VALUE            | NUMBER                                                               |
     * | EMPTY                        | NO_VALUE             | BIG_DECIMAL,LONG,MONEY,NUMBER,PERCENT,STRING,ENUM,KEY,DATE,DATE_TIME |
     * | NOT_EMPTY                    | NO_VALUE             | BIG_DECIMAL,LONG,MONEY,NUMBER,PERCENT,STRING,ENUM,KEY,DATE,DATE_TIME |
     */
    operator:
        | 'EQUALS'
        | 'EQUALS_CASE_SENSITIVE'
        | 'DIFFERENT_THAN'
        | 'MORE_THAN'
        | 'LESS_THAN'
        | 'BETWEEN'
        | 'ON'
        | 'AFTER'
        | 'AFTER_INCLUSIVE'
        | 'BEFORE'
        | 'BEFORE_INCLUSIVE'
        | 'STARTS_WITH'
        | 'STARTS_WITH_CASE_SENSITIVE'
        | 'IN'
        | 'TODAY'
        | 'THIS_WEEK'
        | 'THIS_MONTH'
        | 'THIS_YEAR'
        | 'LAST_DAYS'
        | 'EMPTY'
        | 'NOT_EMPTY'
    /**
     * The second value to match the searching criteria, when the `BETWEEN` operator is used.
     */
    secondValue?: string | undefined
    /**
     * The value to match the searching criteria.
     */
    value?: string | undefined
    /**
     * List of values when the `IN` operator is used.
     */
    values?: string[] | undefined
}

/**
 * Represents the information for loan account pay off action.
 */
export interface LoanAccountPayOffInput {
    /**
     * The external ID for the repayment transaction.
     */
    externalId?: string | undefined
    /**
     * The notes for the repayment transaction logged for the pay off action.
     */
    notes?: string | undefined
    payOffAdjustableAmounts?: PayOffAdjustableAmounts | undefined
    transactionDetails?: TransactionDetails | undefined
}

export const LoanAccountPayOffInput = {
    validate: LoanAccountPayOffInputValidator as ValidateFunction<LoanAccountPayOffInput>,
    get schema() {
        return LoanAccountPayOffInput.validate.schema
    },
    get errors() {
        return LoanAccountPayOffInput.validate.errors ?? undefined
    },
    is: (o: unknown): o is LoanAccountPayOffInput => LoanAccountPayOffInput.validate(o) === true,
    parse: (o: unknown): { right: LoanAccountPayOffInput } | { left: DefinedError[] } => {
        if (LoanAccountPayOffInput.is(o)) {
            return { right: o }
        }
        return { left: (LoanAccountPayOffInput.errors ?? []) as DefinedError[] }
    },
} as const

/**
 * Represents the redraw settings for a loan account.
 */
export interface LoanAccountRedrawSettings {
    /**
     * `TRUE` if withdrawing amounts that reduce the next due instalment repayment is restricted, `FALSE` otherwise.
     */
    restrictNextDueWithdrawal: boolean
}

/**
 * Represents a single loan account schedule structure.
 */
export interface LoanAccountSchedule {
    currency?: Currency | undefined
    /**
     * The loan account schedule installments list.
     */
    installments?: Installment[] | undefined
}

export const LoanAccountSchedule = {
    validate: LoanAccountScheduleValidator as ValidateFunction<LoanAccountSchedule>,
    get schema() {
        return LoanAccountSchedule.validate.schema
    },
    get errors() {
        return LoanAccountSchedule.validate.errors ?? undefined
    },
    is: (o: unknown): o is LoanAccountSchedule => LoanAccountSchedule.validate(o) === true,
    parse: (o: unknown): { right: LoanAccountSchedule } | { left: DefinedError[] } => {
        if (LoanAccountSchedule.is(o)) {
            return { right: o }
        }
        return { left: (LoanAccountSchedule.errors ?? []) as DefinedError[] }
    },
} as const

/**
 * Wrapper that holds a list of filtering criteria and a sorting criteria for Loan account directed query
 */
export interface LoanAccountSearchCriteria {
    /**
     * The list of filtering criteria
     */
    filterCriteria?: LoanAccountFilterCriteria[] | undefined
    sortingCriteria?: LoanAccountSortingCriteria | undefined
}

export const LoanAccountSearchCriteria = {
    validate: LoanAccountSearchCriteriaValidator as ValidateFunction<LoanAccountSearchCriteria>,
    get schema() {
        return LoanAccountSearchCriteria.validate.schema
    },
    get errors() {
        return LoanAccountSearchCriteria.validate.errors ?? undefined
    },
    is: (o: unknown): o is LoanAccountSearchCriteria => LoanAccountSearchCriteria.validate(o) === true,
    parse: (o: unknown): { right: LoanAccountSearchCriteria } | { left: DefinedError[] } => {
        if (LoanAccountSearchCriteria.is(o)) {
            return { right: o }
        }
        return { left: (LoanAccountSearchCriteria.errors ?? []) as DefinedError[] }
    },
} as const

/**
 * Represents the sorting criteria used for loan account searches.
 */
export interface LoanAccountSortingCriteria {
    /**
     * Contains the field that can be used as sorting selection. Can be native (one from the provided list) or otherwise can specify a custom field definition using the format [customFieldSetId].[customFieldId].
     */
    field:
        | 'encodedKey'
        | 'loanName'
        | 'id'
        | 'accountHolderId'
        | 'recipient'
        | 'creationDate'
        | 'approvedDate'
        | 'lastModifiedDate'
        | 'lastSetToArrearsDate'
        | 'lastLockedDate'
        | 'closedDate'
        | 'daysInArrears'
        | 'daysLate'
        | 'loanAmount'
        | 'tranches.amount'
        | 'numInstallments'
        | 'accruedInterest'
        | 'accruedPenalty'
        | 'penaltySettings.penaltyRate'
        | 'arrearsTolerancePeriod'
        | 'interestSettings.interestSpread'
        | 'totalPaid'
        | 'totalBalance'
        | 'totalDue'
        | 'firstRepaymentDate'
        | 'lastPaymentDate'
        | 'lastPaymentAmount'
        | 'expectedMaturity'
        | 'rescheduledAccountKey'
        | 'refinancedAccountId'
        | 'originalAccountKey'
        | 'taxRate'
        | 'taxPaid'
        | 'taxDue'
        | 'settlementAccountKey'
        | 'interestCommission'
        | 'numberOfFunds'
        | 'fundsEnabled'
        | 'availableAmount'
        | 'wasRescheduled'
        | 'wasRefinanced'
        | 'expectedPrincipalRedraw'
        | 'balances.principalDue'
        | 'balances.principalPaid'
        | 'balances.principalBalance'
        | 'balances.interestDue'
        | 'balances.interestPaid'
        | 'balance.interestBalance'
        | 'balances.redrawBalance'
        | 'balances.feesDue'
        | 'balances.feesBalance'
        | 'balances.feesPaid'
        | 'balances.penaltyDue'
        | 'balances.penaltyPaid'
        | 'balances.penaltyBalance'
        | 'fundingSources.amount'
        | 'fundingSources.sharePercentage'
    /**
     * The sorting order: `ASC` or `DESC`. The default order is `DESC`.
     */
    order?: 'ASC' | 'DESC' | undefined
}

/**
 * Represents details about an action performed on a loan account.
 */
export interface LoanActionDetails {
    /**
     * The notes for the action performed on a loan account.
     */
    notes?: string | undefined
}

export const LoanActionDetails = {
    validate: LoanActionDetailsValidator as ValidateFunction<LoanActionDetails>,
    get schema() {
        return LoanActionDetails.validate.schema
    },
    get errors() {
        return LoanActionDetails.validate.errors ?? undefined
    },
    is: (o: unknown): o is LoanActionDetails => LoanActionDetails.validate(o) === true,
    parse: (o: unknown): { right: LoanActionDetails } | { left: DefinedError[] } => {
        if (LoanActionDetails.is(o)) {
            return { right: o }
        }
        return { left: (LoanActionDetails.errors ?? []) as DefinedError[] }
    },
} as const

/**
 * The amounts affected after completing the loan transaction
 */
export interface LoanAffectedAmounts {
    /**
     * How much interest pre-paid was added/removed in account, within this transaction (including taxes).
     */
    deferredInterestAmount?: number | undefined
    /**
     * How much fees was added/removed in account, within this transaction.
     */
    feesAmount?: number | undefined
    /**
     * How much interest is given to the investors, within this transaction (only for p2p products)
     */
    fundersInterestAmount?: number | undefined
    /**
     * How much interest was added/removed in account, within this transaction (including taxes). If there is any deferred interest amount set in this transaction, that amount should be included in this field.
     */
    interestAmount?: number | undefined
    /**
     * How much interest from arrears was added/removed in account, within this transaction (including taxes).
     */
    interestFromArrearsAmount?: number | undefined
    /**
     * How much interest is given to the organization, within this transaction (only for p2p products)
     */
    organizationCommissionAmount?: number | undefined
    /**
     * How much Payment Holidays interest was added/removed in account, within this transaction (including taxes).
     */
    paymentHolidaysInterestAmount?: number | undefined
    /**
     * How much penalties was added/removed in account, within this transaction.
     */
    penaltyAmount?: number | undefined
    /**
     * How much principal was added/removed in account, within this transaction.
     */
    principalAmount?: number | undefined
}

/**
 * The loan transaction terms
 */
export interface LoanTerms {
    interestSettings?: TransactionInterestSettings | undefined
    /**
     * The periodic payment value logged when changing it for a Balloon Payments account
     */
    periodicPayment?: number | undefined
    /**
     * The principal payment flat amount logged when changing it for a Revolving Credit account
     */
    principalPaymentAmount?: number | undefined
    /**
     * The principal payment percentage value logged when changing it for a Revolving Credit account
     */
    principalPaymentPercentage?: number | undefined
}

/**
 * In some cases organizations may approve loans but not disburse the full amount initially. They would like to spread the disbursement (and risk) over time. Likewise for the client, they may not need the full loan amount up front. They may want to have a loan to buy some equipment for their business but will make one purchase today and another purchase in a few months.  In these cases, they don't need the full amount and wouldn't want to pay interest on cash they don't need yet. A solution for this matter is the usage of disbursement in tranches. This class holds the information required for one of this tranche.
 */
export interface LoanTranche {
    /**
     * The amount this tranche has available for disburse
     */
    amount: number
    disbursementDetails?: TrancheDisbursementDetails | undefined
    /**
     * The encoded key of the transaction details , auto generated, unique.
     */
    encodedKey?: string | undefined
    /**
     * Fees that are associated with this tranche
     */
    fees?: CustomPredefinedFee[] | undefined
    /**
     * Index indicating the tranche number
     */
    trancheNumber?: number | undefined
}

/**
 * Represents the action performed on a loan account after which the account's amount changes its value.
 */
export interface LoanTransaction {
    accountBalances?: TransactionBalances | undefined
    /**
     * The key of the loan transaction where the adjustment for the transaction was made (if any adjustment was involved).
     */
    adjustmentTransactionKey?: string | undefined
    affectedAmounts?: LoanAffectedAmounts | undefined
    /**
     * The amount that was added or removed on the loan account.
     */
    amount?: number | undefined
    /**
     * The date when the corresponding journal entry is booked.
     */
    bookingDate?: string | undefined
    /**
     * The branch where the transaction was performed.
     */
    branchKey?: string | undefined
    cardTransaction?: CardTransaction | undefined
    /**
     * The center where the transaction was performed.
     */
    centreKey?: string | undefined
    /**
     * The date when this loan transaction was created.
     */
    creationDate?: string | undefined
    currency?: Currency | undefined
    /**
     * The list of custom amounts which the user has paid as part of this transaction.
     */
    customPaymentAmounts?: CustomPaymentAmount[] | undefined
    /**
     * The encoded key of the loan transaction, which is auto generated, and must be unique.
     */
    encodedKey?: string | undefined
    /**
     * The external ID of the loan transaction, it is customizable, and must be unique.
     */
    externalId?: string | undefined
    /**
     * The amounts that have been applied or paid as part of this transaction and involved predefined fees.
     */
    fees?: Fee[] | undefined
    /**
     * The ID of the loan transaction, can be generated and customized, and must be unique.
     */
    id?: string | undefined
    /**
     * The specific installment encoded key associated to the loan transaction.
     */
    installmentEncodedKey?: string | undefined
    /**
     * The migration event encoded key associated with the loan account. If the account was imported, track which 'migration event' it came from.
     */
    migrationEventKey?: string | undefined
    /**
     * The notes or description for the loan transaction.
     */
    notes?: string | undefined
    /**
     * The amount that was posted in a foreign currency. This amount was converted using the exchange rate available at entry date and set into the amount field.
     */
    originalAmount?: number | undefined
    /**
     * The currency in which this transaction was posted. The amounts are stored in the base currency, but the user may enter it in a foreign currency.
     */
    originalCurrencyCode?: string | undefined
    /**
     * The encoded key of the transaction that was adjusted as part of this one. Available only for adjustment transactions.
     */
    originalTransactionKey?: string | undefined
    /**
     * The key of the parent loan account.
     */
    parentAccountKey?: string | undefined
    /**
     * The key of the parent loan transaction.
     */
    parentLoanTransactionKey?: string | undefined
    /**
     * The prepayment recalculation method of the loan transaction.
     */
    prepaymentRecalculationMethod?:
        | 'NO_RECALCULATION'
        | 'RESCHEDULE_REMAINING_REPAYMENTS'
        | 'RECALCULATE_SCHEDULE_KEEP_SAME_NUMBER_OF_TERMS'
        | 'RECALCULATE_SCHEDULE_KEEP_SAME_PRINCIPAL_AMOUNT'
        | 'RECALCULATE_SCHEDULE_KEEP_SAME_TOTAL_REPAYMENT_AMOUNT'
        | 'REDUCE_AMOUNT_PER_INSTALLMENT'
        | 'REDUCE_NUMBER_OF_INSTALLMENTS'
        | 'REDUCE_NUMBER_OF_INSTALLMENTS_NEW'
        | undefined
    taxes?: Taxes | undefined
    terms?: LoanTerms | undefined
    /**
     * The till key associated with the transaction.
     */
    tillKey?: string | undefined
    transactionDetails?: TransactionDetails | undefined
    transferDetails?: TransferDetails | undefined
    /**
     * The type of loan transaction.
     */
    type?:
        | 'IMPORT'
        | 'DISBURSEMENT'
        | 'DISBURSEMENT_ADJUSTMENT'
        | 'WRITE_OFF'
        | 'WRITE_OFF_ADJUSTMENT'
        | 'REPAYMENT'
        | 'PAYMENT_MADE'
        | 'WITHDRAWAL_REDRAW'
        | 'WITHDRAWAL_REDRAW_ADJUSTMENT'
        | 'FEE_APPLIED'
        | 'FEE_CHARGED'
        | 'FEES_DUE_REDUCED'
        | 'FEE_ADJUSTMENT'
        | 'PENALTY_APPLIED'
        | 'PENALTY_ADJUSTMENT'
        | 'PENALTIES_DUE_REDUCED'
        | 'REPAYMENT_ADJUSTMENT'
        | 'PAYMENT_MADE_ADJUSTMENT'
        | 'INTEREST_RATE_CHANGED'
        | 'TAX_RATE_CHANGED'
        | 'PENALTY_RATE_CHANGED'
        | 'INTEREST_APPLIED'
        | 'INTEREST_APPLIED_ADJUSTMENT'
        | 'INTEREST_DUE_REDUCED'
        | 'PENALTY_REDUCTION_ADJUSTMENT'
        | 'FEE_REDUCTION_ADJUSTMENT'
        | 'INTEREST_REDUCTION_ADJUSTMENT'
        | 'DEFERRED_INTEREST_APPLIED'
        | 'DEFERRED_INTEREST_APPLIED_ADJUSTMENT'
        | 'DEFERRED_INTEREST_PAID'
        | 'DEFERRED_INTEREST_PAID_ADJUSTMENT'
        | 'INTEREST_LOCKED'
        | 'FEE_LOCKED'
        | 'PENALTY_LOCKED'
        | 'INTEREST_UNLOCKED'
        | 'FEE_UNLOCKED'
        | 'PENALTY_UNLOCKED'
        | 'REDRAW_TRANSFER'
        | 'REDRAW_REPAYMENT'
        | 'REDRAW_TRANSFER_ADJUSTMENT'
        | 'REDRAW_REPAYMENT_ADJUSTMENT'
        | 'TRANSFER'
        | 'TRANSFER_ADJUSTMENT'
        | 'BRANCH_CHANGED'
        | 'TERMS_CHANGED'
        | 'CARD_TRANSACTION_REVERSAL'
        | 'CARD_TRANSACTION_REVERSAL_ADJUSTMENT'
        | 'DUE_DATE_CHANGED'
        | 'DUE_DATE_CHANGED_ADJUSTMENT'
        | 'ACCOUNT_TERMINATED'
        | 'ACCOUNT_TERMINATED_ADJUSTMENT'
        | undefined
    /**
     * The user that performed the transaction.
     */
    userKey?: string | undefined
    /**
     * The date of the entry in the organization time format and timezone.
     */
    valueDate?: string | undefined
}

/**
 * Represents the loan transaction details.
 */
export interface LoanTransactionDetails {
    /**
     * The encoded key of the entity, generated, globally unique
     */
    encodedKey?: string | undefined
    /**
     * Whether the transaction was transferred between loans or deposit accounts
     */
    internalTransfer?: boolean | undefined
    /**
     * In case of a transaction to a deposit account this represent the deposit account key to which the transaction was made.
     */
    targetDepositAccountKey?: string | undefined
    /**
     * The ID of the transaction channel associated with the transaction details.
     */
    transactionChannelId?: string | undefined
    /**
     * The encoded key of the transaction channel associated with the transaction details.
     */
    transactionChannelKey?: string | undefined
}

export type PatchFundingSourceRequest = PatchOperation[]

export const PatchFundingSourceRequest = {
    validate: PatchFundingSourceRequestValidator as ValidateFunction<PatchFundingSourceRequest>,
    get schema() {
        return PatchFundingSourceRequest.validate.schema
    },
    get errors() {
        return PatchFundingSourceRequest.validate.errors ?? undefined
    },
    is: (o: unknown): o is PatchFundingSourceRequest => PatchFundingSourceRequest.validate(o) === true,
    parse: (o: unknown): { right: PatchFundingSourceRequest } | { left: DefinedError[] } => {
        if (PatchFundingSourceRequest.is(o)) {
            return { right: o }
        }
        return { left: (PatchFundingSourceRequest.errors ?? []) as DefinedError[] }
    },
} as const

/**
 * A single change that needs to be made to a resource
 */
export interface PatchOperation {
    /**
     * The field from where a value should be moved, when using move
     */
    from?: string | undefined
    /**
     * The change to perform
     */
    op: 'ADD' | 'REPLACE' | 'REMOVE' | 'MOVE'
    /**
     * The field to perform the operation on
     */
    path: string
    /**
     * The value of the field, can be null
     */
    value?: unknown
}

export type PatchRequest = PatchOperation[]

export const PatchRequest = {
    validate: PatchRequestValidator as ValidateFunction<PatchRequest>,
    get schema() {
        return PatchRequest.validate.schema
    },
    get errors() {
        return PatchRequest.validate.errors ?? undefined
    },
    is: (o: unknown): o is PatchRequest => PatchRequest.validate(o) === true,
    parse: (o: unknown): { right: PatchRequest } | { left: DefinedError[] } => {
        if (PatchRequest.is(o)) {
            return { right: o }
        }
        return { left: (PatchRequest.errors ?? []) as DefinedError[] }
    },
} as const

/**
 * Adjustable amounts to be paid for Pay Off action
 */
export interface PayOffAdjustableAmounts {
    /**
     * The fee amount to be paid for Pay Off action
     */
    feesPaid?: number | undefined
    /**
     * The interest amount to be paid for Pay Off action
     */
    interestPaid?: number | undefined
    /**
     * The penalty amount to be paid for Pay Off action
     */
    penaltyPaid?: number | undefined
}

/**
 * The penalty settings, holds all the fields regarding penalties
 */
export interface PenaltySettings {
    /**
     * The last penalty calculation method, represents on what amount are the penalties calculated.
     */
    loanPenaltyCalculationMethod?:
        | 'NONE'
        | 'OVERDUE_BALANCE'
        | 'OVERDUE_BALANCE_AND_INTEREST'
        | 'OUTSTANDING_PRINCIPAL'
        | undefined
    /**
     * The penalty rate, represents the rate (in percent) which is charged as a penalty.
     */
    penaltyRate?: number | undefined
}

/**
 * For fixed term loans there is the possibility to define a payment plan. A payment plan consists of multiple periodic payments. This class holds information about a periodic payment.
 */
export interface PeriodicPayment {
    /**
     * The PMT value used in periodic payment
     */
    amount: number
    /**
     * The encoded key of the periodic payment, auto generated, unique.
     */
    encodedKey?: string | undefined
    /**
     * The installment's position up to which the PMT will be used
     */
    toInstallment: number
}

/**
 * For fixed term loans there is the possibility to define a payment plan. A payment plan consists of multiple periodic payments. This class holds information about a periodic payment for schedule preview.
 */
export interface PeriodicPaymentForSchedulePreview {
    /**
     * The PMT value used in periodic payment
     */
    amount: number
    /**
     * The installment's position up to which the PMT will be used
     */
    toInstallment: number
}

/**
 * The planned installment fees encoded keys list
 */
export interface PlannedFeeKeys {
    /**
     * The list of encoded keys of the planned installment fees.
     */
    encodedKeys: string[]
}

export const PlannedFeeKeys = {
    validate: PlannedFeeKeysValidator as ValidateFunction<PlannedFeeKeys>,
    get schema() {
        return PlannedFeeKeys.validate.schema
    },
    get errors() {
        return PlannedFeeKeys.validate.errors ?? undefined
    },
    is: (o: unknown): o is PlannedFeeKeys => PlannedFeeKeys.validate(o) === true,
    parse: (o: unknown): { right: PlannedFeeKeys } | { left: DefinedError[] } => {
        if (PlannedFeeKeys.is(o)) {
            return { right: o }
        }
        return { left: (PlannedFeeKeys.errors ?? []) as DefinedError[] }
    },
} as const

/**
 * The planned fee details holds the information related to the installment key, predefined fee key and amount
 */
export interface PlannedInstallmentFee {
    /**
     * The amount of the planned fee.
     */
    amount?: number | undefined
    /**
     * The date when a planned fee should be applied, overriding installment's due date. It should match the interval of the installment. If it belong to first installment, it should be between disbursement date and installment due date.
     */
    applyOnDate?: string | undefined
    /**
     * The encoded key of the planned installment fee, auto generated, unique.
     */
    encodedKey?: string | undefined
    /**
     * The encoded key of the installment on which the predefined fee is planned.
     */
    installmentKey?: string | undefined
    /**
     * The number of the installment on which the predefined fee is planned. It is used only in the case when fees are created at the same time with the loan account creation or during preview schedule, before account creation, otherwise this should be empty and installmentKey will be used to identify an installment.
     */
    installmentNumber?: number | undefined
    /**
     * The encoded key of the predefined fee which is planned.
     */
    predefinedFeeKey: string
}

/**
 * Represents PMT Adjustment threshold settings for loan accounts and loan products.
 */
export interface PMTAdjustmentThreshold {
    /**
     * The method used to calculate the PMT Adjustment threshold. Supported value is CALENDAR_DAYS
     */
    method?: 'WORKING_DAYS' | 'CALENDAR_DAYS' | undefined
    /**
     * The number of days that trigger a PMT Adjustment.
     */
    numberOfDays?: number | undefined
}

/**
 * The prepayment settings, holds all prepayment properties.
 */
export interface PrepaymentSettings {
    /**
     * Apply interest on prepayment method copied from loan product on which this account is based.
     */
    applyInterestOnPrepaymentMethod?: 'AUTOMATIC' | 'MANUAL' | undefined
    /**
     * The elements recalculation method, indicates how the declining balance with equal installments repayments are recalculated.
     */
    elementsRecalculationMethod?: 'PRINCIPAL_EXPECTED_FIXED' | 'TOTAL_EXPECTED_FIXED' | undefined
    ercFreeAllowanceAmount?: number | undefined
    /**
     * Early repayment charge fee free allowance in percentage per year
     */
    ercFreeAllowancePercentage?: number | undefined
    /**
     * Prepayment recalculation method copied from the loan product on which this account is based.
     */
    prepaymentRecalculationMethod?:
        | 'NO_RECALCULATION'
        | 'RESCHEDULE_REMAINING_REPAYMENTS'
        | 'RECALCULATE_SCHEDULE_KEEP_SAME_NUMBER_OF_TERMS'
        | 'RECALCULATE_SCHEDULE_KEEP_SAME_PRINCIPAL_AMOUNT'
        | 'RECALCULATE_SCHEDULE_KEEP_SAME_TOTAL_REPAYMENT_AMOUNT'
        | 'REDUCE_AMOUNT_PER_INSTALLMENT'
        | 'REDUCE_NUMBER_OF_INSTALLMENTS'
        | 'REDUCE_NUMBER_OF_INSTALLMENTS_NEW'
        | undefined
    /**
     * Installment status for the case when principal is paid off (copied from loan product).
     */
    principalPaidInstallmentStatus?: 'PARTIALLY_PAID' | 'PAID' | 'ORIGINAL_TOTAL_EXPECTED_PAID' | undefined
}

/**
 * Payload structure to preview loan account schedule.
 */
export interface PreviewLoanAccountSchedule {
    disbursementDetails?: DisbursementDetailsForSchedulePreview | undefined
    /**
     * The value of the interest booked by the organization from the accounts funded by investors. Null if the funds are not enable
     */
    interestCommission?: number | undefined
    interestSettings?: InterestSettingsForSchedulePreview | undefined
    /**
     * The loan amount
     */
    loanAmount: number
    /**
     * A list with planned manual fees to be applied on the installments for schedule preview.
     */
    plannedInstallmentFees?: PlannedInstallmentFee[] | undefined
    /**
     * The key to the type of product that this account is based on.
     */
    productTypeKey: string
    scheduleSettings?: ScheduleSettingsForSchedulePreview | undefined
    /**
     * The top up amount in case of a refinanced account
     */
    topUpAmount?: number | undefined
    /**
     * List of tranches to be considered for schedule preview.
     */
    tranches?: LoanTranche[] | undefined
}

export const PreviewLoanAccountSchedule = {
    validate: PreviewLoanAccountScheduleValidator as ValidateFunction<PreviewLoanAccountSchedule>,
    get schema() {
        return PreviewLoanAccountSchedule.validate.schema
    },
    get errors() {
        return PreviewLoanAccountSchedule.validate.errors ?? undefined
    },
    is: (o: unknown): o is PreviewLoanAccountSchedule => PreviewLoanAccountSchedule.validate(o) === true,
    parse: (o: unknown): { right: PreviewLoanAccountSchedule } | { left: DefinedError[] } => {
        if (PreviewLoanAccountSchedule.is(o)) {
            return { right: o }
        }
        return { left: (PreviewLoanAccountSchedule.errors ?? []) as DefinedError[] }
    },
} as const

/**
 * Represents the information to preview the pay off due amounts in a future date.
 */
export interface PreviewPayOffDueAmountsInAFutureDateInput {
    /**
     * The date until which the amounts due for pay off should be calculated
     */
    valueDate: string
}

export const PreviewPayOffDueAmountsInAFutureDateInput = {
    validate: PreviewPayOffDueAmountsInAFutureDateInputValidator as ValidateFunction<PreviewPayOffDueAmountsInAFutureDateInput>,
    get schema() {
        return PreviewPayOffDueAmountsInAFutureDateInput.validate.schema
    },
    get errors() {
        return PreviewPayOffDueAmountsInAFutureDateInput.validate.errors ?? undefined
    },
    is: (o: unknown): o is PreviewPayOffDueAmountsInAFutureDateInput =>
        PreviewPayOffDueAmountsInAFutureDateInput.validate(o) === true,
    parse: (o: unknown): { right: PreviewPayOffDueAmountsInAFutureDateInput } | { left: DefinedError[] } => {
        if (PreviewPayOffDueAmountsInAFutureDateInput.is(o)) {
            return { right: o }
        }
        return { left: (PreviewPayOffDueAmountsInAFutureDateInput.errors ?? []) as DefinedError[] }
    },
} as const

/**
 * Represents a wrapper over a set of due amounts representing pay off due amounts in a future date
 */
export interface PreviewPayOffDueAmountsInAFutureDateWrapper {
    /**
     * The early repayment charge balance due when pay off the account in a future date
     */
    earlyRepaymentCharge?: number | undefined
    /**
     * The fee balance due when pay off the account in a future date
     */
    feeBalance?: number | undefined
    /**
     * The interest balance due when pay off the account in a future date
     */
    interestBalance?: number | undefined
    /**
     * The penalty balance due when pay off the account in a future date
     */
    penaltyBalance?: number | undefined
    /**
     * The principal balance due when pay off the account in a future date
     */
    principalBalance?: number | undefined
    /**
     * The total balance due when pay off the account in a future date
     */
    totalBalance?: number | undefined
}

export const PreviewPayOffDueAmountsInAFutureDateWrapper = {
    validate:
        PreviewPayOffDueAmountsInAFutureDateWrapperValidator as ValidateFunction<PreviewPayOffDueAmountsInAFutureDateWrapper>,
    get schema() {
        return PreviewPayOffDueAmountsInAFutureDateWrapper.validate.schema
    },
    get errors() {
        return PreviewPayOffDueAmountsInAFutureDateWrapper.validate.errors ?? undefined
    },
    is: (o: unknown): o is PreviewPayOffDueAmountsInAFutureDateWrapper =>
        PreviewPayOffDueAmountsInAFutureDateWrapper.validate(o) === true,
    parse: (o: unknown): { right: PreviewPayOffDueAmountsInAFutureDateWrapper } | { left: DefinedError[] } => {
        if (PreviewPayOffDueAmountsInAFutureDateWrapper.is(o)) {
            return { right: o }
        }
        return { left: (PreviewPayOffDueAmountsInAFutureDateWrapper.errors ?? []) as DefinedError[] }
    },
} as const

/**
 * The principal payment account settings, holds the required information for the principal payment process of an account.
 */
export interface PrincipalPaymentAccountSettings {
    /**
     * Fixed amount for being used for the repayments principal due.
     */
    amount?: number | undefined
    /**
     * The encoded key of the principal payment base settings, auto generated, unique.
     */
    encodedKey?: string | undefined
    /**
     * Boolean flag, if true, the fees will be included along with the principal in the repayment floor amount, for a revolving credit account
     */
    includeFeesInFloorAmount?: boolean | undefined
    /**
     * Boolean flag, if true, the interest will be included along with the principal in the repayment floor amount, for a revolving credit account
     */
    includeInterestInFloorAmount?: boolean | undefined
    /**
     * Percentage of principal amount used for the repayments principal due.
     */
    percentage?: number | undefined
    /**
     * The maximum principal due amount a repayment made with this settings can have
     */
    principalCeilingValue?: number | undefined
    /**
     * The minimum principal due amount a repayment made with this settings can have
     */
    principalFloorValue?: number | undefined
    /**
     * The method of principal payment for revolving credit.
     */
    principalPaymentMethod?:
        | 'FLAT'
        | 'OUTSTANDING_PRINCIPAL_PERCENTAGE'
        | 'PRINCIPAL_PERCENTAGE_LAST_DISB'
        | 'TOTAL_BALANCE_PERCENTAGE'
        | 'TOTAL_BALANCE_FLAT'
        | 'TOTAL_PRINCIPAL_PERCENTAGE'
        | undefined
    /**
     * The minimum total due amount a repayment made with this settings can have
     */
    totalDueAmountFloor?: number | undefined
    /**
     * The method of total due payment for revolving credit
     */
    totalDuePayment?:
        | 'FLAT'
        | 'OUTSTANDING_PRINCIPAL_PERCENTAGE'
        | 'PRINCIPAL_PERCENTAGE_LAST_DISB'
        | 'TOTAL_BALANCE_PERCENTAGE'
        | 'TOTAL_BALANCE_FLAT'
        | 'TOTAL_PRINCIPAL_PERCENTAGE'
        | undefined
}

/**
 * The disbursement details, allowed on the loan account refinance
 */
export interface RefinanceDisbursementDetails {
    /**
     * The date of the expected disbursement
     */
    expectedDisbursementDate?: string | undefined
    /**
     * List of fees that should be applied at the disbursement time.
     */
    fees?: CustomPredefinedFee[] | undefined
    /**
     * The date of the expected first payment
     */
    firstRepaymentDate: string
}

/**
 * The new loan account settings, allowed on the loan account refinance
 */
export interface RefinanceLoanAccount {
    accountArrearsSettings?: RestructureAccountArrearsSettings | undefined
    disbursementDetails: RefinanceDisbursementDetails
    /**
     * The encoded key of the entity, generated, globally unique
     */
    encodedKey?: string | undefined
    /**
     * The guarantees associated with the refinanced loan account
     */
    guarantors?: Guarantor[] | undefined
    /**
     * Id of the new loan account.
     */
    id?: string | undefined
    interestSettings?: RestructureInterestSettings | undefined
    /**
     * The name of the new loan account.
     */
    loanName?: string | undefined
    /**
     * The loan account notes
     */
    notes?: string | undefined
    penaltySettings?: RestructurePenaltySettings | undefined
    principalPaymentSettings?: RestructurePrincipalPaymentAccountSettings | undefined
    /**
     * The key of the loan product that this account is based on
     */
    productTypeKey: string
    scheduleSettings?: RestructureScheduleSettings | undefined
}

/**
 * The request structure for performing the refinance loan account action
 */
export interface RefinanceLoanAccountAction {
    /**
     * Keep same account ID option
     */
    keepSameAccountId?: boolean | undefined
    loanAccount: RefinanceLoanAccount
    /**
     * The top-up amount
     */
    topUpAmount: number
    writeOffAmounts?: RefinanceWriteOffAmounts | undefined
}

export const RefinanceLoanAccountAction = {
    validate: RefinanceLoanAccountActionValidator as ValidateFunction<RefinanceLoanAccountAction>,
    get schema() {
        return RefinanceLoanAccountAction.validate.schema
    },
    get errors() {
        return RefinanceLoanAccountAction.validate.errors ?? undefined
    },
    is: (o: unknown): o is RefinanceLoanAccountAction => RefinanceLoanAccountAction.validate(o) === true,
    parse: (o: unknown): { right: RefinanceLoanAccountAction } | { left: DefinedError[] } => {
        if (RefinanceLoanAccountAction.is(o)) {
            return { right: o }
        }
        return { left: (RefinanceLoanAccountAction.errors ?? []) as DefinedError[] }
    },
} as const

/**
 * The write-off amounts, allowed on the loan account refinance
 */
export interface RefinanceWriteOffAmounts {
    /**
     * Fee write-off amount
     */
    fee?: number | undefined
    /**
     * Interest write-off amount
     */
    interest?: number | undefined
    /**
     * Penalty write-off amount
     */
    penalty?: number | undefined
}

/**
 * The disbursement details, allowed on the loan account restructure
 */
export interface RescheduleDisbursementDetails {
    /**
     * The date of the expected first payment
     */
    firstRepaymentDate: string
}

/**
 * The new loan account settings, allowed on the loan account reschedule
 */
export interface RescheduleLoanAccount {
    accountArrearsSettings?: RestructureAccountArrearsSettings | undefined
    disbursementDetails: RescheduleDisbursementDetails
    /**
     * The encoded key of the entity, generated, globally unique
     */
    encodedKey?: string | undefined
    /**
     * The guarantees associated with the rescheduled loan account
     */
    guarantors?: Guarantor[] | undefined
    /**
     * Id of the new loan account.
     */
    id?: string | undefined
    /**
     * The interest commission
     */
    interestCommission?: number | undefined
    interestSettings?: RestructureInterestSettings | undefined
    /**
     * The name of the new loan account.
     */
    loanName?: string | undefined
    /**
     * Notes for the rescheduled loan account
     */
    notes?: string | undefined
    penaltySettings?: RestructurePenaltySettings | undefined
    principalPaymentSettings?: RestructurePrincipalPaymentAccountSettings | undefined
    /**
     * The key of the loan product that this account is based on
     */
    productTypeKey: string
    scheduleSettings?: RestructureScheduleSettings | undefined
}

/**
 * The request payload for performing a reschedule loan account action
 */
export interface RescheduleLoanAccountAction {
    /**
     * Keep same account ID option
     */
    keepSameAccountId?: boolean | undefined
    loanAccount: RescheduleLoanAccount
    writeOffAmounts?: RescheduleWriteOffAmounts | undefined
}

export const RescheduleLoanAccountAction = {
    validate: RescheduleLoanAccountActionValidator as ValidateFunction<RescheduleLoanAccountAction>,
    get schema() {
        return RescheduleLoanAccountAction.validate.schema
    },
    get errors() {
        return RescheduleLoanAccountAction.validate.errors ?? undefined
    },
    is: (o: unknown): o is RescheduleLoanAccountAction => RescheduleLoanAccountAction.validate(o) === true,
    parse: (o: unknown): { right: RescheduleLoanAccountAction } | { left: DefinedError[] } => {
        if (RescheduleLoanAccountAction.is(o)) {
            return { right: o }
        }
        return { left: (RescheduleLoanAccountAction.errors ?? []) as DefinedError[] }
    },
} as const

/**
 * The write-off amounts, allowed on the loan account reschedule
 */
export interface RescheduleWriteOffAmounts {
    /**
     * Fee write-off amount
     */
    fee?: number | undefined
    /**
     * Interest write-off amount
     */
    interest?: number | undefined
    /**
     * Penalty write-off amount
     */
    penalty?: number | undefined
    /**
     * Principal write-off amount
     */
    principal?: number | undefined
}

export interface RestError {
    errorCode?: number | undefined
    errorReason?: string | undefined
    errorSource?: string | undefined
}

/**
 * The arrears settings, allowed on the loan account restructure
 */
export interface RestructureAccountArrearsSettings {
    /**
     * The arrears tolerance amount
     */
    tolerancePercentageOfOutstandingPrincipal?: number | undefined
    /**
     * The arrears tolerance period value
     */
    tolerancePeriod?: number | undefined
}

/**
 * The interest settings, allowed on the loan account restructure
 */
export interface RestructureInterestSettings {
    /**
     * Adjustable interest rates settings for loan account
     */
    accountInterestRateSettings?: AccountInterestRateSettings[] | undefined
    /**
     * The interest rate for the restructured loan account
     */
    interestRate?: number | undefined
    /**
     * The interest spread for the restructured loan account
     */
    interestSpread?: number | undefined
    pmtAdjustmentThreshold?: PMTAdjustmentThreshold | undefined
}

/**
 * The penalty settings, allowed on the loan account restructure.
 */
export interface RestructurePenaltySettings {
    /**
     * The penalty rate
     */
    penaltyRate?: number | undefined
}

/**
 * The principal payment account settings, allowed on the loan account restructure
 */
export interface RestructurePrincipalPaymentAccountSettings {
    /**
     * Fixed principal payment amount
     */
    amount?: number | undefined
    /**
     * Principal payment percentage
     */
    percentage?: number | undefined
}

/**
 * The schedule settings, allowed on the loan account restructure
 */
export interface RestructureScheduleSettings {
    /**
     * The PMT is calculated as the loan would have [amortizationPeriod] installments.
     */
    amortizationPeriod?: number | undefined
    billingCycleDays?: BillingCycleDays | undefined
    /**
     * The days of the month, when the repayment due dates should be
     */
    fixedDaysOfMonth?: number[] | undefined
    /**
     * The grace period
     */
    gracePeriod?: number | undefined
    /**
     * A list of periodic payments for the current loan account.
     */
    paymentPlan?: PeriodicPayment[] | undefined
    /**
     * The periodic payment
     */
    periodicPayment?: number | undefined
    previewSchedule?: RevolvingAccountSettings | undefined
    /**
     * The number of installments
     */
    repaymentInstallments?: number | undefined
    /**
     * The payments frequency per set period of time
     */
    repaymentPeriodCount?: number | undefined
    /**
     * The period of time, within which the payments frequency is set
     */
    repaymentPeriodUnit?: 'DAYS' | 'WEEKS' | 'MONTHS' | 'YEARS' | undefined
}

/**
 * The number of previewed instalments for an account
 */
export interface RevolvingAccountSettings {
    /**
     * The number of previewed instalments
     */
    numberOfPreviewedInstalments?: number | undefined
}

/**
 * The schedule settings, holds all schedule properties.
 */
export interface ScheduleSettings {
    /**
     * The PMT is calculated as the loan would have [amortizationPeriod] installments.
     */
    amortizationPeriod?: number | undefined
    billingCycle?: BillingCycleDays | undefined
    /**
     * The default first repayment due date offset, indicates how many days the first repayment due date should be extended(all other due dates from the schedule are relative to first repayment due date - they will also be affected by the offset)
     */
    defaultFirstRepaymentDueDateOffset?: number | undefined
    /**
     * Specifies the days of the month when the repayment due dates should be. Only available if the Repayment Methodology is FIXED_DAYS_OF_MONTH.
     */
    fixedDaysOfMonth?: number[] | undefined
    /**
     * The grace period. Represents the grace period for loan repayment - in number of installments.
     */
    gracePeriod: number
    /**
     * The grace period type. Representing the type of grace period which is possible for a loan account.
     */
    gracePeriodType?: 'NONE' | 'PAY_INTEREST_ONLY' | 'INTEREST_FORGIVENESS' | undefined
    /**
     * Flag used when the repayments schedule for the current account was determined by the user, by editing the due dates or the principal due
     */
    hasCustomSchedule?: boolean | undefined
    /**
     * A list of periodic payments for the current loan account.
     */
    paymentPlan?: PeriodicPayment[] | undefined
    /**
     * The periodic payment amount for the accounts which have balloon payments or Reduce Number of Installments and Optimized Payments
     */
    periodicPayment?: number | undefined
    previewSchedule?: RevolvingAccountSettings | undefined
    /**
     * The principal repayment interval. Indicates the interval of repayments that the principal has to be paid.
     */
    principalRepaymentInterval?: number | undefined
    /**
     * The repayment installments. Represents how many installments are required to pay back the loan.
     */
    repaymentInstallments?: number | undefined
    /**
     * The repayment period count. Represents how often the loan is to be repaid: stored based on the type repayment option.
     */
    repaymentPeriodCount?: number | undefined
    /**
     * The repayment period unit. Represents the frequency of loan repayment.
     */
    repaymentPeriodUnit?: 'DAYS' | 'WEEKS' | 'MONTHS' | 'YEARS' | undefined
    /**
     * The repayment schedule method. Represents the method that determines whether the schedule will be fixed all over the loan account's life cycle or will be dynamically recomputed when required.
     */
    repaymentScheduleMethod?: 'NONE' | 'FIXED' | 'DYNAMIC' | undefined
    /**
     * The schedule due dates method. Represents the methodology used by this account to compute the due dates of the repayments.
     */
    scheduleDueDatesMethod?: 'INTERVAL' | 'FIXED_DAYS_OF_MONTH' | undefined
    /**
     * The short handling method. Determines how to handle the short months, if they select a fixed day of month > 28. Will be null if no such date is selected and also for the Interval methodology. Only available if the Repayment Methodology is FIXED_DAYS_OF_MONTH.
     */
    shortMonthHandlingMethod?: 'LAST_DAY_IN_MONTH' | 'FIRST_DAY_OF_NEXT_MONTH' | undefined
}

/**
 * The schedule settings, holds all schedule properties needed for schedule preview request.
 */
export interface ScheduleSettingsForSchedulePreview {
    /**
     * The PMT is calculated as the loan would have [amortizationPeriod] installments.
     */
    amortizationPeriod?: number | undefined
    /**
     * Specifies the days of the month when the repayment due dates should be. Only available if the Repayment Methodology is FIXED_DAYS_OF_MONTH.
     */
    fixedDaysOfMonth?: number[] | undefined
    /**
     * The grace period. Represents the grace period for loan repayment - in number of installments.
     */
    gracePeriod?: number | undefined
    /**
     * A list of periodic payments for the current loan account.
     */
    paymentPlan?: PeriodicPaymentForSchedulePreview[] | undefined
    /**
     * The periodic payment amount for the accounts which have balloon payments or Reduce Number of Installments and Optimized Payments
     */
    periodicPayment?: number | undefined
    /**
     * The principal repayment interval. Indicates the interval of repayments that the principal has to be paid.
     */
    principalRepaymentInterval?: number | undefined
    /**
     * The repayment installments. Represents how many installments are required to pay back the loan.
     */
    repaymentInstallments?: number | undefined
    /**
     * The repayment period count. Represents how often the loan is to be repaid: stored based on the type repayment option.
     */
    repaymentPeriodCount?: number | undefined
    /**
     * The repayment period unit. Represents the frequency of loan repayment.
     */
    repaymentPeriodUnit?: 'DAYS' | 'WEEKS' | 'MONTHS' | 'YEARS' | undefined
}

export type SearchResponse = LoanAccount[]

export const SearchResponse = {
    validate: SearchResponseValidator as ValidateFunction<SearchResponse>,
    get schema() {
        return SearchResponse.validate.schema
    },
    get errors() {
        return SearchResponse.validate.errors ?? undefined
    },
    is: (o: unknown): o is SearchResponse => SearchResponse.validate(o) === true,
    parse: (o: unknown): { right: SearchResponse } | { left: DefinedError[] } => {
        if (SearchResponse.is(o)) {
            return { right: o }
        }
        return { left: (SearchResponse.errors ?? []) as DefinedError[] }
    },
} as const

/**
 * The taxes applied within a transaction.
 */
export interface Taxes {
    /**
     * How much taxes on the interest that was pre-paid were added/removed in account, within this transaction. If there is any deferred tax on interest amount set in this transaction, that amount should be included in this field.
     */
    deferredTaxOnInterestAmount?: number | undefined
    /**
     * How much taxes on the fees that were paid in this transaction were added/removed in account, within this transaction.
     */
    taxOnFeesAmount?: number | undefined
    /**
     * How much taxes on the interest that was paid in this transaction were added/removed in account, within this transaction.
     */
    taxOnInterestAmount?: number | undefined
    /**
     * The amount of taxes on the interest from arrears that were applied/paid in account, within this transaction.
     */
    taxOnInterestFromArrearsAmount?: number | undefined
    /**
     * The amount of taxes on the Payment Holidays interest that were added/removed in account, within this transaction.
     */
    taxOnPaymentHolidaysInterest?: number | undefined
    /**
     * How much taxes on the penalties that were paid in this transaction were added/removed in account, within this transaction.
     */
    taxOnPenaltyAmount?: number | undefined
    /**
     * The tax rate that was set or changed in this transaction.
     */
    taxRate?: number | undefined
}

/**
 * Represents the request payload for the terminate a loan account action
 */
export interface TerminateLoanAccountInput {
    /**
     * The notes for the terminate action performed on the loan account
     */
    notes?: string | undefined
    /**
     * The date when terminate the loan account
     */
    valueDate: string
}

export const TerminateLoanAccountInput = {
    validate: TerminateLoanAccountInputValidator as ValidateFunction<TerminateLoanAccountInput>,
    get schema() {
        return TerminateLoanAccountInput.validate.schema
    },
    get errors() {
        return TerminateLoanAccountInput.validate.errors ?? undefined
    },
    is: (o: unknown): o is TerminateLoanAccountInput => TerminateLoanAccountInput.validate(o) === true,
    parse: (o: unknown): { right: TerminateLoanAccountInput } | { left: DefinedError[] } => {
        if (TerminateLoanAccountInput.is(o)) {
            return { right: o }
        }
        return { left: (TerminateLoanAccountInput.errors ?? []) as DefinedError[] }
    },
} as const

/**
 * The disbursement details regarding a loan tranche.
 */
export interface TrancheDisbursementDetails {
    /**
     * The key of the disbursement transaction logged when this tranche was disbursed. This field will be null until the tranche disbursement
     */
    disbursementTransactionKey?: string | undefined
    /**
     * The date when this tranche is supposed to be disbursed (as Organization Time)
     */
    expectedDisbursementDate?: string | undefined
}

/**
 * The balances changed within a transaction.
 */
export interface TransactionBalances {
    /**
     * Captures the advance (prepaid) amount.
     */
    advancePosition?: number | undefined
    /**
     * Captures the arrears position amount for the account in arrears.
     */
    arrearsPosition?: number | undefined
    /**
     * The difference between principal balance and redraw balance after each transaction performed on the loan account.
     */
    expectedPrincipalRedraw?: number | undefined
    /**
     * The account redraw balance captured after the transaction update.
     */
    principalBalance?: number | undefined
    /**
     * The account redraw balance captured after the transaction update.
     */
    redrawBalance?: number | undefined
    /**
     * The running balance still owed for the loan.
     */
    totalBalance?: number | undefined
}

/**
 * Contains the details about transaction including fields like transaction channel key and channel id
 */
export interface TransactionDetails {
    /**
     * The id of the transaction channel associated with the transaction details.
     */
    transactionChannelId?: string | undefined
    /**
     * The encoded key of the transaction channel associated with the transaction details.
     */
    transactionChannelKey?: string | undefined
}

/**
 * The interest settings, holds all the properties regarding interests for the loan account.
 */
export interface TransactionInterestSettings {
    /**
     * The value of the index interest rate
     */
    indexInterestRate?: number | undefined
    /**
     * The interest rate. Represents the interest rate for the loan account. The interest on loans is accrued on a daily basis, which allows charging the clients only for the days they actually used the loan amount.
     */
    interestRate?: number | undefined
}

/**
 * Represents the transfer details, such as the linked transaction key
 */
export interface TransferDetails {
    /**
     * The key of the related deposit transaction
     */
    linkedDepositTransactionKey?: string | undefined
    /**
     * The key of the related loan transaction
     */
    linkedLoanTransactionKey?: string | undefined
}

export type UpdateLoanAccountFundingSourcesRequest = InvestorFund[]

export const UpdateLoanAccountFundingSourcesRequest = {
    validate: UpdateLoanAccountFundingSourcesRequestValidator as ValidateFunction<UpdateLoanAccountFundingSourcesRequest>,
    get schema() {
        return UpdateLoanAccountFundingSourcesRequest.validate.schema
    },
    get errors() {
        return UpdateLoanAccountFundingSourcesRequest.validate.errors ?? undefined
    },
    is: (o: unknown): o is UpdateLoanAccountFundingSourcesRequest => UpdateLoanAccountFundingSourcesRequest.validate(o) === true,
    parse: (o: unknown): { right: UpdateLoanAccountFundingSourcesRequest } | { left: DefinedError[] } => {
        if (UpdateLoanAccountFundingSourcesRequest.is(o)) {
            return { right: o }
        }
        return { left: (UpdateLoanAccountFundingSourcesRequest.errors ?? []) as DefinedError[] }
    },
} as const

export type UpdateLoanAccountFundingSourcesResponse = InvestorFund[]

export const UpdateLoanAccountFundingSourcesResponse = {
    validate: UpdateLoanAccountFundingSourcesResponseValidator as ValidateFunction<UpdateLoanAccountFundingSourcesResponse>,
    get schema() {
        return UpdateLoanAccountFundingSourcesResponse.validate.schema
    },
    get errors() {
        return UpdateLoanAccountFundingSourcesResponse.validate.errors ?? undefined
    },
    is: (o: unknown): o is UpdateLoanAccountFundingSourcesResponse =>
        UpdateLoanAccountFundingSourcesResponse.validate(o) === true,
    parse: (o: unknown): { right: UpdateLoanAccountFundingSourcesResponse } | { left: DefinedError[] } => {
        if (UpdateLoanAccountFundingSourcesResponse.is(o)) {
            return { right: o }
        }
        return { left: (UpdateLoanAccountFundingSourcesResponse.errors ?? []) as DefinedError[] }
    },
} as const

export type UpdatePlannedFeesRequest = PlannedInstallmentFee[]

export const UpdatePlannedFeesRequest = {
    validate: UpdatePlannedFeesRequestValidator as ValidateFunction<UpdatePlannedFeesRequest>,
    get schema() {
        return UpdatePlannedFeesRequest.validate.schema
    },
    get errors() {
        return UpdatePlannedFeesRequest.validate.errors ?? undefined
    },
    is: (o: unknown): o is UpdatePlannedFeesRequest => UpdatePlannedFeesRequest.validate(o) === true,
    parse: (o: unknown): { right: UpdatePlannedFeesRequest } | { left: DefinedError[] } => {
        if (UpdatePlannedFeesRequest.is(o)) {
            return { right: o }
        }
        return { left: (UpdatePlannedFeesRequest.errors ?? []) as DefinedError[] }
    },
} as const

export type UpdatePlannedFeesResponse = PlannedInstallmentFee[]

export const UpdatePlannedFeesResponse = {
    validate: UpdatePlannedFeesResponseValidator as ValidateFunction<UpdatePlannedFeesResponse>,
    get schema() {
        return UpdatePlannedFeesResponse.validate.schema
    },
    get errors() {
        return UpdatePlannedFeesResponse.validate.errors ?? undefined
    },
    is: (o: unknown): o is UpdatePlannedFeesResponse => UpdatePlannedFeesResponse.validate(o) === true,
    parse: (o: unknown): { right: UpdatePlannedFeesResponse } | { left: DefinedError[] } => {
        if (UpdatePlannedFeesResponse.is(o)) {
            return { right: o }
        }
        return { left: (UpdatePlannedFeesResponse.errors ?? []) as DefinedError[] }
    },
} as const
