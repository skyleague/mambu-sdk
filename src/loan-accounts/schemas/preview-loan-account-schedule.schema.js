/* eslint-disable */
// @ts-nocheck
/**
 * Generated by Ajv https://ajv.js.org/guide/managing-schemas.html#standalone-validation-code
 */
import {createRequire} from 'module';const require = createRequire(import.meta.url);"use strict";
/** @type {unknown} */
export const validate = validate10;export default validate10;const schema11 = {"$schema":"http://json-schema.org/draft-07/schema#","title":"PreviewLoanAccountSchedule","type":"object","description":"Payload structure to preview loan account schedule.","properties":{"disbursementDetails":{"$ref":"#/$defs/DisbursementDetailsForSchedulePreview"},"interestCommission":{"type":"number","description":"The value of the interest booked by the organization from the accounts funded by investors. Null if the funds are not enable"},"interestSettings":{"$ref":"#/$defs/InterestSettingsForSchedulePreview"},"loanAmount":{"type":"number","description":"The loan amount"},"plannedInstallmentFees":{"type":"array","description":"A list with planned manual fees to be applied on the installments for schedule preview.","items":{"$ref":"#/$defs/PlannedInstallmentFee"}},"productTypeKey":{"type":"string","description":"The key to the type of product that this account is based on."},"scheduleSettings":{"$ref":"#/$defs/ScheduleSettingsForSchedulePreview"},"topUpAmount":{"type":"number","description":"The top up amount in case of a refinanced account"},"tranches":{"type":"array","description":"List of tranches to be considered for schedule preview.","items":{"$ref":"#/$defs/LoanTranche"}}},"required":["loanAmount","productTypeKey"],"additionalProperties":true,"$defs":{"DisbursementDetailsForSchedulePreview":{"type":"object","description":"The the disbursement details it holds the information related to the disbursement details as disbursement date, first repayment date, disbursement fees.","properties":{"expectedDisbursementDate":{"type":"string","description":"The date of the expected disbursement.Stored as Organization Time.","format":"date-time"},"fees":{"type":"array","description":"List of fees that should be applied at the disbursement time.","items":{"$ref":"#/$defs/CustomPredefinedFee"}},"firstRepaymentDate":{"type":"string","description":"The date of the expected first repayment. Stored as Organization Time.","format":"date-time"}},"additionalProperties":true},"CustomPredefinedFee":{"type":"object","description":"The custom predefined fees, they may be used as the expected predefined fees that will be applied on the disbursement.","properties":{"amount":{"type":"number","description":"The amount of the custom fee."},"encodedKey":{"type":"string","description":"The encoded key of the custom predefined fee, auto generated, unique."},"percentage":{"type":"number","description":"The percentage of the custom fee."},"predefinedFeeEncodedKey":{"type":"string","description":"The encoded key of the predefined fee"}},"additionalProperties":true},"InterestSettingsForSchedulePreview":{"type":"object","description":"The interest settings, holds all the properties regarding interests for the loan account.","properties":{"accountInterestRateSettings":{"type":"array","description":"The interest settings details for schedule preview.","items":{"$ref":"#/$defs/AccountInterestRateSettings"}},"interestRate":{"type":"number","description":"The interest rate. Represents the interest rate for the loan account. The interest on loans is accrued on a daily basis, which allows charging the clients only for the days they actually used the loan amount."},"interestSpread":{"type":"number","description":"Interest to be added to active organization index interest rate in order to find out actual interest rate"}},"additionalProperties":true},"AccountInterestRateSettings":{"type":"object","description":"Adjustable interest rates settings for loan account","properties":{"encodedKey":{"type":"string","description":"The encoded key of the interest rate settings, auto generated, unique"},"indexSourceKey":{"type":"string","description":"Index rate source key."},"interestRate":{"type":"number","description":"Interest rate value."},"interestRateCeilingValue":{"type":"number","description":"Maximum value allowed for index based interest rate. Valid only for index interest rate."},"interestRateFloorValue":{"type":"number","description":"Minimum value allowed for index based interest rate. Valid only for index interest rate."},"interestRateReviewCount":{"type":"integer","description":"Interest rate review frequency unit count. Valid only for index interest rate."},"interestRateReviewUnit":{"description":"Interest rate review frequency measurement unit. Valid only for index interest rate.","enum":["DAYS","WEEKS","MONTHS"]},"interestRateSource":{"description":"Interest calculation method: fixed or indexed(interest spread + active organization index interest rate)","enum":["FIXED_INTEREST_RATE","INDEX_INTEREST_RATE"]},"interestSpread":{"type":"number","description":"Interest spread value."},"validFrom":{"type":"string","description":"Date since an interest rate is valid","format":"date-time"}},"required":["interestRateSource","validFrom"],"additionalProperties":true},"PlannedInstallmentFee":{"type":"object","description":"The planned fee details holds the information related to the installment key, predefined fee key and amount","properties":{"amount":{"type":"number","description":"The amount of the planned fee."},"applyOnDate":{"type":"string","description":"The date when a planned fee should be applied, overriding installment's due date. It should match the interval of the installment. If it belong to first installment, it should be between disbursement date and installment due date.","format":"date-time"},"encodedKey":{"type":"string","description":"The encoded key of the planned installment fee, auto generated, unique."},"installmentKey":{"type":"string","description":"The encoded key of the installment on which the predefined fee is planned."},"installmentNumber":{"type":"integer","description":"The number of the installment on which the predefined fee is planned. It is used only in the case when fees are created at the same time with the loan account creation or during preview schedule, before account creation, otherwise this should be empty and installmentKey will be used to identify an installment."},"predefinedFeeKey":{"type":"string","description":"The encoded key of the predefined fee which is planned."}},"required":["predefinedFeeKey"],"additionalProperties":true},"ScheduleSettingsForSchedulePreview":{"type":"object","description":"The schedule settings, holds all schedule properties needed for schedule preview request.","properties":{"fixedDaysOfMonth":{"type":"array","description":"Specifies the days of the month when the repayment due dates should be. Only available if the Repayment Methodology is FIXED_DAYS_OF_MONTH.","items":{"type":"integer"}},"gracePeriod":{"type":"integer","description":"The grace period. Represents the grace period for loan repayment - in number of installments."},"paymentPlan":{"type":"array","description":"A list of periodic payments for the current loan account.","items":{"$ref":"#/$defs/PeriodicPaymentForSchedulePreview"}},"periodicPayment":{"type":"number","description":"The periodic payment amount for the accounts which have balloon payments or Reduce Number of Installments and Optimized Payments"},"principalRepaymentInterval":{"type":"integer","description":"The principal repayment interval. Indicates the interval of repayments that the principal has to be paid."},"repaymentInstallments":{"type":"integer","description":"The repayment installments. Represents how many installments are required to pay back the loan."},"repaymentPeriodCount":{"type":"integer","description":"The repayment period count. Represents how often the loan is to be repaid: stored based on the type repayment option."},"repaymentPeriodUnit":{"description":"The repayment period unit. Represents the frequency of loan repayment.","enum":["DAYS","WEEKS","MONTHS","YEARS"]}},"additionalProperties":true},"PeriodicPaymentForSchedulePreview":{"type":"object","description":"For fixed term loans there is the possibility to define a payment plan. A payment plan consists of multiple periodic payments. This class holds information about a periodic payment for schedule preview.","properties":{"amount":{"type":"number","description":"The PMT value used in periodic payment"},"toInstallment":{"type":"integer","description":"The installment's position up to which the PMT will be used"}},"required":["amount","toInstallment"],"additionalProperties":true},"LoanTranche":{"type":"object","description":"In some cases organizations may approve loans but not disburse the full amount initially. They would like to spread the disbursement (and risk) over time. Likewise for the client, they may not need the full loan amount up front. They may want to have a loan to buy some equipment for their business but will make one purchase today and another purchase in a few months.  In these cases, they don't need the full amount and wouldn't want to pay interest on cash they don't need yet. A solution for this matter is the usage of disbursement in tranches. This class holds the information required for one of this tranche. ","properties":{"amount":{"type":"number","description":"The amount this tranche has available for disburse"},"disbursementDetails":{"$ref":"#/$defs/TrancheDisbursementDetails"},"encodedKey":{"type":"string","description":"The encoded key of the transaction details , auto generated, unique."},"fees":{"type":"array","description":"Fees that are associated with this tranche","items":{"$ref":"#/$defs/CustomPredefinedFee"}},"trancheNumber":{"type":"integer","description":"Index indicating the tranche number"}},"required":["amount"],"additionalProperties":true},"TrancheDisbursementDetails":{"type":"object","description":"The disbursement details regarding a loan tranche.","properties":{"disbursementTransactionKey":{"type":"string","description":"The key of the disbursement transaction logged when this tranche was disbursed. This field will be null until the tranche disbursement"},"expectedDisbursementDate":{"type":"string","description":"The date when this tranche is supposed to be disbursed (as Organization Time)","format":"date-time"}},"additionalProperties":true}}};const schema16 = {"type":"object","description":"The planned fee details holds the information related to the installment key, predefined fee key and amount","properties":{"amount":{"type":"number","description":"The amount of the planned fee."},"applyOnDate":{"type":"string","description":"The date when a planned fee should be applied, overriding installment's due date. It should match the interval of the installment. If it belong to first installment, it should be between disbursement date and installment due date.","format":"date-time"},"encodedKey":{"type":"string","description":"The encoded key of the planned installment fee, auto generated, unique."},"installmentKey":{"type":"string","description":"The encoded key of the installment on which the predefined fee is planned."},"installmentNumber":{"type":"integer","description":"The number of the installment on which the predefined fee is planned. It is used only in the case when fees are created at the same time with the loan account creation or during preview schedule, before account creation, otherwise this should be empty and installmentKey will be used to identify an installment."},"predefinedFeeKey":{"type":"string","description":"The encoded key of the predefined fee which is planned."}},"required":["predefinedFeeKey"],"additionalProperties":true};const schema12 = {"type":"object","description":"The the disbursement details it holds the information related to the disbursement details as disbursement date, first repayment date, disbursement fees.","properties":{"expectedDisbursementDate":{"type":"string","description":"The date of the expected disbursement.Stored as Organization Time.","format":"date-time"},"fees":{"type":"array","description":"List of fees that should be applied at the disbursement time.","items":{"$ref":"#/$defs/CustomPredefinedFee"}},"firstRepaymentDate":{"type":"string","description":"The date of the expected first repayment. Stored as Organization Time.","format":"date-time"}},"additionalProperties":true};const schema13 = {"type":"object","description":"The custom predefined fees, they may be used as the expected predefined fees that will be applied on the disbursement.","properties":{"amount":{"type":"number","description":"The amount of the custom fee."},"encodedKey":{"type":"string","description":"The encoded key of the custom predefined fee, auto generated, unique."},"percentage":{"type":"number","description":"The percentage of the custom fee."},"predefinedFeeEncodedKey":{"type":"string","description":"The encoded key of the predefined fee"}},"additionalProperties":true};const formats0 = require("ajv-formats/dist/formats").fullFormats["date-time"];function validate11(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){let vErrors = null;let errors = 0;if(errors === 0){if(data && typeof data == "object" && !Array.isArray(data)){if(data.expectedDisbursementDate !== undefined){let data0 = data.expectedDisbursementDate;const _errs2 = errors;if(errors === _errs2){if(errors === _errs2){if(typeof data0 === "string"){if(!(formats0.validate(data0))){validate11.errors = [{instancePath:instancePath+"/expectedDisbursementDate",schemaPath:"#/properties/expectedDisbursementDate/format",keyword:"format",params:{format: "date-time"},message:"must match format \""+"date-time"+"\""}];return false;}}else {validate11.errors = [{instancePath:instancePath+"/expectedDisbursementDate",schemaPath:"#/properties/expectedDisbursementDate/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}}var valid0 = _errs2 === errors;}else {var valid0 = true;}if(valid0){if(data.fees !== undefined){let data1 = data.fees;const _errs4 = errors;if(errors === _errs4){if(Array.isArray(data1)){var valid1 = true;const len0 = data1.length;for(let i0=0; i0<len0; i0++){let data2 = data1[i0];const _errs6 = errors;const _errs7 = errors;if(errors === _errs7){if(data2 && typeof data2 == "object" && !Array.isArray(data2)){if(data2.amount !== undefined){let data3 = data2.amount;const _errs10 = errors;if(!((typeof data3 == "number") && (isFinite(data3)))){validate11.errors = [{instancePath:instancePath+"/fees/" + i0+"/amount",schemaPath:"#/$defs/CustomPredefinedFee/properties/amount/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid3 = _errs10 === errors;}else {var valid3 = true;}if(valid3){if(data2.encodedKey !== undefined){const _errs12 = errors;if(typeof data2.encodedKey !== "string"){validate11.errors = [{instancePath:instancePath+"/fees/" + i0+"/encodedKey",schemaPath:"#/$defs/CustomPredefinedFee/properties/encodedKey/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid3 = _errs12 === errors;}else {var valid3 = true;}if(valid3){if(data2.percentage !== undefined){let data5 = data2.percentage;const _errs14 = errors;if(!((typeof data5 == "number") && (isFinite(data5)))){validate11.errors = [{instancePath:instancePath+"/fees/" + i0+"/percentage",schemaPath:"#/$defs/CustomPredefinedFee/properties/percentage/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid3 = _errs14 === errors;}else {var valid3 = true;}if(valid3){if(data2.predefinedFeeEncodedKey !== undefined){const _errs16 = errors;if(typeof data2.predefinedFeeEncodedKey !== "string"){validate11.errors = [{instancePath:instancePath+"/fees/" + i0+"/predefinedFeeEncodedKey",schemaPath:"#/$defs/CustomPredefinedFee/properties/predefinedFeeEncodedKey/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid3 = _errs16 === errors;}else {var valid3 = true;}}}}}else {validate11.errors = [{instancePath:instancePath+"/fees/" + i0,schemaPath:"#/$defs/CustomPredefinedFee/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}var valid1 = _errs6 === errors;if(!valid1){break;}}}else {validate11.errors = [{instancePath:instancePath+"/fees",schemaPath:"#/properties/fees/type",keyword:"type",params:{type: "array"},message:"must be array"}];return false;}}var valid0 = _errs4 === errors;}else {var valid0 = true;}if(valid0){if(data.firstRepaymentDate !== undefined){let data7 = data.firstRepaymentDate;const _errs18 = errors;if(errors === _errs18){if(errors === _errs18){if(typeof data7 === "string"){if(!(formats0.validate(data7))){validate11.errors = [{instancePath:instancePath+"/firstRepaymentDate",schemaPath:"#/properties/firstRepaymentDate/format",keyword:"format",params:{format: "date-time"},message:"must match format \""+"date-time"+"\""}];return false;}}else {validate11.errors = [{instancePath:instancePath+"/firstRepaymentDate",schemaPath:"#/properties/firstRepaymentDate/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}}var valid0 = _errs18 === errors;}else {var valid0 = true;}}}}else {validate11.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}validate11.errors = vErrors;return errors === 0;}const schema14 = {"type":"object","description":"The interest settings, holds all the properties regarding interests for the loan account.","properties":{"accountInterestRateSettings":{"type":"array","description":"The interest settings details for schedule preview.","items":{"$ref":"#/$defs/AccountInterestRateSettings"}},"interestRate":{"type":"number","description":"The interest rate. Represents the interest rate for the loan account. The interest on loans is accrued on a daily basis, which allows charging the clients only for the days they actually used the loan amount."},"interestSpread":{"type":"number","description":"Interest to be added to active organization index interest rate in order to find out actual interest rate"}},"additionalProperties":true};const schema15 = {"type":"object","description":"Adjustable interest rates settings for loan account","properties":{"encodedKey":{"type":"string","description":"The encoded key of the interest rate settings, auto generated, unique"},"indexSourceKey":{"type":"string","description":"Index rate source key."},"interestRate":{"type":"number","description":"Interest rate value."},"interestRateCeilingValue":{"type":"number","description":"Maximum value allowed for index based interest rate. Valid only for index interest rate."},"interestRateFloorValue":{"type":"number","description":"Minimum value allowed for index based interest rate. Valid only for index interest rate."},"interestRateReviewCount":{"type":"integer","description":"Interest rate review frequency unit count. Valid only for index interest rate."},"interestRateReviewUnit":{"description":"Interest rate review frequency measurement unit. Valid only for index interest rate.","enum":["DAYS","WEEKS","MONTHS"]},"interestRateSource":{"description":"Interest calculation method: fixed or indexed(interest spread + active organization index interest rate)","enum":["FIXED_INTEREST_RATE","INDEX_INTEREST_RATE"]},"interestSpread":{"type":"number","description":"Interest spread value."},"validFrom":{"type":"string","description":"Date since an interest rate is valid","format":"date-time"}},"required":["interestRateSource","validFrom"],"additionalProperties":true};function validate13(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){let vErrors = null;let errors = 0;if(errors === 0){if(data && typeof data == "object" && !Array.isArray(data)){if(data.accountInterestRateSettings !== undefined){let data0 = data.accountInterestRateSettings;const _errs2 = errors;if(errors === _errs2){if(Array.isArray(data0)){var valid1 = true;const len0 = data0.length;for(let i0=0; i0<len0; i0++){let data1 = data0[i0];const _errs4 = errors;const _errs5 = errors;if(errors === _errs5){if(data1 && typeof data1 == "object" && !Array.isArray(data1)){let missing0;if(((data1.interestRateSource === undefined) && (missing0 = "interestRateSource")) || ((data1.validFrom === undefined) && (missing0 = "validFrom"))){validate13.errors = [{instancePath:instancePath+"/accountInterestRateSettings/" + i0,schemaPath:"#/$defs/AccountInterestRateSettings/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];return false;}else {if(data1.encodedKey !== undefined){const _errs8 = errors;if(typeof data1.encodedKey !== "string"){validate13.errors = [{instancePath:instancePath+"/accountInterestRateSettings/" + i0+"/encodedKey",schemaPath:"#/$defs/AccountInterestRateSettings/properties/encodedKey/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid3 = _errs8 === errors;}else {var valid3 = true;}if(valid3){if(data1.indexSourceKey !== undefined){const _errs10 = errors;if(typeof data1.indexSourceKey !== "string"){validate13.errors = [{instancePath:instancePath+"/accountInterestRateSettings/" + i0+"/indexSourceKey",schemaPath:"#/$defs/AccountInterestRateSettings/properties/indexSourceKey/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid3 = _errs10 === errors;}else {var valid3 = true;}if(valid3){if(data1.interestRate !== undefined){let data4 = data1.interestRate;const _errs12 = errors;if(!((typeof data4 == "number") && (isFinite(data4)))){validate13.errors = [{instancePath:instancePath+"/accountInterestRateSettings/" + i0+"/interestRate",schemaPath:"#/$defs/AccountInterestRateSettings/properties/interestRate/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid3 = _errs12 === errors;}else {var valid3 = true;}if(valid3){if(data1.interestRateCeilingValue !== undefined){let data5 = data1.interestRateCeilingValue;const _errs14 = errors;if(!((typeof data5 == "number") && (isFinite(data5)))){validate13.errors = [{instancePath:instancePath+"/accountInterestRateSettings/" + i0+"/interestRateCeilingValue",schemaPath:"#/$defs/AccountInterestRateSettings/properties/interestRateCeilingValue/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid3 = _errs14 === errors;}else {var valid3 = true;}if(valid3){if(data1.interestRateFloorValue !== undefined){let data6 = data1.interestRateFloorValue;const _errs16 = errors;if(!((typeof data6 == "number") && (isFinite(data6)))){validate13.errors = [{instancePath:instancePath+"/accountInterestRateSettings/" + i0+"/interestRateFloorValue",schemaPath:"#/$defs/AccountInterestRateSettings/properties/interestRateFloorValue/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid3 = _errs16 === errors;}else {var valid3 = true;}if(valid3){if(data1.interestRateReviewCount !== undefined){let data7 = data1.interestRateReviewCount;const _errs18 = errors;if(!(((typeof data7 == "number") && (!(data7 % 1) && !isNaN(data7))) && (isFinite(data7)))){validate13.errors = [{instancePath:instancePath+"/accountInterestRateSettings/" + i0+"/interestRateReviewCount",schemaPath:"#/$defs/AccountInterestRateSettings/properties/interestRateReviewCount/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];return false;}var valid3 = _errs18 === errors;}else {var valid3 = true;}if(valid3){if(data1.interestRateReviewUnit !== undefined){let data8 = data1.interestRateReviewUnit;const _errs20 = errors;if(!(((data8 === "DAYS") || (data8 === "WEEKS")) || (data8 === "MONTHS"))){validate13.errors = [{instancePath:instancePath+"/accountInterestRateSettings/" + i0+"/interestRateReviewUnit",schemaPath:"#/$defs/AccountInterestRateSettings/properties/interestRateReviewUnit/enum",keyword:"enum",params:{allowedValues: schema15.properties.interestRateReviewUnit.enum},message:"must be equal to one of the allowed values"}];return false;}var valid3 = _errs20 === errors;}else {var valid3 = true;}if(valid3){if(data1.interestRateSource !== undefined){let data9 = data1.interestRateSource;const _errs21 = errors;if(!((data9 === "FIXED_INTEREST_RATE") || (data9 === "INDEX_INTEREST_RATE"))){validate13.errors = [{instancePath:instancePath+"/accountInterestRateSettings/" + i0+"/interestRateSource",schemaPath:"#/$defs/AccountInterestRateSettings/properties/interestRateSource/enum",keyword:"enum",params:{allowedValues: schema15.properties.interestRateSource.enum},message:"must be equal to one of the allowed values"}];return false;}var valid3 = _errs21 === errors;}else {var valid3 = true;}if(valid3){if(data1.interestSpread !== undefined){let data10 = data1.interestSpread;const _errs22 = errors;if(!((typeof data10 == "number") && (isFinite(data10)))){validate13.errors = [{instancePath:instancePath+"/accountInterestRateSettings/" + i0+"/interestSpread",schemaPath:"#/$defs/AccountInterestRateSettings/properties/interestSpread/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid3 = _errs22 === errors;}else {var valid3 = true;}if(valid3){if(data1.validFrom !== undefined){let data11 = data1.validFrom;const _errs24 = errors;if(errors === _errs24){if(errors === _errs24){if(typeof data11 === "string"){if(!(formats0.validate(data11))){validate13.errors = [{instancePath:instancePath+"/accountInterestRateSettings/" + i0+"/validFrom",schemaPath:"#/$defs/AccountInterestRateSettings/properties/validFrom/format",keyword:"format",params:{format: "date-time"},message:"must match format \""+"date-time"+"\""}];return false;}}else {validate13.errors = [{instancePath:instancePath+"/accountInterestRateSettings/" + i0+"/validFrom",schemaPath:"#/$defs/AccountInterestRateSettings/properties/validFrom/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}}var valid3 = _errs24 === errors;}else {var valid3 = true;}}}}}}}}}}}}else {validate13.errors = [{instancePath:instancePath+"/accountInterestRateSettings/" + i0,schemaPath:"#/$defs/AccountInterestRateSettings/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}var valid1 = _errs4 === errors;if(!valid1){break;}}}else {validate13.errors = [{instancePath:instancePath+"/accountInterestRateSettings",schemaPath:"#/properties/accountInterestRateSettings/type",keyword:"type",params:{type: "array"},message:"must be array"}];return false;}}var valid0 = _errs2 === errors;}else {var valid0 = true;}if(valid0){if(data.interestRate !== undefined){let data12 = data.interestRate;const _errs26 = errors;if(!((typeof data12 == "number") && (isFinite(data12)))){validate13.errors = [{instancePath:instancePath+"/interestRate",schemaPath:"#/properties/interestRate/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid0 = _errs26 === errors;}else {var valid0 = true;}if(valid0){if(data.interestSpread !== undefined){let data13 = data.interestSpread;const _errs28 = errors;if(!((typeof data13 == "number") && (isFinite(data13)))){validate13.errors = [{instancePath:instancePath+"/interestSpread",schemaPath:"#/properties/interestSpread/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid0 = _errs28 === errors;}else {var valid0 = true;}}}}else {validate13.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}validate13.errors = vErrors;return errors === 0;}const schema17 = {"type":"object","description":"The schedule settings, holds all schedule properties needed for schedule preview request.","properties":{"fixedDaysOfMonth":{"type":"array","description":"Specifies the days of the month when the repayment due dates should be. Only available if the Repayment Methodology is FIXED_DAYS_OF_MONTH.","items":{"type":"integer"}},"gracePeriod":{"type":"integer","description":"The grace period. Represents the grace period for loan repayment - in number of installments."},"paymentPlan":{"type":"array","description":"A list of periodic payments for the current loan account.","items":{"$ref":"#/$defs/PeriodicPaymentForSchedulePreview"}},"periodicPayment":{"type":"number","description":"The periodic payment amount for the accounts which have balloon payments or Reduce Number of Installments and Optimized Payments"},"principalRepaymentInterval":{"type":"integer","description":"The principal repayment interval. Indicates the interval of repayments that the principal has to be paid."},"repaymentInstallments":{"type":"integer","description":"The repayment installments. Represents how many installments are required to pay back the loan."},"repaymentPeriodCount":{"type":"integer","description":"The repayment period count. Represents how often the loan is to be repaid: stored based on the type repayment option."},"repaymentPeriodUnit":{"description":"The repayment period unit. Represents the frequency of loan repayment.","enum":["DAYS","WEEKS","MONTHS","YEARS"]}},"additionalProperties":true};const schema18 = {"type":"object","description":"For fixed term loans there is the possibility to define a payment plan. A payment plan consists of multiple periodic payments. This class holds information about a periodic payment for schedule preview.","properties":{"amount":{"type":"number","description":"The PMT value used in periodic payment"},"toInstallment":{"type":"integer","description":"The installment's position up to which the PMT will be used"}},"required":["amount","toInstallment"],"additionalProperties":true};function validate15(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){let vErrors = null;let errors = 0;if(errors === 0){if(data && typeof data == "object" && !Array.isArray(data)){if(data.fixedDaysOfMonth !== undefined){let data0 = data.fixedDaysOfMonth;const _errs2 = errors;if(errors === _errs2){if(Array.isArray(data0)){var valid1 = true;const len0 = data0.length;for(let i0=0; i0<len0; i0++){let data1 = data0[i0];const _errs4 = errors;if(!(((typeof data1 == "number") && (!(data1 % 1) && !isNaN(data1))) && (isFinite(data1)))){validate15.errors = [{instancePath:instancePath+"/fixedDaysOfMonth/" + i0,schemaPath:"#/properties/fixedDaysOfMonth/items/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];return false;}var valid1 = _errs4 === errors;if(!valid1){break;}}}else {validate15.errors = [{instancePath:instancePath+"/fixedDaysOfMonth",schemaPath:"#/properties/fixedDaysOfMonth/type",keyword:"type",params:{type: "array"},message:"must be array"}];return false;}}var valid0 = _errs2 === errors;}else {var valid0 = true;}if(valid0){if(data.gracePeriod !== undefined){let data2 = data.gracePeriod;const _errs6 = errors;if(!(((typeof data2 == "number") && (!(data2 % 1) && !isNaN(data2))) && (isFinite(data2)))){validate15.errors = [{instancePath:instancePath+"/gracePeriod",schemaPath:"#/properties/gracePeriod/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];return false;}var valid0 = _errs6 === errors;}else {var valid0 = true;}if(valid0){if(data.paymentPlan !== undefined){let data3 = data.paymentPlan;const _errs8 = errors;if(errors === _errs8){if(Array.isArray(data3)){var valid2 = true;const len1 = data3.length;for(let i1=0; i1<len1; i1++){let data4 = data3[i1];const _errs10 = errors;const _errs11 = errors;if(errors === _errs11){if(data4 && typeof data4 == "object" && !Array.isArray(data4)){let missing0;if(((data4.amount === undefined) && (missing0 = "amount")) || ((data4.toInstallment === undefined) && (missing0 = "toInstallment"))){validate15.errors = [{instancePath:instancePath+"/paymentPlan/" + i1,schemaPath:"#/$defs/PeriodicPaymentForSchedulePreview/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];return false;}else {if(data4.amount !== undefined){let data5 = data4.amount;const _errs14 = errors;if(!((typeof data5 == "number") && (isFinite(data5)))){validate15.errors = [{instancePath:instancePath+"/paymentPlan/" + i1+"/amount",schemaPath:"#/$defs/PeriodicPaymentForSchedulePreview/properties/amount/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid4 = _errs14 === errors;}else {var valid4 = true;}if(valid4){if(data4.toInstallment !== undefined){let data6 = data4.toInstallment;const _errs16 = errors;if(!(((typeof data6 == "number") && (!(data6 % 1) && !isNaN(data6))) && (isFinite(data6)))){validate15.errors = [{instancePath:instancePath+"/paymentPlan/" + i1+"/toInstallment",schemaPath:"#/$defs/PeriodicPaymentForSchedulePreview/properties/toInstallment/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];return false;}var valid4 = _errs16 === errors;}else {var valid4 = true;}}}}else {validate15.errors = [{instancePath:instancePath+"/paymentPlan/" + i1,schemaPath:"#/$defs/PeriodicPaymentForSchedulePreview/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}var valid2 = _errs10 === errors;if(!valid2){break;}}}else {validate15.errors = [{instancePath:instancePath+"/paymentPlan",schemaPath:"#/properties/paymentPlan/type",keyword:"type",params:{type: "array"},message:"must be array"}];return false;}}var valid0 = _errs8 === errors;}else {var valid0 = true;}if(valid0){if(data.periodicPayment !== undefined){let data7 = data.periodicPayment;const _errs18 = errors;if(!((typeof data7 == "number") && (isFinite(data7)))){validate15.errors = [{instancePath:instancePath+"/periodicPayment",schemaPath:"#/properties/periodicPayment/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid0 = _errs18 === errors;}else {var valid0 = true;}if(valid0){if(data.principalRepaymentInterval !== undefined){let data8 = data.principalRepaymentInterval;const _errs20 = errors;if(!(((typeof data8 == "number") && (!(data8 % 1) && !isNaN(data8))) && (isFinite(data8)))){validate15.errors = [{instancePath:instancePath+"/principalRepaymentInterval",schemaPath:"#/properties/principalRepaymentInterval/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];return false;}var valid0 = _errs20 === errors;}else {var valid0 = true;}if(valid0){if(data.repaymentInstallments !== undefined){let data9 = data.repaymentInstallments;const _errs22 = errors;if(!(((typeof data9 == "number") && (!(data9 % 1) && !isNaN(data9))) && (isFinite(data9)))){validate15.errors = [{instancePath:instancePath+"/repaymentInstallments",schemaPath:"#/properties/repaymentInstallments/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];return false;}var valid0 = _errs22 === errors;}else {var valid0 = true;}if(valid0){if(data.repaymentPeriodCount !== undefined){let data10 = data.repaymentPeriodCount;const _errs24 = errors;if(!(((typeof data10 == "number") && (!(data10 % 1) && !isNaN(data10))) && (isFinite(data10)))){validate15.errors = [{instancePath:instancePath+"/repaymentPeriodCount",schemaPath:"#/properties/repaymentPeriodCount/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];return false;}var valid0 = _errs24 === errors;}else {var valid0 = true;}if(valid0){if(data.repaymentPeriodUnit !== undefined){let data11 = data.repaymentPeriodUnit;const _errs26 = errors;if(!((((data11 === "DAYS") || (data11 === "WEEKS")) || (data11 === "MONTHS")) || (data11 === "YEARS"))){validate15.errors = [{instancePath:instancePath+"/repaymentPeriodUnit",schemaPath:"#/properties/repaymentPeriodUnit/enum",keyword:"enum",params:{allowedValues: schema17.properties.repaymentPeriodUnit.enum},message:"must be equal to one of the allowed values"}];return false;}var valid0 = _errs26 === errors;}else {var valid0 = true;}}}}}}}}}else {validate15.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}validate15.errors = vErrors;return errors === 0;}const schema19 = {"type":"object","description":"In some cases organizations may approve loans but not disburse the full amount initially. They would like to spread the disbursement (and risk) over time. Likewise for the client, they may not need the full loan amount up front. They may want to have a loan to buy some equipment for their business but will make one purchase today and another purchase in a few months.  In these cases, they don't need the full amount and wouldn't want to pay interest on cash they don't need yet. A solution for this matter is the usage of disbursement in tranches. This class holds the information required for one of this tranche. ","properties":{"amount":{"type":"number","description":"The amount this tranche has available for disburse"},"disbursementDetails":{"$ref":"#/$defs/TrancheDisbursementDetails"},"encodedKey":{"type":"string","description":"The encoded key of the transaction details , auto generated, unique."},"fees":{"type":"array","description":"Fees that are associated with this tranche","items":{"$ref":"#/$defs/CustomPredefinedFee"}},"trancheNumber":{"type":"integer","description":"Index indicating the tranche number"}},"required":["amount"],"additionalProperties":true};const schema20 = {"type":"object","description":"The disbursement details regarding a loan tranche.","properties":{"disbursementTransactionKey":{"type":"string","description":"The key of the disbursement transaction logged when this tranche was disbursed. This field will be null until the tranche disbursement"},"expectedDisbursementDate":{"type":"string","description":"The date when this tranche is supposed to be disbursed (as Organization Time)","format":"date-time"}},"additionalProperties":true};function validate17(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){let vErrors = null;let errors = 0;if(errors === 0){if(data && typeof data == "object" && !Array.isArray(data)){let missing0;if((data.amount === undefined) && (missing0 = "amount")){validate17.errors = [{instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];return false;}else {if(data.amount !== undefined){let data0 = data.amount;const _errs2 = errors;if(!((typeof data0 == "number") && (isFinite(data0)))){validate17.errors = [{instancePath:instancePath+"/amount",schemaPath:"#/properties/amount/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid0 = _errs2 === errors;}else {var valid0 = true;}if(valid0){if(data.disbursementDetails !== undefined){let data1 = data.disbursementDetails;const _errs4 = errors;const _errs5 = errors;if(errors === _errs5){if(data1 && typeof data1 == "object" && !Array.isArray(data1)){if(data1.disbursementTransactionKey !== undefined){const _errs8 = errors;if(typeof data1.disbursementTransactionKey !== "string"){validate17.errors = [{instancePath:instancePath+"/disbursementDetails/disbursementTransactionKey",schemaPath:"#/$defs/TrancheDisbursementDetails/properties/disbursementTransactionKey/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid2 = _errs8 === errors;}else {var valid2 = true;}if(valid2){if(data1.expectedDisbursementDate !== undefined){let data3 = data1.expectedDisbursementDate;const _errs10 = errors;if(errors === _errs10){if(errors === _errs10){if(typeof data3 === "string"){if(!(formats0.validate(data3))){validate17.errors = [{instancePath:instancePath+"/disbursementDetails/expectedDisbursementDate",schemaPath:"#/$defs/TrancheDisbursementDetails/properties/expectedDisbursementDate/format",keyword:"format",params:{format: "date-time"},message:"must match format \""+"date-time"+"\""}];return false;}}else {validate17.errors = [{instancePath:instancePath+"/disbursementDetails/expectedDisbursementDate",schemaPath:"#/$defs/TrancheDisbursementDetails/properties/expectedDisbursementDate/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}}var valid2 = _errs10 === errors;}else {var valid2 = true;}}}else {validate17.errors = [{instancePath:instancePath+"/disbursementDetails",schemaPath:"#/$defs/TrancheDisbursementDetails/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}var valid0 = _errs4 === errors;}else {var valid0 = true;}if(valid0){if(data.encodedKey !== undefined){const _errs12 = errors;if(typeof data.encodedKey !== "string"){validate17.errors = [{instancePath:instancePath+"/encodedKey",schemaPath:"#/properties/encodedKey/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid0 = _errs12 === errors;}else {var valid0 = true;}if(valid0){if(data.fees !== undefined){let data5 = data.fees;const _errs14 = errors;if(errors === _errs14){if(Array.isArray(data5)){var valid3 = true;const len0 = data5.length;for(let i0=0; i0<len0; i0++){let data6 = data5[i0];const _errs16 = errors;const _errs17 = errors;if(errors === _errs17){if(data6 && typeof data6 == "object" && !Array.isArray(data6)){if(data6.amount !== undefined){let data7 = data6.amount;const _errs20 = errors;if(!((typeof data7 == "number") && (isFinite(data7)))){validate17.errors = [{instancePath:instancePath+"/fees/" + i0+"/amount",schemaPath:"#/$defs/CustomPredefinedFee/properties/amount/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid5 = _errs20 === errors;}else {var valid5 = true;}if(valid5){if(data6.encodedKey !== undefined){const _errs22 = errors;if(typeof data6.encodedKey !== "string"){validate17.errors = [{instancePath:instancePath+"/fees/" + i0+"/encodedKey",schemaPath:"#/$defs/CustomPredefinedFee/properties/encodedKey/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid5 = _errs22 === errors;}else {var valid5 = true;}if(valid5){if(data6.percentage !== undefined){let data9 = data6.percentage;const _errs24 = errors;if(!((typeof data9 == "number") && (isFinite(data9)))){validate17.errors = [{instancePath:instancePath+"/fees/" + i0+"/percentage",schemaPath:"#/$defs/CustomPredefinedFee/properties/percentage/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid5 = _errs24 === errors;}else {var valid5 = true;}if(valid5){if(data6.predefinedFeeEncodedKey !== undefined){const _errs26 = errors;if(typeof data6.predefinedFeeEncodedKey !== "string"){validate17.errors = [{instancePath:instancePath+"/fees/" + i0+"/predefinedFeeEncodedKey",schemaPath:"#/$defs/CustomPredefinedFee/properties/predefinedFeeEncodedKey/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid5 = _errs26 === errors;}else {var valid5 = true;}}}}}else {validate17.errors = [{instancePath:instancePath+"/fees/" + i0,schemaPath:"#/$defs/CustomPredefinedFee/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}var valid3 = _errs16 === errors;if(!valid3){break;}}}else {validate17.errors = [{instancePath:instancePath+"/fees",schemaPath:"#/properties/fees/type",keyword:"type",params:{type: "array"},message:"must be array"}];return false;}}var valid0 = _errs14 === errors;}else {var valid0 = true;}if(valid0){if(data.trancheNumber !== undefined){let data11 = data.trancheNumber;const _errs28 = errors;if(!(((typeof data11 == "number") && (!(data11 % 1) && !isNaN(data11))) && (isFinite(data11)))){validate17.errors = [{instancePath:instancePath+"/trancheNumber",schemaPath:"#/properties/trancheNumber/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];return false;}var valid0 = _errs28 === errors;}else {var valid0 = true;}}}}}}}else {validate17.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}validate17.errors = vErrors;return errors === 0;}function validate10(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){let vErrors = null;let errors = 0;if(errors === 0){if(data && typeof data == "object" && !Array.isArray(data)){let missing0;if(((data.loanAmount === undefined) && (missing0 = "loanAmount")) || ((data.productTypeKey === undefined) && (missing0 = "productTypeKey"))){validate10.errors = [{instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];return false;}else {if(data.disbursementDetails !== undefined){const _errs2 = errors;if(!(validate11(data.disbursementDetails, {instancePath:instancePath+"/disbursementDetails",parentData:data,parentDataProperty:"disbursementDetails",rootData}))){vErrors = vErrors === null ? validate11.errors : vErrors.concat(validate11.errors);errors = vErrors.length;}var valid0 = _errs2 === errors;}else {var valid0 = true;}if(valid0){if(data.interestCommission !== undefined){let data1 = data.interestCommission;const _errs3 = errors;if(!((typeof data1 == "number") && (isFinite(data1)))){validate10.errors = [{instancePath:instancePath+"/interestCommission",schemaPath:"#/properties/interestCommission/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid0 = _errs3 === errors;}else {var valid0 = true;}if(valid0){if(data.interestSettings !== undefined){const _errs5 = errors;if(!(validate13(data.interestSettings, {instancePath:instancePath+"/interestSettings",parentData:data,parentDataProperty:"interestSettings",rootData}))){vErrors = vErrors === null ? validate13.errors : vErrors.concat(validate13.errors);errors = vErrors.length;}var valid0 = _errs5 === errors;}else {var valid0 = true;}if(valid0){if(data.loanAmount !== undefined){let data3 = data.loanAmount;const _errs6 = errors;if(!((typeof data3 == "number") && (isFinite(data3)))){validate10.errors = [{instancePath:instancePath+"/loanAmount",schemaPath:"#/properties/loanAmount/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid0 = _errs6 === errors;}else {var valid0 = true;}if(valid0){if(data.plannedInstallmentFees !== undefined){let data4 = data.plannedInstallmentFees;const _errs8 = errors;if(errors === _errs8){if(Array.isArray(data4)){var valid1 = true;const len0 = data4.length;for(let i0=0; i0<len0; i0++){let data5 = data4[i0];const _errs10 = errors;const _errs11 = errors;if(errors === _errs11){if(data5 && typeof data5 == "object" && !Array.isArray(data5)){let missing1;if((data5.predefinedFeeKey === undefined) && (missing1 = "predefinedFeeKey")){validate10.errors = [{instancePath:instancePath+"/plannedInstallmentFees/" + i0,schemaPath:"#/$defs/PlannedInstallmentFee/required",keyword:"required",params:{missingProperty: missing1},message:"must have required property '"+missing1+"'"}];return false;}else {if(data5.amount !== undefined){let data6 = data5.amount;const _errs14 = errors;if(!((typeof data6 == "number") && (isFinite(data6)))){validate10.errors = [{instancePath:instancePath+"/plannedInstallmentFees/" + i0+"/amount",schemaPath:"#/$defs/PlannedInstallmentFee/properties/amount/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid3 = _errs14 === errors;}else {var valid3 = true;}if(valid3){if(data5.applyOnDate !== undefined){let data7 = data5.applyOnDate;const _errs16 = errors;if(errors === _errs16){if(errors === _errs16){if(typeof data7 === "string"){if(!(formats0.validate(data7))){validate10.errors = [{instancePath:instancePath+"/plannedInstallmentFees/" + i0+"/applyOnDate",schemaPath:"#/$defs/PlannedInstallmentFee/properties/applyOnDate/format",keyword:"format",params:{format: "date-time"},message:"must match format \""+"date-time"+"\""}];return false;}}else {validate10.errors = [{instancePath:instancePath+"/plannedInstallmentFees/" + i0+"/applyOnDate",schemaPath:"#/$defs/PlannedInstallmentFee/properties/applyOnDate/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}}var valid3 = _errs16 === errors;}else {var valid3 = true;}if(valid3){if(data5.encodedKey !== undefined){const _errs18 = errors;if(typeof data5.encodedKey !== "string"){validate10.errors = [{instancePath:instancePath+"/plannedInstallmentFees/" + i0+"/encodedKey",schemaPath:"#/$defs/PlannedInstallmentFee/properties/encodedKey/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid3 = _errs18 === errors;}else {var valid3 = true;}if(valid3){if(data5.installmentKey !== undefined){const _errs20 = errors;if(typeof data5.installmentKey !== "string"){validate10.errors = [{instancePath:instancePath+"/plannedInstallmentFees/" + i0+"/installmentKey",schemaPath:"#/$defs/PlannedInstallmentFee/properties/installmentKey/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid3 = _errs20 === errors;}else {var valid3 = true;}if(valid3){if(data5.installmentNumber !== undefined){let data10 = data5.installmentNumber;const _errs22 = errors;if(!(((typeof data10 == "number") && (!(data10 % 1) && !isNaN(data10))) && (isFinite(data10)))){validate10.errors = [{instancePath:instancePath+"/plannedInstallmentFees/" + i0+"/installmentNumber",schemaPath:"#/$defs/PlannedInstallmentFee/properties/installmentNumber/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];return false;}var valid3 = _errs22 === errors;}else {var valid3 = true;}if(valid3){if(data5.predefinedFeeKey !== undefined){const _errs24 = errors;if(typeof data5.predefinedFeeKey !== "string"){validate10.errors = [{instancePath:instancePath+"/plannedInstallmentFees/" + i0+"/predefinedFeeKey",schemaPath:"#/$defs/PlannedInstallmentFee/properties/predefinedFeeKey/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid3 = _errs24 === errors;}else {var valid3 = true;}}}}}}}}else {validate10.errors = [{instancePath:instancePath+"/plannedInstallmentFees/" + i0,schemaPath:"#/$defs/PlannedInstallmentFee/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}var valid1 = _errs10 === errors;if(!valid1){break;}}}else {validate10.errors = [{instancePath:instancePath+"/plannedInstallmentFees",schemaPath:"#/properties/plannedInstallmentFees/type",keyword:"type",params:{type: "array"},message:"must be array"}];return false;}}var valid0 = _errs8 === errors;}else {var valid0 = true;}if(valid0){if(data.productTypeKey !== undefined){const _errs26 = errors;if(typeof data.productTypeKey !== "string"){validate10.errors = [{instancePath:instancePath+"/productTypeKey",schemaPath:"#/properties/productTypeKey/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid0 = _errs26 === errors;}else {var valid0 = true;}if(valid0){if(data.scheduleSettings !== undefined){const _errs28 = errors;if(!(validate15(data.scheduleSettings, {instancePath:instancePath+"/scheduleSettings",parentData:data,parentDataProperty:"scheduleSettings",rootData}))){vErrors = vErrors === null ? validate15.errors : vErrors.concat(validate15.errors);errors = vErrors.length;}var valid0 = _errs28 === errors;}else {var valid0 = true;}if(valid0){if(data.topUpAmount !== undefined){let data14 = data.topUpAmount;const _errs29 = errors;if(!((typeof data14 == "number") && (isFinite(data14)))){validate10.errors = [{instancePath:instancePath+"/topUpAmount",schemaPath:"#/properties/topUpAmount/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid0 = _errs29 === errors;}else {var valid0 = true;}if(valid0){if(data.tranches !== undefined){let data15 = data.tranches;const _errs31 = errors;if(errors === _errs31){if(Array.isArray(data15)){var valid4 = true;const len1 = data15.length;for(let i1=0; i1<len1; i1++){const _errs33 = errors;if(!(validate17(data15[i1], {instancePath:instancePath+"/tranches/" + i1,parentData:data15,parentDataProperty:i1,rootData}))){vErrors = vErrors === null ? validate17.errors : vErrors.concat(validate17.errors);errors = vErrors.length;}var valid4 = _errs33 === errors;if(!valid4){break;}}}else {validate10.errors = [{instancePath:instancePath+"/tranches",schemaPath:"#/properties/tranches/type",keyword:"type",params:{type: "array"},message:"must be array"}];return false;}}var valid0 = _errs31 === errors;}else {var valid0 = true;}}}}}}}}}}}else {validate10.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}validate10.errors = vErrors;return errors === 0;};validate.schema=schema11;