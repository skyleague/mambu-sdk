/**
 * Generated by @skyleague/therefore
 * Do not manually touch this
 */
/* eslint-disable */

import { z } from 'zod'

export const Holiday = z
    .object({
        creationDate: z.string().datetime({ offset: true }).describe('The date when the holiday was created.').optional(),
        date: z.string().date().describe('The date the holiday takes place.').optional(),
        encodedKey: z.string().describe('The encoded key of the entity, generated, globally unique').optional(),
        id: z.number().int().describe('The ID of the holiday.').optional(),
        isAnnuallyRecurring: z.boolean().describe('`TRUE` if a holiday is annually recurring, `FALSE` otherwise.').optional(),
        name: z.string().describe('The name of the holiday.').optional(),
    })
    .describe('Represents the holiday.')

export type Holiday = z.infer<typeof Holiday>

export const RestError = z.object({
    errorCode: z.number().int().optional(),
    errorReason: z.string().optional(),
    errorSource: z.string().optional(),
})

export type RestError = z.infer<typeof RestError>

export const CurrencyDetails = z
    .object({
        baseCurrency: z
            .boolean()
            .describe(
                `\`TRUE\` if the currency is the base currency, \`FALSE\` otherwise. It cannot be changed and it's a read-only field not required for update operations.`,
            ),
        code: z.string().describe('The currency code, which cannot be changed once the currency is created.'),
        creationDate: z
            .string()
            .datetime({ offset: true })
            .describe(
                `The date this currency was created. It cannot be changed and it's a read-only field not required for update operations.`,
            )
            .optional(),
        currencyHolidays: Holiday.array().describe('The list of holidays for this currency.').optional(),
        currencySymbolPosition: z.enum(['BEFORE_NUMBER', 'AFTER_NUMBER']).describe('The currency symbol position.'),
        digitsAfterDecimal: z.number().int().describe('The number of digits that are supported for a given currency.').optional(),
        lastModifiedDate: z
            .string()
            .datetime({ offset: true })
            .describe(
                `The last date this currency was modified. It's updated automatically and it's a read-only field not required for update operations.`,
            )
            .optional(),
        name: z.string().describe('The name of the currency.'),
        numericCode: z.string().describe('The currency numeric code.').optional(),
        symbol: z.string().describe('The currency symbol.'),
        type: z.enum(['FIAT_CURRENCY', 'CRYPTOCURRENCY', 'NON_TRADITIONAL_CURRENCY']).describe('The type of the currency.'),
    })
    .describe('Represents a currency.')

export type CurrencyDetails = z.infer<typeof CurrencyDetails>

export const ErrorResponse = z.object({
    errors: RestError.array().optional(),
})

export type ErrorResponse = z.infer<typeof ErrorResponse>

export const GetAllResponse = CurrencyDetails.array()

export type GetAllResponse = z.infer<typeof GetAllResponse>
