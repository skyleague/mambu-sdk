/**
 * Generated by @skyleague/therefore@v1.0.0-local
 * Do not manually touch this
 */
/* eslint-disable */

import type { DefinedError, ValidateFunction } from 'ajv'

import { validate as CurrencyDetailsValidator } from './schemas/currency-details.schema.js'
import { validate as ErrorResponseValidator } from './schemas/error-response.schema.js'
import { validate as GetAllResponseValidator } from './schemas/get-all-response.schema.js'

/**
 * Represents a currency.
 */
export interface CurrencyDetails {
    /**
     * `TRUE` if the currency is the base currency, `FALSE` otherwise. It cannot be changed and it's a read-only field not required for update operations.
     */
    baseCurrency: boolean
    /**
     * The currency code, which cannot be changed once the currency is created.
     */
    code: string
    /**
     * The date this currency was created. It cannot be changed and it's a read-only field not required for update operations.
     */
    creationDate?: string | undefined
    /**
     * The list of holidays for this currency.
     */
    currencyHolidays?: Holiday[] | undefined
    /**
     * The currency symbol position.
     */
    currencySymbolPosition: 'BEFORE_NUMBER' | 'AFTER_NUMBER'
    /**
     * The number of digits that are supported for a given currency.
     */
    digitsAfterDecimal?: number | undefined
    /**
     * The last date this currency was modified. It's updated automatically and it's a read-only field not required for update operations.
     */
    lastModifiedDate?: string | undefined
    /**
     * The name of the currency.
     */
    name: string
    /**
     * The currency numeric code.
     */
    numericCode?: string | undefined
    /**
     * The currency symbol.
     */
    symbol: string
    /**
     * The type of the currency.
     */
    type: 'FIAT_CURRENCY' | 'CRYPTOCURRENCY' | 'NON_TRADITIONAL_CURRENCY'
}

export const CurrencyDetails = {
    validate: CurrencyDetailsValidator as ValidateFunction<CurrencyDetails>,
    get schema() {
        return CurrencyDetails.validate.schema
    },
    get errors() {
        return CurrencyDetails.validate.errors ?? undefined
    },
    is: (o: unknown): o is CurrencyDetails => CurrencyDetails.validate(o) === true,
    parse: (o: unknown): { right: CurrencyDetails } | { left: DefinedError[] } => {
        if (CurrencyDetails.is(o)) {
            return { right: o }
        }
        return { left: (CurrencyDetails.errors ?? []) as DefinedError[] }
    },
} as const

export interface ErrorResponse {
    errors?: RestError[] | undefined
}

export const ErrorResponse = {
    validate: ErrorResponseValidator as ValidateFunction<ErrorResponse>,
    get schema() {
        return ErrorResponse.validate.schema
    },
    get errors() {
        return ErrorResponse.validate.errors ?? undefined
    },
    is: (o: unknown): o is ErrorResponse => ErrorResponse.validate(o) === true,
    parse: (o: unknown): { right: ErrorResponse } | { left: DefinedError[] } => {
        if (ErrorResponse.is(o)) {
            return { right: o }
        }
        return { left: (ErrorResponse.errors ?? []) as DefinedError[] }
    },
} as const

export type GetAllResponse = CurrencyDetails[]

export const GetAllResponse = {
    validate: GetAllResponseValidator as ValidateFunction<GetAllResponse>,
    get schema() {
        return GetAllResponse.validate.schema
    },
    get errors() {
        return GetAllResponse.validate.errors ?? undefined
    },
    is: (o: unknown): o is GetAllResponse => GetAllResponse.validate(o) === true,
    parse: (o: unknown): { right: GetAllResponse } | { left: DefinedError[] } => {
        if (GetAllResponse.is(o)) {
            return { right: o }
        }
        return { left: (GetAllResponse.errors ?? []) as DefinedError[] }
    },
} as const

/**
 * Represents the holiday.
 */
export interface Holiday {
    /**
     * The date when the holiday was created.
     */
    creationDate?: string | undefined
    /**
     * The date the holiday takes place.
     */
    date?: string | undefined
    /**
     * The encoded key of the entity, generated, globally unique
     */
    encodedKey?: string | undefined
    /**
     * The ID of the holiday.
     */
    id?: number | undefined
    /**
     * `TRUE` if a holiday is annually recurring, `FALSE` otherwise.
     */
    isAnnuallyRecurring?: boolean | undefined
    /**
     * The name of the holiday.
     */
    name?: string | undefined
}

export interface RestError {
    errorCode?: number | undefined
    errorReason?: string | undefined
    errorSource?: string | undefined
}
