/**
 * Generated by @skyleague/therefore
 * Do not manually touch this
 */
// biome-ignore-all lint: this file is generated
/* eslint-disable */

import { z } from 'zod/v4'

export const PoolSettings = z
    .object({
        bankPLAccountEncodedKey: z.string().describe('The bank P&L account encoded key of the pool settings').optional(),
        creationDate: z.iso.datetime({ offset: true }).describe('The creation time of the pool settings').optional(),
        customerSharesLoss: z
            .boolean()
            .describe('The customerSharesLoss boolean field of the pool settings, currently False is the only supported value'),
        daysInMonth: z.literal('DAYS_ACTUAL').describe('The days in month value of the pool settings'),
        daysInYear: z.literal('DAYS365').describe('The days in year value of the pool settings'),
        effectiveDate: z.iso.date().describe('The effective date of the pool settings'),
        firstProfitPeriodStartDate: z.iso.date().describe('The first ProfitPeriod StartDate of the pool settings'),
        id: z.number().int().describe('The identifier of the pool settings').optional(),
        initialEquivalentRate: z.number().describe('The initial equivalent rate of the pool settings').optional(),
        lastModifiedDate: z.iso.datetime({ offset: true }).describe('The last modified time of the pool setting').optional(),
        mudaribShareAccountEncodedKey: z
            .string()
            .describe('The mudarib share account encoded key of the pool settings')
            .optional(),
        poolId: z.number().int().describe('The identifier of the investment pool').optional(),
        profitCalculationBalanceType: z
            .enum(['END_OF_THE_DAY_BALANCE', 'AVERAGE_BALANCE', 'MINIMUM_BALANCE'])
            .describe('Specify which intra-day account balance to be used for profit contribution calculations'),
        profitDistributionFrequencyCount: z.number().int().describe('The profit Frequency count of the pool settings'),
        profitDistributionFrequencyUnit: z
            .enum(['DAILY', 'WEEKLY', 'MONTHLY', 'QUARTERLY', 'BIANNUALLY', 'ANNUALLY'])
            .describe('The profit Frequency unit of the pool settings'),
        profitSuspenseAccountEncodedKey: z
            .string()
            .describe('The profit suspense account encoded key of the pool settings')
            .optional(),
        reserveAccountEncodedKey: z.string().describe('The reserve account encoded key of the pool settings').optional(),
    })
    .describe('Pool settings for an investment pool')

export type PoolSettings = z.infer<typeof PoolSettings>

export const RestError = z.object({
    errorCode: z.number().int().optional(),
    errorReason: z.string().optional(),
    errorSource: z.string().optional(),
})

export type RestError = z.infer<typeof RestError>

export const Pool = z
    .object({
        creationDate: z.iso.datetime({ offset: true }).describe('The creation time of the pool').optional(),
        description: z.string().min(0).max(1024).describe('The description of the pool').optional(),
        id: z.number().int().describe('The identifier of the pool').optional(),
        lastModifiedDate: z.iso.datetime({ offset: true }).describe('The last modified time of the pool').optional(),
        name: z.string().min(3).max(64).describe('The name of the pool'),
        settings: PoolSettings.array().describe('List of pool settings').optional(),
        status: z.enum(['ACTIVE', 'INACTIVE']).describe('The status of the pool'),
    })
    .describe('An investment pool define the terms for profit pool')

export type Pool = z.infer<typeof Pool>

export const ErrorResponse = z.object({
    errors: RestError.array().optional(),
})

export type ErrorResponse = z.infer<typeof ErrorResponse>

export const GetPoolsResponse = Pool.array()

export type GetPoolsResponse = z.infer<typeof GetPoolsResponse>
