/**
 * Generated by @skyleague/therefore@v1.0.0-local
 * Do not manually touch this
 */
/* eslint-disable */

import type { DefinedError, ValidateFunction } from 'ajv'

import { validate as ErrorResponseValidator } from './schemas/error-response.schema.js'
import { validate as OrganizationSetupValidator } from './schemas/organization-setup.schema.js'

/**
 * Represents an address.
 */
export interface Address {
    /**
     * The city for the address.
     */
    city?: string | undefined
    /**
     * The country.
     */
    country?: string | undefined
    /**
     * The address encoded key, which is unique and generated.
     */
    encodedKey?: string | undefined
    /**
     * The index of this address in the list of addresses.
     */
    indexInList?: number | undefined
    /**
     * The GPS latitude of this address in signed degrees format (DDD.dddd) with 6 decimal positions, ranging from -90 to +90.
     */
    latitude?: number | undefined
    /**
     * The first line of the address.
     */
    line1?: string | undefined
    /**
     * The second line of the address.
     */
    line2?: string | undefined
    /**
     * The GPS longitude of this address in signed degrees format (DDD.dddd) with 6 decimal positions, ranging from -180 to +180.
     */
    longitude?: number | undefined
    /**
     * The address parent key indicating the object owning this address. For example: client, centre, or branch.
     */
    parentKey?: string | undefined
    /**
     * The post code.
     */
    postcode?: string | undefined
    /**
     * The region for the address.
     */
    region?: string | undefined
}

export interface ErrorResponse {
    errors?: RestError[] | undefined
}

export const ErrorResponse = {
    validate: ErrorResponseValidator as ValidateFunction<ErrorResponse>,
    get schema() {
        return ErrorResponse.validate.schema
    },
    get errors() {
        return ErrorResponse.validate.errors ?? undefined
    },
    is: (o: unknown): o is ErrorResponse => ErrorResponse.validate(o) === true,
    parse: (o: unknown): { right: ErrorResponse } | { left: DefinedError[] } => {
        if (ErrorResponse.is(o)) {
            return { right: o }
        }
        return { left: (ErrorResponse.errors ?? []) as DefinedError[] }
    },
} as const

/**
 * Response representation of the organization setup details
 */
export interface OrganizationSetup {
    address?: Address | undefined
    /**
     * The creation date of the organization
     */
    creationDate?: string | undefined
    /**
     * The currency of the organization, must be the same as the existing one
     */
    currency?: string | undefined
    /**
     * The format used to represent the date
     */
    dateFormat: string
    /**
     * The format used to represent the time and date
     */
    dateTimeFormat: string
    /**
     * Symbol used to mark the border between the integral and the fractional parts of a decimal numeral
     */
    decimalSeparator: 'COMMA' | 'POINT'
    /**
     * The email address of the organization
     */
    emailAddress?: string | undefined
    /**
     * The name of the organization
     */
    institutionName: string
    /**
     * The last modified date of the organization
     */
    lastModifiedDate?: string | undefined
    /**
     * The phone number of the organization
     */
    phoneNumber?: string | undefined
    /**
     * The timezone id, must be the same as the existing one
     */
    timeZoneID?: string | undefined
}

export const OrganizationSetup = {
    validate: OrganizationSetupValidator as ValidateFunction<OrganizationSetup>,
    get schema() {
        return OrganizationSetup.validate.schema
    },
    get errors() {
        return OrganizationSetup.validate.errors ?? undefined
    },
    is: (o: unknown): o is OrganizationSetup => OrganizationSetup.validate(o) === true,
    parse: (o: unknown): { right: OrganizationSetup } | { left: DefinedError[] } => {
        if (OrganizationSetup.is(o)) {
            return { right: o }
        }
        return { left: (OrganizationSetup.errors ?? []) as DefinedError[] }
    },
} as const

export interface RestError {
    errorCode?: number | undefined
    errorReason?: string | undefined
    errorSource?: string | undefined
}
