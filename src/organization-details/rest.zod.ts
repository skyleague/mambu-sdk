/**
 * Generated by @skyleague/therefore
 * Do not manually touch this
 */
/* eslint-disable */

import { z } from 'zod'

export const RestError = z.object({
    errorCode: z.number().int().optional(),
    errorReason: z.string().optional(),
    errorSource: z.string().optional(),
})

export type RestError = z.infer<typeof RestError>

export const Address = z
    .object({
        city: z.string().describe('The city for the address.').optional(),
        country: z.string().describe('The country.').optional(),
        encodedKey: z.string().describe('The address encoded key, which is unique and generated.').optional(),
        indexInList: z.number().int().describe('The index of this address in the list of addresses.').optional(),
        latitude: z
            .number()
            .describe(
                'The GPS latitude of this address in signed degrees format (DDD.dddd) with 6 decimal positions, ranging from -90 to +90.',
            )
            .optional(),
        line1: z.string().describe('The first line of the address.').optional(),
        line2: z.string().describe('The second line of the address.').optional(),
        longitude: z
            .number()
            .describe(
                'The GPS longitude of this address in signed degrees format (DDD.dddd) with 6 decimal positions, ranging from -180 to +180.',
            )
            .optional(),
        parentKey: z
            .string()
            .describe('The address parent key indicating the object owning this address. For example: client, centre, or branch.')
            .optional(),
        postcode: z.string().describe('The post code.').optional(),
        region: z.string().describe('The region for the address.').optional(),
    })
    .describe('Represents an address.')

export type Address = z.infer<typeof Address>

export const ErrorResponse = z.object({
    errors: RestError.array().optional(),
})

export type ErrorResponse = z.infer<typeof ErrorResponse>

export const OrganizationSetup = z
    .object({
        address: Address.optional(),
        creationDate: z.string().datetime({ offset: true }).describe('The creation date of the organization').optional(),
        currency: z.string().describe('The currency of the organization, must be the same as the existing one').optional(),
        dateFormat: z.string().describe('The format used to represent the date'),
        dateTimeFormat: z.string().describe('The format used to represent the time and date'),
        decimalSeparator: z
            .enum(['COMMA', 'POINT'])
            .describe('Symbol used to mark the border between the integral and the fractional parts of a decimal numeral'),
        emailAddress: z.string().describe('The email address of the organization').optional(),
        institutionName: z.string().describe('The name of the organization'),
        lastModifiedDate: z.string().datetime({ offset: true }).describe('The last modified date of the organization').optional(),
        phoneNumber: z.string().describe('The phone number of the organization').optional(),
        timeZoneID: z.string().describe('The timezone id, must be the same as the existing one').optional(),
    })
    .describe('Response representation of the organization setup details')

export type OrganizationSetup = z.infer<typeof OrganizationSetup>
