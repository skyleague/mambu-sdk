/**
 * Generated by @skyleague/therefore
 * Do not manually touch this
 */
// biome-ignore-all lint: this file is generated
/* eslint-disable */

import { z } from 'zod/v4'

export const CustomerShareTier = z
    .object({
        creationDate: z.iso.datetime({ offset: true }).describe('The creation time of the customer share tier').optional(),
        fromValue: z.number().describe('The starting value for the customer share tier').optional(),
        id: z.number().int().describe('The identifier of the customer share tier').optional(),
        lastModifiedDate: z.iso
            .datetime({ offset: true })
            .describe('The last modified time of the customer share tier')
            .optional(),
        percentage: z.number().describe('The percentage of the customer share tier').optional(),
        productSettingsId: z.number().int().describe('The identifier of the associated product settings').optional(),
    })
    .describe('Customer share tier for product settings')

export type CustomerShareTier = z.infer<typeof CustomerShareTier>

export const Profit = z
    .object({
        cappedRatePercentage: z.number().describe('Upper threshold limit on the calculated customer profit rate').optional(),
        fixedRatePercentage: z.number().describe('A fixed percentage used to calculate the final profit amount').optional(),
        fixedRateRule: z
            .enum(['ALWAYS_USE_FIXED_RATE', 'TREAT_AS_MIN', 'USE_CALCULATED_RATE'])
            .describe('The type of fixed rate')
            .optional(),
        tiers: CustomerShareTier.array().describe('List of customer share tiers associated with product settings').optional(),
    })
    .describe('Profit calculation configuration for accrual')

export type Profit = z.infer<typeof Profit>

export const BalanceEligibility = z
    .object({
        minimumEligible: z
            .number()
            .describe('The minimum eligible balance to be included in the profit computation flow')
            .optional(),
        type: z
            .enum(['END_OF_THE_DAY_BALANCE', 'AVERAGE_BALANCE', 'MINIMUM_BALANCE'])
            .describe('The balance eligibility type')
            .optional(),
    })
    .describe('Criteria for eligibility of account balances')

export type BalanceEligibility = z.infer<typeof BalanceEligibility>

export const RestError = z.object({
    errorCode: z.number().int().optional(),
    errorReason: z.string().optional(),
    errorSource: z.string().optional(),
})

export type RestError = z.infer<typeof RestError>

export const ProductSettings = z
    .object({
        accruedProfitAmountCalculationMethod: z
            .enum(['CUSTOMER_PROFIT_RATE_AFTER_ADJUSTMENT', 'CUSTOMER_PROFIT_RATE', 'CUSTOMER_PROFIT_RATE_WITH_CAPPED_RATE'])
            .describe('Accrued profit amount calculation method'),
        balanceEligibility: BalanceEligibility.optional(),
        creationDate: z.iso.datetime({ offset: true }).describe('The creation time of the product settings').optional(),
        effectiveDate: z.iso.date().describe('The effective date of the product settings'),
        id: z.number().int().describe('The identifier of the product settings').optional(),
        lastModifiedDate: z.iso.datetime({ offset: true }).describe('The last modified time of the product settings').optional(),
        poolId: z
            .number()
            .int()
            .describe('The identifier of the associated pool from which a product will inherit parameters')
            .optional(),
        productEncodedKey: z.string().describe('The encoded key of the linked deposit product'),
        productPaymentPoint: z.enum(['MONTHLY', 'EVERY_CALENDAR_MONTH']).describe('Product payment point'),
        profit: Profit.optional(),
        profitAccrualPoint: z.enum(['NEXT_ACCRUAL_DATE', 'CURRENT_ACCRUAL_DATE']).describe('Profit accrual point'),
        profitApplicationPoint: z
            .enum(['PAYMENT_CYCLE_END_DATE', 'NEXT_DAY_AFTER_PAYMENT_CYCLE_END_DATE'])
            .describe('Profit application point'),
        withholdingTaxSourceKey: z
            .string()
            .describe('The key reference for the withholding tax source associated with the IPS product settings')
            .optional(),
    })
    .describe('Defines the profit computation settings for a deposit product')

export type ProductSettings = z.infer<typeof ProductSettings>

export const ErrorResponse = z.object({
    errors: RestError.array().optional(),
})

export type ErrorResponse = z.infer<typeof ErrorResponse>

export const ProductSettingsSearchCriteria = z
    .object({
        productEncodedKey: z.string().describe('The encoded key of the linked deposit product'),
    })
    .describe('Defines the search criteria for product settings')

export type ProductSettingsSearchCriteria = z.infer<typeof ProductSettingsSearchCriteria>

export const SearchProductSettingsResponse = ProductSettings.array()

export type SearchProductSettingsResponse = z.infer<typeof SearchProductSettingsResponse>
