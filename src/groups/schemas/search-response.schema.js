/* eslint-disable */
// @ts-nocheck
/**
 * Generated by Ajv https://ajv.js.org/guide/managing-schemas.html#standalone-validation-code
 */
import { default as ajvDistRuntimeEqualDefault } from 'ajv/dist/runtime/equal.js';
"use strict";
/** @type {unknown} */
export const validate = validate10;export default validate10;const schema11 = {"$schema":"http://json-schema.org/draft-07/schema#","title":"SearchResponse","type":"array","items":{"$ref":"#/$defs/Group"},"$defs":{"Group":{"type":"object","description":"Represents a group. A group is a type of client that can represent a non-physical person such as a company client or a grouping of individual clients. A group can have its own accounts and can optionally have individual clients as members, in which case they also need to have an individual profile in Mambu.","properties":{"addresses":{"type":"array","description":"The addresses associated with this group.","items":{"$ref":"#/$defs/Address"}},"assignedBranchKey":{"type":"string","description":"Key of the branch this group is assigned to."},"assignedCentreKey":{"type":"string","description":"Key of the centre this group is assigned to."},"assignedUserKey":{"type":"string","description":"Key of the user this group is assigned to."},"creationDate":{"type":"string","description":"The date the group was created.","format":"date-time"},"emailAddress":{"type":"string","description":"The email address associated with the group."},"encodedKey":{"type":"string","description":"The encoded key of the group, which is auto generated, and must be unique."},"groupMembers":{"type":"array","description":"The members of this group.","items":{"$ref":"#/$defs/GroupMember"}},"groupName":{"type":"string","description":"The name of the group."},"groupRoleKey":{"type":"string","description":"A role which describes the intended use of a group in the system."},"homePhone":{"type":"string","description":"The home phone number associated with the group."},"id":{"type":"string","description":"The ID of the group, which can be generated and customized, but must be unique."},"lastModifiedDate":{"type":"string","description":"The last date the group was updated.","format":"date-time"},"loanCycle":{"type":"integer","description":"Number of paid and closed (with 'obligations met') accounts for this client. When the closing operation is reverted, this is reduced."},"migrationEventKey":{"type":"string","description":"The migration event encoded key associated with this group."},"mobilePhone":{"type":"string","description":"The mobile phone number associated with the group."},"notes":{"type":"string","description":"Extra notes about this group."},"preferredLanguage":{"description":"The preferred language associated with the group (used for the notifications).","enum":["ENGLISH","PORTUGESE","SPANISH","RUSSIAN","FRENCH","GEORGIAN","CHINESE","INDONESIAN","ROMANIAN","BURMESE","GERMAN","PORTUGUESE_BRAZIL","VIETNAMESE","ITALIAN","THAI","NORWEGIAN","PHRASE"]}},"required":["groupName"],"additionalProperties":true},"Address":{"type":"object","description":"Represents an address.","properties":{"city":{"type":"string","description":"The city for the address."},"country":{"type":"string","description":"The country."},"encodedKey":{"type":"string","description":"The address encoded key, which is unique and generated."},"indexInList":{"type":"integer","description":"The index of this address in the list of addresses."},"latitude":{"type":"number","description":"The GPS latitude of this address in signed degrees format (DDD.dddd) with 6 decimal positions, ranging from -90 to +90."},"line1":{"type":"string","description":"The first line of the address."},"line2":{"type":"string","description":"The second line of the address."},"longitude":{"type":"number","description":"The GPS longitude of this address in signed degrees format (DDD.dddd) with 6 decimal positions, ranging from -180 to +180."},"parentKey":{"type":"string","description":"The address parent key indicating the object owning this address. For example: client, centre, or branch."},"postcode":{"type":"string","description":"The post code."},"region":{"type":"string","description":"The region for the address."}},"additionalProperties":true},"GroupMember":{"type":"object","description":"Represents a group member. A group member is person that uses the services of the bank and is member of a group. Group members may have associated information, such as their client key and a list of roles they have within the group.","properties":{"clientKey":{"type":"string","description":"The encoded key of the client assigned as member of the group."},"roles":{"type":"array","description":"The group role name associated with a group member.","items":{"$ref":"#/$defs/GroupRole"}}},"required":["clientKey"],"additionalProperties":true},"GroupRole":{"type":"object","description":"Represents a group role. A group role, or group role name, is the role of a group member within the group - for example, money collector. One member could have many roles within a group.","properties":{"encodedKey":{"type":"string","description":"The encoded key of the group role name, which is auto generated, and unique."},"groupRoleNameKey":{"type":"string","description":"The group role name key."},"roleName":{"type":"string","description":"The group role name."},"roleNameId":{"type":"string","description":"The group role name ID."}},"required":["groupRoleNameKey"],"additionalProperties":true}}};const schema12 = {"type":"object","description":"Represents a group. A group is a type of client that can represent a non-physical person such as a company client or a grouping of individual clients. A group can have its own accounts and can optionally have individual clients as members, in which case they also need to have an individual profile in Mambu.","properties":{"addresses":{"type":"array","description":"The addresses associated with this group.","items":{"$ref":"#/$defs/Address"}},"assignedBranchKey":{"type":"string","description":"Key of the branch this group is assigned to."},"assignedCentreKey":{"type":"string","description":"Key of the centre this group is assigned to."},"assignedUserKey":{"type":"string","description":"Key of the user this group is assigned to."},"creationDate":{"type":"string","description":"The date the group was created.","format":"date-time"},"emailAddress":{"type":"string","description":"The email address associated with the group."},"encodedKey":{"type":"string","description":"The encoded key of the group, which is auto generated, and must be unique."},"groupMembers":{"type":"array","description":"The members of this group.","items":{"$ref":"#/$defs/GroupMember"}},"groupName":{"type":"string","description":"The name of the group."},"groupRoleKey":{"type":"string","description":"A role which describes the intended use of a group in the system."},"homePhone":{"type":"string","description":"The home phone number associated with the group."},"id":{"type":"string","description":"The ID of the group, which can be generated and customized, but must be unique."},"lastModifiedDate":{"type":"string","description":"The last date the group was updated.","format":"date-time"},"loanCycle":{"type":"integer","description":"Number of paid and closed (with 'obligations met') accounts for this client. When the closing operation is reverted, this is reduced."},"migrationEventKey":{"type":"string","description":"The migration event encoded key associated with this group."},"mobilePhone":{"type":"string","description":"The mobile phone number associated with the group."},"notes":{"type":"string","description":"Extra notes about this group."},"preferredLanguage":{"description":"The preferred language associated with the group (used for the notifications).","enum":["ENGLISH","PORTUGESE","SPANISH","RUSSIAN","FRENCH","GEORGIAN","CHINESE","INDONESIAN","ROMANIAN","BURMESE","GERMAN","PORTUGUESE_BRAZIL","VIETNAMESE","ITALIAN","THAI","NORWEGIAN","PHRASE"]}},"required":["groupName"],"additionalProperties":true};const schema13 = {"type":"object","description":"Represents an address.","properties":{"city":{"type":"string","description":"The city for the address."},"country":{"type":"string","description":"The country."},"encodedKey":{"type":"string","description":"The address encoded key, which is unique and generated."},"indexInList":{"type":"integer","description":"The index of this address in the list of addresses."},"latitude":{"type":"number","description":"The GPS latitude of this address in signed degrees format (DDD.dddd) with 6 decimal positions, ranging from -90 to +90."},"line1":{"type":"string","description":"The first line of the address."},"line2":{"type":"string","description":"The second line of the address."},"longitude":{"type":"number","description":"The GPS longitude of this address in signed degrees format (DDD.dddd) with 6 decimal positions, ranging from -180 to +180."},"parentKey":{"type":"string","description":"The address parent key indicating the object owning this address. For example: client, centre, or branch."},"postcode":{"type":"string","description":"The post code."},"region":{"type":"string","description":"The region for the address."}},"additionalProperties":true};const schema14 = {"type":"object","description":"Represents a group member. A group member is person that uses the services of the bank and is member of a group. Group members may have associated information, such as their client key and a list of roles they have within the group.","properties":{"clientKey":{"type":"string","description":"The encoded key of the client assigned as member of the group."},"roles":{"type":"array","description":"The group role name associated with a group member.","items":{"$ref":"#/$defs/GroupRole"}}},"required":["clientKey"],"additionalProperties":true};const schema15 = {"type":"object","description":"Represents a group role. A group role, or group role name, is the role of a group member within the group - for example, money collector. One member could have many roles within a group.","properties":{"encodedKey":{"type":"string","description":"The encoded key of the group role name, which is auto generated, and unique."},"groupRoleNameKey":{"type":"string","description":"The group role name key."},"roleName":{"type":"string","description":"The group role name."},"roleNameId":{"type":"string","description":"The group role name ID."}},"required":["groupRoleNameKey"],"additionalProperties":true};function validate12(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){let vErrors = null;let errors = 0;if(errors === 0){if(data && typeof data == "object" && !Array.isArray(data)){let missing0;if((data.clientKey === undefined) && (missing0 = "clientKey")){validate12.errors = [{instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];return false;}else {if(data.clientKey !== undefined){const _errs2 = errors;if(typeof data.clientKey !== "string"){validate12.errors = [{instancePath:instancePath+"/clientKey",schemaPath:"#/properties/clientKey/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid0 = _errs2 === errors;}else {var valid0 = true;}if(valid0){if(data.roles !== undefined){let data1 = data.roles;const _errs4 = errors;if(errors === _errs4){if(Array.isArray(data1)){var valid1 = true;const len0 = data1.length;for(let i0=0; i0<len0; i0++){let data2 = data1[i0];const _errs6 = errors;const _errs7 = errors;if(errors === _errs7){if(data2 && typeof data2 == "object" && !Array.isArray(data2)){let missing1;if((data2.groupRoleNameKey === undefined) && (missing1 = "groupRoleNameKey")){validate12.errors = [{instancePath:instancePath+"/roles/" + i0,schemaPath:"#/$defs/GroupRole/required",keyword:"required",params:{missingProperty: missing1},message:"must have required property '"+missing1+"'"}];return false;}else {if(data2.encodedKey !== undefined){const _errs10 = errors;if(typeof data2.encodedKey !== "string"){validate12.errors = [{instancePath:instancePath+"/roles/" + i0+"/encodedKey",schemaPath:"#/$defs/GroupRole/properties/encodedKey/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid3 = _errs10 === errors;}else {var valid3 = true;}if(valid3){if(data2.groupRoleNameKey !== undefined){const _errs12 = errors;if(typeof data2.groupRoleNameKey !== "string"){validate12.errors = [{instancePath:instancePath+"/roles/" + i0+"/groupRoleNameKey",schemaPath:"#/$defs/GroupRole/properties/groupRoleNameKey/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid3 = _errs12 === errors;}else {var valid3 = true;}if(valid3){if(data2.roleName !== undefined){const _errs14 = errors;if(typeof data2.roleName !== "string"){validate12.errors = [{instancePath:instancePath+"/roles/" + i0+"/roleName",schemaPath:"#/$defs/GroupRole/properties/roleName/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid3 = _errs14 === errors;}else {var valid3 = true;}if(valid3){if(data2.roleNameId !== undefined){const _errs16 = errors;if(typeof data2.roleNameId !== "string"){validate12.errors = [{instancePath:instancePath+"/roles/" + i0+"/roleNameId",schemaPath:"#/$defs/GroupRole/properties/roleNameId/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid3 = _errs16 === errors;}else {var valid3 = true;}}}}}}else {validate12.errors = [{instancePath:instancePath+"/roles/" + i0,schemaPath:"#/$defs/GroupRole/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}var valid1 = _errs6 === errors;if(!valid1){break;}}}else {validate12.errors = [{instancePath:instancePath+"/roles",schemaPath:"#/properties/roles/type",keyword:"type",params:{type: "array"},message:"must be array"}];return false;}}var valid0 = _errs4 === errors;}else {var valid0 = true;}}}}else {validate12.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}validate12.errors = vErrors;return errors === 0;}const func0 = (ajvDistRuntimeEqualDefault.default ?? ajvDistRuntimeEqualDefault);function validate11(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){let vErrors = null;let errors = 0;if(errors === 0){if(data && typeof data == "object" && !Array.isArray(data)){let missing0;if((data.groupName === undefined) && (missing0 = "groupName")){validate11.errors = [{instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];return false;}else {if(data.addresses !== undefined){let data0 = data.addresses;const _errs2 = errors;if(errors === _errs2){if(Array.isArray(data0)){var valid1 = true;const len0 = data0.length;for(let i0=0; i0<len0; i0++){let data1 = data0[i0];const _errs4 = errors;const _errs5 = errors;if(errors === _errs5){if(data1 && typeof data1 == "object" && !Array.isArray(data1)){if(data1.city !== undefined){const _errs8 = errors;if(typeof data1.city !== "string"){validate11.errors = [{instancePath:instancePath+"/addresses/" + i0+"/city",schemaPath:"#/$defs/Address/properties/city/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid3 = _errs8 === errors;}else {var valid3 = true;}if(valid3){if(data1.country !== undefined){const _errs10 = errors;if(typeof data1.country !== "string"){validate11.errors = [{instancePath:instancePath+"/addresses/" + i0+"/country",schemaPath:"#/$defs/Address/properties/country/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid3 = _errs10 === errors;}else {var valid3 = true;}if(valid3){if(data1.encodedKey !== undefined){const _errs12 = errors;if(typeof data1.encodedKey !== "string"){validate11.errors = [{instancePath:instancePath+"/addresses/" + i0+"/encodedKey",schemaPath:"#/$defs/Address/properties/encodedKey/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid3 = _errs12 === errors;}else {var valid3 = true;}if(valid3){if(data1.indexInList !== undefined){let data5 = data1.indexInList;const _errs14 = errors;if(!(((typeof data5 == "number") && (!(data5 % 1) && !isNaN(data5))) && (isFinite(data5)))){validate11.errors = [{instancePath:instancePath+"/addresses/" + i0+"/indexInList",schemaPath:"#/$defs/Address/properties/indexInList/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];return false;}var valid3 = _errs14 === errors;}else {var valid3 = true;}if(valid3){if(data1.latitude !== undefined){let data6 = data1.latitude;const _errs16 = errors;if(!((typeof data6 == "number") && (isFinite(data6)))){validate11.errors = [{instancePath:instancePath+"/addresses/" + i0+"/latitude",schemaPath:"#/$defs/Address/properties/latitude/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid3 = _errs16 === errors;}else {var valid3 = true;}if(valid3){if(data1.line1 !== undefined){const _errs18 = errors;if(typeof data1.line1 !== "string"){validate11.errors = [{instancePath:instancePath+"/addresses/" + i0+"/line1",schemaPath:"#/$defs/Address/properties/line1/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid3 = _errs18 === errors;}else {var valid3 = true;}if(valid3){if(data1.line2 !== undefined){const _errs20 = errors;if(typeof data1.line2 !== "string"){validate11.errors = [{instancePath:instancePath+"/addresses/" + i0+"/line2",schemaPath:"#/$defs/Address/properties/line2/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid3 = _errs20 === errors;}else {var valid3 = true;}if(valid3){if(data1.longitude !== undefined){let data9 = data1.longitude;const _errs22 = errors;if(!((typeof data9 == "number") && (isFinite(data9)))){validate11.errors = [{instancePath:instancePath+"/addresses/" + i0+"/longitude",schemaPath:"#/$defs/Address/properties/longitude/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid3 = _errs22 === errors;}else {var valid3 = true;}if(valid3){if(data1.parentKey !== undefined){const _errs24 = errors;if(typeof data1.parentKey !== "string"){validate11.errors = [{instancePath:instancePath+"/addresses/" + i0+"/parentKey",schemaPath:"#/$defs/Address/properties/parentKey/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid3 = _errs24 === errors;}else {var valid3 = true;}if(valid3){if(data1.postcode !== undefined){const _errs26 = errors;if(typeof data1.postcode !== "string"){validate11.errors = [{instancePath:instancePath+"/addresses/" + i0+"/postcode",schemaPath:"#/$defs/Address/properties/postcode/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid3 = _errs26 === errors;}else {var valid3 = true;}if(valid3){if(data1.region !== undefined){const _errs28 = errors;if(typeof data1.region !== "string"){validate11.errors = [{instancePath:instancePath+"/addresses/" + i0+"/region",schemaPath:"#/$defs/Address/properties/region/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid3 = _errs28 === errors;}else {var valid3 = true;}}}}}}}}}}}}else {validate11.errors = [{instancePath:instancePath+"/addresses/" + i0,schemaPath:"#/$defs/Address/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}var valid1 = _errs4 === errors;if(!valid1){break;}}}else {validate11.errors = [{instancePath:instancePath+"/addresses",schemaPath:"#/properties/addresses/type",keyword:"type",params:{type: "array"},message:"must be array"}];return false;}}var valid0 = _errs2 === errors;}else {var valid0 = true;}if(valid0){if(data.assignedBranchKey !== undefined){const _errs30 = errors;if(typeof data.assignedBranchKey !== "string"){validate11.errors = [{instancePath:instancePath+"/assignedBranchKey",schemaPath:"#/properties/assignedBranchKey/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid0 = _errs30 === errors;}else {var valid0 = true;}if(valid0){if(data.assignedCentreKey !== undefined){const _errs32 = errors;if(typeof data.assignedCentreKey !== "string"){validate11.errors = [{instancePath:instancePath+"/assignedCentreKey",schemaPath:"#/properties/assignedCentreKey/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid0 = _errs32 === errors;}else {var valid0 = true;}if(valid0){if(data.assignedUserKey !== undefined){const _errs34 = errors;if(typeof data.assignedUserKey !== "string"){validate11.errors = [{instancePath:instancePath+"/assignedUserKey",schemaPath:"#/properties/assignedUserKey/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid0 = _errs34 === errors;}else {var valid0 = true;}if(valid0){if(data.creationDate !== undefined){const _errs36 = errors;if(errors === _errs36){if(errors === _errs36){if(!(typeof data.creationDate === "string")){validate11.errors = [{instancePath:instancePath+"/creationDate",schemaPath:"#/properties/creationDate/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}}var valid0 = _errs36 === errors;}else {var valid0 = true;}if(valid0){if(data.emailAddress !== undefined){const _errs38 = errors;if(typeof data.emailAddress !== "string"){validate11.errors = [{instancePath:instancePath+"/emailAddress",schemaPath:"#/properties/emailAddress/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid0 = _errs38 === errors;}else {var valid0 = true;}if(valid0){if(data.encodedKey !== undefined){const _errs40 = errors;if(typeof data.encodedKey !== "string"){validate11.errors = [{instancePath:instancePath+"/encodedKey",schemaPath:"#/properties/encodedKey/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid0 = _errs40 === errors;}else {var valid0 = true;}if(valid0){if(data.groupMembers !== undefined){let data19 = data.groupMembers;const _errs42 = errors;if(errors === _errs42){if(Array.isArray(data19)){var valid4 = true;const len1 = data19.length;for(let i1=0; i1<len1; i1++){const _errs44 = errors;if(!(validate12(data19[i1], {instancePath:instancePath+"/groupMembers/" + i1,parentData:data19,parentDataProperty:i1,rootData}))){vErrors = vErrors === null ? validate12.errors : vErrors.concat(validate12.errors);errors = vErrors.length;}var valid4 = _errs44 === errors;if(!valid4){break;}}}else {validate11.errors = [{instancePath:instancePath+"/groupMembers",schemaPath:"#/properties/groupMembers/type",keyword:"type",params:{type: "array"},message:"must be array"}];return false;}}var valid0 = _errs42 === errors;}else {var valid0 = true;}if(valid0){if(data.groupName !== undefined){const _errs45 = errors;if(typeof data.groupName !== "string"){validate11.errors = [{instancePath:instancePath+"/groupName",schemaPath:"#/properties/groupName/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid0 = _errs45 === errors;}else {var valid0 = true;}if(valid0){if(data.groupRoleKey !== undefined){const _errs47 = errors;if(typeof data.groupRoleKey !== "string"){validate11.errors = [{instancePath:instancePath+"/groupRoleKey",schemaPath:"#/properties/groupRoleKey/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid0 = _errs47 === errors;}else {var valid0 = true;}if(valid0){if(data.homePhone !== undefined){const _errs49 = errors;if(typeof data.homePhone !== "string"){validate11.errors = [{instancePath:instancePath+"/homePhone",schemaPath:"#/properties/homePhone/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid0 = _errs49 === errors;}else {var valid0 = true;}if(valid0){if(data.id !== undefined){const _errs51 = errors;if(typeof data.id !== "string"){validate11.errors = [{instancePath:instancePath+"/id",schemaPath:"#/properties/id/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid0 = _errs51 === errors;}else {var valid0 = true;}if(valid0){if(data.lastModifiedDate !== undefined){const _errs53 = errors;if(errors === _errs53){if(errors === _errs53){if(!(typeof data.lastModifiedDate === "string")){validate11.errors = [{instancePath:instancePath+"/lastModifiedDate",schemaPath:"#/properties/lastModifiedDate/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}}var valid0 = _errs53 === errors;}else {var valid0 = true;}if(valid0){if(data.loanCycle !== undefined){let data26 = data.loanCycle;const _errs55 = errors;if(!(((typeof data26 == "number") && (!(data26 % 1) && !isNaN(data26))) && (isFinite(data26)))){validate11.errors = [{instancePath:instancePath+"/loanCycle",schemaPath:"#/properties/loanCycle/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];return false;}var valid0 = _errs55 === errors;}else {var valid0 = true;}if(valid0){if(data.migrationEventKey !== undefined){const _errs57 = errors;if(typeof data.migrationEventKey !== "string"){validate11.errors = [{instancePath:instancePath+"/migrationEventKey",schemaPath:"#/properties/migrationEventKey/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid0 = _errs57 === errors;}else {var valid0 = true;}if(valid0){if(data.mobilePhone !== undefined){const _errs59 = errors;if(typeof data.mobilePhone !== "string"){validate11.errors = [{instancePath:instancePath+"/mobilePhone",schemaPath:"#/properties/mobilePhone/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid0 = _errs59 === errors;}else {var valid0 = true;}if(valid0){if(data.notes !== undefined){const _errs61 = errors;if(typeof data.notes !== "string"){validate11.errors = [{instancePath:instancePath+"/notes",schemaPath:"#/properties/notes/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid0 = _errs61 === errors;}else {var valid0 = true;}if(valid0){if(data.preferredLanguage !== undefined){const _errs63 = errors;let valid5;valid5 = false;for(const v0 of schema12.properties.preferredLanguage.enum){if(func0(data.preferredLanguage, v0)){valid5 = true;break;}}if(!valid5){validate11.errors = [{instancePath:instancePath+"/preferredLanguage",schemaPath:"#/properties/preferredLanguage/enum",keyword:"enum",params:{allowedValues: schema12.properties.preferredLanguage.enum},message:"must be equal to one of the allowed values"}];return false;}var valid0 = _errs63 === errors;}else {var valid0 = true;}}}}}}}}}}}}}}}}}}}}else {validate11.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}validate11.errors = vErrors;return errors === 0;}function validate10(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){let vErrors = null;let errors = 0;if(errors === 0){if(Array.isArray(data)){var valid0 = true;const len0 = data.length;for(let i0=0; i0<len0; i0++){const _errs1 = errors;if(!(validate11(data[i0], {instancePath:instancePath+"/" + i0,parentData:data,parentDataProperty:i0,rootData}))){vErrors = vErrors === null ? validate11.errors : vErrors.concat(validate11.errors);errors = vErrors.length;}var valid0 = _errs1 === errors;if(!valid0){break;}}}else {validate10.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "array"},message:"must be array"}];return false;}}validate10.errors = vErrors;return errors === 0;};validate.schema=schema11;