/**
 * Generated by @skyleague/therefore@v1.0.0-local
 * Do not manually touch this
 */
/* eslint-disable */

import type { DefinedError, ValidateFunction } from 'ajv'

import { validate as CommentValidator } from './schemas/comment.schema.js'
import { validate as ErrorResponseValidator } from './schemas/error-response.schema.js'
import { validate as GetCommentsResponseValidator } from './schemas/get-comments-response.schema.js'

/**
 * Represents information about the comment data transfer object.
 */
export interface Comment {
    /**
     * The creation date of the comment.
     */
    creationDate?: string | undefined
    /**
     * The comments's encoded key, which is auto-generated and unique.
     */
    encodedKey?: string | undefined
    /**
     * The last date when this comment was modified.
     */
    lastModifiedDate?: string | undefined
    /**
     * The encoded key of the entity that owns this comment.
     */
    ownerKey?: string | undefined
    /**
     * The type of the entity that owns this comment.
     */
    ownerType?:
        | 'CLIENT'
        | 'GROUP'
        | 'LOAN_PRODUCT'
        | 'SAVINGS_PRODUCT'
        | 'CENTRE'
        | 'BRANCH'
        | 'USER'
        | 'LOAN_ACCOUNT'
        | 'DEPOSIT_ACCOUNT'
        | 'ID_DOCUMENT'
        | 'LINE_OF_CREDIT'
        | 'GL_JOURNAL_ENTRY'
        | undefined
    /**
     * The message in the comment.
     */
    text?: string | undefined
    /**
     * The user's key.
     */
    userKey?: string | undefined
}

export const Comment = {
    validate: CommentValidator as ValidateFunction<Comment>,
    get schema() {
        return Comment.validate.schema
    },
    get errors() {
        return Comment.validate.errors ?? undefined
    },
    is: (o: unknown): o is Comment => Comment.validate(o) === true,
    parse: (o: unknown): { right: Comment } | { left: DefinedError[] } => {
        if (Comment.is(o)) {
            return { right: o }
        }
        return { left: (Comment.errors ?? []) as DefinedError[] }
    },
} as const

export interface ErrorResponse {
    errors?: RestError[] | undefined
}

export const ErrorResponse = {
    validate: ErrorResponseValidator as ValidateFunction<ErrorResponse>,
    get schema() {
        return ErrorResponse.validate.schema
    },
    get errors() {
        return ErrorResponse.validate.errors ?? undefined
    },
    is: (o: unknown): o is ErrorResponse => ErrorResponse.validate(o) === true,
    parse: (o: unknown): { right: ErrorResponse } | { left: DefinedError[] } => {
        if (ErrorResponse.is(o)) {
            return { right: o }
        }
        return { left: (ErrorResponse.errors ?? []) as DefinedError[] }
    },
} as const

export type GetCommentsResponse = Comment[]

export const GetCommentsResponse = {
    validate: GetCommentsResponseValidator as ValidateFunction<GetCommentsResponse>,
    get schema() {
        return GetCommentsResponse.validate.schema
    },
    get errors() {
        return GetCommentsResponse.validate.errors ?? undefined
    },
    is: (o: unknown): o is GetCommentsResponse => GetCommentsResponse.validate(o) === true,
    parse: (o: unknown): { right: GetCommentsResponse } | { left: DefinedError[] } => {
        if (GetCommentsResponse.is(o)) {
            return { right: o }
        }
        return { left: (GetCommentsResponse.errors ?? []) as DefinedError[] }
    },
} as const

export interface RestError {
    errorCode?: number | undefined
    errorReason?: string | undefined
    errorSource?: string | undefined
}
