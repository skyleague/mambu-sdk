/**
 * Generated by @skyleague/therefore
 * Do not manually touch this
 */
/* eslint-disable */

import { z } from 'zod'

export const DepositAccountInterestRateTier = z
    .object({
        encodedKey: z.string().describe('The encoded key of the interest rate tier, auto generated, unique').optional(),
        endingBalance: z
            .number()
            .describe('The top-limit value for the account balance in order to determine if this tier is used or not')
            .optional(),
        endingDay: z
            .number()
            .int()
            .describe('The end date for the account period. Used to determine if this interest rate tier is used or not.')
            .optional(),
        interestRate: z
            .number()
            .describe(
                'The rate used for computing the interest for an account which has the balance less than the ending balance',
            ),
    })
    .describe('Represents information about how interest rate is calculated.')

export type DepositAccountInterestRateTier = z.infer<typeof DepositAccountInterestRateTier>

export const MonthAndDay = z
    .object({
        day: z.number().int().describe('The day in the month').optional(),
        month: z.number().int().describe('The month of the year').optional(),
    })
    .describe(`Wrapper for month and day for instances where the year isn't needed`)

export type MonthAndDay = z.infer<typeof MonthAndDay>

export const CustomPredefinedFee = z
    .object({
        amount: z.number().describe('The amount of the custom fee.').optional(),
        encodedKey: z.string().describe('The encoded key of the custom predefined fee, auto generated, unique.').optional(),
        percentage: z.number().describe('The percentage of the custom fee.').optional(),
        predefinedFeeEncodedKey: z.string().describe('The encoded key of the predefined fee').optional(),
    })
    .describe(
        'The custom predefined fees, they may be used as the expected predefined fees that will be applied on the disbursement.',
    )

export type CustomPredefinedFee = z.infer<typeof CustomPredefinedFee>

export const TrancheDisbursementDetails = z
    .object({
        disbursementTransactionKey: z
            .string()
            .describe(
                'The key of the disbursement transaction logged when this tranche was disbursed. This field will be null until the tranche disbursement',
            )
            .optional(),
        expectedDisbursementDate: z
            .string()
            .datetime({ offset: true })
            .describe('The date when this tranche is supposed to be disbursed (as Organization Time)')
            .optional(),
    })
    .describe('The disbursement details regarding a loan tranche.')

export type TrancheDisbursementDetails = z.infer<typeof TrancheDisbursementDetails>

export const RevolvingAccountSettings = z
    .object({
        numberOfPreviewedInstalments: z.number().int().describe('The number of previewed instalments').optional(),
    })
    .describe('The number of previewed instalments for an account')

export type RevolvingAccountSettings = z.infer<typeof RevolvingAccountSettings>

export const PeriodicPayment = z
    .object({
        amount: z.number().describe('The PMT value used in periodic payment'),
        encodedKey: z.string().describe('The encoded key of the periodic payment, auto generated, unique.').optional(),
        toInstallment: z.number().int().describe(`The installment's position up to which the PMT will be used`),
    })
    .describe(
        'For fixed term loans there is the possibility to define a payment plan. A payment plan consists of multiple periodic payments. This class holds information about a periodic payment.',
    )

export type PeriodicPayment = z.infer<typeof PeriodicPayment>

export const BillingCycleDays = z
    .object({
        days: z.number().int().array().describe('The billing cycle start days in case it is enabled').optional(),
    })
    .describe('Defines the billing cycles settings for a loan account')

export type BillingCycleDays = z.infer<typeof BillingCycleDays>

export const PMTAdjustmentThreshold = z
    .object({
        method: z
            .enum(['WORKING_DAYS', 'CALENDAR_DAYS'])
            .describe('The method used to calculate the PMT Adjustment threshold. Supported value is CALENDAR_DAYS')
            .optional(),
        numberOfDays: z.number().int().describe('The number of days that trigger a PMT Adjustment.').optional(),
    })
    .describe('Represents PMT Adjustment threshold settings for loan accounts and loan products.')

export type PMTAdjustmentThreshold = z.infer<typeof PMTAdjustmentThreshold>

export const DaysInMonth = z
    .object({
        daysInMonth: z
            .number()
            .int()
            .array()
            .describe(
                ' Specifies the day(s) of the month when the interest application dates should be. Only available if the Interest Application Method is InterestApplicationMethodDTO#FIXED_DAYS_OF_MONTH. Currently only 1 value can be specified.',
            )
            .optional(),
        shortMonthHandlingMethod: z
            .enum(['LAST_DAY_IN_MONTH', 'FIRST_DAY_OF_NEXT_MONTH'])
            .describe(
                'Determines how to handle the short months, if they select a fixed day of month > 28. Will be null if no such date is selected. Only available if the Interest Application Method is InterestApplicationMethodDTO#FIXED_DAYS_OF_MONTH.',
            )
            .optional(),
    })
    .describe('Enumeration for days of month and method of handling shorter months.')

export type DaysInMonth = z.infer<typeof DaysInMonth>

export const AccountInterestRateSettings = z
    .object({
        encodedKey: z.string().describe('The encoded key of the interest rate settings, auto generated, unique').optional(),
        indexSourceKey: z.string().describe('Index rate source key.').optional(),
        interestRate: z.number().describe('Interest rate value.').optional(),
        interestRateCeilingValue: z
            .number()
            .describe('Maximum value allowed for index based interest rate. Valid only for index interest rate.')
            .optional(),
        interestRateFloorValue: z
            .number()
            .describe('Minimum value allowed for index based interest rate. Valid only for index interest rate.')
            .optional(),
        interestRateReviewCount: z
            .number()
            .int()
            .describe('Interest rate review frequency unit count. Valid only for index interest rate.')
            .optional(),
        interestRateReviewUnit: z
            .enum(['DAYS', 'WEEKS', 'MONTHS'])
            .describe('Interest rate review frequency measurement unit. Valid only for index interest rate.')
            .optional(),
        interestRateSource: z
            .enum(['FIXED_INTEREST_RATE', 'INDEX_INTEREST_RATE'])
            .describe('Interest calculation method: fixed or indexed(interest spread + active organization index interest rate)'),
        interestSpread: z.number().describe('Interest spread value.').optional(),
        validFrom: z.string().datetime({ offset: true }).describe('Date since an interest rate is valid'),
    })
    .describe('Adjustable interest rates settings for loan account')

export type AccountInterestRateSettings = z.infer<typeof AccountInterestRateSettings>

export const LoanTransactionDetails = z
    .object({
        encodedKey: z.string().describe('The encoded key of the entity, generated, globally unique').optional(),
        internalTransfer: z
            .boolean()
            .describe('Whether the transaction was transferred between loans or deposit accounts')
            .optional(),
        targetDepositAccountKey: z
            .string()
            .describe(
                'In case of a transaction to a deposit account this represent the deposit account key to which the transaction was made.',
            )
            .optional(),
        transactionChannelId: z
            .string()
            .describe('The ID of the transaction channel associated with the transaction details.')
            .optional(),
        transactionChannelKey: z
            .string()
            .describe('The encoded key of the transaction channel associated with the transaction details.')
            .optional(),
    })
    .describe('Represents the loan transaction details.')

export type LoanTransactionDetails = z.infer<typeof LoanTransactionDetails>

export const Currency = z
    .object({
        code: z
            .enum([
                'AED',
                'AFN',
                'ALL',
                'AMD',
                'ANG',
                'AOA',
                'ARS',
                'AUD',
                'AWG',
                'AZN',
                'BAM',
                'BBD',
                'BDT',
                'BGN',
                'BHD',
                'BIF',
                'BMD',
                'BND',
                'BOB',
                'BOV',
                'BRL',
                'BSD',
                'BTN',
                'BWP',
                'BYR',
                'BYN',
                'BZD',
                'CAD',
                'CDF',
                'CHE',
                'CHF',
                'CHW',
                'CLF',
                'CLP',
                'CNY',
                'COP',
                'COU',
                'CRC',
                'CUC',
                'CUP',
                'CVE',
                'CZK',
                'DJF',
                'DKK',
                'DOP',
                'DZD',
                'EGP',
                'ERN',
                'ETB',
                'EUR',
                'FJD',
                'FKP',
                'GBP',
                'GEL',
                'GHS',
                'GIP',
                'GMD',
                'GNF',
                'GTQ',
                'GYD',
                'HKD',
                'HNL',
                'HRK',
                'HTG',
                'HUF',
                'IDR',
                'ILS',
                'INR',
                'IQD',
                'IRR',
                'ISK',
                'JMD',
                'JOD',
                'JPY',
                'KES',
                'KGS',
                'KHR',
                'KMF',
                'KPW',
                'KRW',
                'KWD',
                'KYD',
                'KZT',
                'LAK',
                'LBP',
                'LKR',
                'LRD',
                'LSL',
                'LTL',
                'LVL',
                'LYD',
                'MAD',
                'MDL',
                'MGA',
                'MKD',
                'MMK',
                'MNT',
                'MOP',
                'MRO',
                'MRU',
                'MUR',
                'MVR',
                'MWK',
                'MXN',
                'MXV',
                'MYR',
                'MZN',
                'NAD',
                'NGN',
                'NIO',
                'NOK',
                'NPR',
                'NZD',
                'OMR',
                'PAB',
                'PEN',
                'PGK',
                'PHP',
                'PKR',
                'PLN',
                'PYG',
                'QAR',
                'RON',
                'RSD',
                'RUB',
                'RWF',
                'SAR',
                'SBD',
                'SCR',
                'SDG',
                'SEK',
                'SGD',
                'SHP',
                'SLL',
                'SOS',
                'SRD',
                'STD',
                'STN',
                'SVC',
                'SYP',
                'SZL',
                'THB',
                'TJS',
                'TMT',
                'TND',
                'TOP',
                'TRY',
                'TTD',
                'TWD',
                'TZS',
                'UAH',
                'UGX',
                'USD',
                'USN',
                'UYI',
                'UYU',
                'UYW',
                'UZS',
                'VED',
                'VEF',
                'VES',
                'VND',
                'VUV',
                'WST',
                'XAG',
                'XAU',
                'XAF',
                'XBA',
                'XBB',
                'XBC',
                'XBD',
                'XCD',
                'XDR',
                'XOF',
                'XPD',
                'XPF',
                'XPT',
                'XSU',
                'XTS',
                'XUA',
                'XXX',
                'YER',
                'ZAR',
                'ZIG',
                'ZMK',
                'ZWL',
                'ZMW',
                'SSP',
                'NON_FIAT',
            ])
            .describe('Fiat(ISO-4217) currency code or NON_FIAT for non fiat currencies.')
            .optional(),
        currencyCode: z.string().describe('Currency code for NON_FIAT currency.').optional(),
    })
    .describe('Represents a currency eg. USD, EUR.')

export type Currency = z.infer<typeof Currency>

export const DepositAccountOverdraftInterestRateSettings = z
    .object({
        encodedKey: z
            .string()
            .describe('The encoded key for the set of interest settings, which is auto-generated and unique.')
            .optional(),
        interestChargeFrequency: z
            .enum(['ANNUALIZED', 'EVERY_MONTH', 'EVERY_FOUR_WEEKS', 'EVERY_WEEK', 'EVERY_DAY', 'EVERY_X_DAYS'])
            .describe('The interest charge frequency, which shows how often interest is charged on loan or deposit accounts.')
            .optional(),
        interestChargeFrequencyCount: z
            .number()
            .int()
            .describe('The number of times to apply interest in a time period.')
            .optional(),
        interestRate: z.number().describe('The interest rate for the deposit account.').optional(),
        interestRateReviewCount: z
            .number()
            .int()
            .describe('The number of times to review the interest rate in a time period.')
            .optional(),
        interestRateReviewUnit: z
            .enum(['DAYS', 'WEEKS', 'MONTHS'])
            .describe('The time unit to use to determine the frequency of interest rate reviews.')
            .optional(),
        interestRateSource: z
            .enum(['FIXED_INTEREST_RATE', 'INDEX_INTEREST_RATE'])
            .describe('The interest calculation method used.')
            .optional(),
        interestRateTerms: z
            .enum(['FIXED', 'TIERED', 'TIERED_PERIOD', 'TIERED_BAND'])
            .describe('The terms for how interest rate is determined when accruing for an account.')
            .optional(),
        interestRateTiers: DepositAccountInterestRateTier.array()
            .describe('The list of interest rate tiers, which hold the values to define how interest is calculated.')
            .optional(),
        interestSpread: z
            .number()
            .describe('The index interest rate that is used to calculate the interest rate that is applied to accounts.')
            .optional(),
    })
    .describe('Represents information about overdraft interest rate settings for deposit accounts.')

export type DepositAccountOverdraftInterestRateSettings = z.infer<typeof DepositAccountOverdraftInterestRateSettings>

export const DepositAccountInterestRateSettings = z
    .object({
        encodedKey: z
            .string()
            .describe('The encoded key for the set of interest settings, which is auto-generated and unique.')
            .optional(),
        interestChargeFrequency: z
            .enum(['ANNUALIZED', 'EVERY_MONTH', 'EVERY_FOUR_WEEKS', 'EVERY_WEEK', 'EVERY_DAY', 'EVERY_X_DAYS'])
            .describe('The interest charge frequency, which shows how often interest is charged on loan or deposit accounts.')
            .optional(),
        interestChargeFrequencyCount: z
            .number()
            .int()
            .describe('The number of times to apply interest in a time period.')
            .optional(),
        interestRate: z.number().describe('The interest rate for the deposit account.').optional(),
        interestRateReviewCount: z
            .number()
            .int()
            .describe('The number of times to review the interest rate in a time period.')
            .optional(),
        interestRateReviewUnit: z
            .enum(['DAYS', 'WEEKS', 'MONTHS'])
            .describe('The time unit to use to determine the frequency of interest rate reviews.')
            .optional(),
        interestRateSource: z
            .enum(['FIXED_INTEREST_RATE', 'INDEX_INTEREST_RATE'])
            .describe('The interest calculation method used.')
            .optional(),
        interestRateTerms: z
            .enum(['FIXED', 'TIERED', 'TIERED_PERIOD', 'TIERED_BAND'])
            .describe('The terms for how interest rate is determined when accruing for an account.')
            .optional(),
        interestRateTiers: DepositAccountInterestRateTier.array()
            .describe('The list of interest rate tiers, which hold the values to define how interest is calculated.')
            .optional(),
        interestSpread: z
            .number()
            .describe('The index interest rate that is used to calculate the interest rate that is applied to accounts.')
            .optional(),
    })
    .describe('Represents information about the interest rate settings for deposit accounts.')

export type DepositAccountInterestRateSettings = z.infer<typeof DepositAccountInterestRateSettings>

export const DepositAccountInterestPaymentSettings = z
    .object({
        interestPaymentDates: MonthAndDay.array()
            .describe('The list of all dates when the interest is paid into the deposit account.')
            .optional(),
        interestPaymentPoint: z
            .enum([
                'FIRST_DAY_OF_MONTH',
                'EVERY_WEEK',
                'EVERY_OTHER_WEEK',
                'EVERY_MONTH',
                'EVERY_3_MONTHS',
                'ON_FIXED_DATES',
                'DAILY',
                'ANNUALLY',
                'BI_ANNUALLY',
                'ON_ACCOUNT_MATURITY',
            ])
            .describe('The interest payment point, which specifies when the interest should be paid to the account.')
            .optional(),
    })
    .describe('Represents information about the interest payment settings.')

export type DepositAccountInterestPaymentSettings = z.infer<typeof DepositAccountInterestPaymentSettings>

export const Amount = z
    .object({
        due: z.number().describe('The due amount.').optional(),
        expected: z.number().describe('The expected amount, which is sum of paid and due amounts.').optional(),
        paid: z.number().describe('The paid amount.').optional(),
    })
    .describe('Represents a simple installment amount structure.')

export type Amount = z.infer<typeof Amount>

export const AmountWithReduced = z
    .object({
        due: z.number().describe('The due amount.').optional(),
        expected: z.number().describe('The expected amount, which is sum of paid and due amounts.').optional(),
        paid: z.number().describe('The paid amount.').optional(),
        reduced: z.number().describe('The reduced amount.').optional(),
    })
    .describe('Represents a simple installment amount structure.')

export type AmountWithReduced = z.infer<typeof AmountWithReduced>

export const FeeAmount = z
    .object({
        due: z.number().describe('The due amount.').optional(),
        expected: z.number().describe('The expected amount, which is sum of paid and due amounts.').optional(),
        expectedUnapplied: z
            .number()
            .describe(
                'The expected amount, which is the sum of unapplied fee and planned fee due amounts. This value is not always retrieved. It is retrieved when the loan schedule is requestedwith full details.',
            )
            .optional(),
        paid: z.number().describe('The paid amount.').optional(),
    })
    .describe('Represents a fee amount.')

export type FeeAmount = z.infer<typeof FeeAmount>

export const LoanTranche = z
    .object({
        amount: z.number().describe('The amount this tranche has available for disburse'),
        disbursementDetails: TrancheDisbursementDetails.optional(),
        encodedKey: z.string().describe('The encoded key of the transaction details , auto generated, unique.').optional(),
        fees: CustomPredefinedFee.array().describe('Fees that are associated with this tranche').optional(),
        trancheNumber: z.number().int().describe('Index indicating the tranche number').optional(),
    })
    .describe(
        `In some cases organizations may approve loans but not disburse the full amount initially. They would like to spread the disbursement (and risk) over time. Likewise for the client, they may not need the full loan amount up front. They may want to have a loan to buy some equipment for their business but will make one purchase today and another purchase in a few months.  In these cases, they don't need the full amount and wouldn't want to pay interest on cash they don't need yet. A solution for this matter is the usage of disbursement in tranches. This class holds the information required for one of this tranche. `,
    )

export type LoanTranche = z.infer<typeof LoanTranche>

export const ScheduleSettings = z
    .object({
        amortizationPeriod: z
            .number()
            .int()
            .describe('The PMT is calculated as the loan would have [amortizationPeriod] installments.')
            .optional(),
        billingCycle: BillingCycleDays.optional(),
        defaultFirstRepaymentDueDateOffset: z
            .number()
            .int()
            .describe(
                'The default first repayment due date offset, indicates how many days the first repayment due date should be extended(all other due dates from the schedule are relative to first repayment due date - they will also be affected by the offset)',
            )
            .optional(),
        fixedDaysOfMonth: z
            .number()
            .int()
            .array()
            .describe(
                'Specifies the days of the month when the repayment due dates should be. Only available if the Repayment Methodology is FIXED_DAYS_OF_MONTH.',
            )
            .optional(),
        gracePeriod: z
            .number()
            .int()
            .describe('The grace period. Represents the grace period for loan repayment - in number of installments.'),
        gracePeriodType: z
            .enum(['NONE', 'PAY_INTEREST_ONLY', 'INTEREST_FORGIVENESS'])
            .describe('The grace period type. Representing the type of grace period which is possible for a loan account.')
            .optional(),
        hasCustomSchedule: z
            .boolean()
            .describe(
                'Flag used when the repayments schedule for the current account was determined by the user, by editing the due dates or the principal due',
            )
            .optional(),
        paymentPlan: PeriodicPayment.array().describe('A list of periodic payments for the current loan account.').optional(),
        periodicPayment: z
            .number()
            .describe(
                'The periodic payment amount for the accounts which have balloon payments or Reduce Number of Installments and Optimized Payments',
            )
            .optional(),
        previewSchedule: RevolvingAccountSettings.optional(),
        principalRepaymentInterval: z
            .number()
            .int()
            .describe('The principal repayment interval. Indicates the interval of repayments that the principal has to be paid.')
            .optional(),
        repaymentInstallments: z
            .number()
            .int()
            .describe('The repayment installments. Represents how many installments are required to pay back the loan.')
            .optional(),
        repaymentPeriodCount: z
            .number()
            .int()
            .describe(
                'The repayment period count. Represents how often the loan is to be repaid: stored based on the type repayment option.',
            )
            .optional(),
        repaymentPeriodUnit: z
            .enum(['DAYS', 'WEEKS', 'MONTHS', 'YEARS'])
            .describe('The repayment period unit. Represents the frequency of loan repayment.')
            .optional(),
        repaymentScheduleMethod: z
            .enum(['NONE', 'FIXED', 'DYNAMIC'])
            .describe(
                `The repayment schedule method. Represents the method that determines whether the schedule will be fixed all over the loan account's life cycle or will be dynamically recomputed when required.`,
            )
            .optional(),
        scheduleDueDatesMethod: z
            .enum(['INTERVAL', 'FIXED_DAYS_OF_MONTH'])
            .describe(
                'The schedule due dates method. Represents the methodology used by this account to compute the due dates of the repayments.',
            )
            .optional(),
        shortMonthHandlingMethod: z
            .enum(['LAST_DAY_IN_MONTH', 'FIRST_DAY_OF_NEXT_MONTH'])
            .describe(
                'The short handling method. Determines how to handle the short months, if they select a fixed day of month > 28. Will be null if no such date is selected and also for the Interval methodology. Only available if the Repayment Methodology is FIXED_DAYS_OF_MONTH.',
            )
            .optional(),
    })
    .describe('The schedule settings, holds all schedule properties.')

export type ScheduleSettings = z.infer<typeof ScheduleSettings>

export const LoanAccountRedrawSettings = z
    .object({
        restrictNextDueWithdrawal: z
            .boolean()
            .describe(
                '`TRUE` if withdrawing amounts that reduce the next due instalment repayment is restricted, `FALSE` otherwise.',
            ),
    })
    .describe('Represents the redraw settings for a loan account.')

export type LoanAccountRedrawSettings = z.infer<typeof LoanAccountRedrawSettings>

export const PrincipalPaymentAccountSettings = z
    .object({
        amount: z.number().describe('Fixed amount for being used for the repayments principal due.').optional(),
        encodedKey: z
            .string()
            .describe('The encoded key of the principal payment base settings, auto generated, unique.')
            .optional(),
        includeFeesInFloorAmount: z
            .boolean()
            .describe(
                'Boolean flag, if true, the fees will be included along with the principal in the repayment floor amount, for a revolving credit account',
            )
            .optional(),
        includeInterestInFloorAmount: z
            .boolean()
            .describe(
                'Boolean flag, if true, the interest will be included along with the principal in the repayment floor amount, for a revolving credit account',
            )
            .optional(),
        percentage: z.number().describe('Percentage of principal amount used for the repayments principal due.').optional(),
        principalCeilingValue: z
            .number()
            .describe('The maximum principal due amount a repayment made with this settings can have')
            .optional(),
        principalFloorValue: z
            .number()
            .describe('The minimum principal due amount a repayment made with this settings can have')
            .optional(),
        principalPaymentMethod: z
            .enum([
                'FLAT',
                'OUTSTANDING_PRINCIPAL_PERCENTAGE',
                'PRINCIPAL_PERCENTAGE_LAST_DISB',
                'TOTAL_BALANCE_PERCENTAGE',
                'TOTAL_BALANCE_FLAT',
                'TOTAL_PRINCIPAL_PERCENTAGE',
            ])
            .describe('The method of principal payment for revolving credit.')
            .optional(),
        totalDueAmountFloor: z
            .number()
            .describe('The minimum total due amount a repayment made with this settings can have')
            .optional(),
        totalDuePayment: z
            .enum([
                'FLAT',
                'OUTSTANDING_PRINCIPAL_PERCENTAGE',
                'PRINCIPAL_PERCENTAGE_LAST_DISB',
                'TOTAL_BALANCE_PERCENTAGE',
                'TOTAL_BALANCE_FLAT',
                'TOTAL_PRINCIPAL_PERCENTAGE',
            ])
            .describe('The method of total due payment for revolving credit')
            .optional(),
    })
    .describe(
        'The principal payment account settings, holds the required information for the principal payment process of an account.',
    )

export type PrincipalPaymentAccountSettings = z.infer<typeof PrincipalPaymentAccountSettings>

export const PrepaymentSettings = z
    .object({
        applyInterestOnPrepaymentMethod: z
            .enum(['AUTOMATIC', 'MANUAL'])
            .describe('Apply interest on prepayment method copied from loan product on which this account is based.')
            .optional(),
        elementsRecalculationMethod: z
            .enum(['PRINCIPAL_EXPECTED_FIXED', 'TOTAL_EXPECTED_FIXED'])
            .describe(
                'The elements recalculation method, indicates how the declining balance with equal installments repayments are recalculated.',
            )
            .optional(),
        ercFreeAllowanceAmount: z.number().optional(),
        ercFreeAllowancePercentage: z
            .number()
            .describe('Early repayment charge fee free allowance in percentage per year')
            .optional(),
        prepaymentRecalculationMethod: z
            .enum([
                'NO_RECALCULATION',
                'RESCHEDULE_REMAINING_REPAYMENTS',
                'RECALCULATE_SCHEDULE_KEEP_SAME_NUMBER_OF_TERMS',
                'RECALCULATE_SCHEDULE_KEEP_SAME_PRINCIPAL_AMOUNT',
                'RECALCULATE_SCHEDULE_KEEP_SAME_TOTAL_REPAYMENT_AMOUNT',
                'REDUCE_AMOUNT_PER_INSTALLMENT',
                'REDUCE_NUMBER_OF_INSTALLMENTS',
                'REDUCE_NUMBER_OF_INSTALLMENTS_NEW',
            ])
            .describe('Prepayment recalculation method copied from the loan product on which this account is based.')
            .optional(),
        principalPaidInstallmentStatus: z
            .enum(['PARTIALLY_PAID', 'PAID', 'ORIGINAL_TOTAL_EXPECTED_PAID'])
            .describe('Installment status for the case when principal is paid off (copied from loan product).')
            .optional(),
    })
    .describe('The prepayment settings, holds all prepayment properties.')

export type PrepaymentSettings = z.infer<typeof PrepaymentSettings>

export const PlannedInstallmentFee = z
    .object({
        amount: z.number().describe('The amount of the planned fee.').optional(),
        applyOnDate: z
            .string()
            .datetime({ offset: true })
            .describe(
                `The date when a planned fee should be applied, overriding installment's due date. It should match the interval of the installment. If it belong to first installment, it should be between disbursement date and installment due date.`,
            )
            .optional(),
        encodedKey: z.string().describe('The encoded key of the planned installment fee, auto generated, unique.').optional(),
        installmentKey: z
            .string()
            .describe('The encoded key of the installment on which the predefined fee is planned.')
            .optional(),
        installmentNumber: z
            .number()
            .int()
            .describe(
                'The number of the installment on which the predefined fee is planned. It is used only in the case when fees are created at the same time with the loan account creation or during preview schedule, before account creation, otherwise this should be empty and installmentKey will be used to identify an installment.',
            )
            .optional(),
        predefinedFeeKey: z.string().describe('The encoded key of the predefined fee which is planned.'),
    })
    .describe('The planned fee details holds the information related to the installment key, predefined fee key and amount')

export type PlannedInstallmentFee = z.infer<typeof PlannedInstallmentFee>

export const PenaltySettings = z
    .object({
        loanPenaltyCalculationMethod: z
            .enum(['NONE', 'OVERDUE_BALANCE', 'OVERDUE_BALANCE_AND_INTEREST', 'OUTSTANDING_PRINCIPAL'])
            .describe('The last penalty calculation method, represents on what amount are the penalties calculated.')
            .optional(),
        penaltyRate: z
            .number()
            .describe('The penalty rate, represents the rate (in percent) which is charged as a penalty.')
            .optional(),
    })
    .describe('The penalty settings, holds all the fields regarding penalties')

export type PenaltySettings = z.infer<typeof PenaltySettings>

export const InterestSettings = z
    .object({
        accountInterestRateSettings: AccountInterestRateSettings.array()
            .describe('Adjustable interest rates settings for loan account')
            .optional(),
        accrueInterestAfterMaturity: z
            .boolean()
            .describe(
                'The accrue interest after maturity. If the product support this option, specify if the interest should be accrued after the account maturity date.',
            )
            .optional(),
        accrueLateInterest: z.boolean().describe('Indicates whether late interest is accrued for this loan account').optional(),
        effectiveInterestRate: z
            .number()
            .describe(
                'The effective interest rate. Represents the interest rate for the loan accounts with semi-annually compounding product.',
            )
            .optional(),
        interestApplicationDays: DaysInMonth.optional(),
        interestApplicationMethod: z
            .enum(['AFTER_DISBURSEMENT', 'REPAYMENT_DUE_DATE', 'FIXED_DAYS_OF_MONTH'])
            .describe(
                `The interest application method. Represents the interest application method that determines whether the interest gets applied on the account's disbursement or on each repayment.`,
            )
            .optional(),
        interestBalanceCalculationMethod: z
            .enum(['ONLY_PRINCIPAL', 'PRINCIPAL_AND_INTEREST'])
            .describe(
                `The interest balance calculation method. Represents the option which determines the way the balance for the account's interest is computed.`,
            )
            .optional(),
        interestCalculationMethod: z
            .enum(['FLAT', 'DECLINING_BALANCE', 'DECLINING_BALANCE_DISCOUNTED', 'EQUAL_INSTALLMENTS'])
            .describe('The interest calculation method. Holds the type of interest calculation method.')
            .optional(),
        interestChargeFrequency: z
            .enum(['ANNUALIZED', 'EVERY_MONTH', 'EVERY_FOUR_WEEKS', 'EVERY_WEEK', 'EVERY_DAY', 'EVERY_X_DAYS'])
            .describe(
                'The interest change frequency. Holds the possible values for how often is interest charged on loan or deposit accounts',
            )
            .optional(),
        interestRate: z
            .number()
            .describe(
                'The interest rate. Represents the interest rate for the loan account. The interest on loans is accrued on a daily basis, which allows charging the clients only for the days they actually used the loan amount.',
            )
            .optional(),
        interestRateReviewCount: z.number().int().describe('Interest rate update frequency unit count.').optional(),
        interestRateReviewUnit: z
            .enum(['DAYS', 'WEEKS', 'MONTHS'])
            .describe('The interest rate review unit. Defines the interest rate update frequency measurement unit.')
            .optional(),
        interestRateSource: z
            .enum(['FIXED_INTEREST_RATE', 'INDEX_INTEREST_RATE'])
            .describe(
                'The interest rate source. Represents the interest calculation method: fixed or (interest spread + active organization index interest rate)',
            )
            .optional(),
        interestSpread: z
            .number()
            .describe('Interest to be added to active organization index interest rate in order to find out actual interest rate')
            .optional(),
        interestType: z
            .enum(['SIMPLE_INTEREST', 'CAPITALIZED_INTEREST', 'COMPOUNDING_INTEREST'])
            .describe('The possible values for how we compute and apply the interest')
            .optional(),
        pmtAdjustmentThreshold: PMTAdjustmentThreshold.optional(),
    })
    .describe('The interest settings, holds all the properties regarding interests for the loan account.')

export type InterestSettings = z.infer<typeof InterestSettings>

export const Guarantor = z
    .object({
        amount: z.number().describe('The amount used by the client for the guaranty'),
        assetName: z
            .string()
            .describe('The name of a value the client guarantees with (populated when the guaranty type is ASSET)')
            .optional(),
        depositAccountKey: z
            .string()
            .describe(
                'The key of the deposit account used by the guarantor (populated when the guaranty type is GUARANTOR). It can be null.',
            )
            .optional(),
        encodedKey: z.string().describe('The encoded key of the security, auto generated, unique.').optional(),
        guarantorKey: z.string().describe('The key of the client/group used as the guarantor.'),
        guarantorType: z.enum(['CLIENT', 'GROUP']).describe('The type of the guarantor (client/group)'),
    })
    .passthrough()
    .describe(
        'Guarantor, holds information about a client guaranty entry. It can be defined based on another client which guarantees (including or not a savings account whether it is a client of the organization using Mambu or not) or based on a value the client holds (an asset)',
    )

export type Guarantor = z.infer<typeof Guarantor>

export const InvestorFund = z
    .object({
        amount: z.number().describe('The amount used by the client for the guaranty'),
        assetName: z
            .string()
            .describe('The name of a value the client guarantees with (populated when the guaranty type is ASSET)')
            .optional(),
        depositAccountKey: z
            .string()
            .describe(
                'The key of the deposit account used by the guarantor (populated when the guaranty type is GUARANTOR). It can be null.',
            )
            .optional(),
        encodedKey: z.string().describe('The encoded key of the entity, generated, globally unique').optional(),
        guarantorKey: z.string().describe('The key of the client/group used as the guarantor.'),
        guarantorType: z.enum(['CLIENT', 'GROUP']).describe('The type of the guarantor (client/group)'),
        id: z
            .string()
            .describe('Investor fund unique identifier. All versions of an investor fund will have same id.')
            .optional(),
        interestCommission: z.number().describe('The constraint minimum value').optional(),
        sharePercentage: z.number().describe('Percentage of loan shares this investor owns').optional(),
    })
    .describe(
        'Contains the details about an investor fund including fields like encoded key, guarantor type, amount and guarantor key',
    )

export type InvestorFund = z.infer<typeof InvestorFund>

export const FeesAccountSettings = z
    .object({
        feeRate: z
            .number()
            .describe(
                'The fee rate. Represents the fee rate for the loan account. The fee on loans is accrued on a daily basis, which allows charging the clients only for the days they actually used the loan amount.',
            )
            .optional(),
    })
    .describe('The fee settings, holds all the properties regarding fees for the loan account.')

export type FeesAccountSettings = z.infer<typeof FeesAccountSettings>

export const DisbursementDetails = z
    .object({
        disbursementDate: z
            .string()
            .datetime({ offset: true })
            .describe('The activation date, the date when the disbursement actually took place.')
            .optional(),
        encodedKey: z.string().describe('The encoded key of the disbursement details, auto generated, unique').optional(),
        expectedDisbursementDate: z
            .string()
            .datetime({ offset: true })
            .describe('The date of the expected disbursement.Stored as Organization Time.')
            .optional(),
        fees: CustomPredefinedFee.array().describe('List of fees that should be applied at the disbursement time.').optional(),
        firstRepaymentDate: z
            .string()
            .datetime({ offset: true })
            .describe('The date of the expected first repayment. Stored as Organization Time.')
            .optional(),
        transactionDetails: LoanTransactionDetails.optional(),
    })
    .describe(
        'The the disbursement details it holds the information related to the disbursement details as disbursement date, first repayment date, disbursement fees.',
    )

export type DisbursementDetails = z.infer<typeof DisbursementDetails>

export const Balances = z
    .object({
        feesBalance: z
            .number()
            .describe('The fees balance. Represents the total fees expected to be paid on this account at a given moment.')
            .optional(),
        feesDue: z.number().describe('The fees due. Representing the total fees due for the account.').optional(),
        feesPaid: z.number().describe('The fees paid. Represents the total fees paid for the account.').optional(),
        holdBalance: z.number().describe('The sum of all the authorization hold amounts on this account.').optional(),
        interestBalance: z
            .number()
            .describe(
                'Represents the total interest owed by the client (total interest applied for account minus interest paid).',
            )
            .optional(),
        interestDue: z
            .number()
            .describe(`The interest due. Indicates how much interest it's due for the account at this moment.`)
            .optional(),
        interestFromArrearsBalance: z
            .number()
            .describe(
                'The interest from arrears balance. Indicates interest from arrears owned by the client, from now on. (total interest from arrears accrued for account - interest from arrears paid).',
            )
            .optional(),
        interestFromArrearsDue: z
            .number()
            .describe(
                `The interest from arrears due. Indicates how much interest from arrears it's due for the account at this moment.`,
            )
            .optional(),
        interestFromArrearsPaid: z
            .number()
            .describe('The interest from arrears paid, indicates total interest from arrears paid into the account.')
            .optional(),
        interestPaid: z.number().describe('The interest paid, indicates total interest paid into the account.').optional(),
        penaltyBalance: z
            .number()
            .describe('The penalty balance. Represents the total penalty expected to be paid on this account at a given moment.')
            .optional(),
        penaltyDue: z.number().describe('The penalty due. Represents the total penalty amount due for the account.').optional(),
        penaltyPaid: z
            .number()
            .describe('The Penalty paid. Represents the total penalty amount paid for the account.')
            .optional(),
        principalBalance: z
            .number()
            .describe('The total principal owned by the client, from now on (principal disbursed - principal paid).')
            .optional(),
        principalDue: z.number().describe(`The principal due, indicates how much principal it's due at this moment.`).optional(),
        principalPaid: z.number().describe('The principal paid, holds the value of the total paid into the account.').optional(),
        redrawBalance: z.number().describe('The total redraw amount owned by the client, from now on.').optional(),
    })
    .describe('The loan account balance details.')

export type Balances = z.infer<typeof Balances>

export const Asset = z
    .object({
        amount: z.number().describe('The amount used by the client for the guaranty'),
        assetName: z
            .string()
            .describe('The name of a value the client guarantees with (populated when the guaranty type is ASSET)'),
        depositAccountKey: z
            .string()
            .describe(
                'The key of the deposit account used by the guarantor (populated when the guaranty type is GUARANTOR). It can be null.',
            )
            .optional(),
        encodedKey: z.string().describe('The encoded key of the security, auto generated, unique.').optional(),
        guarantorKey: z.string().describe('The key of the client/group used as the guarantor.').optional(),
        guarantorType: z.enum(['CLIENT', 'GROUP']).describe('The type of the guarantor (client/group)').optional(),
        originalAmount: z.number().describe('The original amount used by the client for a collateral asset').optional(),
        originalCurrency: Currency.optional(),
    })
    .passthrough()
    .describe('Asset, holds information about a client asset entry.')

export type Asset = z.infer<typeof Asset>

export const AccountArrearsSettings = z
    .object({
        dateCalculationMethod: z
            .enum(['ACCOUNT_FIRST_WENT_TO_ARREARS', 'LAST_LATE_REPAYMENT', 'ACCOUNT_FIRST_BREACHED_MATERIALITY_THRESHOLD'])
            .describe('The arrears date calculation method.')
            .optional(),
        encodedKey: z.string().describe('The encoded key of the arrears base settings, auto generated, unique.').optional(),
        monthlyToleranceDay: z.number().int().describe('Defines monthly arrears tolerance day value.').optional(),
        nonWorkingDaysMethod: z
            .enum(['INCLUDED', 'EXCLUDED'])
            .describe(
                'Shows whether the non working days are taken in consideration or not when applying penaltees/late fees or when setting an account into arrears',
            )
            .optional(),
        toleranceCalculationMethod: z
            .enum(['ARREARS_TOLERANCE_PERIOD', 'MONTHLY_ARREARS_TOLERANCE_DAY'])
            .describe('Defines the tolerance calculation method')
            .optional(),
        toleranceFloorAmount: z.number().describe('The tolerance floor amount.').optional(),
        tolerancePercentageOfOutstandingPrincipal: z.number().describe('Defines the arrears tolerance amount.').optional(),
        tolerancePeriod: z.number().int().describe('Defines the arrears tolerance period value.').optional(),
    })
    .describe('The account arrears settings, holds the required information for the arrears settings of an account.')

export type AccountArrearsSettings = z.infer<typeof AccountArrearsSettings>

export const DepositAccountOwnershipHistory = z
    .object({
        previousOwnerKey: z.string().describe('They key of the previous account holder').optional(),
        transferDate: z.string().datetime({ offset: true }).describe('The transfer date of the account ownership').optional(),
    })
    .describe('The history of deposit account ownership')

export type DepositAccountOwnershipHistory = z.infer<typeof DepositAccountOwnershipHistory>

export const DepositAccountOverdraftSettings = z
    .object({
        allowOverdraft: z.boolean().describe('`TRUE` if this account supports overdraft, `FALSE` otherwise.').optional(),
        overdraftExpiryDate: z.string().datetime({ offset: true }).describe('The expiration date of an overdraft.').optional(),
        overdraftLimit: z
            .number()
            .describe('The limit amount that may be taken out as overdraft, where null means 0.')
            .optional(),
    })
    .describe(`Represents information about a deposit account's overdraft settings.`)

export type DepositAccountOverdraftSettings = z.infer<typeof DepositAccountOverdraftSettings>

export const DepositAccountOverdraftInterestSettings = z
    .object({
        interestRateSettings: DepositAccountOverdraftInterestRateSettings.optional(),
    })
    .describe(`Represents information about a deposit account's overdraft interest settings.`)

export type DepositAccountOverdraftInterestSettings = z.infer<typeof DepositAccountOverdraftInterestSettings>

export const DepositAccountInternalControls = z
    .object({
        maxDepositBalance: z.number().describe('The maximum deposit balance of the account.').optional(),
        maxWithdrawalAmount: z.number().describe('The maximum amount allowed for a withdrawal.').optional(),
        recommendedDepositAmount: z.number().describe('The recommended amount for a deposit.').optional(),
        targetAmount: z.number().describe('The target amount for a deposit made towards a savings goal.').optional(),
    })
    .describe('Represents information about internal controls.')

export type DepositAccountInternalControls = z.infer<typeof DepositAccountInternalControls>

export const DepositAccountInterestSettings = z
    .object({
        interestPaymentSettings: DepositAccountInterestPaymentSettings.optional(),
        interestRateSettings: DepositAccountInterestRateSettings.optional(),
    })
    .describe(`Represents information about the deposit account's interest settings.`)

export type DepositAccountInterestSettings = z.infer<typeof DepositAccountInterestSettings>

export const DepositAccountBalances = z
    .object({
        availableBalance: z.number().describe('The current available balance for deposit transactions.').optional(),
        blockedBalance: z.number().describe('The sum of all the blocked amounts on an account.').optional(),
        feesDue: z.number().describe('The amount of fees due to be paid on this account.').optional(),
        forwardAvailableBalance: z
            .number()
            .describe(
                'The sum of all the authorization hold amounts that have `CRDT` as the `creditDebitIndicator` for an account.',
            )
            .optional(),
        holdBalance: z
            .number()
            .describe(
                'The sum of all the authorization hold amounts that have `DBIT` as the `creditDebitIndicator` for an account.',
            )
            .optional(),
        lockedBalance: z
            .number()
            .describe(
                'The locked amount that is not available for withdrawal in the account. For more information, see [Deposit Account Overview Details](https://support.mambu.com/docs/deposit-account-overview-details).',
            )
            .optional(),
        overdraftAmount: z
            .number()
            .describe(
                'The overdraft amount that has been taken out in the account. For more information, see [Overdraft Products](https://support.mambu.com/docs/en/overdraft-products).',
            )
            .optional(),
        overdraftInterestDue: z
            .number()
            .describe('The amount of interest due to be paid on an account as a result of an authorized overdraft.')
            .optional(),
        technicalOverdraftAmount: z
            .number()
            .describe(
                'The technical overdraft amount that has been taken out in the account. For more information, see [Technical Overdraft](https://support.mambu.com/docs/en/overdraft-products#technical-overdraft).',
            )
            .optional(),
        technicalOverdraftInterestDue: z
            .number()
            .describe('The amount of interest due to be paid on an account as a result of a technical overdraft.')
            .optional(),
        totalBalance: z.number().describe('The current balance of the account.').optional(),
    })
    .describe('Represents information about the balances of a deposit account.')

export type DepositAccountBalances = z.infer<typeof DepositAccountBalances>

export const DepositAccountAccruedAmounts = z
    .object({
        interestAccrued: z.number().describe('The amount of positive interest that has been accrued in the account.').optional(),
        negativeInterestAccrued: z
            .number()
            .describe('The amount of negative interest that has been accrued in the account.')
            .optional(),
        overdraftInterestAccrued: z
            .number()
            .describe('The amount of overdraft interest that has been accrued in the account.')
            .optional(),
        technicalOverdraftInterestAccrued: z
            .number()
            .describe('The amount of technical overdraft interest that has been accrued in the account.')
            .optional(),
    })
    .describe('Represents information about the accrued amounts of deposit accounts.')

export type DepositAccountAccruedAmounts = z.infer<typeof DepositAccountAccruedAmounts>

export const InstallmentAllocationElementAmount = z
    .object({
        amount: Amount.optional(),
    })
    .describe('Represents an installment allocation element amount structure.')

export type InstallmentAllocationElementAmount = z.infer<typeof InstallmentAllocationElementAmount>

export const InstallmentAllocationElementTaxableAmount = z
    .object({
        amount: Amount.optional(),
        tax: Amount.optional(),
    })
    .describe('Represents an installment allocation element taxable amount structure.')

export type InstallmentAllocationElementTaxableAmount = z.infer<typeof InstallmentAllocationElementTaxableAmount>

export const InstallmentFeeDetails = z
    .object({
        amount: AmountWithReduced.optional(),
        encodedKey: z.string().describe('The encoded key of the predefined fee, auto generated, unique').optional(),
        id: z.string().describe('The id of the fee, provided by the client').optional(),
        name: z.string().describe('The name of the fee').optional(),
        tax: AmountWithReduced.optional(),
    })
    .describe('Represents fee details for an installment.')

export type InstallmentFeeDetails = z.infer<typeof InstallmentFeeDetails>

export const InstallmentFee = z
    .object({
        amount: FeeAmount.optional(),
        tax: Amount.optional(),
    })
    .describe('Represents an installment fee structure.')

export type InstallmentFee = z.infer<typeof InstallmentFee>

export const CustomSettingDetails = z
    .object({
        loanTransactionKey: z.string().describe('The loan transaction associated with the custom setting.').optional(),
        source: z.string().describe('The source of the custom setting').optional(),
        type: z.string().describe('The type of custom setting.').optional(),
    })
    .describe('Represents the custom settings for a loan schedule.')

export type CustomSettingDetails = z.infer<typeof CustomSettingDetails>

export const CarryForwardInterestSplit = z
    .object({
        amount: z.number().describe('The carry forward interest amount.').optional(),
        tax: z.number().describe('The taxes amount on the carry forward interest.').optional(),
    })
    .describe('Represents carry forward interest split')

export type CarryForwardInterestSplit = z.infer<typeof CarryForwardInterestSplit>

export const LoanAccount = z
    .object({
        accountArrearsSettings: AccountArrearsSettings.optional(),
        accountHolderKey: z.string().describe('The encoded key of the account holder.'),
        accountHolderType: z.enum(['CLIENT', 'GROUP']).describe('The type of the account holder.'),
        accountState: z
            .enum([
                'PARTIAL_APPLICATION',
                'PENDING_APPROVAL',
                'APPROVED',
                'ACTIVE',
                'ACTIVE_IN_ARREARS',
                'CLOSED',
                'CLOSED_WRITTEN_OFF',
                'CLOSED_REJECTED',
            ])
            .describe('The state of the loan account.')
            .optional(),
        accountSubState: z
            .enum([
                'PARTIALLY_DISBURSED',
                'LOCKED',
                'LOCKED_CAPPING',
                'REFINANCED',
                'RESCHEDULED',
                'WITHDRAWN',
                'REPAID',
                'REJECTED',
                'WRITTEN_OFF',
                'TERMINATED',
            ])
            .describe(
                'A second state for the loan account. Beside the account state, a second substate is sometimes necessary to provide more information about the exact lifecycle state of a loan account.For example, even if the account state of a loan account is `ACTIVE`, it can also have a substate of `LOCKED`.',
            )
            .optional(),
        accruedInterest: z.number().describe('The amount of interest that has been accrued in the loan account.').optional(),
        accruedPenalty: z
            .number()
            .describe('The accrued penalty, represents the amount of penalty that has been accrued in the loan account.')
            .optional(),
        activationTransactionKey: z
            .string()
            .describe('The encoded key of the transaction that activated the loan account.')
            .optional(),
        adjustTotalDueForInstallmentsWithDifferentInterval: z
            .boolean()
            .describe('Adjust the total due for repayment when the repayment period is different than the repayment frequency')
            .optional(),
        allowOffset: z.boolean().describe('DEPRECATED - Will always be false.').optional(),
        approvedDate: z.string().datetime({ offset: true }).describe('The date the loan account was approved.').optional(),
        arrearsTolerancePeriod: z
            .number()
            .int()
            .describe('The arrears tolerance (period or day of month) depending on the product settings.')
            .optional(),
        assets: Asset.array().describe('The list of assets associated with the current loan account.').optional(),
        assignedBranchKey: z
            .string()
            .describe(
                'The key of the branch this loan account is assigned to. The branch is set to unassigned if no branch field is set.',
            )
            .optional(),
        assignedCentreKey: z.string().describe('The key of the centre this account is assigned to.').optional(),
        assignedUserKey: z.string().describe('The key of the user this loan account is assigned to.').optional(),
        balances: Balances.optional(),
        closedDate: z.string().datetime({ offset: true }).describe('The date the loan was closed.').optional(),
        creationDate: z.string().datetime({ offset: true }).describe('The date the loan account was created.').optional(),
        creditArrangementKey: z
            .string()
            .describe('The key to the line of credit where this account is registered to.')
            .optional(),
        currency: Currency.optional(),
        daysInArrears: z.number().int().describe('The number of days the loan account is in arrears.').optional(),
        daysLate: z.number().int().describe('The number of days a repayment for the loan account is late.').optional(),
        disbursementDetails: DisbursementDetails.optional(),
        encodedKey: z
            .string()
            .describe('The encoded key of the loan account, it is auto generated, and must be unique.')
            .optional(),
        feesSettings: FeesAccountSettings.optional(),
        fundingSources: InvestorFund.array().describe('The list of funds associated with the loan account.').optional(),
        futurePaymentsAcceptance: z
            .enum(['NO_FUTURE_PAYMENTS', 'ACCEPT_FUTURE_PAYMENTS', 'ACCEPT_OVERPAYMENTS'])
            .describe(
                'Shows whether the repayment transactions with entry date set in the future are allowed or not for this loan account.',
            )
            .optional(),
        guarantors: Guarantor.array().describe('The list of guarantees associated with the loan account.').optional(),
        id: z.string().describe('The ID of the loan account, it can be generated and customized, and must be unique.').optional(),
        interestAccruedInBillingCycle: z
            .number()
            .describe('The interest that is accrued in the current billing cycle.')
            .optional(),
        interestCommission: z
            .number()
            .describe(
                'The value of the interest booked by the organization from the accounts funded by investors. Null if the funds are not enabled.',
            )
            .optional(),
        interestFromArrearsAccrued: z
            .number()
            .describe('The amount of interest from arrears that has been accrued in the loan account.')
            .optional(),
        interestSettings: InterestSettings.optional(),
        lastAccountAppraisalDate: z
            .string()
            .datetime({ offset: true })
            .describe(
                'The date the loan account has last been evaluated for interest, principal, fees, and penalties calculations expressed in the organization time format and time zone.',
            )
            .optional(),
        lastInterestAppliedDate: z
            .string()
            .datetime({ offset: true })
            .describe(
                'The date of the last time the loan account had interest applied (stored to interest balance), expressed in the organization time format and time zone.',
            )
            .optional(),
        lastInterestReviewDate: z
            .string()
            .datetime({ offset: true })
            .describe('The date the interest was reviewed last time, stored in the organization time format and time zone.')
            .optional(),
        lastLockedDate: z
            .string()
            .datetime({ offset: true })
            .describe(
                'The date when the loan account was set for the last time in the `LOCKED` state expressed in the organization time format and time zone. If null, the account is not locked anymore.',
            )
            .optional(),
        lastModifiedDate: z.string().datetime({ offset: true }).describe('The last date the loan was updated.').optional(),
        lastSetToArrearsDate: z
            .string()
            .datetime({ offset: true })
            .describe(
                'The date when the loan account was set to last standing or null; if never set, it is expressed in your organization time format and time zone.',
            )
            .optional(),
        lastTaxRateReviewDate: z
            .string()
            .datetime({ offset: true })
            .describe(
                'The date the tax rate on the loan account was last checked, expressed in the organization time format and time zone.',
            )
            .optional(),
        latePaymentsRecalculationMethod: z
            .enum(['OVERDUE_INSTALLMENTS_INCREASE', 'LAST_INSTALLMENT_INCREASE', 'NO_RECALCULATION'])
            .describe(
                'The overdue payments recalculation method inherited from the loan product on which this loan account is based.',
            )
            .optional(),
        loanAmount: z.number().describe('The loan amount.'),
        loanName: z.string().describe('The name of the loan account.').optional(),
        lockedAccountTotalDueType: z
            .enum(['BALANCE_AMOUNT', 'DUE_AMOUNT_ON_LATE_INSTALLMENTS'])
            .describe('The locked account total due type.')
            .optional(),
        lockedOperations: z
            .enum(['APPLY_INTEREST', 'APPLY_FEES', 'APPLY_PENALTIES'])
            .array()
            .describe('A list with operations which are locked when the account is in the AccountState.LOCKED substate.')
            .optional(),
        migrationEventKey: z
            .string()
            .describe(
                `The migration event encoded key associated with this loan account. If this account was imported, track which 'migration event' they came from.`,
            )
            .optional(),
        modifyInterestForFirstInstallment: z
            .boolean()
            .describe(
                'Adjust the interest for the first repayment when the first repayment period is different than the repayment frequency',
            )
            .optional(),
        notes: z.string().describe('The notes about this loan account.').optional(),
        originalAccountKey: z.string().describe('The key of the original rescheduled or refinanced loan account.').optional(),
        paymentHolidaysAccruedInterest: z
            .number()
            .describe('The amount of interest that has been accrued during payment holidays in the loan account.')
            .optional(),
        paymentMethod: z
            .enum(['HORIZONTAL', 'VERTICAL'])
            .describe(
                'The interest payment method that determines whether the payments are made horizontally (on the repayments) or vertically (on the loan account).',
            )
            .optional(),
        penaltySettings: PenaltySettings.optional(),
        plannedInstallmentFees: PlannedInstallmentFee.array()
            .describe('The list with manual fees planned on the installments of the loan account.')
            .optional(),
        prepaymentSettings: PrepaymentSettings.optional(),
        principalPaymentSettings: PrincipalPaymentAccountSettings.optional(),
        productTypeKey: z.string().describe('The key for the type of loan product that this loan account is based on.'),
        redrawSettings: LoanAccountRedrawSettings.optional(),
        rescheduledAccountKey: z
            .string()
            .describe(
                'The key pointing to where this loan account was rescheduled or refinanced to. This value is only not null if rescheduled.',
            )
            .optional(),
        scheduleSettings: ScheduleSettings,
        settlementAccountKey: z.string().describe('The encoded key of the settlement account.').optional(),
        taxRate: z.number().describe('The tax rate.').optional(),
        terminationDate: z.string().datetime({ offset: true }).describe('The date this loan account was terminated.').optional(),
        tranches: LoanTranche.array().describe('The list of disbursement tranches available for the loan account.').optional(),
    })
    .passthrough()
    .describe(
        'Represents a loan account. A loan account defines the amount that your organization lends to a client. The terms and conditions of a loan account are defined by a loan product. In a loan account, Mambu stores all the information related to disbursements, repayments, interest rates, and withdrawals.',
    )

export type LoanAccount = z.infer<typeof LoanAccount>

export const DepositAccount = z
    .object({
        accountHolderKey: z.string().describe('The encoded key of the account holder, which is an individual client or group.'),
        accountHolderType: z.enum(['CLIENT', 'GROUP']).describe('The account holder type.'),
        accountState: z
            .enum([
                'PENDING_APPROVAL',
                'APPROVED',
                'ACTIVE',
                'ACTIVE_IN_ARREARS',
                'MATURED',
                'LOCKED',
                'DORMANT',
                'CLOSED',
                'CLOSED_WRITTEN_OFF',
                'WITHDRAWN',
                'CLOSED_REJECTED',
            ])
            .describe('The state of the deposit account.')
            .optional(),
        accountType: z
            .enum(['CURRENT_ACCOUNT', 'REGULAR_SAVINGS', 'FIXED_DEPOSIT', 'SAVINGS_PLAN', 'INVESTOR_ACCOUNT'])
            .describe('The deposit account type and the product that it belongs to.')
            .optional(),
        accruedAmounts: DepositAccountAccruedAmounts.optional(),
        activationDate: z
            .string()
            .datetime({ offset: true })
            .describe(`The date when the deposit account was activated, in the organization's timezone and time format.`)
            .optional(),
        approvedDate: z
            .string()
            .datetime({ offset: true })
            .describe(`The date when the deposit account was approved, in the organization's timezone and time format.`)
            .optional(),
        assignedBranchKey: z.string().describe('The key of the branch that this deposit account is assigned to.').optional(),
        assignedCentreKey: z.string().describe('The key of the centre that this account is assigned to.').optional(),
        assignedUserKey: z.string().describe('The key of the user that this deposit is assigned to.').optional(),
        balances: DepositAccountBalances.optional(),
        closedDate: z
            .string()
            .datetime({ offset: true })
            .describe('The date when the deposit account was closed, in UTC.')
            .optional(),
        creationDate: z
            .string()
            .datetime({ offset: true })
            .describe('The date this deposit account was created, in UTC.')
            .optional(),
        creditArrangementKey: z
            .string()
            .describe('The key to the credit arrangement where this account is registered.')
            .optional(),
        currencyCode: z.string().describe('The currency code.').optional(),
        encodedKey: z.string().describe('The encoded key of the deposit account, which is auto-generated and unique.').optional(),
        id: z
            .string()
            .describe('The ID of the deposit account, which can be generated and customized - but must be unique.')
            .optional(),
        interestSettings: DepositAccountInterestSettings.optional(),
        internalControls: DepositAccountInternalControls.optional(),
        lastAccountAppraisalDate: z
            .string()
            .datetime({ offset: true })
            .describe(
                `The date when the account was last evaluated for interest calculations and maturity, in the organization's timezone and time format.`,
            )
            .optional(),
        lastInterestCalculationDate: z
            .string()
            .datetime({ offset: true })
            .describe(
                `The date when interest was last calculated for the account, in the organization's timezone and time format.`,
            )
            .optional(),
        lastInterestReviewDate: z
            .string()
            .datetime({ offset: true })
            .describe(`The date when regular interest was last reviewed, in the organization's timezone and time format.`)
            .optional(),
        lastInterestStoredDate: z
            .string()
            .datetime({ offset: true })
            .describe(`The date when interest was last applied on the account, in the organization's timezone and time format.`)
            .optional(),
        lastModifiedDate: z
            .string()
            .datetime({ offset: true })
            .describe('The last update date for the deposit account, in UTC.')
            .optional(),
        lastOverdraftInterestReviewDate: z
            .string()
            .datetime({ offset: true })
            .describe(`The date when the overdraft interest was last reviewed, in the organization's timezone and time format.`)
            .optional(),
        lastSetToArrearsDate: z
            .string()
            .datetime({ offset: true })
            .describe(
                `The date when the deposit account was set to In Arrears, or null if the account is not In Arrears. The date is in the organization's timezone and time format.`,
            )
            .optional(),
        linkedSettlementAccountKeys: z
            .string()
            .array()
            .describe('Lists all loan account keys on which the deposit account is used as the settlement account.')
            .optional(),
        lockedDate: z
            .string()
            .datetime({ offset: true })
            .describe(`The date when the deposit account was locked, in the organization's timezone and time format.`)
            .optional(),
        maturityDate: z
            .string()
            .datetime({ offset: true })
            .describe(
                `The date when the account matures, for fixed or compulsory savings plans, in the organization's timezone and time format.`,
            )
            .optional(),
        migrationEventKey: z
            .string()
            .describe(
                'The migration event encoded key associated with this deposit account. If this account was imported, you can track which migration event it came from.',
            )
            .optional(),
        name: z.string().describe('The deposit account name.'),
        notes: z.string().describe('The notes or description attached to this object.').optional(),
        overdraftInterestSettings: DepositAccountOverdraftInterestSettings.optional(),
        overdraftSettings: DepositAccountOverdraftSettings.optional(),
        ownershipHistory: DepositAccountOwnershipHistory.array().describe('The history of deposit account ownership').optional(),
        productTypeKey: z.string().describe('The key to the product type that this account is based on.'),
        withholdingTaxSourceKey: z
            .string()
            .describe('The tax source where the account withholding taxes will be updated.')
            .optional(),
    })
    .passthrough()
    .describe('Represents information about a deposit account.')

export type DepositAccount = z.infer<typeof DepositAccount>

export const Installment = z
    .object({
        carryForwardInterestSplit: CarryForwardInterestSplit.optional(),
        customSettingDetails: CustomSettingDetails.array()
            .describe('Custom settings associated with the installment.')
            .optional(),
        dueDate: z.string().datetime({ offset: true }).describe('The installment due date.').optional(),
        encodedKey: z.string().describe('The encoded key of the installment, which is auto generated, and unique.').optional(),
        expectedClosingBalance: z
            .number()
            .describe(
                'The expected closing balance is the remaining amount per installment only applicable for interest only equal installment products.',
            )
            .optional(),
        fee: InstallmentFee.optional(),
        feeDetails: InstallmentFeeDetails.array()
            .describe('The breakdown of the fee amounts that have been applied to the loan account.')
            .optional(),
        fundersInterestDue: z.number().describe('The amount of interest allocated to funders for P2P accounts only.').optional(),
        interest: InstallmentAllocationElementTaxableAmount.optional(),
        interestAccrued: z
            .number()
            .describe(
                'The interest accrued calculated on previous repayment closing balance only applicable interest only equal installment products.',
            )
            .optional(),
        isPaymentHoliday: z
            .boolean()
            .describe('`TRUE` if a payment holiday is offered for the installment, `FALSE` otherwise.')
            .optional(),
        lastPaidDate: z.string().datetime({ offset: true }).describe('The installment last paid date.').optional(),
        lastPenaltyAppliedDate: z
            .string()
            .datetime({ offset: true })
            .describe('The most recent date on which a penalty was applied to the account.')
            .optional(),
        nonScheduledPrincipalBalanceOverpayment: z
            .number()
            .describe('The non-scheduled principal balance overpayment for the loan account')
            .optional(),
        notes: z.string().describe('Any comment or notes added to the installment.').optional(),
        number: z
            .string()
            .describe(
                'The order number of an installment among all the installments generated for a loan. Loan installments are put in ascending order by due date. The order number only applies to the content of a particular JSON response therefore it is not unique.',
            )
            .optional(),
        organizationCommissionDue: z
            .number()
            .describe('The amount of interest allocated to organization as commission for P2P accounts only.')
            .optional(),
        parentAccountKey: z.string().describe('The parent account key of the installment.').optional(),
        penalty: InstallmentAllocationElementTaxableAmount.optional(),
        principal: InstallmentAllocationElementAmount.optional(),
        repaidDate: z.string().datetime({ offset: true }).describe('The installment repaid date.').optional(),
        state: z.enum(['PENDING', 'LATE', 'PAID', 'PARTIALLY_PAID', 'GRACE']).describe('The installment state.').optional(),
    })
    .describe('Represents a single installment details structure.')

export type Installment = z.infer<typeof Installment>

export const CreditArrangementSortingCriteria = z
    .object({
        field: z.enum(['creationDate', 'startDate', 'expireDate', 'amount']).describe('Contains the actual sorting fields'),
        order: z.enum(['ASC', 'DESC']).describe('The sorting order: `ASC` or `DESC`. The default order is `DESC`.').optional(),
    })
    .describe('The sorting criteria used for credit arrangement client directed query')

export type CreditArrangementSortingCriteria = z.infer<typeof CreditArrangementSortingCriteria>

export const CreditArrangementFilterCriteria = z
    .object({
        field: z.union([
            z
                .enum(['id', 'startDate', 'expireDate', 'approvedDate', 'state', 'subState', 'exposureLimitType', 'encodedKey'])
                .describe('Contains the actual searching fields'),
            z.string(),
        ]),
        operator: z
            .enum([
                'EQUALS',
                'EQUALS_CASE_SENSITIVE',
                'DIFFERENT_THAN',
                'MORE_THAN',
                'LESS_THAN',
                'BETWEEN',
                'ON',
                'AFTER',
                'AFTER_INCLUSIVE',
                'BEFORE',
                'BEFORE_INCLUSIVE',
                'STARTS_WITH',
                'STARTS_WITH_CASE_SENSITIVE',
                'IN',
                'TODAY',
                'THIS_WEEK',
                'THIS_MONTH',
                'THIS_YEAR',
                'LAST_DAYS',
                'EMPTY',
                'NOT_EMPTY',
            ])
            .describe(
                '| **Operator**                | **Affected values**  | **Available for**                                                    |\\n|---------------               |----------------------|----------------------------------------------------------------------|\\n| EQUALS                       | ONE_VALUE            | BIG_DECIMAL,BOOLEAN,LONG,MONEY,NUMBER,PERCENT,STRING,ENUM,KEY        |\\n| EQUALS_CASE_SENSITIVE        | ONE_VALUE            | BIG_DECIMAL,BOOLEAN,LONG,MONEY,NUMBER,PERCENT,STRING,ENUM,KEY 		  |\\n| MORE_THAN                    | ONE_VALUE            | BIG_DECIMAL,NUMBER,MONEY                                             |\\n| LESS_THAN                    | ONE_VALUE            | BIG_DECIMAL,NUMBER,MONEY                                             |\\n| BETWEEN                      | TWO_VALUES           | BIG_DECIMAL,NUMBER,MONEY,DATE,DATE_TIME                              |\\n| ON                           | ONE_VALUE            | DATE,DATE_TIME                                                       |\\n| AFTER                        | ONE_VALUE            | DATE,DATE_TIME                                                       |\\n| BEFORE                       | ONE_VALUE            | DATE,DATE_TIME                                                       |\\n| BEFORE_INCLUSIVE             | ONE_VALUE            | DATE,DATE_TIME                                                       |\\n| STARTS_WITH                  | ONE_VALUE            | STRING                                                               |\\n| STARTS_WITH_CASE_SENSITIVE   | ONE_VALUE            | STRING                                                               |\\n| IN                           | LIST                 | ENUM,KEY                                                             |\\n| TODAY                        | NO_VALUE             | DATE,DATE_TIME                                                       |\\n| THIS_WEEK                    | NO_VALUE             | DATE,DATE_TIME                                                       |\\n| THIS_MONTH                   | NO_VALUE             | DATE,DATE_TIME                                                       |\\n| THIS_YEAR                    | NO_VALUE             | DATE,DATE_TIME                                                       |\\n| LAST_DAYS                    | ONE_VALUE            | NUMBER                                                               |\\n| EMPTY                        | NO_VALUE             | BIG_DECIMAL,LONG,MONEY,NUMBER,PERCENT,STRING,ENUM,KEY,DATE,DATE_TIME |\\n| NOT_EMPTY                    | NO_VALUE             | BIG_DECIMAL,LONG,MONEY,NUMBER,PERCENT,STRING,ENUM,KEY,DATE,DATE_TIME |',
            ),
        secondValue: z
            .string()
            .describe('The second value to match the searching criteria, when the `BETWEEN` operator is used.')
            .optional(),
        value: z.string().describe('The value to match the searching criteria.').optional(),
        values: z.string().array().describe('List of values when the `IN` operator is used.').optional(),
    })
    .describe('Represents credit arrangment filter and search criteria.')

export type CreditArrangementFilterCriteria = z.infer<typeof CreditArrangementFilterCriteria>

export const RestError = z.object({
    errorCode: z.number().int().optional(),
    errorReason: z.string().optional(),
    errorSource: z.string().optional(),
})

export type RestError = z.infer<typeof RestError>

export const CreditArrangement = z
    .object({
        amount: z.number().describe('The maximum credit amount the client can be exposed to.'),
        approvedDate: z
            .string()
            .datetime({ offset: true })
            .describe('The date when the credit arrangement was approved.')
            .optional(),
        availableCreditAmount: z.number().describe('The available amount of the credit arrangement.').optional(),
        closedDate: z.string().datetime({ offset: true }).describe('The date when the credit arrangement was closed.').optional(),
        consumedCreditAmount: z
            .number()
            .describe(
                'The consumed amount of the credit arrangement, which is calculated as the difference between the amount and available amount.',
            )
            .optional(),
        creationDate: z
            .string()
            .datetime({ offset: true })
            .describe('The date when the credit arrangement was created.')
            .optional(),
        currency: Currency.optional(),
        encodedKey: z
            .string()
            .describe('The encoded key of the credit arrangement, it is auto generated, and unique.')
            .optional(),
        expireDate: z.string().datetime({ offset: true }).describe('The date when the credit arrangement expires.'),
        exposureLimitType: z
            .enum(['APPROVED_AMOUNT', 'OUTSTANDING_AMOUNT'])
            .describe('The type of exposure limit calculation method used for the credit arrangement.')
            .optional(),
        holderKey: z
            .string()
            .describe('The encoded key of the credit arrangement holder (individual client or group).')
            .optional(),
        holderType: z
            .enum(['CLIENT', 'GROUP'])
            .describe('The type of the credit arrangement holder (individual client or group).'),
        id: z.string().describe('The ID of credit arrangement, can be generated and customized, and must be unique.').optional(),
        lastModifiedDate: z
            .string()
            .datetime({ offset: true })
            .describe('The last date when the credit arrangement was modified.')
            .optional(),
        notes: z.string().describe('The notes or description of the credit arrangement.').optional(),
        startDate: z
            .string()
            .datetime({ offset: true })
            .describe('The start date from which the credit arrangement became active.'),
        state: z
            .enum(['PENDING_APPROVAL', 'APPROVED', 'ACTIVE', 'CLOSED', 'WITHDRAWN', 'REJECTED'])
            .describe('The state of the credit arrangement.')
            .optional(),
        subState: z
            .enum(['PENDING_APPROVAL', 'APPROVED', 'ACTIVE', 'CLOSED', 'WITHDRAWN', 'REJECTED'])
            .describe('The substate of credit arrangement.')
            .optional(),
    })
    .passthrough()
    .describe('Represents a credit arrangement.')

export type CreditArrangement = z.infer<typeof CreditArrangement>

export const PatchOperation = z
    .object({
        from: z.string().describe('The field from where a value should be moved, when using move').optional(),
        op: z.enum(['ADD', 'REPLACE', 'REMOVE', 'MOVE']).describe('The change to perform'),
        path: z.string().describe('The field to perform the operation on'),
        value: z.unknown().describe('The value of the field, can be null').optional(),
    })
    .describe('A single change that needs to be made to a resource')

export type PatchOperation = z.infer<typeof PatchOperation>

export const AddCreditArrangementAccountInput = z
    .object({
        accountId: z.string().describe('The encoded key of the account.'),
        accountType: z.enum(['LOAN', 'DEPOSIT']).describe('The type of the account.'),
    })
    .describe('Represents the account to add to the credit arrangement.')

export type AddCreditArrangementAccountInput = z.infer<typeof AddCreditArrangementAccountInput>

export const CreditArrangementAccounts = z
    .object({
        depositAccounts: DepositAccount.array()
            .describe('List of the deposit accounts linked to the credit arrangement.')
            .optional(),
        loanAccounts: LoanAccount.array().describe('List of loan accounts linked to the credit arrangement.').optional(),
    })
    .describe('Represents loan and deposit accounts linked to a credit arrangement.')

export type CreditArrangementAccounts = z.infer<typeof CreditArrangementAccounts>

export const CreditArrangementAction = z
    .object({
        action: z
            .enum(['APPROVE', 'UNDO_APPROVE', 'REJECT', 'UNDO_REJECT', 'WITHDRAW', 'UNDO_WITHDRAW', 'CLOSE', 'UNDO_CLOSE'])
            .describe('The action type to be applied.'),
        notes: z.string().describe('The notes related to the action performed.').optional(),
    })
    .describe('The state change to perform on the credit arrangement.')

export type CreditArrangementAction = z.infer<typeof CreditArrangementAction>

export const CreditArrangementSchedule = z
    .object({
        installments: Installment.array().describe('The list of installments for the credit arrangement.').optional(),
    })
    .describe('Represents the credit arrangement schedule.')

export type CreditArrangementSchedule = z.infer<typeof CreditArrangementSchedule>

export const CreditArrangementSearchCriteria = z
    .object({
        filterCriteria: CreditArrangementFilterCriteria.array().describe('The list of filtering criteria.').optional(),
        sortingCriteria: CreditArrangementSortingCriteria.optional(),
    })
    .describe('Represents the filtering and sorting criteria when searching credit arrangements.')

export type CreditArrangementSearchCriteria = z.infer<typeof CreditArrangementSearchCriteria>

export const ErrorResponse = z.object({
    errors: RestError.array().optional(),
})

export type ErrorResponse = z.infer<typeof ErrorResponse>

export const GetAllResponse = CreditArrangement.array()

export type GetAllResponse = z.infer<typeof GetAllResponse>

export const PatchRequest = PatchOperation.array()

export type PatchRequest = z.infer<typeof PatchRequest>

export const RemoveCreditArrangementAccountInput = z
    .object({
        accountId: z.string().describe('The encoded key of the account.'),
        accountType: z.enum(['LOAN', 'DEPOSIT']).describe('The type of the account.'),
    })
    .describe('Represents the account to remove from the credit arrangement.')

export type RemoveCreditArrangementAccountInput = z.infer<typeof RemoveCreditArrangementAccountInput>

export const SearchResponse = CreditArrangement.array()

export type SearchResponse = z.infer<typeof SearchResponse>
