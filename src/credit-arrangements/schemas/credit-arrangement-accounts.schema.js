/**
 * Generated by Ajv https://ajv.js.org/guide/managing-schemas.html#standalone-validation-code 
 * eslint-disable
 */
import {createRequire} from 'module';const require = createRequire(import.meta.url);"use strict";export const validate = validate10;export default validate10;const schema11 = {"$schema":"http://json-schema.org/draft-07/schema#","title":"CreditArrangementAccounts","type":"object","description":"Represents loan and deposit accounts linked to a credit arrangement.","properties":{"depositAccounts":{"type":"array","title":"depositAccounts","description":"List of the deposit accounts linked to the credit arrangement.","items":{"$ref":"#/$defs/DepositAccountaf30"}},"loanAccounts":{"type":"array","title":"loanAccounts","description":"List of loan accounts linked to the credit arrangement.","items":{"$ref":"#/$defs/LoanAccountaf30"}}},"additionalProperties":true,"$defs":{"DepositAccountaf30":{"type":"object","title":"DepositAccountaf30","description":"Represents information about a deposit account.","properties":{"accountHolderKey":{"type":"string","title":"accountHolderKey","description":"The encoded key of the account holder, which is an individual client or group."},"accountHolderType":{"title":"accountHolderType","description":"The account holder type.","enum":["CLIENT","GROUP"]},"accountState":{"title":"accountState","description":"The state of the deposit account.","enum":["PENDING_APPROVAL","APPROVED","ACTIVE","ACTIVE_IN_ARREARS","MATURED","LOCKED","DORMANT","CLOSED","CLOSED_WRITTEN_OFF","WITHDRAWN","CLOSED_REJECTED"]},"accountType":{"title":"accountType","description":"The deposit account type and the product that it belongs to.","enum":["CURRENT_ACCOUNT","REGULAR_SAVINGS","FIXED_DEPOSIT","SAVINGS_PLAN","INVESTOR_ACCOUNT"]},"accruedAmounts":{"title":"accruedAmounts","$ref":"#/$defs/DepositAccountAccruedAmountsaf30"},"activationDate":{"type":"string","title":"activationDate","description":"The date when the deposit account was activated, in the organization's timezone and time format.","format":"date-time"},"approvedDate":{"type":"string","title":"approvedDate","description":"The date when the deposit account was approved, in the organization's timezone and time format.","format":"date-time"},"assignedBranchKey":{"type":"string","title":"assignedBranchKey","description":"The key of the branch that this deposit account is assigned to."},"assignedCentreKey":{"type":"string","title":"assignedCentreKey","description":"The key of the centre that this account is assigned to."},"assignedUserKey":{"type":"string","title":"assignedUserKey","description":"The key of the user that this deposit is assigned to."},"balances":{"title":"balances","$ref":"#/$defs/DepositAccountBalancesaf30"},"closedDate":{"type":"string","title":"closedDate","description":"The date when the deposit account was closed, in UTC.","format":"date-time"},"creationDate":{"type":"string","title":"creationDate","description":"The date this deposit account was created, in UTC.","format":"date-time"},"creditArrangementKey":{"type":"string","title":"creditArrangementKey","description":"The key to the credit arrangement where this account is registered."},"currencyCode":{"type":"string","title":"currencyCode","description":"The currency code."},"encodedKey":{"type":"string","title":"encodedKey","description":"The encoded key of the deposit account, which is auto-generated and unique."},"id":{"type":"string","title":"id","description":"The ID of the deposit account, which can be generated and customized - but must be unique."},"interestSettings":{"title":"interestSettings","$ref":"#/$defs/DepositAccountInterestSettingsaf30"},"internalControls":{"title":"internalControls","$ref":"#/$defs/DepositAccountInternalControlsaf30"},"lastAccountAppraisalDate":{"type":"string","title":"lastAccountAppraisalDate","description":"The date when the account was last evaluated for interest calculations and maturity, in the organization's timezone and time format.","format":"date-time"},"lastInterestCalculationDate":{"type":"string","title":"lastInterestCalculationDate","description":"The date when interest was last calculated for the account, in the organization's timezone and time format.","format":"date-time"},"lastInterestReviewDate":{"type":"string","title":"lastInterestReviewDate","description":"The date when regular interest was last reviewed, in the organization's timezone and time format.","format":"date-time"},"lastInterestStoredDate":{"type":"string","title":"lastInterestStoredDate","description":"The date when interest was last applied on the account, in the organization's timezone and time format.","format":"date-time"},"lastModifiedDate":{"type":"string","title":"lastModifiedDate","description":"The last update date for the deposit account, in UTC.","format":"date-time"},"lastOverdraftInterestReviewDate":{"type":"string","title":"lastOverdraftInterestReviewDate","description":"The date when the overdraft interest was last reviewed, in the organization's timezone and time format.","format":"date-time"},"lastSetToArrearsDate":{"type":"string","title":"lastSetToArrearsDate","description":"The date when the deposit account was set to In Arrears, or null if the account is not In Arrears. The date is in the organization's timezone and time format.","format":"date-time"},"linkedSettlementAccountKeys":{"type":"array","title":"linkedSettlementAccountKeys","description":"Lists all loan account keys on which the deposit account is used as the settlement account.","items":{"type":"string"}},"lockedDate":{"type":"string","title":"lockedDate","description":"The date when the deposit account was locked, in the organization's timezone and time format.","format":"date-time"},"maturityDate":{"type":"string","title":"maturityDate","description":"The date when the account matures, for fixed or compulsory savings plans, in the organization's timezone and time format.","format":"date-time"},"migrationEventKey":{"type":"string","title":"migrationEventKey","description":"The migration event encoded key associated with this deposit account. If this account was imported, you can track which migration event it came from."},"name":{"type":"string","title":"name","description":"The deposit account name."},"notes":{"type":"string","title":"notes","description":"The notes or description attached to this object."},"overdraftInterestSettings":{"title":"overdraftInterestSettings","$ref":"#/$defs/DepositAccountOverdraftInterestSettingsaf30"},"overdraftSettings":{"title":"overdraftSettings","$ref":"#/$defs/DepositAccountOverdraftSettingsaf30"},"productTypeKey":{"type":"string","title":"productTypeKey","description":"The key to the product type that this account is based on."},"withholdingTaxSourceKey":{"type":"string","title":"withholdingTaxSourceKey","description":"The tax source where the account withholding taxes will be updated."}},"required":["accountHolderKey","accountHolderType","name","productTypeKey"],"additionalProperties":true},"DepositAccountAccruedAmountsaf30":{"type":"object","title":"DepositAccountAccruedAmountsaf30","description":"Represents information about the accrued amounts of deposit accounts.","properties":{"interestAccrued":{"type":"number","title":"interestAccrued","description":"The amount of positive interest that has been accrued in the account."},"negativeInterestAccrued":{"type":"number","title":"negativeInterestAccrued","description":"The amount of negative interest that has been accrued in the account."},"overdraftInterestAccrued":{"type":"number","title":"overdraftInterestAccrued","description":"The amount of overdraft interest that has been accrued in the account."},"technicalOverdraftInterestAccrued":{"type":"number","title":"technicalOverdraftInterestAccrued","description":"The amount of technical overdraft interest that has been accrued in the account."}},"additionalProperties":true},"DepositAccountBalancesaf30":{"type":"object","title":"DepositAccountBalancesaf30","description":"Represents information about the balances of a deposit account.","properties":{"availableBalance":{"type":"number","title":"availableBalance","description":"The current available balance for deposit transactions."},"blockedBalance":{"type":"number","title":"blockedBalance","description":"The sum of all the blocked amounts on an account."},"feesDue":{"type":"number","title":"feesDue","description":"The amount of fees due to be paid on this account."},"forwardAvailableBalance":{"type":"number","title":"forwardAvailableBalance","description":"The sum of all the authorization hold amounts that have `CRDT` as the `creditDebitIndicator` for an account."},"holdBalance":{"type":"number","title":"holdBalance","description":"The sum of all the authorization hold amounts that have `DBIT` as the `creditDebitIndicator` for an account."},"lockedBalance":{"type":"number","title":"lockedBalance","description":"The locked amount that is not available for withdrawal in the account. For more information, see [Deposit Account Overview Details](https://support.mambu.com/docs/deposit-account-overview-details)."},"overdraftAmount":{"type":"number","title":"overdraftAmount","description":"The overdraft amount that has been taken out in the account. For more information, see [Overdraft Products](https://support.mambu.com/docs/en/overdraft-products)."},"overdraftInterestDue":{"type":"number","title":"overdraftInterestDue","description":"The amount of interest due to be paid on an account as a result of an authorized overdraft."},"technicalOverdraftAmount":{"type":"number","title":"technicalOverdraftAmount","description":"The technical overdraft amount that has been taken out in the account. For more information, see [Technical Overdraft](https://support.mambu.com/docs/en/overdraft-products#technical-overdraft)."},"technicalOverdraftInterestDue":{"type":"number","title":"technicalOverdraftInterestDue","description":"The amount of interest due to be paid on an account as a result of a technical overdraft."},"totalBalance":{"type":"number","title":"totalBalance","description":"The current balance of the account."}},"additionalProperties":true},"DepositAccountInterestSettingsaf30":{"type":"object","title":"DepositAccountInterestSettingsaf30","description":"Represents information about the deposit account's interest settings.","properties":{"interestPaymentSettings":{"title":"interestPaymentSettings","$ref":"#/$defs/DepositAccountInterestPaymentSettingsaf30"},"interestRateSettings":{"title":"interestRateSettings","$ref":"#/$defs/DepositAccountInterestRateSettingsaf30"}},"additionalProperties":true},"DepositAccountInterestPaymentSettingsaf30":{"type":"object","title":"DepositAccountInterestPaymentSettingsaf30","description":"Represents information about the interest payment settings.","properties":{"interestPaymentDates":{"type":"array","title":"interestPaymentDates","description":"The list of all dates when the interest is paid into the deposit account.","items":{"$ref":"#/$defs/MonthAndDayaf30"}},"interestPaymentPoint":{"title":"interestPaymentPoint","description":"The interest payment point, which specifies when the interest should be paid to the account.","enum":["FIRST_DAY_OF_MONTH","EVERY_WEEK","EVERY_OTHER_WEEK","EVERY_MONTH","EVERY_3_MONTHS","ON_FIXED_DATES","DAILY","ANNUALLY","BI_ANNUALLY","ON_ACCOUNT_MATURITY"]}},"additionalProperties":true},"MonthAndDayaf30":{"type":"object","title":"MonthAndDayaf30","description":"Wrapper for month and day for instances where the year isn't needed","properties":{"day":{"type":"integer","title":"day","description":"The day in the month"},"month":{"type":"integer","title":"month","description":"The month of the year"}},"additionalProperties":true},"DepositAccountInterestRateSettingsaf30":{"type":"object","title":"DepositAccountInterestRateSettingsaf30","description":"Represents information about the interest rate settings for deposit accounts.","properties":{"encodedKey":{"type":"string","title":"encodedKey","description":"The encoded key for the set of interest settings, which is auto-generated and unique."},"interestChargeFrequency":{"title":"interestChargeFrequency","description":"The interest charge frequency, which shows how often interest is charged on loan or deposit accounts.","enum":["ANNUALIZED","EVERY_MONTH","EVERY_FOUR_WEEKS","EVERY_WEEK","EVERY_DAY","EVERY_X_DAYS"]},"interestChargeFrequencyCount":{"type":"integer","title":"interestChargeFrequencyCount","description":"The number of times to apply interest in a time period."},"interestRate":{"type":"number","title":"interestRate","description":"The interest rate for the deposit account."},"interestRateReviewCount":{"type":"integer","title":"interestRateReviewCount","description":"The number of times to review the interest rate in a time period."},"interestRateReviewUnit":{"title":"interestRateReviewUnit","description":"The time unit to use to determine the frequency of interest rate reviews.","enum":["DAYS","WEEKS","MONTHS"]},"interestRateSource":{"title":"interestRateSource","description":"The interest calculation method used.","enum":["FIXED_INTEREST_RATE","INDEX_INTEREST_RATE"]},"interestRateTerms":{"title":"interestRateTerms","description":"The terms for how interest rate is determined when accruing for an account.","enum":["FIXED","TIERED","TIERED_PERIOD","TIERED_BAND"]},"interestRateTiers":{"type":"array","title":"interestRateTiers","description":"The list of interest rate tiers, which hold the values to define how interest is calculated.","items":{"$ref":"#/$defs/DepositAccountInterestRateTieraf30"}},"interestSpread":{"type":"number","title":"interestSpread","description":"The index interest rate that is used to calculate the interest rate that is applied to accounts."}},"additionalProperties":true},"DepositAccountInterestRateTieraf30":{"type":"object","title":"DepositAccountInterestRateTieraf30","description":"Represents information about how interest rate is calculated.","properties":{"encodedKey":{"type":"string","title":"encodedKey","description":"The encoded key of the interest rate tier, auto generated, unique"},"endingBalance":{"type":"number","title":"endingBalance","description":"The top-limit value for the account balance in order to determine if this tier is used or not"},"endingDay":{"type":"integer","title":"endingDay","description":"The end date for the account period. Used to determine if this interest rate tier is used or not."},"interestRate":{"type":"number","title":"interestRate","description":"The rate used for computing the interest for an account which has the balance less than the ending balance"}},"required":["interestRate"],"additionalProperties":true},"DepositAccountInternalControlsaf30":{"type":"object","title":"DepositAccountInternalControlsaf30","description":"Represents information about internal controls.","properties":{"maxDepositBalance":{"type":"number","title":"maxDepositBalance","description":"The maximum deposit balance of the account."},"maxWithdrawalAmount":{"type":"number","title":"maxWithdrawalAmount","description":"The maximum amount allowed for a withdrawal."},"recommendedDepositAmount":{"type":"number","title":"recommendedDepositAmount","description":"The recommended amount for a deposit."},"targetAmount":{"type":"number","title":"targetAmount","description":"The target amount for a deposit made towards a savings goal."}},"additionalProperties":true},"DepositAccountOverdraftInterestSettingsaf30":{"type":"object","title":"DepositAccountOverdraftInterestSettingsaf30","description":"Represents information about a deposit account's overdraft interest settings.","properties":{"interestRateSettings":{"title":"interestRateSettings","$ref":"#/$defs/DepositAccountOverdraftInterestRateSettingsaf30"}},"additionalProperties":true},"DepositAccountOverdraftInterestRateSettingsaf30":{"type":"object","title":"DepositAccountOverdraftInterestRateSettingsaf30","description":"Represents information about overdraft interest rate settings for deposit accounts.","properties":{"encodedKey":{"type":"string","title":"encodedKey","description":"The encoded key for the set of interest settings, which is auto-generated and unique."},"interestChargeFrequency":{"title":"interestChargeFrequency","description":"The interest charge frequency, which shows how often interest is charged on loan or deposit accounts.","enum":["ANNUALIZED","EVERY_MONTH","EVERY_FOUR_WEEKS","EVERY_WEEK","EVERY_DAY","EVERY_X_DAYS"]},"interestChargeFrequencyCount":{"type":"integer","title":"interestChargeFrequencyCount","description":"The number of times to apply interest in a time period."},"interestRate":{"type":"number","title":"interestRate","description":"The interest rate for the deposit account."},"interestRateReviewCount":{"type":"integer","title":"interestRateReviewCount","description":"The number of times to review the interest rate in a time period."},"interestRateReviewUnit":{"title":"interestRateReviewUnit","description":"The time unit to use to determine the frequency of interest rate reviews.","enum":["DAYS","WEEKS","MONTHS"]},"interestRateSource":{"title":"interestRateSource","description":"The interest calculation method used.","enum":["FIXED_INTEREST_RATE","INDEX_INTEREST_RATE"]},"interestRateTerms":{"title":"interestRateTerms","description":"The terms for how interest rate is determined when accruing for an account.","enum":["FIXED","TIERED","TIERED_PERIOD","TIERED_BAND"]},"interestRateTiers":{"type":"array","title":"interestRateTiers","description":"The list of interest rate tiers, which hold the values to define how interest is calculated.","items":{"$ref":"#/$defs/DepositAccountInterestRateTieraf30"}},"interestSpread":{"type":"number","title":"interestSpread","description":"The index interest rate that is used to calculate the interest rate that is applied to accounts."}},"additionalProperties":true},"DepositAccountOverdraftSettingsaf30":{"type":"object","title":"DepositAccountOverdraftSettingsaf30","description":"Represents information about a deposit account's overdraft settings.","properties":{"allowOverdraft":{"type":"boolean","title":"allowOverdraft","description":"`TRUE` if this account supports overdraft, `FALSE` otherwise."},"overdraftExpiryDate":{"type":"string","title":"overdraftExpiryDate","description":"The expiration date of an overdraft.","format":"date-time"},"overdraftLimit":{"type":"number","title":"overdraftLimit","description":"The limit amount that may be taken out as overdraft, where null means 0."}},"additionalProperties":true},"LoanAccountaf30":{"type":"object","title":"LoanAccountaf30","description":"Represents a loan account. A loan account defines the amount that your organization lends to a client. The terms and conditions of a loan account are defined by a loan product. In a loan account, Mambu stores all the information related to disbursements, repayments, interest rates, and withdrawals.","properties":{"accountArrearsSettings":{"title":"accountArrearsSettings","$ref":"#/$defs/AccountArrearsSettingsaf30"},"accountHolderKey":{"type":"string","title":"accountHolderKey","description":"The encoded key of the account holder."},"accountHolderType":{"title":"accountHolderType","description":"The type of the account holder.","enum":["CLIENT","GROUP"]},"accountState":{"title":"accountState","description":"The state of the loan account.","enum":["PARTIAL_APPLICATION","PENDING_APPROVAL","APPROVED","ACTIVE","ACTIVE_IN_ARREARS","CLOSED"]},"accountSubState":{"title":"accountSubState","description":"A second state for the loan account. Beside the account state, a second substate is sometimes necessary to provide more information about the exact lifecycle state of a loan account.For example, even if the account state of a loan account is `ACTIVE`, it can also have a substate of `LOCKED`.","enum":["PARTIALLY_DISBURSED","LOCKED","LOCKED_CAPPING","REFINANCED","RESCHEDULED","WITHDRAWN","REPAID","REJECTED","WRITTEN_OFF","TERMINATED"]},"accruedInterest":{"type":"number","title":"accruedInterest","description":"The amount of interest that has been accrued in the loan account."},"accruedPenalty":{"type":"number","title":"accruedPenalty","description":"The accrued penalty, represents the amount of penalty that has been accrued in the loan account."},"activationTransactionKey":{"type":"string","title":"activationTransactionKey","description":"The encoded key of the transaction that activated the loan account."},"allowOffset":{"type":"boolean","title":"allowOffset","description":"DEPRECATED - Will always be false."},"approvedDate":{"type":"string","title":"approvedDate","description":"The date the loan account was approved.","format":"date-time"},"arrearsTolerancePeriod":{"type":"integer","title":"arrearsTolerancePeriod","description":"The arrears tolerance (period or day of month) depending on the product settings."},"assets":{"type":"array","title":"assets","description":"The list of assets associated with the current loan account.","items":{"$ref":"#/$defs/Assetaf30"}},"assignedBranchKey":{"type":"string","title":"assignedBranchKey","description":"The key of the branch this loan account is assigned to. The branch is set to unassigned if no branch field is set."},"assignedCentreKey":{"type":"string","title":"assignedCentreKey","description":"The key of the centre this account is assigned to."},"assignedUserKey":{"type":"string","title":"assignedUserKey","description":"The key of the user this loan account is assigned to."},"balances":{"title":"balances","$ref":"#/$defs/Balancesaf30"},"closedDate":{"type":"string","title":"closedDate","description":"The date the loan was closed.","format":"date-time"},"creationDate":{"type":"string","title":"creationDate","description":"The date the loan account was created.","format":"date-time"},"creditArrangementKey":{"type":"string","title":"creditArrangementKey","description":"The key to the line of credit where this account is registered to."},"currency":{"title":"currency","$ref":"#/$defs/Currencyaf30"},"daysInArrears":{"type":"integer","title":"daysInArrears","description":"The number of days the loan account is in arrears."},"daysLate":{"type":"integer","title":"daysLate","description":"The number of days a repayment for the loan account is late."},"disbursementDetails":{"title":"disbursementDetails","$ref":"#/$defs/DisbursementDetailsaf30"},"encodedKey":{"type":"string","title":"encodedKey","description":"The encoded key of the loan account, it is auto generated, and must be unique."},"fundingSources":{"type":"array","title":"fundingSources","description":"The list of funds associated with the loan account.","items":{"$ref":"#/$defs/InvestorFundaf30"}},"futurePaymentsAcceptance":{"title":"futurePaymentsAcceptance","description":"Shows whether the repayment transactions with entry date set in the future are allowed or not for this loan account.","enum":["NO_FUTURE_PAYMENTS","ACCEPT_FUTURE_PAYMENTS","ACCEPT_OVERPAYMENTS"]},"guarantors":{"type":"array","title":"guarantors","description":"The list of guarantees associated with the loan account.","items":{"$ref":"#/$defs/Guarantoraf30"}},"id":{"type":"string","title":"id","description":"The ID of the loan account, it can be generated and customized, and must be unique."},"interestAccruedInBillingCycle":{"type":"number","title":"interestAccruedInBillingCycle","description":"The interest that is accrued in the current billing cycle."},"interestCommission":{"type":"number","title":"interestCommission","description":"The value of the interest booked by the organization from the accounts funded by investors. Null if the funds are not enabled."},"interestFromArrearsAccrued":{"type":"number","title":"interestFromArrearsAccrued","description":"The amount of interest from arrears that has been accrued in the loan account."},"interestSettings":{"title":"interestSettings","$ref":"#/$defs/InterestSettingsaf30"},"lastAccountAppraisalDate":{"type":"string","title":"lastAccountAppraisalDate","description":"The date the loan account has last been evaluated for interest, principal, fees, and penalties calculations expressed in the organization time format and time zone.","format":"date-time"},"lastInterestAppliedDate":{"type":"string","title":"lastInterestAppliedDate","description":"The date of the last time the loan account had interest applied (stored to interest balance), expressed in the organization time format and time zone.","format":"date-time"},"lastInterestReviewDate":{"type":"string","title":"lastInterestReviewDate","description":"The date the interest was reviewed last time, stored in the organization time format and time zone.","format":"date-time"},"lastLockedDate":{"type":"string","title":"lastLockedDate","description":"The date when the loan account was set for the last time in the `LOCKED` state expressed in the organization time format and time zone. If null, the account is not locked anymore.","format":"date-time"},"lastModifiedDate":{"type":"string","title":"lastModifiedDate","description":"The last date the loan was updated.","format":"date-time"},"lastSetToArrearsDate":{"type":"string","title":"lastSetToArrearsDate","description":"The date when the loan account was set to last standing or null; if never set, it is expressed in your organization time format and time zone.","format":"date-time"},"lastTaxRateReviewDate":{"type":"string","title":"lastTaxRateReviewDate","description":"The date the tax rate on the loan account was last checked, expressed in the organization time format and time zone.","format":"date-time"},"latePaymentsRecalculationMethod":{"title":"latePaymentsRecalculationMethod","description":"The overdue payments recalculation method inherited from the loan product on which this loan account is based.","enum":["OVERDUE_INSTALLMENTS_INCREASE","LAST_INSTALLMENT_INCREASE"]},"loanAmount":{"type":"number","title":"loanAmount","description":"The loan amount."},"loanName":{"type":"string","title":"loanName","description":"The name of the loan account."},"lockedAccountTotalDueType":{"title":"lockedAccountTotalDueType","description":"The locked account total due type.","enum":["BALANCE_AMOUNT","DUE_AMOUNT_ON_LATE_INSTALLMENTS"]},"lockedOperations":{"type":"array","title":"lockedOperations","description":"A list with operations which are locked when the account is in the AccountState.LOCKED substate.","items":{"enum":["APPLY_INTEREST","APPLY_FEES","APPLY_PENALTIES"]}},"migrationEventKey":{"type":"string","title":"migrationEventKey","description":"The migration event encoded key associated with this loan account. If this account was imported, track which 'migration event' they came from."},"modifyInterestForFirstInstallment":{"type":"boolean","title":"modifyInterestForFirstInstallment","description":"Adjust the interest for the first repayment when the first repayment period is different than the repayment frequency"},"notes":{"type":"string","title":"notes","description":"The notes about this loan account."},"originalAccountKey":{"type":"string","title":"originalAccountKey","description":"The key of the original rescheduled or refinanced loan account."},"paymentHolidaysAccruedInterest":{"type":"number","title":"paymentHolidaysAccruedInterest","description":"The amount of interest that has been accrued during payment holidays in the loan account."},"paymentMethod":{"title":"paymentMethod","description":"The interest payment method that determines whether the payments are made horizontally (on the repayments) or vertically (on the loan account).","enum":["HORIZONTAL","VERTICAL"]},"penaltySettings":{"title":"penaltySettings","$ref":"#/$defs/PenaltySettingsaf30"},"plannedInstallmentFees":{"type":"array","title":"plannedInstallmentFees","description":"The list with manual fees planned on the installments of the loan account.","items":{"$ref":"#/$defs/PlannedInstallmentFeeaf30"}},"prepaymentSettings":{"title":"prepaymentSettings","$ref":"#/$defs/PrepaymentSettingsaf30"},"principalPaymentSettings":{"title":"principalPaymentSettings","$ref":"#/$defs/PrincipalPaymentAccountSettingsaf30"},"productTypeKey":{"type":"string","title":"productTypeKey","description":"The key for the type of loan product that this loan account is based on."},"redrawSettings":{"title":"redrawSettings","$ref":"#/$defs/LoanAccountRedrawSettingsaf30"},"rescheduledAccountKey":{"type":"string","title":"rescheduledAccountKey","description":"The key pointing to where this loan account was rescheduled or refinanced to. This value is only not null if rescheduled."},"scheduleSettings":{"title":"scheduleSettings","$ref":"#/$defs/ScheduleSettingsaf30"},"settlementAccountKey":{"type":"string","title":"settlementAccountKey","description":"The encoded key of the settlement account."},"taxRate":{"type":"number","title":"taxRate","description":"The tax rate."},"terminationDate":{"type":"string","title":"terminationDate","description":"The date this loan account was terminated.","format":"date-time"},"tranches":{"type":"array","title":"tranches","description":"The list of disbursement tranches available for the loan account.","items":{"$ref":"#/$defs/LoanTrancheaf30"}}},"required":["accountHolderKey","accountHolderType","loanAmount","productTypeKey","scheduleSettings"],"additionalProperties":true},"AccountArrearsSettingsaf30":{"type":"object","title":"AccountArrearsSettingsaf30","description":"The account arrears settings, holds the required information for the arrears settings of an account.","properties":{"dateCalculationMethod":{"title":"dateCalculationMethod","description":"The arrears date calculation method.","enum":["ACCOUNT_FIRST_WENT_TO_ARREARS","LAST_LATE_REPAYMENT","ACCOUNT_FIRST_BREACHED_MATERIALITY_THRESHOLD"]},"encodedKey":{"type":"string","title":"encodedKey","description":"The encoded key of the arrears base settings, auto generated, unique."},"monthlyToleranceDay":{"type":"integer","title":"monthlyToleranceDay","description":"Defines monthly arrears tolerance day value."},"nonWorkingDaysMethod":{"title":"nonWorkingDaysMethod","description":"Shows whether the non working days are taken in consideration or not when applying penaltees/late fees or when setting an account into arrears","enum":["INCLUDED","EXCLUDED"]},"toleranceCalculationMethod":{"title":"toleranceCalculationMethod","description":"Defines the tolerance calculation method","enum":["ARREARS_TOLERANCE_PERIOD","MONTHLY_ARREARS_TOLERANCE_DAY"]},"toleranceFloorAmount":{"type":"number","title":"toleranceFloorAmount","description":"The tolerance floor amount."},"tolerancePercentageOfOutstandingPrincipal":{"type":"number","title":"tolerancePercentageOfOutstandingPrincipal","description":"Defines the arrears tolerance amount."},"tolerancePeriod":{"type":"integer","title":"tolerancePeriod","description":"Defines the arrears tolerance period value."}},"additionalProperties":true},"Assetaf30":{"type":"object","title":"Assetaf30","description":"Asset, holds information about a client asset entry.","properties":{"amount":{"type":"number","title":"amount","description":"The amount used by the client for the guaranty"},"assetName":{"type":"string","title":"assetName","description":"The name of a value the client guarantees with (populated when the guaranty type is ASSET)"},"depositAccountKey":{"type":"string","title":"depositAccountKey","description":"The key of the deposit account used by the guarantor (populated when the guaranty type is GUARANTOR). It can be null."},"encodedKey":{"type":"string","title":"encodedKey","description":"The encoded key of the security, auto generated, unique."},"guarantorKey":{"type":"string","title":"guarantorKey","description":"The key of the client/group used as the guarantor."},"guarantorType":{"title":"guarantorType","description":"The type of the guarantor (client/group)","enum":["CLIENT","GROUP"]},"originalAmount":{"type":"number","title":"originalAmount","description":"The original amount used by the client for a collateral asset"},"originalCurrency":{"title":"originalCurrency","$ref":"#/$defs/Currencyaf30"}},"required":["amount","assetName"],"additionalProperties":true},"Currencyaf30":{"type":"object","title":"Currencyaf30","description":"Represents a currency eg. USD, EUR.","properties":{"code":{"title":"code","description":"Fiat(ISO-4217) currency code or NON_FIAT for non fiat currencies.","enum":["AED","AFN","ALL","AMD","ANG","AOA","ARS","AUD","AWG","AZN","BAM","BBD","BDT","BGN","BHD","BIF","BMD","BND","BOB","BOV","BRL","BSD","BTN","BWP","BYR","BYN","BZD","CAD","CDF","CHE","CHF","CHW","CLF","CLP","CNY","COP","COU","CRC","CUC","CUP","CVE","CZK","DJF","DKK","DOP","DZD","EGP","ERN","ETB","EUR","FJD","FKP","GBP","GEL","GHS","GIP","GMD","GNF","GTQ","GYD","HKD","HNL","HRK","HTG","HUF","IDR","ILS","INR","IQD","IRR","ISK","JMD","JOD","JPY","KES","KGS","KHR","KMF","KPW","KRW","KWD","KYD","KZT","LAK","LBP","LKR","LRD","LSL","LTL","LVL","LYD","MAD","MDL","MGA","MKD","MMK","MNT","MOP","MRO","MRU","MUR","MVR","MWK","MXN","MXV","MYR","MZN","NAD","NGN","NIO","NOK","NPR","NZD","OMR","PAB","PEN","PGK","PHP","PKR","PLN","PYG","QAR","RON","RSD","RUB","RWF","SAR","SBD","SCR","SDG","SEK","SGD","SHP","SLL","SOS","SRD","STD","STN","SVC","SYP","SZL","THB","TJS","TMT","TND","TOP","TRY","TTD","TWD","TZS","UAH","UGX","USD","USN","UYI","UYU","UYW","UZS","VED","VEF","VES","VND","VUV","WST","XAG","XAU","XAF","XBA","XBB","XBC","XBD","XCD","XDR","XOF","XPD","XPF","XPT","XSU","XTS","XUA","XXX","YER","ZAR","ZMK","ZWL","ZMW","SSP","NON_FIAT"]},"currencyCode":{"type":"string","title":"currencyCode","description":"Currency code for NON_FIAT currency."}},"additionalProperties":true},"Balancesaf30":{"type":"object","title":"Balancesaf30","description":"The loan account balance details.","properties":{"feesBalance":{"type":"number","title":"feesBalance","description":"The fees balance. Represents the total fees expected to be paid on this account at a given moment."},"feesDue":{"type":"number","title":"feesDue","description":"The fees due. Representing the total fees due for the account."},"feesPaid":{"type":"number","title":"feesPaid","description":"The fees paid. Represents the total fees paid for the account."},"holdBalance":{"type":"number","title":"holdBalance","description":"The sum of all the authorization hold amounts on this account."},"interestBalance":{"type":"number","title":"interestBalance","description":"Represents the total interest owed by the client (total interest applied for account minus interest paid)."},"interestDue":{"type":"number","title":"interestDue","description":"The interest due. Indicates how much interest it's due for the account at this moment."},"interestFromArrearsBalance":{"type":"number","title":"interestFromArrearsBalance","description":"The interest from arrears balance. Indicates interest from arrears owned by the client, from now on. (total interest from arrears accrued for account - interest from arrears paid)."},"interestFromArrearsDue":{"type":"number","title":"interestFromArrearsDue","description":"The interest from arrears due. Indicates how much interest from arrears it's due for the account at this moment."},"interestFromArrearsPaid":{"type":"number","title":"interestFromArrearsPaid","description":"The interest from arrears paid, indicates total interest from arrears paid into the account."},"interestPaid":{"type":"number","title":"interestPaid","description":"The interest paid, indicates total interest paid into the account."},"penaltyBalance":{"type":"number","title":"penaltyBalance","description":"The penalty balance. Represents the total penalty expected to be paid on this account at a given moment."},"penaltyDue":{"type":"number","title":"penaltyDue","description":"The penalty due. Represents the total penalty amount due for the account."},"penaltyPaid":{"type":"number","title":"penaltyPaid","description":"The Penalty paid. Represents the total penalty amount paid for the account."},"principalBalance":{"type":"number","title":"principalBalance","description":"The total principal owned by the client, from now on (principal disbursed - principal paid)."},"principalDue":{"type":"number","title":"principalDue","description":"The principal due, indicates how much principal it's due at this moment."},"principalPaid":{"type":"number","title":"principalPaid","description":"The principal paid, holds the value of the total paid into the account."},"redrawBalance":{"type":"number","title":"redrawBalance","description":"The total redraw amount owned by the client, from now on."}},"additionalProperties":true},"DisbursementDetailsaf30":{"type":"object","title":"DisbursementDetailsaf30","description":"The the disbursement details it holds the information related to the disbursement details as disbursement date, first repayment date, disbursement fees.","properties":{"disbursementDate":{"type":"string","title":"disbursementDate","description":"The activation date, the date when the disbursement actually took place.","format":"date-time"},"encodedKey":{"type":"string","title":"encodedKey","description":"The encoded key of the disbursement details, auto generated, unique"},"expectedDisbursementDate":{"type":"string","title":"expectedDisbursementDate","description":"The date of the expected disbursement.Stored as Organization Time.","format":"date-time"},"fees":{"type":"array","title":"fees","description":"List of fees that should be applied at the disbursement time.","items":{"$ref":"#/$defs/CustomPredefinedFeeaf30"}},"firstRepaymentDate":{"type":"string","title":"firstRepaymentDate","description":"The date of the expected first repayment. Stored as Organization Time.","format":"date-time"},"transactionDetails":{"title":"transactionDetails","$ref":"#/$defs/LoanTransactionDetailsaf30"}},"additionalProperties":true},"CustomPredefinedFeeaf30":{"type":"object","title":"CustomPredefinedFeeaf30","description":"The custom predefined fees, they may be used as the expected predefined fees that will be applied on the disbursement.","properties":{"amount":{"type":"number","title":"amount","description":"The amount of the custom fee."},"encodedKey":{"type":"string","title":"encodedKey","description":"The encoded key of the custom predefined fee, auto generated, unique."},"percentage":{"type":"number","title":"percentage","description":"The percentage of the custom fee."},"predefinedFeeEncodedKey":{"type":"string","title":"predefinedFeeEncodedKey","description":"The encoded key of the predefined fee"}},"additionalProperties":true},"LoanTransactionDetailsaf30":{"type":"object","title":"LoanTransactionDetailsaf30","description":"Represents the loan transaction details.","properties":{"encodedKey":{"type":"string","title":"encodedKey","description":"The encoded key of the entity, generated, globally unique"},"internalTransfer":{"type":"boolean","title":"internalTransfer","description":"Whether the transaction was transferred between loans or deposit accounts"},"targetDepositAccountKey":{"type":"string","title":"targetDepositAccountKey","description":"In case of a transaction to a deposit account this represent the deposit account key to which the transaction was made."},"transactionChannelId":{"type":"string","title":"transactionChannelId","description":"The ID of the transaction channel associated with the transaction details."},"transactionChannelKey":{"type":"string","title":"transactionChannelKey","description":"The encoded key of the transaction channel associated with the transaction details."}},"additionalProperties":true},"InvestorFundaf30":{"type":"object","title":"InvestorFundaf30","description":"Contains the details about an investor fund including fields like encoded key, guarantor type, amount and guarantor key","properties":{"amount":{"type":"number","title":"amount","description":"The amount used by the client for the guaranty"},"assetName":{"type":"string","title":"assetName","description":"The name of a value the client guarantees with (populated when the guaranty type is ASSET)"},"depositAccountKey":{"type":"string","title":"depositAccountKey","description":"The key of the deposit account used by the guarantor (populated when the guaranty type is GUARANTOR). It can be null."},"encodedKey":{"type":"string","title":"encodedKey","description":"The encoded key of the entity, generated, globally unique"},"guarantorKey":{"type":"string","title":"guarantorKey","description":"The key of the client/group used as the guarantor."},"guarantorType":{"title":"guarantorType","description":"The type of the guarantor (client/group)","enum":["CLIENT","GROUP"]},"id":{"type":"string","title":"id","description":"Investor fund unique identifier. All versions of an investor fund will have same id."},"interestCommission":{"type":"number","title":"interestCommission","description":"The constraint minimum value"},"sharePercentage":{"type":"number","title":"sharePercentage","description":"Percentage of loan shares this investor owns"}},"required":["amount","guarantorKey","guarantorType"],"additionalProperties":true},"Guarantoraf30":{"type":"object","title":"Guarantoraf30","description":"Guarantor, holds information about a client guaranty entry. It can be defined based on another client which guarantees (including or not a savings account whether it is a client of the organization using Mambu or not) or based on a value the client holds (an asset)","properties":{"amount":{"type":"number","title":"amount","description":"The amount used by the client for the guaranty"},"assetName":{"type":"string","title":"assetName","description":"The name of a value the client guarantees with (populated when the guaranty type is ASSET)"},"depositAccountKey":{"type":"string","title":"depositAccountKey","description":"The key of the deposit account used by the guarantor (populated when the guaranty type is GUARANTOR). It can be null."},"encodedKey":{"type":"string","title":"encodedKey","description":"The encoded key of the security, auto generated, unique."},"guarantorKey":{"type":"string","title":"guarantorKey","description":"The key of the client/group used as the guarantor."},"guarantorType":{"title":"guarantorType","description":"The type of the guarantor (client/group)","enum":["CLIENT","GROUP"]}},"required":["amount","guarantorKey","guarantorType"],"additionalProperties":true},"InterestSettingsaf30":{"type":"object","title":"InterestSettingsaf30","description":"The interest settings, holds all the properties regarding interests for the loan account.","properties":{"accountInterestRateSettings":{"type":"array","title":"accountInterestRateSettings","description":"Adjustable interest rates settings for loan account","items":{"$ref":"#/$defs/AccountInterestRateSettingsaf30"}},"accrueInterestAfterMaturity":{"type":"boolean","title":"accrueInterestAfterMaturity","description":"The accrue interest after maturity. If the product support this option, specify if the interest should be accrued after the account maturity date."},"accrueLateInterest":{"type":"boolean","title":"accrueLateInterest","description":"Indicates whether late interest is accrued for this loan account"},"interestApplicationDays":{"title":"interestApplicationDays","$ref":"#/$defs/DaysInMonthaf30"},"interestApplicationMethod":{"title":"interestApplicationMethod","description":"The interest application method. Represents the interest application method that determines whether the interest gets applied on the account's disbursement or on each repayment.","enum":["AFTER_DISBURSEMENT","REPAYMENT_DUE_DATE","FIXED_DAYS_OF_MONTH"]},"interestBalanceCalculationMethod":{"title":"interestBalanceCalculationMethod","description":"The interest balance calculation method. Represents the option which determines the way the balance for the account's interest is computed.","enum":["ONLY_PRINCIPAL","PRINCIPAL_AND_INTEREST"]},"interestCalculationMethod":{"title":"interestCalculationMethod","description":"The interest calculation method. Holds the type of interest calculation method.","enum":["FLAT","DECLINING_BALANCE","DECLINING_BALANCE_DISCOUNTED","EQUAL_INSTALLMENTS"]},"interestChargeFrequency":{"title":"interestChargeFrequency","description":"The interest change frequency. Holds the possible values for how often is interest charged on loan or deposit accounts","enum":["ANNUALIZED","EVERY_MONTH","EVERY_FOUR_WEEKS","EVERY_WEEK","EVERY_DAY","EVERY_X_DAYS"]},"interestRate":{"type":"number","title":"interestRate","description":"The interest rate. Represents the interest rate for the loan account. The interest on loans is accrued on a daily basis, which allows charging the clients only for the days they actually used the loan amount."},"interestRateChangePMTAdjustmentThreshold":{"title":"interestRateChangePMTAdjustmentThreshold","$ref":"#/$defs/InterestRateChangePMTAdjustmentThresholdaf30"},"interestRateReviewCount":{"type":"integer","title":"interestRateReviewCount","description":"Interest rate update frequency unit count."},"interestRateReviewUnit":{"title":"interestRateReviewUnit","description":"The interest rate review unit. Defines the interest rate update frequency measurement unit.","enum":["DAYS","WEEKS","MONTHS"]},"interestRateSource":{"title":"interestRateSource","description":"The interest rate source. Represents the interest calculation method: fixed or (interest spread + active organization index interest rate)","enum":["FIXED_INTEREST_RATE","INDEX_INTEREST_RATE"]},"interestSpread":{"type":"number","title":"interestSpread","description":"Interest to be added to active organization index interest rate in order to find out actual interest rate"},"interestType":{"title":"interestType","description":"The possible values for how we compute and apply the interest","enum":["SIMPLE_INTEREST","CAPITALIZED_INTEREST","COMPOUNDING_INTEREST"]}},"additionalProperties":true},"AccountInterestRateSettingsaf30":{"type":"object","title":"AccountInterestRateSettingsaf30","description":"Adjustable interest rates settings for loan account","properties":{"encodedKey":{"type":"string","title":"encodedKey","description":"The encoded key of the interest rate settings, auto generated, unique"},"indexSourceKey":{"type":"string","title":"indexSourceKey","description":"Index rate source key."},"interestRate":{"type":"number","title":"interestRate","description":"Interest rate value."},"interestRateCeilingValue":{"type":"number","title":"interestRateCeilingValue","description":"Maximum value allowed for index based interest rate. Valid only for index interest rate."},"interestRateFloorValue":{"type":"number","title":"interestRateFloorValue","description":"Minimum value allowed for index based interest rate. Valid only for index interest rate."},"interestRateReviewCount":{"type":"integer","title":"interestRateReviewCount","description":"Interest rate review frequency unit count. Valid only for index interest rate."},"interestRateReviewUnit":{"title":"interestRateReviewUnit","description":"Interest rate review frequency measurement unit. Valid only for index interest rate.","enum":["DAYS","WEEKS","MONTHS"]},"interestRateSource":{"title":"interestRateSource","description":"Interest calculation method: fixed or indexed(interest spread + active organization index interest rate)","enum":["FIXED_INTEREST_RATE","INDEX_INTEREST_RATE"]},"interestSpread":{"type":"number","title":"interestSpread","description":"Interest spread value."},"validFrom":{"type":"string","title":"validFrom","description":"Date since an interest rate is valid","format":"date-time"}},"required":["interestRateSource","validFrom"],"additionalProperties":true},"DaysInMonthaf30":{"type":"object","title":"DaysInMonthaf30","description":"Enumeration for days of month and method of handling shorter months.","properties":{"daysInMonth":{"type":"array","title":"daysInMonth","description":" Specifies the day(s) of the month when the interest application dates should be. Only available if the Interest Application Method is InterestApplicationMethodDTO#FIXED_DAYS_OF_MONTH. Currently only 1 value can be specified.","items":{"type":"integer"}},"shortMonthHandlingMethod":{"title":"shortMonthHandlingMethod","description":"Determines how to handle the short months, if they select a fixed day of month > 28. Will be null if no such date is selected. Only available if the Interest Application Method is InterestApplicationMethodDTO#FIXED_DAYS_OF_MONTH.","enum":["LAST_DAY_IN_MONTH","FIRST_DAY_OF_NEXT_MONTH"]}},"additionalProperties":true},"InterestRateChangePMTAdjustmentThresholdaf30":{"type":"object","title":"InterestRateChangePMTAdjustmentThresholdaf30","description":"Represents interest rate change threshold settings for loan accounts and loan products.","properties":{"method":{"title":"method","description":"The method used to calculate the interest rate change threshold. Supported value is CALENDAR_DAYS","enum":["WORKING_DAYS","CALENDAR_DAYS"]},"numberOfDays":{"type":"integer","title":"numberOfDays","description":"The number of days that trigger an interest rate change."}},"additionalProperties":true},"PenaltySettingsaf30":{"type":"object","title":"PenaltySettingsaf30","description":"The penalty settings, holds all the fields regarding penalties","properties":{"loanPenaltyCalculationMethod":{"title":"loanPenaltyCalculationMethod","description":"The last penalty calculation method, represents on what amount are the penalties calculated.","enum":["NONE","OVERDUE_BALANCE","OVERDUE_BALANCE_AND_INTEREST","OUTSTANDING_PRINCIPAL"]},"penaltyRate":{"type":"number","title":"penaltyRate","description":"The penalty rate, represents the rate (in percent) which is charged as a penalty."}},"additionalProperties":true},"PlannedInstallmentFeeaf30":{"type":"object","title":"PlannedInstallmentFeeaf30","description":"The planned fee details holds the information related to the installment key, predefined fee key and amount","properties":{"amount":{"type":"number","title":"amount","description":"The amount of the planned fee."},"applyOnDate":{"type":"string","title":"applyOnDate","description":"The date when a planned fee should be applied, overriding installment's due date. It should match the interval of the installment. If it belong to first installment, it should be between disbursement date and installment due date.","format":"date-time"},"encodedKey":{"type":"string","title":"encodedKey","description":"The encoded key of the planned installment fee, auto generated, unique."},"installmentKey":{"type":"string","title":"installmentKey","description":"The encoded key of the installment on which the predefined fee is planned."},"installmentNumber":{"type":"integer","title":"installmentNumber","description":"The number of the installment on which the predefined fee is planned. It is used only in the case when fees are created at the same time with the loan account creation or during preview schedule, before account creation, otherwise this should be empty and installmentKey will be used to identify an installment."},"predefinedFeeKey":{"type":"string","title":"predefinedFeeKey","description":"The encoded key of the predefined fee which is planned."}},"required":["predefinedFeeKey"],"additionalProperties":true},"PrepaymentSettingsaf30":{"type":"object","title":"PrepaymentSettingsaf30","description":"The prepayment settings, holds all prepayment properties.","properties":{"applyInterestOnPrepaymentMethod":{"title":"applyInterestOnPrepaymentMethod","description":"Apply interest on prepayment method copied from loan product on which this account is based.","enum":["AUTOMATIC","MANUAL"]},"elementsRecalculationMethod":{"title":"elementsRecalculationMethod","description":"The elements recalculation method, indicates how the declining balance with equal installments repayments are recalculated.","enum":["PRINCIPAL_EXPECTED_FIXED","TOTAL_EXPECTED_FIXED"]},"ercFreeAllowanceAmount":{"type":"number","title":"ercFreeAllowanceAmount"},"ercFreeAllowancePercentage":{"type":"number","title":"ercFreeAllowancePercentage","description":"Early repayment charge fee free allowance in percentage per year"},"prepaymentRecalculationMethod":{"title":"prepaymentRecalculationMethod","description":"Prepayment recalculation method copied from the loan product on which this account is based.","enum":["NO_RECALCULATION","RESCHEDULE_REMAINING_REPAYMENTS","RECALCULATE_SCHEDULE_KEEP_SAME_NUMBER_OF_TERMS","RECALCULATE_SCHEDULE_KEEP_SAME_PRINCIPAL_AMOUNT","RECALCULATE_SCHEDULE_KEEP_SAME_TOTAL_REPAYMENT_AMOUNT","REDUCE_AMOUNT_PER_INSTALLMENT","REDUCE_NUMBER_OF_INSTALLMENTS","REDUCE_NUMBER_OF_INSTALLMENTS_NEW"]},"principalPaidInstallmentStatus":{"title":"principalPaidInstallmentStatus","description":"Installment status for the case when principal is paid off (copied from loan product).","enum":["PARTIALLY_PAID","PAID","ORIGINAL_TOTAL_EXPECTED_PAID"]}},"additionalProperties":true},"PrincipalPaymentAccountSettingsaf30":{"type":"object","title":"PrincipalPaymentAccountSettingsaf30","description":"The principal payment account settings, holds the required information for the principal payment process of an account.","properties":{"amount":{"type":"number","title":"amount","description":"Fixed amount for being used for the repayments principal due."},"encodedKey":{"type":"string","title":"encodedKey","description":"The encoded key of the principal payment base settings, auto generated, unique."},"includeFeesInFloorAmount":{"type":"boolean","title":"includeFeesInFloorAmount","description":"Boolean flag, if true, the fees will be included along with the principal in the repayment floor amount, for a revolving credit account"},"includeInterestInFloorAmount":{"type":"boolean","title":"includeInterestInFloorAmount","description":"Boolean flag, if true, the interest will be included along with the principal in the repayment floor amount, for a revolving credit account"},"percentage":{"type":"number","title":"percentage","description":"Percentage of principal amount used for the repayments principal due."},"principalCeilingValue":{"type":"number","title":"principalCeilingValue","description":"The maximum principal due amount a repayment made with this settings can have"},"principalFloorValue":{"type":"number","title":"principalFloorValue","description":"The minimum principal due amount a repayment made with this settings can have"},"principalPaymentMethod":{"title":"principalPaymentMethod","description":"The method of principal payment for revolving credit.","enum":["FLAT","OUTSTANDING_PRINCIPAL_PERCENTAGE","PRINCIPAL_PERCENTAGE_LAST_DISB","TOTAL_BALANCE_PERCENTAGE","TOTAL_BALANCE_FLAT","TOTAL_PRINCIPAL_PERCENTAGE"]},"totalDueAmountFloor":{"type":"number","title":"totalDueAmountFloor","description":"The minimum total due amount a repayment made with this settings can have"},"totalDuePayment":{"title":"totalDuePayment","description":"The method of total due payment for revolving credit","enum":["FLAT","OUTSTANDING_PRINCIPAL_PERCENTAGE","PRINCIPAL_PERCENTAGE_LAST_DISB","TOTAL_BALANCE_PERCENTAGE","TOTAL_BALANCE_FLAT","TOTAL_PRINCIPAL_PERCENTAGE"]}},"additionalProperties":true},"LoanAccountRedrawSettingsaf30":{"type":"object","title":"LoanAccountRedrawSettingsaf30","description":"Represents the redraw settings for a loan account.","properties":{"restrictNextDueWithdrawal":{"type":"boolean","title":"restrictNextDueWithdrawal","description":"`TRUE` if withdrawing amounts that reduce the next due instalment repayment is restricted, `FALSE` otherwise."}},"required":["restrictNextDueWithdrawal"],"additionalProperties":true},"ScheduleSettingsaf30":{"type":"object","title":"ScheduleSettingsaf30","description":"The schedule settings, holds all schedule properties.","properties":{"amortizationPeriod":{"type":"integer","title":"amortizationPeriod","description":"The PMT is calculated as the loan would have [amortizationPeriod] installments."},"billingCycle":{"title":"billingCycle","$ref":"#/$defs/BillingCycleDaysaf30"},"defaultFirstRepaymentDueDateOffset":{"type":"integer","title":"defaultFirstRepaymentDueDateOffset","description":"The default first repayment due date offset, indicates how many days the first repayment due date should be extended(all other due dates from the schedule are relative to first repayment due date - they will also be affected by the offset)"},"fixedDaysOfMonth":{"type":"array","title":"fixedDaysOfMonth","description":"Specifies the days of the month when the repayment due dates should be. Only available if the Repayment Methodology is FIXED_DAYS_OF_MONTH.","items":{"type":"integer"}},"gracePeriod":{"type":"integer","title":"gracePeriod","description":"The grace period. Represents the grace period for loan repayment - in number of installments."},"gracePeriodType":{"title":"gracePeriodType","description":"The grace period type. Representing the type of grace period which is possible for a loan account.","enum":["NONE","PAY_INTEREST_ONLY","INTEREST_FORGIVENESS"]},"hasCustomSchedule":{"type":"boolean","title":"hasCustomSchedule","description":"Flag used when the repayments schedule for the current account was determined by the user, by editing the due dates or the principal due"},"paymentPlan":{"type":"array","title":"paymentPlan","description":"A list of periodic payments for the current loan account.","items":{"$ref":"#/$defs/PeriodicPaymentaf30"}},"periodicPayment":{"type":"number","title":"periodicPayment","description":"The periodic payment amount for the accounts which have balloon payments or Reduce Number of Installments and Optimized Payments"},"previewSchedule":{"title":"previewSchedule","$ref":"#/$defs/RevolvingAccountSettingsaf30"},"principalRepaymentInterval":{"type":"integer","title":"principalRepaymentInterval","description":"The principal repayment interval. Indicates the interval of repayments that the principal has to be paid."},"repaymentInstallments":{"type":"integer","title":"repaymentInstallments","description":"The repayment installments. Represents how many installments are required to pay back the loan."},"repaymentPeriodCount":{"type":"integer","title":"repaymentPeriodCount","description":"The repayment period count. Represents how often the loan is to be repaid: stored based on the type repayment option."},"repaymentPeriodUnit":{"title":"repaymentPeriodUnit","description":"The repayment period unit. Represents the frequency of loan repayment.","enum":["DAYS","WEEKS","MONTHS","YEARS"]},"repaymentScheduleMethod":{"title":"repaymentScheduleMethod","description":"The repayment schedule method. Represents the method that determines whether the schedule will be fixed all over the loan account's life cycle or will be dynamically recomputed when required.","enum":["NONE","FIXED","DYNAMIC"]},"scheduleDueDatesMethod":{"title":"scheduleDueDatesMethod","description":"The schedule due dates method. Represents the methodology used by this account to compute the due dates of the repayments.","enum":["INTERVAL","FIXED_DAYS_OF_MONTH"]},"shortMonthHandlingMethod":{"title":"shortMonthHandlingMethod","description":"The short handling method. Determines how to handle the short months, if they select a fixed day of month > 28. Will be null if no such date is selected and also for the Interval methodology. Only available if the Repayment Methodology is FIXED_DAYS_OF_MONTH.","enum":["LAST_DAY_IN_MONTH","FIRST_DAY_OF_NEXT_MONTH"]}},"required":["gracePeriod"],"additionalProperties":true},"BillingCycleDaysaf30":{"type":"object","title":"BillingCycleDaysaf30","description":"Defines the billing cycles settings for a loan account","properties":{"days":{"type":"array","title":"days","description":"The billing cycle start days in case it is enabled","items":{"type":"integer"},"uniqueItems":true}},"additionalProperties":true},"PeriodicPaymentaf30":{"type":"object","title":"PeriodicPaymentaf30","description":"For fixed term loans there is the possibility to define a payment plan. A payment plan consists of multiple periodic payments. This class holds information about a periodic payment.","properties":{"amount":{"type":"number","title":"amount","description":"The PMT value used in periodic payment"},"encodedKey":{"type":"string","title":"encodedKey","description":"The encoded key of the periodic payment, auto generated, unique."},"toInstallment":{"type":"integer","title":"toInstallment","description":"The installment's position up to which the PMT will be used"}},"required":["amount","toInstallment"],"additionalProperties":true},"RevolvingAccountSettingsaf30":{"type":"object","title":"RevolvingAccountSettingsaf30","description":"The number of previewed instalments for an account","properties":{"numberOfPreviewedInstalments":{"type":"integer","title":"numberOfPreviewedInstalments","description":"The number of previewed instalments"}},"additionalProperties":true},"LoanTrancheaf30":{"type":"object","title":"LoanTrancheaf30","description":"In some cases organizations may approve loans but not disburse the full amount initially. They would like to spread the disbursement (and risk) over time. Likewise for the client, they may not need the full loan amount up front. They may want to have a loan to buy some equipment for their business but will make one purchase today and another purchase in a few months.  In these cases, they don't need the full amount and wouldn't want to pay interest on cash they don't need yet. A solution for this matter is the usage of disbursement in tranches. This class holds the information required for one of this tranche. ","properties":{"amount":{"type":"number","title":"amount","description":"The amount this tranche has available for disburse"},"disbursementDetails":{"title":"disbursementDetails","$ref":"#/$defs/TrancheDisbursementDetailsaf30"},"encodedKey":{"type":"string","title":"encodedKey","description":"The encoded key of the transaction details , auto generated, unique."},"fees":{"type":"array","title":"fees","description":"Fees that are associated with this tranche","items":{"$ref":"#/$defs/CustomPredefinedFeeaf30"}},"trancheNumber":{"type":"integer","title":"trancheNumber","description":"Index indicating the tranche number"}},"required":["amount"],"additionalProperties":true},"TrancheDisbursementDetailsaf30":{"type":"object","title":"TrancheDisbursementDetailsaf30","description":"The disbursement details regarding a loan tranche.","properties":{"disbursementTransactionKey":{"type":"string","title":"disbursementTransactionKey","description":"The key of the disbursement transaction logged when this tranche was disbursed. This field will be null until the tranche disbursement"},"expectedDisbursementDate":{"type":"string","title":"expectedDisbursementDate","description":"The date when this tranche is supposed to be disbursed (as Organization Time)","format":"date-time"}},"additionalProperties":true}}};const schema12 = {"type":"object","title":"DepositAccountaf30","description":"Represents information about a deposit account.","properties":{"accountHolderKey":{"type":"string","title":"accountHolderKey","description":"The encoded key of the account holder, which is an individual client or group."},"accountHolderType":{"title":"accountHolderType","description":"The account holder type.","enum":["CLIENT","GROUP"]},"accountState":{"title":"accountState","description":"The state of the deposit account.","enum":["PENDING_APPROVAL","APPROVED","ACTIVE","ACTIVE_IN_ARREARS","MATURED","LOCKED","DORMANT","CLOSED","CLOSED_WRITTEN_OFF","WITHDRAWN","CLOSED_REJECTED"]},"accountType":{"title":"accountType","description":"The deposit account type and the product that it belongs to.","enum":["CURRENT_ACCOUNT","REGULAR_SAVINGS","FIXED_DEPOSIT","SAVINGS_PLAN","INVESTOR_ACCOUNT"]},"accruedAmounts":{"title":"accruedAmounts","$ref":"#/$defs/DepositAccountAccruedAmountsaf30"},"activationDate":{"type":"string","title":"activationDate","description":"The date when the deposit account was activated, in the organization's timezone and time format.","format":"date-time"},"approvedDate":{"type":"string","title":"approvedDate","description":"The date when the deposit account was approved, in the organization's timezone and time format.","format":"date-time"},"assignedBranchKey":{"type":"string","title":"assignedBranchKey","description":"The key of the branch that this deposit account is assigned to."},"assignedCentreKey":{"type":"string","title":"assignedCentreKey","description":"The key of the centre that this account is assigned to."},"assignedUserKey":{"type":"string","title":"assignedUserKey","description":"The key of the user that this deposit is assigned to."},"balances":{"title":"balances","$ref":"#/$defs/DepositAccountBalancesaf30"},"closedDate":{"type":"string","title":"closedDate","description":"The date when the deposit account was closed, in UTC.","format":"date-time"},"creationDate":{"type":"string","title":"creationDate","description":"The date this deposit account was created, in UTC.","format":"date-time"},"creditArrangementKey":{"type":"string","title":"creditArrangementKey","description":"The key to the credit arrangement where this account is registered."},"currencyCode":{"type":"string","title":"currencyCode","description":"The currency code."},"encodedKey":{"type":"string","title":"encodedKey","description":"The encoded key of the deposit account, which is auto-generated and unique."},"id":{"type":"string","title":"id","description":"The ID of the deposit account, which can be generated and customized - but must be unique."},"interestSettings":{"title":"interestSettings","$ref":"#/$defs/DepositAccountInterestSettingsaf30"},"internalControls":{"title":"internalControls","$ref":"#/$defs/DepositAccountInternalControlsaf30"},"lastAccountAppraisalDate":{"type":"string","title":"lastAccountAppraisalDate","description":"The date when the account was last evaluated for interest calculations and maturity, in the organization's timezone and time format.","format":"date-time"},"lastInterestCalculationDate":{"type":"string","title":"lastInterestCalculationDate","description":"The date when interest was last calculated for the account, in the organization's timezone and time format.","format":"date-time"},"lastInterestReviewDate":{"type":"string","title":"lastInterestReviewDate","description":"The date when regular interest was last reviewed, in the organization's timezone and time format.","format":"date-time"},"lastInterestStoredDate":{"type":"string","title":"lastInterestStoredDate","description":"The date when interest was last applied on the account, in the organization's timezone and time format.","format":"date-time"},"lastModifiedDate":{"type":"string","title":"lastModifiedDate","description":"The last update date for the deposit account, in UTC.","format":"date-time"},"lastOverdraftInterestReviewDate":{"type":"string","title":"lastOverdraftInterestReviewDate","description":"The date when the overdraft interest was last reviewed, in the organization's timezone and time format.","format":"date-time"},"lastSetToArrearsDate":{"type":"string","title":"lastSetToArrearsDate","description":"The date when the deposit account was set to In Arrears, or null if the account is not In Arrears. The date is in the organization's timezone and time format.","format":"date-time"},"linkedSettlementAccountKeys":{"type":"array","title":"linkedSettlementAccountKeys","description":"Lists all loan account keys on which the deposit account is used as the settlement account.","items":{"type":"string"}},"lockedDate":{"type":"string","title":"lockedDate","description":"The date when the deposit account was locked, in the organization's timezone and time format.","format":"date-time"},"maturityDate":{"type":"string","title":"maturityDate","description":"The date when the account matures, for fixed or compulsory savings plans, in the organization's timezone and time format.","format":"date-time"},"migrationEventKey":{"type":"string","title":"migrationEventKey","description":"The migration event encoded key associated with this deposit account. If this account was imported, you can track which migration event it came from."},"name":{"type":"string","title":"name","description":"The deposit account name."},"notes":{"type":"string","title":"notes","description":"The notes or description attached to this object."},"overdraftInterestSettings":{"title":"overdraftInterestSettings","$ref":"#/$defs/DepositAccountOverdraftInterestSettingsaf30"},"overdraftSettings":{"title":"overdraftSettings","$ref":"#/$defs/DepositAccountOverdraftSettingsaf30"},"productTypeKey":{"type":"string","title":"productTypeKey","description":"The key to the product type that this account is based on."},"withholdingTaxSourceKey":{"type":"string","title":"withholdingTaxSourceKey","description":"The tax source where the account withholding taxes will be updated."}},"required":["accountHolderKey","accountHolderType","name","productTypeKey"],"additionalProperties":true};const schema13 = {"type":"object","title":"DepositAccountAccruedAmountsaf30","description":"Represents information about the accrued amounts of deposit accounts.","properties":{"interestAccrued":{"type":"number","title":"interestAccrued","description":"The amount of positive interest that has been accrued in the account."},"negativeInterestAccrued":{"type":"number","title":"negativeInterestAccrued","description":"The amount of negative interest that has been accrued in the account."},"overdraftInterestAccrued":{"type":"number","title":"overdraftInterestAccrued","description":"The amount of overdraft interest that has been accrued in the account."},"technicalOverdraftInterestAccrued":{"type":"number","title":"technicalOverdraftInterestAccrued","description":"The amount of technical overdraft interest that has been accrued in the account."}},"additionalProperties":true};const schema14 = {"type":"object","title":"DepositAccountBalancesaf30","description":"Represents information about the balances of a deposit account.","properties":{"availableBalance":{"type":"number","title":"availableBalance","description":"The current available balance for deposit transactions."},"blockedBalance":{"type":"number","title":"blockedBalance","description":"The sum of all the blocked amounts on an account."},"feesDue":{"type":"number","title":"feesDue","description":"The amount of fees due to be paid on this account."},"forwardAvailableBalance":{"type":"number","title":"forwardAvailableBalance","description":"The sum of all the authorization hold amounts that have `CRDT` as the `creditDebitIndicator` for an account."},"holdBalance":{"type":"number","title":"holdBalance","description":"The sum of all the authorization hold amounts that have `DBIT` as the `creditDebitIndicator` for an account."},"lockedBalance":{"type":"number","title":"lockedBalance","description":"The locked amount that is not available for withdrawal in the account. For more information, see [Deposit Account Overview Details](https://support.mambu.com/docs/deposit-account-overview-details)."},"overdraftAmount":{"type":"number","title":"overdraftAmount","description":"The overdraft amount that has been taken out in the account. For more information, see [Overdraft Products](https://support.mambu.com/docs/en/overdraft-products)."},"overdraftInterestDue":{"type":"number","title":"overdraftInterestDue","description":"The amount of interest due to be paid on an account as a result of an authorized overdraft."},"technicalOverdraftAmount":{"type":"number","title":"technicalOverdraftAmount","description":"The technical overdraft amount that has been taken out in the account. For more information, see [Technical Overdraft](https://support.mambu.com/docs/en/overdraft-products#technical-overdraft)."},"technicalOverdraftInterestDue":{"type":"number","title":"technicalOverdraftInterestDue","description":"The amount of interest due to be paid on an account as a result of a technical overdraft."},"totalBalance":{"type":"number","title":"totalBalance","description":"The current balance of the account."}},"additionalProperties":true};const schema20 = {"type":"object","title":"DepositAccountInternalControlsaf30","description":"Represents information about internal controls.","properties":{"maxDepositBalance":{"type":"number","title":"maxDepositBalance","description":"The maximum deposit balance of the account."},"maxWithdrawalAmount":{"type":"number","title":"maxWithdrawalAmount","description":"The maximum amount allowed for a withdrawal."},"recommendedDepositAmount":{"type":"number","title":"recommendedDepositAmount","description":"The recommended amount for a deposit."},"targetAmount":{"type":"number","title":"targetAmount","description":"The target amount for a deposit made towards a savings goal."}},"additionalProperties":true};const schema24 = {"type":"object","title":"DepositAccountOverdraftSettingsaf30","description":"Represents information about a deposit account's overdraft settings.","properties":{"allowOverdraft":{"type":"boolean","title":"allowOverdraft","description":"`TRUE` if this account supports overdraft, `FALSE` otherwise."},"overdraftExpiryDate":{"type":"string","title":"overdraftExpiryDate","description":"The expiration date of an overdraft.","format":"date-time"},"overdraftLimit":{"type":"number","title":"overdraftLimit","description":"The limit amount that may be taken out as overdraft, where null means 0."}},"additionalProperties":true};const func0 = require("ajv/dist/runtime/equal").default;const schema15 = {"type":"object","title":"DepositAccountInterestSettingsaf30","description":"Represents information about the deposit account's interest settings.","properties":{"interestPaymentSettings":{"title":"interestPaymentSettings","$ref":"#/$defs/DepositAccountInterestPaymentSettingsaf30"},"interestRateSettings":{"title":"interestRateSettings","$ref":"#/$defs/DepositAccountInterestRateSettingsaf30"}},"additionalProperties":true};const schema16 = {"type":"object","title":"DepositAccountInterestPaymentSettingsaf30","description":"Represents information about the interest payment settings.","properties":{"interestPaymentDates":{"type":"array","title":"interestPaymentDates","description":"The list of all dates when the interest is paid into the deposit account.","items":{"$ref":"#/$defs/MonthAndDayaf30"}},"interestPaymentPoint":{"title":"interestPaymentPoint","description":"The interest payment point, which specifies when the interest should be paid to the account.","enum":["FIRST_DAY_OF_MONTH","EVERY_WEEK","EVERY_OTHER_WEEK","EVERY_MONTH","EVERY_3_MONTHS","ON_FIXED_DATES","DAILY","ANNUALLY","BI_ANNUALLY","ON_ACCOUNT_MATURITY"]}},"additionalProperties":true};const schema17 = {"type":"object","title":"MonthAndDayaf30","description":"Wrapper for month and day for instances where the year isn't needed","properties":{"day":{"type":"integer","title":"day","description":"The day in the month"},"month":{"type":"integer","title":"month","description":"The month of the year"}},"additionalProperties":true};function validate13(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){let vErrors = null;let errors = 0;if(errors === 0){if(data && typeof data == "object" && !Array.isArray(data)){if(data.interestPaymentDates !== undefined){let data0 = data.interestPaymentDates;const _errs2 = errors;if(errors === _errs2){if(Array.isArray(data0)){var valid1 = true;const len0 = data0.length;for(let i0=0; i0<len0; i0++){let data1 = data0[i0];const _errs4 = errors;const _errs5 = errors;if(errors === _errs5){if(data1 && typeof data1 == "object" && !Array.isArray(data1)){if(data1.day !== undefined){let data2 = data1.day;const _errs8 = errors;if(!(((typeof data2 == "number") && (!(data2 % 1) && !isNaN(data2))) && (isFinite(data2)))){validate13.errors = [{instancePath:instancePath+"/interestPaymentDates/" + i0+"/day",schemaPath:"#/$defs/MonthAndDayaf30/properties/day/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];return false;}var valid3 = _errs8 === errors;}else {var valid3 = true;}if(valid3){if(data1.month !== undefined){let data3 = data1.month;const _errs10 = errors;if(!(((typeof data3 == "number") && (!(data3 % 1) && !isNaN(data3))) && (isFinite(data3)))){validate13.errors = [{instancePath:instancePath+"/interestPaymentDates/" + i0+"/month",schemaPath:"#/$defs/MonthAndDayaf30/properties/month/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];return false;}var valid3 = _errs10 === errors;}else {var valid3 = true;}}}else {validate13.errors = [{instancePath:instancePath+"/interestPaymentDates/" + i0,schemaPath:"#/$defs/MonthAndDayaf30/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}var valid1 = _errs4 === errors;if(!valid1){break;}}}else {validate13.errors = [{instancePath:instancePath+"/interestPaymentDates",schemaPath:"#/properties/interestPaymentDates/type",keyword:"type",params:{type: "array"},message:"must be array"}];return false;}}var valid0 = _errs2 === errors;}else {var valid0 = true;}if(valid0){if(data.interestPaymentPoint !== undefined){const _errs12 = errors;let valid4;valid4 = false;for(const v0 of schema16.properties.interestPaymentPoint.enum){if(func0(data.interestPaymentPoint, v0)){valid4 = true;break;}}if(!valid4){validate13.errors = [{instancePath:instancePath+"/interestPaymentPoint",schemaPath:"#/properties/interestPaymentPoint/enum",keyword:"enum",params:{allowedValues: schema16.properties.interestPaymentPoint.enum},message:"must be equal to one of the allowed values"}];return false;}var valid0 = _errs12 === errors;}else {var valid0 = true;}}}else {validate13.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}validate13.errors = vErrors;return errors === 0;}const schema18 = {"type":"object","title":"DepositAccountInterestRateSettingsaf30","description":"Represents information about the interest rate settings for deposit accounts.","properties":{"encodedKey":{"type":"string","title":"encodedKey","description":"The encoded key for the set of interest settings, which is auto-generated and unique."},"interestChargeFrequency":{"title":"interestChargeFrequency","description":"The interest charge frequency, which shows how often interest is charged on loan or deposit accounts.","enum":["ANNUALIZED","EVERY_MONTH","EVERY_FOUR_WEEKS","EVERY_WEEK","EVERY_DAY","EVERY_X_DAYS"]},"interestChargeFrequencyCount":{"type":"integer","title":"interestChargeFrequencyCount","description":"The number of times to apply interest in a time period."},"interestRate":{"type":"number","title":"interestRate","description":"The interest rate for the deposit account."},"interestRateReviewCount":{"type":"integer","title":"interestRateReviewCount","description":"The number of times to review the interest rate in a time period."},"interestRateReviewUnit":{"title":"interestRateReviewUnit","description":"The time unit to use to determine the frequency of interest rate reviews.","enum":["DAYS","WEEKS","MONTHS"]},"interestRateSource":{"title":"interestRateSource","description":"The interest calculation method used.","enum":["FIXED_INTEREST_RATE","INDEX_INTEREST_RATE"]},"interestRateTerms":{"title":"interestRateTerms","description":"The terms for how interest rate is determined when accruing for an account.","enum":["FIXED","TIERED","TIERED_PERIOD","TIERED_BAND"]},"interestRateTiers":{"type":"array","title":"interestRateTiers","description":"The list of interest rate tiers, which hold the values to define how interest is calculated.","items":{"$ref":"#/$defs/DepositAccountInterestRateTieraf30"}},"interestSpread":{"type":"number","title":"interestSpread","description":"The index interest rate that is used to calculate the interest rate that is applied to accounts."}},"additionalProperties":true};const schema19 = {"type":"object","title":"DepositAccountInterestRateTieraf30","description":"Represents information about how interest rate is calculated.","properties":{"encodedKey":{"type":"string","title":"encodedKey","description":"The encoded key of the interest rate tier, auto generated, unique"},"endingBalance":{"type":"number","title":"endingBalance","description":"The top-limit value for the account balance in order to determine if this tier is used or not"},"endingDay":{"type":"integer","title":"endingDay","description":"The end date for the account period. Used to determine if this interest rate tier is used or not."},"interestRate":{"type":"number","title":"interestRate","description":"The rate used for computing the interest for an account which has the balance less than the ending balance"}},"required":["interestRate"],"additionalProperties":true};function validate15(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){let vErrors = null;let errors = 0;if(errors === 0){if(data && typeof data == "object" && !Array.isArray(data)){if(data.encodedKey !== undefined){const _errs2 = errors;if(typeof data.encodedKey !== "string"){validate15.errors = [{instancePath:instancePath+"/encodedKey",schemaPath:"#/properties/encodedKey/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid0 = _errs2 === errors;}else {var valid0 = true;}if(valid0){if(data.interestChargeFrequency !== undefined){const _errs4 = errors;let valid1;valid1 = false;for(const v0 of schema18.properties.interestChargeFrequency.enum){if(func0(data.interestChargeFrequency, v0)){valid1 = true;break;}}if(!valid1){validate15.errors = [{instancePath:instancePath+"/interestChargeFrequency",schemaPath:"#/properties/interestChargeFrequency/enum",keyword:"enum",params:{allowedValues: schema18.properties.interestChargeFrequency.enum},message:"must be equal to one of the allowed values"}];return false;}var valid0 = _errs4 === errors;}else {var valid0 = true;}if(valid0){if(data.interestChargeFrequencyCount !== undefined){let data2 = data.interestChargeFrequencyCount;const _errs5 = errors;if(!(((typeof data2 == "number") && (!(data2 % 1) && !isNaN(data2))) && (isFinite(data2)))){validate15.errors = [{instancePath:instancePath+"/interestChargeFrequencyCount",schemaPath:"#/properties/interestChargeFrequencyCount/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];return false;}var valid0 = _errs5 === errors;}else {var valid0 = true;}if(valid0){if(data.interestRate !== undefined){let data3 = data.interestRate;const _errs7 = errors;if(!((typeof data3 == "number") && (isFinite(data3)))){validate15.errors = [{instancePath:instancePath+"/interestRate",schemaPath:"#/properties/interestRate/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid0 = _errs7 === errors;}else {var valid0 = true;}if(valid0){if(data.interestRateReviewCount !== undefined){let data4 = data.interestRateReviewCount;const _errs9 = errors;if(!(((typeof data4 == "number") && (!(data4 % 1) && !isNaN(data4))) && (isFinite(data4)))){validate15.errors = [{instancePath:instancePath+"/interestRateReviewCount",schemaPath:"#/properties/interestRateReviewCount/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];return false;}var valid0 = _errs9 === errors;}else {var valid0 = true;}if(valid0){if(data.interestRateReviewUnit !== undefined){let data5 = data.interestRateReviewUnit;const _errs11 = errors;if(!(((data5 === "DAYS") || (data5 === "WEEKS")) || (data5 === "MONTHS"))){validate15.errors = [{instancePath:instancePath+"/interestRateReviewUnit",schemaPath:"#/properties/interestRateReviewUnit/enum",keyword:"enum",params:{allowedValues: schema18.properties.interestRateReviewUnit.enum},message:"must be equal to one of the allowed values"}];return false;}var valid0 = _errs11 === errors;}else {var valid0 = true;}if(valid0){if(data.interestRateSource !== undefined){let data6 = data.interestRateSource;const _errs12 = errors;if(!((data6 === "FIXED_INTEREST_RATE") || (data6 === "INDEX_INTEREST_RATE"))){validate15.errors = [{instancePath:instancePath+"/interestRateSource",schemaPath:"#/properties/interestRateSource/enum",keyword:"enum",params:{allowedValues: schema18.properties.interestRateSource.enum},message:"must be equal to one of the allowed values"}];return false;}var valid0 = _errs12 === errors;}else {var valid0 = true;}if(valid0){if(data.interestRateTerms !== undefined){let data7 = data.interestRateTerms;const _errs13 = errors;if(!((((data7 === "FIXED") || (data7 === "TIERED")) || (data7 === "TIERED_PERIOD")) || (data7 === "TIERED_BAND"))){validate15.errors = [{instancePath:instancePath+"/interestRateTerms",schemaPath:"#/properties/interestRateTerms/enum",keyword:"enum",params:{allowedValues: schema18.properties.interestRateTerms.enum},message:"must be equal to one of the allowed values"}];return false;}var valid0 = _errs13 === errors;}else {var valid0 = true;}if(valid0){if(data.interestRateTiers !== undefined){let data8 = data.interestRateTiers;const _errs14 = errors;if(errors === _errs14){if(Array.isArray(data8)){var valid2 = true;const len0 = data8.length;for(let i0=0; i0<len0; i0++){let data9 = data8[i0];const _errs16 = errors;const _errs17 = errors;if(errors === _errs17){if(data9 && typeof data9 == "object" && !Array.isArray(data9)){let missing0;if((data9.interestRate === undefined) && (missing0 = "interestRate")){validate15.errors = [{instancePath:instancePath+"/interestRateTiers/" + i0,schemaPath:"#/$defs/DepositAccountInterestRateTieraf30/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];return false;}else {if(data9.encodedKey !== undefined){const _errs20 = errors;if(typeof data9.encodedKey !== "string"){validate15.errors = [{instancePath:instancePath+"/interestRateTiers/" + i0+"/encodedKey",schemaPath:"#/$defs/DepositAccountInterestRateTieraf30/properties/encodedKey/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid4 = _errs20 === errors;}else {var valid4 = true;}if(valid4){if(data9.endingBalance !== undefined){let data11 = data9.endingBalance;const _errs22 = errors;if(!((typeof data11 == "number") && (isFinite(data11)))){validate15.errors = [{instancePath:instancePath+"/interestRateTiers/" + i0+"/endingBalance",schemaPath:"#/$defs/DepositAccountInterestRateTieraf30/properties/endingBalance/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid4 = _errs22 === errors;}else {var valid4 = true;}if(valid4){if(data9.endingDay !== undefined){let data12 = data9.endingDay;const _errs24 = errors;if(!(((typeof data12 == "number") && (!(data12 % 1) && !isNaN(data12))) && (isFinite(data12)))){validate15.errors = [{instancePath:instancePath+"/interestRateTiers/" + i0+"/endingDay",schemaPath:"#/$defs/DepositAccountInterestRateTieraf30/properties/endingDay/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];return false;}var valid4 = _errs24 === errors;}else {var valid4 = true;}if(valid4){if(data9.interestRate !== undefined){let data13 = data9.interestRate;const _errs26 = errors;if(!((typeof data13 == "number") && (isFinite(data13)))){validate15.errors = [{instancePath:instancePath+"/interestRateTiers/" + i0+"/interestRate",schemaPath:"#/$defs/DepositAccountInterestRateTieraf30/properties/interestRate/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid4 = _errs26 === errors;}else {var valid4 = true;}}}}}}else {validate15.errors = [{instancePath:instancePath+"/interestRateTiers/" + i0,schemaPath:"#/$defs/DepositAccountInterestRateTieraf30/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}var valid2 = _errs16 === errors;if(!valid2){break;}}}else {validate15.errors = [{instancePath:instancePath+"/interestRateTiers",schemaPath:"#/properties/interestRateTiers/type",keyword:"type",params:{type: "array"},message:"must be array"}];return false;}}var valid0 = _errs14 === errors;}else {var valid0 = true;}if(valid0){if(data.interestSpread !== undefined){let data14 = data.interestSpread;const _errs28 = errors;if(!((typeof data14 == "number") && (isFinite(data14)))){validate15.errors = [{instancePath:instancePath+"/interestSpread",schemaPath:"#/properties/interestSpread/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid0 = _errs28 === errors;}else {var valid0 = true;}}}}}}}}}}}else {validate15.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}validate15.errors = vErrors;return errors === 0;}function validate12(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){let vErrors = null;let errors = 0;if(errors === 0){if(data && typeof data == "object" && !Array.isArray(data)){if(data.interestPaymentSettings !== undefined){const _errs2 = errors;if(!(validate13(data.interestPaymentSettings, {instancePath:instancePath+"/interestPaymentSettings",parentData:data,parentDataProperty:"interestPaymentSettings",rootData}))){vErrors = vErrors === null ? validate13.errors : vErrors.concat(validate13.errors);errors = vErrors.length;}var valid0 = _errs2 === errors;}else {var valid0 = true;}if(valid0){if(data.interestRateSettings !== undefined){const _errs3 = errors;if(!(validate15(data.interestRateSettings, {instancePath:instancePath+"/interestRateSettings",parentData:data,parentDataProperty:"interestRateSettings",rootData}))){vErrors = vErrors === null ? validate15.errors : vErrors.concat(validate15.errors);errors = vErrors.length;}var valid0 = _errs3 === errors;}else {var valid0 = true;}}}else {validate12.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}validate12.errors = vErrors;return errors === 0;}const schema21 = {"type":"object","title":"DepositAccountOverdraftInterestSettingsaf30","description":"Represents information about a deposit account's overdraft interest settings.","properties":{"interestRateSettings":{"title":"interestRateSettings","$ref":"#/$defs/DepositAccountOverdraftInterestRateSettingsaf30"}},"additionalProperties":true};const schema22 = {"type":"object","title":"DepositAccountOverdraftInterestRateSettingsaf30","description":"Represents information about overdraft interest rate settings for deposit accounts.","properties":{"encodedKey":{"type":"string","title":"encodedKey","description":"The encoded key for the set of interest settings, which is auto-generated and unique."},"interestChargeFrequency":{"title":"interestChargeFrequency","description":"The interest charge frequency, which shows how often interest is charged on loan or deposit accounts.","enum":["ANNUALIZED","EVERY_MONTH","EVERY_FOUR_WEEKS","EVERY_WEEK","EVERY_DAY","EVERY_X_DAYS"]},"interestChargeFrequencyCount":{"type":"integer","title":"interestChargeFrequencyCount","description":"The number of times to apply interest in a time period."},"interestRate":{"type":"number","title":"interestRate","description":"The interest rate for the deposit account."},"interestRateReviewCount":{"type":"integer","title":"interestRateReviewCount","description":"The number of times to review the interest rate in a time period."},"interestRateReviewUnit":{"title":"interestRateReviewUnit","description":"The time unit to use to determine the frequency of interest rate reviews.","enum":["DAYS","WEEKS","MONTHS"]},"interestRateSource":{"title":"interestRateSource","description":"The interest calculation method used.","enum":["FIXED_INTEREST_RATE","INDEX_INTEREST_RATE"]},"interestRateTerms":{"title":"interestRateTerms","description":"The terms for how interest rate is determined when accruing for an account.","enum":["FIXED","TIERED","TIERED_PERIOD","TIERED_BAND"]},"interestRateTiers":{"type":"array","title":"interestRateTiers","description":"The list of interest rate tiers, which hold the values to define how interest is calculated.","items":{"$ref":"#/$defs/DepositAccountInterestRateTieraf30"}},"interestSpread":{"type":"number","title":"interestSpread","description":"The index interest rate that is used to calculate the interest rate that is applied to accounts."}},"additionalProperties":true};function validate19(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){let vErrors = null;let errors = 0;if(errors === 0){if(data && typeof data == "object" && !Array.isArray(data)){if(data.encodedKey !== undefined){const _errs2 = errors;if(typeof data.encodedKey !== "string"){validate19.errors = [{instancePath:instancePath+"/encodedKey",schemaPath:"#/properties/encodedKey/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid0 = _errs2 === errors;}else {var valid0 = true;}if(valid0){if(data.interestChargeFrequency !== undefined){const _errs4 = errors;let valid1;valid1 = false;for(const v0 of schema22.properties.interestChargeFrequency.enum){if(func0(data.interestChargeFrequency, v0)){valid1 = true;break;}}if(!valid1){validate19.errors = [{instancePath:instancePath+"/interestChargeFrequency",schemaPath:"#/properties/interestChargeFrequency/enum",keyword:"enum",params:{allowedValues: schema22.properties.interestChargeFrequency.enum},message:"must be equal to one of the allowed values"}];return false;}var valid0 = _errs4 === errors;}else {var valid0 = true;}if(valid0){if(data.interestChargeFrequencyCount !== undefined){let data2 = data.interestChargeFrequencyCount;const _errs5 = errors;if(!(((typeof data2 == "number") && (!(data2 % 1) && !isNaN(data2))) && (isFinite(data2)))){validate19.errors = [{instancePath:instancePath+"/interestChargeFrequencyCount",schemaPath:"#/properties/interestChargeFrequencyCount/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];return false;}var valid0 = _errs5 === errors;}else {var valid0 = true;}if(valid0){if(data.interestRate !== undefined){let data3 = data.interestRate;const _errs7 = errors;if(!((typeof data3 == "number") && (isFinite(data3)))){validate19.errors = [{instancePath:instancePath+"/interestRate",schemaPath:"#/properties/interestRate/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid0 = _errs7 === errors;}else {var valid0 = true;}if(valid0){if(data.interestRateReviewCount !== undefined){let data4 = data.interestRateReviewCount;const _errs9 = errors;if(!(((typeof data4 == "number") && (!(data4 % 1) && !isNaN(data4))) && (isFinite(data4)))){validate19.errors = [{instancePath:instancePath+"/interestRateReviewCount",schemaPath:"#/properties/interestRateReviewCount/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];return false;}var valid0 = _errs9 === errors;}else {var valid0 = true;}if(valid0){if(data.interestRateReviewUnit !== undefined){let data5 = data.interestRateReviewUnit;const _errs11 = errors;if(!(((data5 === "DAYS") || (data5 === "WEEKS")) || (data5 === "MONTHS"))){validate19.errors = [{instancePath:instancePath+"/interestRateReviewUnit",schemaPath:"#/properties/interestRateReviewUnit/enum",keyword:"enum",params:{allowedValues: schema22.properties.interestRateReviewUnit.enum},message:"must be equal to one of the allowed values"}];return false;}var valid0 = _errs11 === errors;}else {var valid0 = true;}if(valid0){if(data.interestRateSource !== undefined){let data6 = data.interestRateSource;const _errs12 = errors;if(!((data6 === "FIXED_INTEREST_RATE") || (data6 === "INDEX_INTEREST_RATE"))){validate19.errors = [{instancePath:instancePath+"/interestRateSource",schemaPath:"#/properties/interestRateSource/enum",keyword:"enum",params:{allowedValues: schema22.properties.interestRateSource.enum},message:"must be equal to one of the allowed values"}];return false;}var valid0 = _errs12 === errors;}else {var valid0 = true;}if(valid0){if(data.interestRateTerms !== undefined){let data7 = data.interestRateTerms;const _errs13 = errors;if(!((((data7 === "FIXED") || (data7 === "TIERED")) || (data7 === "TIERED_PERIOD")) || (data7 === "TIERED_BAND"))){validate19.errors = [{instancePath:instancePath+"/interestRateTerms",schemaPath:"#/properties/interestRateTerms/enum",keyword:"enum",params:{allowedValues: schema22.properties.interestRateTerms.enum},message:"must be equal to one of the allowed values"}];return false;}var valid0 = _errs13 === errors;}else {var valid0 = true;}if(valid0){if(data.interestRateTiers !== undefined){let data8 = data.interestRateTiers;const _errs14 = errors;if(errors === _errs14){if(Array.isArray(data8)){var valid2 = true;const len0 = data8.length;for(let i0=0; i0<len0; i0++){let data9 = data8[i0];const _errs16 = errors;const _errs17 = errors;if(errors === _errs17){if(data9 && typeof data9 == "object" && !Array.isArray(data9)){let missing0;if((data9.interestRate === undefined) && (missing0 = "interestRate")){validate19.errors = [{instancePath:instancePath+"/interestRateTiers/" + i0,schemaPath:"#/$defs/DepositAccountInterestRateTieraf30/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];return false;}else {if(data9.encodedKey !== undefined){const _errs20 = errors;if(typeof data9.encodedKey !== "string"){validate19.errors = [{instancePath:instancePath+"/interestRateTiers/" + i0+"/encodedKey",schemaPath:"#/$defs/DepositAccountInterestRateTieraf30/properties/encodedKey/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid4 = _errs20 === errors;}else {var valid4 = true;}if(valid4){if(data9.endingBalance !== undefined){let data11 = data9.endingBalance;const _errs22 = errors;if(!((typeof data11 == "number") && (isFinite(data11)))){validate19.errors = [{instancePath:instancePath+"/interestRateTiers/" + i0+"/endingBalance",schemaPath:"#/$defs/DepositAccountInterestRateTieraf30/properties/endingBalance/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid4 = _errs22 === errors;}else {var valid4 = true;}if(valid4){if(data9.endingDay !== undefined){let data12 = data9.endingDay;const _errs24 = errors;if(!(((typeof data12 == "number") && (!(data12 % 1) && !isNaN(data12))) && (isFinite(data12)))){validate19.errors = [{instancePath:instancePath+"/interestRateTiers/" + i0+"/endingDay",schemaPath:"#/$defs/DepositAccountInterestRateTieraf30/properties/endingDay/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];return false;}var valid4 = _errs24 === errors;}else {var valid4 = true;}if(valid4){if(data9.interestRate !== undefined){let data13 = data9.interestRate;const _errs26 = errors;if(!((typeof data13 == "number") && (isFinite(data13)))){validate19.errors = [{instancePath:instancePath+"/interestRateTiers/" + i0+"/interestRate",schemaPath:"#/$defs/DepositAccountInterestRateTieraf30/properties/interestRate/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid4 = _errs26 === errors;}else {var valid4 = true;}}}}}}else {validate19.errors = [{instancePath:instancePath+"/interestRateTiers/" + i0,schemaPath:"#/$defs/DepositAccountInterestRateTieraf30/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}var valid2 = _errs16 === errors;if(!valid2){break;}}}else {validate19.errors = [{instancePath:instancePath+"/interestRateTiers",schemaPath:"#/properties/interestRateTiers/type",keyword:"type",params:{type: "array"},message:"must be array"}];return false;}}var valid0 = _errs14 === errors;}else {var valid0 = true;}if(valid0){if(data.interestSpread !== undefined){let data14 = data.interestSpread;const _errs28 = errors;if(!((typeof data14 == "number") && (isFinite(data14)))){validate19.errors = [{instancePath:instancePath+"/interestSpread",schemaPath:"#/properties/interestSpread/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid0 = _errs28 === errors;}else {var valid0 = true;}}}}}}}}}}}else {validate19.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}validate19.errors = vErrors;return errors === 0;}function validate18(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){let vErrors = null;let errors = 0;if(errors === 0){if(data && typeof data == "object" && !Array.isArray(data)){if(data.interestRateSettings !== undefined){if(!(validate19(data.interestRateSettings, {instancePath:instancePath+"/interestRateSettings",parentData:data,parentDataProperty:"interestRateSettings",rootData}))){vErrors = vErrors === null ? validate19.errors : vErrors.concat(validate19.errors);errors = vErrors.length;}}}else {validate18.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}validate18.errors = vErrors;return errors === 0;}function validate11(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){let vErrors = null;let errors = 0;if(errors === 0){if(data && typeof data == "object" && !Array.isArray(data)){let missing0;if(((((data.accountHolderKey === undefined) && (missing0 = "accountHolderKey")) || ((data.accountHolderType === undefined) && (missing0 = "accountHolderType"))) || ((data.name === undefined) && (missing0 = "name"))) || ((data.productTypeKey === undefined) && (missing0 = "productTypeKey"))){validate11.errors = [{instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];return false;}else {if(data.accountHolderKey !== undefined){const _errs2 = errors;if(typeof data.accountHolderKey !== "string"){validate11.errors = [{instancePath:instancePath+"/accountHolderKey",schemaPath:"#/properties/accountHolderKey/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid0 = _errs2 === errors;}else {var valid0 = true;}if(valid0){if(data.accountHolderType !== undefined){let data1 = data.accountHolderType;const _errs4 = errors;if(!((data1 === "CLIENT") || (data1 === "GROUP"))){validate11.errors = [{instancePath:instancePath+"/accountHolderType",schemaPath:"#/properties/accountHolderType/enum",keyword:"enum",params:{allowedValues: schema12.properties.accountHolderType.enum},message:"must be equal to one of the allowed values"}];return false;}var valid0 = _errs4 === errors;}else {var valid0 = true;}if(valid0){if(data.accountState !== undefined){const _errs5 = errors;let valid1;valid1 = false;for(const v0 of schema12.properties.accountState.enum){if(func0(data.accountState, v0)){valid1 = true;break;}}if(!valid1){validate11.errors = [{instancePath:instancePath+"/accountState",schemaPath:"#/properties/accountState/enum",keyword:"enum",params:{allowedValues: schema12.properties.accountState.enum},message:"must be equal to one of the allowed values"}];return false;}var valid0 = _errs5 === errors;}else {var valid0 = true;}if(valid0){if(data.accountType !== undefined){const _errs6 = errors;let valid2;valid2 = false;for(const v1 of schema12.properties.accountType.enum){if(func0(data.accountType, v1)){valid2 = true;break;}}if(!valid2){validate11.errors = [{instancePath:instancePath+"/accountType",schemaPath:"#/properties/accountType/enum",keyword:"enum",params:{allowedValues: schema12.properties.accountType.enum},message:"must be equal to one of the allowed values"}];return false;}var valid0 = _errs6 === errors;}else {var valid0 = true;}if(valid0){if(data.accruedAmounts !== undefined){let data4 = data.accruedAmounts;const _errs7 = errors;const _errs8 = errors;if(errors === _errs8){if(data4 && typeof data4 == "object" && !Array.isArray(data4)){if(data4.interestAccrued !== undefined){let data5 = data4.interestAccrued;const _errs11 = errors;if(!((typeof data5 == "number") && (isFinite(data5)))){validate11.errors = [{instancePath:instancePath+"/accruedAmounts/interestAccrued",schemaPath:"#/$defs/DepositAccountAccruedAmountsaf30/properties/interestAccrued/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid4 = _errs11 === errors;}else {var valid4 = true;}if(valid4){if(data4.negativeInterestAccrued !== undefined){let data6 = data4.negativeInterestAccrued;const _errs13 = errors;if(!((typeof data6 == "number") && (isFinite(data6)))){validate11.errors = [{instancePath:instancePath+"/accruedAmounts/negativeInterestAccrued",schemaPath:"#/$defs/DepositAccountAccruedAmountsaf30/properties/negativeInterestAccrued/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid4 = _errs13 === errors;}else {var valid4 = true;}if(valid4){if(data4.overdraftInterestAccrued !== undefined){let data7 = data4.overdraftInterestAccrued;const _errs15 = errors;if(!((typeof data7 == "number") && (isFinite(data7)))){validate11.errors = [{instancePath:instancePath+"/accruedAmounts/overdraftInterestAccrued",schemaPath:"#/$defs/DepositAccountAccruedAmountsaf30/properties/overdraftInterestAccrued/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid4 = _errs15 === errors;}else {var valid4 = true;}if(valid4){if(data4.technicalOverdraftInterestAccrued !== undefined){let data8 = data4.technicalOverdraftInterestAccrued;const _errs17 = errors;if(!((typeof data8 == "number") && (isFinite(data8)))){validate11.errors = [{instancePath:instancePath+"/accruedAmounts/technicalOverdraftInterestAccrued",schemaPath:"#/$defs/DepositAccountAccruedAmountsaf30/properties/technicalOverdraftInterestAccrued/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid4 = _errs17 === errors;}else {var valid4 = true;}}}}}else {validate11.errors = [{instancePath:instancePath+"/accruedAmounts",schemaPath:"#/$defs/DepositAccountAccruedAmountsaf30/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}var valid0 = _errs7 === errors;}else {var valid0 = true;}if(valid0){if(data.activationDate !== undefined){const _errs19 = errors;if(errors === _errs19){if(errors === _errs19){if(!(typeof data.activationDate === "string")){validate11.errors = [{instancePath:instancePath+"/activationDate",schemaPath:"#/properties/activationDate/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}}var valid0 = _errs19 === errors;}else {var valid0 = true;}if(valid0){if(data.approvedDate !== undefined){const _errs21 = errors;if(errors === _errs21){if(errors === _errs21){if(!(typeof data.approvedDate === "string")){validate11.errors = [{instancePath:instancePath+"/approvedDate",schemaPath:"#/properties/approvedDate/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}}var valid0 = _errs21 === errors;}else {var valid0 = true;}if(valid0){if(data.assignedBranchKey !== undefined){const _errs23 = errors;if(typeof data.assignedBranchKey !== "string"){validate11.errors = [{instancePath:instancePath+"/assignedBranchKey",schemaPath:"#/properties/assignedBranchKey/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid0 = _errs23 === errors;}else {var valid0 = true;}if(valid0){if(data.assignedCentreKey !== undefined){const _errs25 = errors;if(typeof data.assignedCentreKey !== "string"){validate11.errors = [{instancePath:instancePath+"/assignedCentreKey",schemaPath:"#/properties/assignedCentreKey/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid0 = _errs25 === errors;}else {var valid0 = true;}if(valid0){if(data.assignedUserKey !== undefined){const _errs27 = errors;if(typeof data.assignedUserKey !== "string"){validate11.errors = [{instancePath:instancePath+"/assignedUserKey",schemaPath:"#/properties/assignedUserKey/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid0 = _errs27 === errors;}else {var valid0 = true;}if(valid0){if(data.balances !== undefined){let data14 = data.balances;const _errs29 = errors;const _errs30 = errors;if(errors === _errs30){if(data14 && typeof data14 == "object" && !Array.isArray(data14)){if(data14.availableBalance !== undefined){let data15 = data14.availableBalance;const _errs33 = errors;if(!((typeof data15 == "number") && (isFinite(data15)))){validate11.errors = [{instancePath:instancePath+"/balances/availableBalance",schemaPath:"#/$defs/DepositAccountBalancesaf30/properties/availableBalance/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid6 = _errs33 === errors;}else {var valid6 = true;}if(valid6){if(data14.blockedBalance !== undefined){let data16 = data14.blockedBalance;const _errs35 = errors;if(!((typeof data16 == "number") && (isFinite(data16)))){validate11.errors = [{instancePath:instancePath+"/balances/blockedBalance",schemaPath:"#/$defs/DepositAccountBalancesaf30/properties/blockedBalance/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid6 = _errs35 === errors;}else {var valid6 = true;}if(valid6){if(data14.feesDue !== undefined){let data17 = data14.feesDue;const _errs37 = errors;if(!((typeof data17 == "number") && (isFinite(data17)))){validate11.errors = [{instancePath:instancePath+"/balances/feesDue",schemaPath:"#/$defs/DepositAccountBalancesaf30/properties/feesDue/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid6 = _errs37 === errors;}else {var valid6 = true;}if(valid6){if(data14.forwardAvailableBalance !== undefined){let data18 = data14.forwardAvailableBalance;const _errs39 = errors;if(!((typeof data18 == "number") && (isFinite(data18)))){validate11.errors = [{instancePath:instancePath+"/balances/forwardAvailableBalance",schemaPath:"#/$defs/DepositAccountBalancesaf30/properties/forwardAvailableBalance/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid6 = _errs39 === errors;}else {var valid6 = true;}if(valid6){if(data14.holdBalance !== undefined){let data19 = data14.holdBalance;const _errs41 = errors;if(!((typeof data19 == "number") && (isFinite(data19)))){validate11.errors = [{instancePath:instancePath+"/balances/holdBalance",schemaPath:"#/$defs/DepositAccountBalancesaf30/properties/holdBalance/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid6 = _errs41 === errors;}else {var valid6 = true;}if(valid6){if(data14.lockedBalance !== undefined){let data20 = data14.lockedBalance;const _errs43 = errors;if(!((typeof data20 == "number") && (isFinite(data20)))){validate11.errors = [{instancePath:instancePath+"/balances/lockedBalance",schemaPath:"#/$defs/DepositAccountBalancesaf30/properties/lockedBalance/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid6 = _errs43 === errors;}else {var valid6 = true;}if(valid6){if(data14.overdraftAmount !== undefined){let data21 = data14.overdraftAmount;const _errs45 = errors;if(!((typeof data21 == "number") && (isFinite(data21)))){validate11.errors = [{instancePath:instancePath+"/balances/overdraftAmount",schemaPath:"#/$defs/DepositAccountBalancesaf30/properties/overdraftAmount/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid6 = _errs45 === errors;}else {var valid6 = true;}if(valid6){if(data14.overdraftInterestDue !== undefined){let data22 = data14.overdraftInterestDue;const _errs47 = errors;if(!((typeof data22 == "number") && (isFinite(data22)))){validate11.errors = [{instancePath:instancePath+"/balances/overdraftInterestDue",schemaPath:"#/$defs/DepositAccountBalancesaf30/properties/overdraftInterestDue/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid6 = _errs47 === errors;}else {var valid6 = true;}if(valid6){if(data14.technicalOverdraftAmount !== undefined){let data23 = data14.technicalOverdraftAmount;const _errs49 = errors;if(!((typeof data23 == "number") && (isFinite(data23)))){validate11.errors = [{instancePath:instancePath+"/balances/technicalOverdraftAmount",schemaPath:"#/$defs/DepositAccountBalancesaf30/properties/technicalOverdraftAmount/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid6 = _errs49 === errors;}else {var valid6 = true;}if(valid6){if(data14.technicalOverdraftInterestDue !== undefined){let data24 = data14.technicalOverdraftInterestDue;const _errs51 = errors;if(!((typeof data24 == "number") && (isFinite(data24)))){validate11.errors = [{instancePath:instancePath+"/balances/technicalOverdraftInterestDue",schemaPath:"#/$defs/DepositAccountBalancesaf30/properties/technicalOverdraftInterestDue/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid6 = _errs51 === errors;}else {var valid6 = true;}if(valid6){if(data14.totalBalance !== undefined){let data25 = data14.totalBalance;const _errs53 = errors;if(!((typeof data25 == "number") && (isFinite(data25)))){validate11.errors = [{instancePath:instancePath+"/balances/totalBalance",schemaPath:"#/$defs/DepositAccountBalancesaf30/properties/totalBalance/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid6 = _errs53 === errors;}else {var valid6 = true;}}}}}}}}}}}}else {validate11.errors = [{instancePath:instancePath+"/balances",schemaPath:"#/$defs/DepositAccountBalancesaf30/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}var valid0 = _errs29 === errors;}else {var valid0 = true;}if(valid0){if(data.closedDate !== undefined){const _errs55 = errors;if(errors === _errs55){if(errors === _errs55){if(!(typeof data.closedDate === "string")){validate11.errors = [{instancePath:instancePath+"/closedDate",schemaPath:"#/properties/closedDate/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}}var valid0 = _errs55 === errors;}else {var valid0 = true;}if(valid0){if(data.creationDate !== undefined){const _errs57 = errors;if(errors === _errs57){if(errors === _errs57){if(!(typeof data.creationDate === "string")){validate11.errors = [{instancePath:instancePath+"/creationDate",schemaPath:"#/properties/creationDate/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}}var valid0 = _errs57 === errors;}else {var valid0 = true;}if(valid0){if(data.creditArrangementKey !== undefined){const _errs59 = errors;if(typeof data.creditArrangementKey !== "string"){validate11.errors = [{instancePath:instancePath+"/creditArrangementKey",schemaPath:"#/properties/creditArrangementKey/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid0 = _errs59 === errors;}else {var valid0 = true;}if(valid0){if(data.currencyCode !== undefined){const _errs61 = errors;if(typeof data.currencyCode !== "string"){validate11.errors = [{instancePath:instancePath+"/currencyCode",schemaPath:"#/properties/currencyCode/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid0 = _errs61 === errors;}else {var valid0 = true;}if(valid0){if(data.encodedKey !== undefined){const _errs63 = errors;if(typeof data.encodedKey !== "string"){validate11.errors = [{instancePath:instancePath+"/encodedKey",schemaPath:"#/properties/encodedKey/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid0 = _errs63 === errors;}else {var valid0 = true;}if(valid0){if(data.id !== undefined){const _errs65 = errors;if(typeof data.id !== "string"){validate11.errors = [{instancePath:instancePath+"/id",schemaPath:"#/properties/id/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid0 = _errs65 === errors;}else {var valid0 = true;}if(valid0){if(data.interestSettings !== undefined){const _errs67 = errors;if(!(validate12(data.interestSettings, {instancePath:instancePath+"/interestSettings",parentData:data,parentDataProperty:"interestSettings",rootData}))){vErrors = vErrors === null ? validate12.errors : vErrors.concat(validate12.errors);errors = vErrors.length;}var valid0 = _errs67 === errors;}else {var valid0 = true;}if(valid0){if(data.internalControls !== undefined){let data33 = data.internalControls;const _errs68 = errors;const _errs69 = errors;if(errors === _errs69){if(data33 && typeof data33 == "object" && !Array.isArray(data33)){if(data33.maxDepositBalance !== undefined){let data34 = data33.maxDepositBalance;const _errs72 = errors;if(!((typeof data34 == "number") && (isFinite(data34)))){validate11.errors = [{instancePath:instancePath+"/internalControls/maxDepositBalance",schemaPath:"#/$defs/DepositAccountInternalControlsaf30/properties/maxDepositBalance/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid8 = _errs72 === errors;}else {var valid8 = true;}if(valid8){if(data33.maxWithdrawalAmount !== undefined){let data35 = data33.maxWithdrawalAmount;const _errs74 = errors;if(!((typeof data35 == "number") && (isFinite(data35)))){validate11.errors = [{instancePath:instancePath+"/internalControls/maxWithdrawalAmount",schemaPath:"#/$defs/DepositAccountInternalControlsaf30/properties/maxWithdrawalAmount/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid8 = _errs74 === errors;}else {var valid8 = true;}if(valid8){if(data33.recommendedDepositAmount !== undefined){let data36 = data33.recommendedDepositAmount;const _errs76 = errors;if(!((typeof data36 == "number") && (isFinite(data36)))){validate11.errors = [{instancePath:instancePath+"/internalControls/recommendedDepositAmount",schemaPath:"#/$defs/DepositAccountInternalControlsaf30/properties/recommendedDepositAmount/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid8 = _errs76 === errors;}else {var valid8 = true;}if(valid8){if(data33.targetAmount !== undefined){let data37 = data33.targetAmount;const _errs78 = errors;if(!((typeof data37 == "number") && (isFinite(data37)))){validate11.errors = [{instancePath:instancePath+"/internalControls/targetAmount",schemaPath:"#/$defs/DepositAccountInternalControlsaf30/properties/targetAmount/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid8 = _errs78 === errors;}else {var valid8 = true;}}}}}else {validate11.errors = [{instancePath:instancePath+"/internalControls",schemaPath:"#/$defs/DepositAccountInternalControlsaf30/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}var valid0 = _errs68 === errors;}else {var valid0 = true;}if(valid0){if(data.lastAccountAppraisalDate !== undefined){const _errs80 = errors;if(errors === _errs80){if(errors === _errs80){if(!(typeof data.lastAccountAppraisalDate === "string")){validate11.errors = [{instancePath:instancePath+"/lastAccountAppraisalDate",schemaPath:"#/properties/lastAccountAppraisalDate/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}}var valid0 = _errs80 === errors;}else {var valid0 = true;}if(valid0){if(data.lastInterestCalculationDate !== undefined){const _errs82 = errors;if(errors === _errs82){if(errors === _errs82){if(!(typeof data.lastInterestCalculationDate === "string")){validate11.errors = [{instancePath:instancePath+"/lastInterestCalculationDate",schemaPath:"#/properties/lastInterestCalculationDate/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}}var valid0 = _errs82 === errors;}else {var valid0 = true;}if(valid0){if(data.lastInterestReviewDate !== undefined){const _errs84 = errors;if(errors === _errs84){if(errors === _errs84){if(!(typeof data.lastInterestReviewDate === "string")){validate11.errors = [{instancePath:instancePath+"/lastInterestReviewDate",schemaPath:"#/properties/lastInterestReviewDate/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}}var valid0 = _errs84 === errors;}else {var valid0 = true;}if(valid0){if(data.lastInterestStoredDate !== undefined){const _errs86 = errors;if(errors === _errs86){if(errors === _errs86){if(!(typeof data.lastInterestStoredDate === "string")){validate11.errors = [{instancePath:instancePath+"/lastInterestStoredDate",schemaPath:"#/properties/lastInterestStoredDate/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}}var valid0 = _errs86 === errors;}else {var valid0 = true;}if(valid0){if(data.lastModifiedDate !== undefined){const _errs88 = errors;if(errors === _errs88){if(errors === _errs88){if(!(typeof data.lastModifiedDate === "string")){validate11.errors = [{instancePath:instancePath+"/lastModifiedDate",schemaPath:"#/properties/lastModifiedDate/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}}var valid0 = _errs88 === errors;}else {var valid0 = true;}if(valid0){if(data.lastOverdraftInterestReviewDate !== undefined){const _errs90 = errors;if(errors === _errs90){if(errors === _errs90){if(!(typeof data.lastOverdraftInterestReviewDate === "string")){validate11.errors = [{instancePath:instancePath+"/lastOverdraftInterestReviewDate",schemaPath:"#/properties/lastOverdraftInterestReviewDate/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}}var valid0 = _errs90 === errors;}else {var valid0 = true;}if(valid0){if(data.lastSetToArrearsDate !== undefined){const _errs92 = errors;if(errors === _errs92){if(errors === _errs92){if(!(typeof data.lastSetToArrearsDate === "string")){validate11.errors = [{instancePath:instancePath+"/lastSetToArrearsDate",schemaPath:"#/properties/lastSetToArrearsDate/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}}var valid0 = _errs92 === errors;}else {var valid0 = true;}if(valid0){if(data.linkedSettlementAccountKeys !== undefined){let data45 = data.linkedSettlementAccountKeys;const _errs94 = errors;if(errors === _errs94){if(Array.isArray(data45)){var valid9 = true;const len0 = data45.length;for(let i0=0; i0<len0; i0++){const _errs96 = errors;if(typeof data45[i0] !== "string"){validate11.errors = [{instancePath:instancePath+"/linkedSettlementAccountKeys/" + i0,schemaPath:"#/properties/linkedSettlementAccountKeys/items/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid9 = _errs96 === errors;if(!valid9){break;}}}else {validate11.errors = [{instancePath:instancePath+"/linkedSettlementAccountKeys",schemaPath:"#/properties/linkedSettlementAccountKeys/type",keyword:"type",params:{type: "array"},message:"must be array"}];return false;}}var valid0 = _errs94 === errors;}else {var valid0 = true;}if(valid0){if(data.lockedDate !== undefined){const _errs98 = errors;if(errors === _errs98){if(errors === _errs98){if(!(typeof data.lockedDate === "string")){validate11.errors = [{instancePath:instancePath+"/lockedDate",schemaPath:"#/properties/lockedDate/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}}var valid0 = _errs98 === errors;}else {var valid0 = true;}if(valid0){if(data.maturityDate !== undefined){const _errs100 = errors;if(errors === _errs100){if(errors === _errs100){if(!(typeof data.maturityDate === "string")){validate11.errors = [{instancePath:instancePath+"/maturityDate",schemaPath:"#/properties/maturityDate/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}}var valid0 = _errs100 === errors;}else {var valid0 = true;}if(valid0){if(data.migrationEventKey !== undefined){const _errs102 = errors;if(typeof data.migrationEventKey !== "string"){validate11.errors = [{instancePath:instancePath+"/migrationEventKey",schemaPath:"#/properties/migrationEventKey/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid0 = _errs102 === errors;}else {var valid0 = true;}if(valid0){if(data.name !== undefined){const _errs104 = errors;if(typeof data.name !== "string"){validate11.errors = [{instancePath:instancePath+"/name",schemaPath:"#/properties/name/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid0 = _errs104 === errors;}else {var valid0 = true;}if(valid0){if(data.notes !== undefined){const _errs106 = errors;if(typeof data.notes !== "string"){validate11.errors = [{instancePath:instancePath+"/notes",schemaPath:"#/properties/notes/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid0 = _errs106 === errors;}else {var valid0 = true;}if(valid0){if(data.overdraftInterestSettings !== undefined){const _errs108 = errors;if(!(validate18(data.overdraftInterestSettings, {instancePath:instancePath+"/overdraftInterestSettings",parentData:data,parentDataProperty:"overdraftInterestSettings",rootData}))){vErrors = vErrors === null ? validate18.errors : vErrors.concat(validate18.errors);errors = vErrors.length;}var valid0 = _errs108 === errors;}else {var valid0 = true;}if(valid0){if(data.overdraftSettings !== undefined){let data53 = data.overdraftSettings;const _errs109 = errors;const _errs110 = errors;if(errors === _errs110){if(data53 && typeof data53 == "object" && !Array.isArray(data53)){if(data53.allowOverdraft !== undefined){const _errs113 = errors;if(typeof data53.allowOverdraft !== "boolean"){validate11.errors = [{instancePath:instancePath+"/overdraftSettings/allowOverdraft",schemaPath:"#/$defs/DepositAccountOverdraftSettingsaf30/properties/allowOverdraft/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"}];return false;}var valid11 = _errs113 === errors;}else {var valid11 = true;}if(valid11){if(data53.overdraftExpiryDate !== undefined){const _errs115 = errors;if(errors === _errs115){if(errors === _errs115){if(!(typeof data53.overdraftExpiryDate === "string")){validate11.errors = [{instancePath:instancePath+"/overdraftSettings/overdraftExpiryDate",schemaPath:"#/$defs/DepositAccountOverdraftSettingsaf30/properties/overdraftExpiryDate/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}}var valid11 = _errs115 === errors;}else {var valid11 = true;}if(valid11){if(data53.overdraftLimit !== undefined){let data56 = data53.overdraftLimit;const _errs117 = errors;if(!((typeof data56 == "number") && (isFinite(data56)))){validate11.errors = [{instancePath:instancePath+"/overdraftSettings/overdraftLimit",schemaPath:"#/$defs/DepositAccountOverdraftSettingsaf30/properties/overdraftLimit/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid11 = _errs117 === errors;}else {var valid11 = true;}}}}else {validate11.errors = [{instancePath:instancePath+"/overdraftSettings",schemaPath:"#/$defs/DepositAccountOverdraftSettingsaf30/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}var valid0 = _errs109 === errors;}else {var valid0 = true;}if(valid0){if(data.productTypeKey !== undefined){const _errs119 = errors;if(typeof data.productTypeKey !== "string"){validate11.errors = [{instancePath:instancePath+"/productTypeKey",schemaPath:"#/properties/productTypeKey/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid0 = _errs119 === errors;}else {var valid0 = true;}if(valid0){if(data.withholdingTaxSourceKey !== undefined){const _errs121 = errors;if(typeof data.withholdingTaxSourceKey !== "string"){validate11.errors = [{instancePath:instancePath+"/withholdingTaxSourceKey",schemaPath:"#/properties/withholdingTaxSourceKey/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid0 = _errs121 === errors;}else {var valid0 = true;}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}else {validate11.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}validate11.errors = vErrors;return errors === 0;}const schema25 = {"type":"object","title":"LoanAccountaf30","description":"Represents a loan account. A loan account defines the amount that your organization lends to a client. The terms and conditions of a loan account are defined by a loan product. In a loan account, Mambu stores all the information related to disbursements, repayments, interest rates, and withdrawals.","properties":{"accountArrearsSettings":{"title":"accountArrearsSettings","$ref":"#/$defs/AccountArrearsSettingsaf30"},"accountHolderKey":{"type":"string","title":"accountHolderKey","description":"The encoded key of the account holder."},"accountHolderType":{"title":"accountHolderType","description":"The type of the account holder.","enum":["CLIENT","GROUP"]},"accountState":{"title":"accountState","description":"The state of the loan account.","enum":["PARTIAL_APPLICATION","PENDING_APPROVAL","APPROVED","ACTIVE","ACTIVE_IN_ARREARS","CLOSED"]},"accountSubState":{"title":"accountSubState","description":"A second state for the loan account. Beside the account state, a second substate is sometimes necessary to provide more information about the exact lifecycle state of a loan account.For example, even if the account state of a loan account is `ACTIVE`, it can also have a substate of `LOCKED`.","enum":["PARTIALLY_DISBURSED","LOCKED","LOCKED_CAPPING","REFINANCED","RESCHEDULED","WITHDRAWN","REPAID","REJECTED","WRITTEN_OFF","TERMINATED"]},"accruedInterest":{"type":"number","title":"accruedInterest","description":"The amount of interest that has been accrued in the loan account."},"accruedPenalty":{"type":"number","title":"accruedPenalty","description":"The accrued penalty, represents the amount of penalty that has been accrued in the loan account."},"activationTransactionKey":{"type":"string","title":"activationTransactionKey","description":"The encoded key of the transaction that activated the loan account."},"allowOffset":{"type":"boolean","title":"allowOffset","description":"DEPRECATED - Will always be false."},"approvedDate":{"type":"string","title":"approvedDate","description":"The date the loan account was approved.","format":"date-time"},"arrearsTolerancePeriod":{"type":"integer","title":"arrearsTolerancePeriod","description":"The arrears tolerance (period or day of month) depending on the product settings."},"assets":{"type":"array","title":"assets","description":"The list of assets associated with the current loan account.","items":{"$ref":"#/$defs/Assetaf30"}},"assignedBranchKey":{"type":"string","title":"assignedBranchKey","description":"The key of the branch this loan account is assigned to. The branch is set to unassigned if no branch field is set."},"assignedCentreKey":{"type":"string","title":"assignedCentreKey","description":"The key of the centre this account is assigned to."},"assignedUserKey":{"type":"string","title":"assignedUserKey","description":"The key of the user this loan account is assigned to."},"balances":{"title":"balances","$ref":"#/$defs/Balancesaf30"},"closedDate":{"type":"string","title":"closedDate","description":"The date the loan was closed.","format":"date-time"},"creationDate":{"type":"string","title":"creationDate","description":"The date the loan account was created.","format":"date-time"},"creditArrangementKey":{"type":"string","title":"creditArrangementKey","description":"The key to the line of credit where this account is registered to."},"currency":{"title":"currency","$ref":"#/$defs/Currencyaf30"},"daysInArrears":{"type":"integer","title":"daysInArrears","description":"The number of days the loan account is in arrears."},"daysLate":{"type":"integer","title":"daysLate","description":"The number of days a repayment for the loan account is late."},"disbursementDetails":{"title":"disbursementDetails","$ref":"#/$defs/DisbursementDetailsaf30"},"encodedKey":{"type":"string","title":"encodedKey","description":"The encoded key of the loan account, it is auto generated, and must be unique."},"fundingSources":{"type":"array","title":"fundingSources","description":"The list of funds associated with the loan account.","items":{"$ref":"#/$defs/InvestorFundaf30"}},"futurePaymentsAcceptance":{"title":"futurePaymentsAcceptance","description":"Shows whether the repayment transactions with entry date set in the future are allowed or not for this loan account.","enum":["NO_FUTURE_PAYMENTS","ACCEPT_FUTURE_PAYMENTS","ACCEPT_OVERPAYMENTS"]},"guarantors":{"type":"array","title":"guarantors","description":"The list of guarantees associated with the loan account.","items":{"$ref":"#/$defs/Guarantoraf30"}},"id":{"type":"string","title":"id","description":"The ID of the loan account, it can be generated and customized, and must be unique."},"interestAccruedInBillingCycle":{"type":"number","title":"interestAccruedInBillingCycle","description":"The interest that is accrued in the current billing cycle."},"interestCommission":{"type":"number","title":"interestCommission","description":"The value of the interest booked by the organization from the accounts funded by investors. Null if the funds are not enabled."},"interestFromArrearsAccrued":{"type":"number","title":"interestFromArrearsAccrued","description":"The amount of interest from arrears that has been accrued in the loan account."},"interestSettings":{"title":"interestSettings","$ref":"#/$defs/InterestSettingsaf30"},"lastAccountAppraisalDate":{"type":"string","title":"lastAccountAppraisalDate","description":"The date the loan account has last been evaluated for interest, principal, fees, and penalties calculations expressed in the organization time format and time zone.","format":"date-time"},"lastInterestAppliedDate":{"type":"string","title":"lastInterestAppliedDate","description":"The date of the last time the loan account had interest applied (stored to interest balance), expressed in the organization time format and time zone.","format":"date-time"},"lastInterestReviewDate":{"type":"string","title":"lastInterestReviewDate","description":"The date the interest was reviewed last time, stored in the organization time format and time zone.","format":"date-time"},"lastLockedDate":{"type":"string","title":"lastLockedDate","description":"The date when the loan account was set for the last time in the `LOCKED` state expressed in the organization time format and time zone. If null, the account is not locked anymore.","format":"date-time"},"lastModifiedDate":{"type":"string","title":"lastModifiedDate","description":"The last date the loan was updated.","format":"date-time"},"lastSetToArrearsDate":{"type":"string","title":"lastSetToArrearsDate","description":"The date when the loan account was set to last standing or null; if never set, it is expressed in your organization time format and time zone.","format":"date-time"},"lastTaxRateReviewDate":{"type":"string","title":"lastTaxRateReviewDate","description":"The date the tax rate on the loan account was last checked, expressed in the organization time format and time zone.","format":"date-time"},"latePaymentsRecalculationMethod":{"title":"latePaymentsRecalculationMethod","description":"The overdue payments recalculation method inherited from the loan product on which this loan account is based.","enum":["OVERDUE_INSTALLMENTS_INCREASE","LAST_INSTALLMENT_INCREASE"]},"loanAmount":{"type":"number","title":"loanAmount","description":"The loan amount."},"loanName":{"type":"string","title":"loanName","description":"The name of the loan account."},"lockedAccountTotalDueType":{"title":"lockedAccountTotalDueType","description":"The locked account total due type.","enum":["BALANCE_AMOUNT","DUE_AMOUNT_ON_LATE_INSTALLMENTS"]},"lockedOperations":{"type":"array","title":"lockedOperations","description":"A list with operations which are locked when the account is in the AccountState.LOCKED substate.","items":{"enum":["APPLY_INTEREST","APPLY_FEES","APPLY_PENALTIES"]}},"migrationEventKey":{"type":"string","title":"migrationEventKey","description":"The migration event encoded key associated with this loan account. If this account was imported, track which 'migration event' they came from."},"modifyInterestForFirstInstallment":{"type":"boolean","title":"modifyInterestForFirstInstallment","description":"Adjust the interest for the first repayment when the first repayment period is different than the repayment frequency"},"notes":{"type":"string","title":"notes","description":"The notes about this loan account."},"originalAccountKey":{"type":"string","title":"originalAccountKey","description":"The key of the original rescheduled or refinanced loan account."},"paymentHolidaysAccruedInterest":{"type":"number","title":"paymentHolidaysAccruedInterest","description":"The amount of interest that has been accrued during payment holidays in the loan account."},"paymentMethod":{"title":"paymentMethod","description":"The interest payment method that determines whether the payments are made horizontally (on the repayments) or vertically (on the loan account).","enum":["HORIZONTAL","VERTICAL"]},"penaltySettings":{"title":"penaltySettings","$ref":"#/$defs/PenaltySettingsaf30"},"plannedInstallmentFees":{"type":"array","title":"plannedInstallmentFees","description":"The list with manual fees planned on the installments of the loan account.","items":{"$ref":"#/$defs/PlannedInstallmentFeeaf30"}},"prepaymentSettings":{"title":"prepaymentSettings","$ref":"#/$defs/PrepaymentSettingsaf30"},"principalPaymentSettings":{"title":"principalPaymentSettings","$ref":"#/$defs/PrincipalPaymentAccountSettingsaf30"},"productTypeKey":{"type":"string","title":"productTypeKey","description":"The key for the type of loan product that this loan account is based on."},"redrawSettings":{"title":"redrawSettings","$ref":"#/$defs/LoanAccountRedrawSettingsaf30"},"rescheduledAccountKey":{"type":"string","title":"rescheduledAccountKey","description":"The key pointing to where this loan account was rescheduled or refinanced to. This value is only not null if rescheduled."},"scheduleSettings":{"title":"scheduleSettings","$ref":"#/$defs/ScheduleSettingsaf30"},"settlementAccountKey":{"type":"string","title":"settlementAccountKey","description":"The encoded key of the settlement account."},"taxRate":{"type":"number","title":"taxRate","description":"The tax rate."},"terminationDate":{"type":"string","title":"terminationDate","description":"The date this loan account was terminated.","format":"date-time"},"tranches":{"type":"array","title":"tranches","description":"The list of disbursement tranches available for the loan account.","items":{"$ref":"#/$defs/LoanTrancheaf30"}}},"required":["accountHolderKey","accountHolderType","loanAmount","productTypeKey","scheduleSettings"],"additionalProperties":true};const schema26 = {"type":"object","title":"AccountArrearsSettingsaf30","description":"The account arrears settings, holds the required information for the arrears settings of an account.","properties":{"dateCalculationMethod":{"title":"dateCalculationMethod","description":"The arrears date calculation method.","enum":["ACCOUNT_FIRST_WENT_TO_ARREARS","LAST_LATE_REPAYMENT","ACCOUNT_FIRST_BREACHED_MATERIALITY_THRESHOLD"]},"encodedKey":{"type":"string","title":"encodedKey","description":"The encoded key of the arrears base settings, auto generated, unique."},"monthlyToleranceDay":{"type":"integer","title":"monthlyToleranceDay","description":"Defines monthly arrears tolerance day value."},"nonWorkingDaysMethod":{"title":"nonWorkingDaysMethod","description":"Shows whether the non working days are taken in consideration or not when applying penaltees/late fees or when setting an account into arrears","enum":["INCLUDED","EXCLUDED"]},"toleranceCalculationMethod":{"title":"toleranceCalculationMethod","description":"Defines the tolerance calculation method","enum":["ARREARS_TOLERANCE_PERIOD","MONTHLY_ARREARS_TOLERANCE_DAY"]},"toleranceFloorAmount":{"type":"number","title":"toleranceFloorAmount","description":"The tolerance floor amount."},"tolerancePercentageOfOutstandingPrincipal":{"type":"number","title":"tolerancePercentageOfOutstandingPrincipal","description":"Defines the arrears tolerance amount."},"tolerancePeriod":{"type":"integer","title":"tolerancePeriod","description":"Defines the arrears tolerance period value."}},"additionalProperties":true};const schema29 = {"type":"object","title":"Balancesaf30","description":"The loan account balance details.","properties":{"feesBalance":{"type":"number","title":"feesBalance","description":"The fees balance. Represents the total fees expected to be paid on this account at a given moment."},"feesDue":{"type":"number","title":"feesDue","description":"The fees due. Representing the total fees due for the account."},"feesPaid":{"type":"number","title":"feesPaid","description":"The fees paid. Represents the total fees paid for the account."},"holdBalance":{"type":"number","title":"holdBalance","description":"The sum of all the authorization hold amounts on this account."},"interestBalance":{"type":"number","title":"interestBalance","description":"Represents the total interest owed by the client (total interest applied for account minus interest paid)."},"interestDue":{"type":"number","title":"interestDue","description":"The interest due. Indicates how much interest it's due for the account at this moment."},"interestFromArrearsBalance":{"type":"number","title":"interestFromArrearsBalance","description":"The interest from arrears balance. Indicates interest from arrears owned by the client, from now on. (total interest from arrears accrued for account - interest from arrears paid)."},"interestFromArrearsDue":{"type":"number","title":"interestFromArrearsDue","description":"The interest from arrears due. Indicates how much interest from arrears it's due for the account at this moment."},"interestFromArrearsPaid":{"type":"number","title":"interestFromArrearsPaid","description":"The interest from arrears paid, indicates total interest from arrears paid into the account."},"interestPaid":{"type":"number","title":"interestPaid","description":"The interest paid, indicates total interest paid into the account."},"penaltyBalance":{"type":"number","title":"penaltyBalance","description":"The penalty balance. Represents the total penalty expected to be paid on this account at a given moment."},"penaltyDue":{"type":"number","title":"penaltyDue","description":"The penalty due. Represents the total penalty amount due for the account."},"penaltyPaid":{"type":"number","title":"penaltyPaid","description":"The Penalty paid. Represents the total penalty amount paid for the account."},"principalBalance":{"type":"number","title":"principalBalance","description":"The total principal owned by the client, from now on (principal disbursed - principal paid)."},"principalDue":{"type":"number","title":"principalDue","description":"The principal due, indicates how much principal it's due at this moment."},"principalPaid":{"type":"number","title":"principalPaid","description":"The principal paid, holds the value of the total paid into the account."},"redrawBalance":{"type":"number","title":"redrawBalance","description":"The total redraw amount owned by the client, from now on."}},"additionalProperties":true};const schema28 = {"type":"object","title":"Currencyaf30","description":"Represents a currency eg. USD, EUR.","properties":{"code":{"title":"code","description":"Fiat(ISO-4217) currency code or NON_FIAT for non fiat currencies.","enum":["AED","AFN","ALL","AMD","ANG","AOA","ARS","AUD","AWG","AZN","BAM","BBD","BDT","BGN","BHD","BIF","BMD","BND","BOB","BOV","BRL","BSD","BTN","BWP","BYR","BYN","BZD","CAD","CDF","CHE","CHF","CHW","CLF","CLP","CNY","COP","COU","CRC","CUC","CUP","CVE","CZK","DJF","DKK","DOP","DZD","EGP","ERN","ETB","EUR","FJD","FKP","GBP","GEL","GHS","GIP","GMD","GNF","GTQ","GYD","HKD","HNL","HRK","HTG","HUF","IDR","ILS","INR","IQD","IRR","ISK","JMD","JOD","JPY","KES","KGS","KHR","KMF","KPW","KRW","KWD","KYD","KZT","LAK","LBP","LKR","LRD","LSL","LTL","LVL","LYD","MAD","MDL","MGA","MKD","MMK","MNT","MOP","MRO","MRU","MUR","MVR","MWK","MXN","MXV","MYR","MZN","NAD","NGN","NIO","NOK","NPR","NZD","OMR","PAB","PEN","PGK","PHP","PKR","PLN","PYG","QAR","RON","RSD","RUB","RWF","SAR","SBD","SCR","SDG","SEK","SGD","SHP","SLL","SOS","SRD","STD","STN","SVC","SYP","SZL","THB","TJS","TMT","TND","TOP","TRY","TTD","TWD","TZS","UAH","UGX","USD","USN","UYI","UYU","UYW","UZS","VED","VEF","VES","VND","VUV","WST","XAG","XAU","XAF","XBA","XBB","XBC","XBD","XCD","XDR","XOF","XPD","XPF","XPT","XSU","XTS","XUA","XXX","YER","ZAR","ZMK","ZWL","ZMW","SSP","NON_FIAT"]},"currencyCode":{"type":"string","title":"currencyCode","description":"Currency code for NON_FIAT currency."}},"additionalProperties":true};const schema34 = {"type":"object","title":"InvestorFundaf30","description":"Contains the details about an investor fund including fields like encoded key, guarantor type, amount and guarantor key","properties":{"amount":{"type":"number","title":"amount","description":"The amount used by the client for the guaranty"},"assetName":{"type":"string","title":"assetName","description":"The name of a value the client guarantees with (populated when the guaranty type is ASSET)"},"depositAccountKey":{"type":"string","title":"depositAccountKey","description":"The key of the deposit account used by the guarantor (populated when the guaranty type is GUARANTOR). It can be null."},"encodedKey":{"type":"string","title":"encodedKey","description":"The encoded key of the entity, generated, globally unique"},"guarantorKey":{"type":"string","title":"guarantorKey","description":"The key of the client/group used as the guarantor."},"guarantorType":{"title":"guarantorType","description":"The type of the guarantor (client/group)","enum":["CLIENT","GROUP"]},"id":{"type":"string","title":"id","description":"Investor fund unique identifier. All versions of an investor fund will have same id."},"interestCommission":{"type":"number","title":"interestCommission","description":"The constraint minimum value"},"sharePercentage":{"type":"number","title":"sharePercentage","description":"Percentage of loan shares this investor owns"}},"required":["amount","guarantorKey","guarantorType"],"additionalProperties":true};const schema35 = {"type":"object","title":"Guarantoraf30","description":"Guarantor, holds information about a client guaranty entry. It can be defined based on another client which guarantees (including or not a savings account whether it is a client of the organization using Mambu or not) or based on a value the client holds (an asset)","properties":{"amount":{"type":"number","title":"amount","description":"The amount used by the client for the guaranty"},"assetName":{"type":"string","title":"assetName","description":"The name of a value the client guarantees with (populated when the guaranty type is ASSET)"},"depositAccountKey":{"type":"string","title":"depositAccountKey","description":"The key of the deposit account used by the guarantor (populated when the guaranty type is GUARANTOR). It can be null."},"encodedKey":{"type":"string","title":"encodedKey","description":"The encoded key of the security, auto generated, unique."},"guarantorKey":{"type":"string","title":"guarantorKey","description":"The key of the client/group used as the guarantor."},"guarantorType":{"title":"guarantorType","description":"The type of the guarantor (client/group)","enum":["CLIENT","GROUP"]}},"required":["amount","guarantorKey","guarantorType"],"additionalProperties":true};const schema40 = {"type":"object","title":"PenaltySettingsaf30","description":"The penalty settings, holds all the fields regarding penalties","properties":{"loanPenaltyCalculationMethod":{"title":"loanPenaltyCalculationMethod","description":"The last penalty calculation method, represents on what amount are the penalties calculated.","enum":["NONE","OVERDUE_BALANCE","OVERDUE_BALANCE_AND_INTEREST","OUTSTANDING_PRINCIPAL"]},"penaltyRate":{"type":"number","title":"penaltyRate","description":"The penalty rate, represents the rate (in percent) which is charged as a penalty."}},"additionalProperties":true};const schema41 = {"type":"object","title":"PlannedInstallmentFeeaf30","description":"The planned fee details holds the information related to the installment key, predefined fee key and amount","properties":{"amount":{"type":"number","title":"amount","description":"The amount of the planned fee."},"applyOnDate":{"type":"string","title":"applyOnDate","description":"The date when a planned fee should be applied, overriding installment's due date. It should match the interval of the installment. If it belong to first installment, it should be between disbursement date and installment due date.","format":"date-time"},"encodedKey":{"type":"string","title":"encodedKey","description":"The encoded key of the planned installment fee, auto generated, unique."},"installmentKey":{"type":"string","title":"installmentKey","description":"The encoded key of the installment on which the predefined fee is planned."},"installmentNumber":{"type":"integer","title":"installmentNumber","description":"The number of the installment on which the predefined fee is planned. It is used only in the case when fees are created at the same time with the loan account creation or during preview schedule, before account creation, otherwise this should be empty and installmentKey will be used to identify an installment."},"predefinedFeeKey":{"type":"string","title":"predefinedFeeKey","description":"The encoded key of the predefined fee which is planned."}},"required":["predefinedFeeKey"],"additionalProperties":true};const schema42 = {"type":"object","title":"PrepaymentSettingsaf30","description":"The prepayment settings, holds all prepayment properties.","properties":{"applyInterestOnPrepaymentMethod":{"title":"applyInterestOnPrepaymentMethod","description":"Apply interest on prepayment method copied from loan product on which this account is based.","enum":["AUTOMATIC","MANUAL"]},"elementsRecalculationMethod":{"title":"elementsRecalculationMethod","description":"The elements recalculation method, indicates how the declining balance with equal installments repayments are recalculated.","enum":["PRINCIPAL_EXPECTED_FIXED","TOTAL_EXPECTED_FIXED"]},"ercFreeAllowanceAmount":{"type":"number","title":"ercFreeAllowanceAmount"},"ercFreeAllowancePercentage":{"type":"number","title":"ercFreeAllowancePercentage","description":"Early repayment charge fee free allowance in percentage per year"},"prepaymentRecalculationMethod":{"title":"prepaymentRecalculationMethod","description":"Prepayment recalculation method copied from the loan product on which this account is based.","enum":["NO_RECALCULATION","RESCHEDULE_REMAINING_REPAYMENTS","RECALCULATE_SCHEDULE_KEEP_SAME_NUMBER_OF_TERMS","RECALCULATE_SCHEDULE_KEEP_SAME_PRINCIPAL_AMOUNT","RECALCULATE_SCHEDULE_KEEP_SAME_TOTAL_REPAYMENT_AMOUNT","REDUCE_AMOUNT_PER_INSTALLMENT","REDUCE_NUMBER_OF_INSTALLMENTS","REDUCE_NUMBER_OF_INSTALLMENTS_NEW"]},"principalPaidInstallmentStatus":{"title":"principalPaidInstallmentStatus","description":"Installment status for the case when principal is paid off (copied from loan product).","enum":["PARTIALLY_PAID","PAID","ORIGINAL_TOTAL_EXPECTED_PAID"]}},"additionalProperties":true};const schema43 = {"type":"object","title":"PrincipalPaymentAccountSettingsaf30","description":"The principal payment account settings, holds the required information for the principal payment process of an account.","properties":{"amount":{"type":"number","title":"amount","description":"Fixed amount for being used for the repayments principal due."},"encodedKey":{"type":"string","title":"encodedKey","description":"The encoded key of the principal payment base settings, auto generated, unique."},"includeFeesInFloorAmount":{"type":"boolean","title":"includeFeesInFloorAmount","description":"Boolean flag, if true, the fees will be included along with the principal in the repayment floor amount, for a revolving credit account"},"includeInterestInFloorAmount":{"type":"boolean","title":"includeInterestInFloorAmount","description":"Boolean flag, if true, the interest will be included along with the principal in the repayment floor amount, for a revolving credit account"},"percentage":{"type":"number","title":"percentage","description":"Percentage of principal amount used for the repayments principal due."},"principalCeilingValue":{"type":"number","title":"principalCeilingValue","description":"The maximum principal due amount a repayment made with this settings can have"},"principalFloorValue":{"type":"number","title":"principalFloorValue","description":"The minimum principal due amount a repayment made with this settings can have"},"principalPaymentMethod":{"title":"principalPaymentMethod","description":"The method of principal payment for revolving credit.","enum":["FLAT","OUTSTANDING_PRINCIPAL_PERCENTAGE","PRINCIPAL_PERCENTAGE_LAST_DISB","TOTAL_BALANCE_PERCENTAGE","TOTAL_BALANCE_FLAT","TOTAL_PRINCIPAL_PERCENTAGE"]},"totalDueAmountFloor":{"type":"number","title":"totalDueAmountFloor","description":"The minimum total due amount a repayment made with this settings can have"},"totalDuePayment":{"title":"totalDuePayment","description":"The method of total due payment for revolving credit","enum":["FLAT","OUTSTANDING_PRINCIPAL_PERCENTAGE","PRINCIPAL_PERCENTAGE_LAST_DISB","TOTAL_BALANCE_PERCENTAGE","TOTAL_BALANCE_FLAT","TOTAL_PRINCIPAL_PERCENTAGE"]}},"additionalProperties":true};const schema44 = {"type":"object","title":"LoanAccountRedrawSettingsaf30","description":"Represents the redraw settings for a loan account.","properties":{"restrictNextDueWithdrawal":{"type":"boolean","title":"restrictNextDueWithdrawal","description":"`TRUE` if withdrawing amounts that reduce the next due instalment repayment is restricted, `FALSE` otherwise."}},"required":["restrictNextDueWithdrawal"],"additionalProperties":true};const schema27 = {"type":"object","title":"Assetaf30","description":"Asset, holds information about a client asset entry.","properties":{"amount":{"type":"number","title":"amount","description":"The amount used by the client for the guaranty"},"assetName":{"type":"string","title":"assetName","description":"The name of a value the client guarantees with (populated when the guaranty type is ASSET)"},"depositAccountKey":{"type":"string","title":"depositAccountKey","description":"The key of the deposit account used by the guarantor (populated when the guaranty type is GUARANTOR). It can be null."},"encodedKey":{"type":"string","title":"encodedKey","description":"The encoded key of the security, auto generated, unique."},"guarantorKey":{"type":"string","title":"guarantorKey","description":"The key of the client/group used as the guarantor."},"guarantorType":{"title":"guarantorType","description":"The type of the guarantor (client/group)","enum":["CLIENT","GROUP"]},"originalAmount":{"type":"number","title":"originalAmount","description":"The original amount used by the client for a collateral asset"},"originalCurrency":{"title":"originalCurrency","$ref":"#/$defs/Currencyaf30"}},"required":["amount","assetName"],"additionalProperties":true};function validate24(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){let vErrors = null;let errors = 0;if(errors === 0){if(data && typeof data == "object" && !Array.isArray(data)){let missing0;if(((data.amount === undefined) && (missing0 = "amount")) || ((data.assetName === undefined) && (missing0 = "assetName"))){validate24.errors = [{instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];return false;}else {if(data.amount !== undefined){let data0 = data.amount;const _errs2 = errors;if(!((typeof data0 == "number") && (isFinite(data0)))){validate24.errors = [{instancePath:instancePath+"/amount",schemaPath:"#/properties/amount/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid0 = _errs2 === errors;}else {var valid0 = true;}if(valid0){if(data.assetName !== undefined){const _errs4 = errors;if(typeof data.assetName !== "string"){validate24.errors = [{instancePath:instancePath+"/assetName",schemaPath:"#/properties/assetName/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid0 = _errs4 === errors;}else {var valid0 = true;}if(valid0){if(data.depositAccountKey !== undefined){const _errs6 = errors;if(typeof data.depositAccountKey !== "string"){validate24.errors = [{instancePath:instancePath+"/depositAccountKey",schemaPath:"#/properties/depositAccountKey/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid0 = _errs6 === errors;}else {var valid0 = true;}if(valid0){if(data.encodedKey !== undefined){const _errs8 = errors;if(typeof data.encodedKey !== "string"){validate24.errors = [{instancePath:instancePath+"/encodedKey",schemaPath:"#/properties/encodedKey/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid0 = _errs8 === errors;}else {var valid0 = true;}if(valid0){if(data.guarantorKey !== undefined){const _errs10 = errors;if(typeof data.guarantorKey !== "string"){validate24.errors = [{instancePath:instancePath+"/guarantorKey",schemaPath:"#/properties/guarantorKey/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid0 = _errs10 === errors;}else {var valid0 = true;}if(valid0){if(data.guarantorType !== undefined){let data5 = data.guarantorType;const _errs12 = errors;if(!((data5 === "CLIENT") || (data5 === "GROUP"))){validate24.errors = [{instancePath:instancePath+"/guarantorType",schemaPath:"#/properties/guarantorType/enum",keyword:"enum",params:{allowedValues: schema27.properties.guarantorType.enum},message:"must be equal to one of the allowed values"}];return false;}var valid0 = _errs12 === errors;}else {var valid0 = true;}if(valid0){if(data.originalAmount !== undefined){let data6 = data.originalAmount;const _errs13 = errors;if(!((typeof data6 == "number") && (isFinite(data6)))){validate24.errors = [{instancePath:instancePath+"/originalAmount",schemaPath:"#/properties/originalAmount/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid0 = _errs13 === errors;}else {var valid0 = true;}if(valid0){if(data.originalCurrency !== undefined){let data7 = data.originalCurrency;const _errs15 = errors;const _errs16 = errors;if(errors === _errs16){if(data7 && typeof data7 == "object" && !Array.isArray(data7)){if(data7.code !== undefined){const _errs19 = errors;let valid3;valid3 = false;for(const v0 of schema28.properties.code.enum){if(func0(data7.code, v0)){valid3 = true;break;}}if(!valid3){validate24.errors = [{instancePath:instancePath+"/originalCurrency/code",schemaPath:"#/$defs/Currencyaf30/properties/code/enum",keyword:"enum",params:{allowedValues: schema28.properties.code.enum},message:"must be equal to one of the allowed values"}];return false;}var valid2 = _errs19 === errors;}else {var valid2 = true;}if(valid2){if(data7.currencyCode !== undefined){const _errs20 = errors;if(typeof data7.currencyCode !== "string"){validate24.errors = [{instancePath:instancePath+"/originalCurrency/currencyCode",schemaPath:"#/$defs/Currencyaf30/properties/currencyCode/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid2 = _errs20 === errors;}else {var valid2 = true;}}}else {validate24.errors = [{instancePath:instancePath+"/originalCurrency",schemaPath:"#/$defs/Currencyaf30/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}var valid0 = _errs15 === errors;}else {var valid0 = true;}}}}}}}}}}else {validate24.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}validate24.errors = vErrors;return errors === 0;}const schema31 = {"type":"object","title":"DisbursementDetailsaf30","description":"The the disbursement details it holds the information related to the disbursement details as disbursement date, first repayment date, disbursement fees.","properties":{"disbursementDate":{"type":"string","title":"disbursementDate","description":"The activation date, the date when the disbursement actually took place.","format":"date-time"},"encodedKey":{"type":"string","title":"encodedKey","description":"The encoded key of the disbursement details, auto generated, unique"},"expectedDisbursementDate":{"type":"string","title":"expectedDisbursementDate","description":"The date of the expected disbursement.Stored as Organization Time.","format":"date-time"},"fees":{"type":"array","title":"fees","description":"List of fees that should be applied at the disbursement time.","items":{"$ref":"#/$defs/CustomPredefinedFeeaf30"}},"firstRepaymentDate":{"type":"string","title":"firstRepaymentDate","description":"The date of the expected first repayment. Stored as Organization Time.","format":"date-time"},"transactionDetails":{"title":"transactionDetails","$ref":"#/$defs/LoanTransactionDetailsaf30"}},"additionalProperties":true};const schema32 = {"type":"object","title":"CustomPredefinedFeeaf30","description":"The custom predefined fees, they may be used as the expected predefined fees that will be applied on the disbursement.","properties":{"amount":{"type":"number","title":"amount","description":"The amount of the custom fee."},"encodedKey":{"type":"string","title":"encodedKey","description":"The encoded key of the custom predefined fee, auto generated, unique."},"percentage":{"type":"number","title":"percentage","description":"The percentage of the custom fee."},"predefinedFeeEncodedKey":{"type":"string","title":"predefinedFeeEncodedKey","description":"The encoded key of the predefined fee"}},"additionalProperties":true};const schema33 = {"type":"object","title":"LoanTransactionDetailsaf30","description":"Represents the loan transaction details.","properties":{"encodedKey":{"type":"string","title":"encodedKey","description":"The encoded key of the entity, generated, globally unique"},"internalTransfer":{"type":"boolean","title":"internalTransfer","description":"Whether the transaction was transferred between loans or deposit accounts"},"targetDepositAccountKey":{"type":"string","title":"targetDepositAccountKey","description":"In case of a transaction to a deposit account this represent the deposit account key to which the transaction was made."},"transactionChannelId":{"type":"string","title":"transactionChannelId","description":"The ID of the transaction channel associated with the transaction details."},"transactionChannelKey":{"type":"string","title":"transactionChannelKey","description":"The encoded key of the transaction channel associated with the transaction details."}},"additionalProperties":true};function validate26(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){let vErrors = null;let errors = 0;if(errors === 0){if(data && typeof data == "object" && !Array.isArray(data)){if(data.disbursementDate !== undefined){const _errs2 = errors;if(errors === _errs2){if(errors === _errs2){if(!(typeof data.disbursementDate === "string")){validate26.errors = [{instancePath:instancePath+"/disbursementDate",schemaPath:"#/properties/disbursementDate/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}}var valid0 = _errs2 === errors;}else {var valid0 = true;}if(valid0){if(data.encodedKey !== undefined){const _errs4 = errors;if(typeof data.encodedKey !== "string"){validate26.errors = [{instancePath:instancePath+"/encodedKey",schemaPath:"#/properties/encodedKey/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid0 = _errs4 === errors;}else {var valid0 = true;}if(valid0){if(data.expectedDisbursementDate !== undefined){const _errs6 = errors;if(errors === _errs6){if(errors === _errs6){if(!(typeof data.expectedDisbursementDate === "string")){validate26.errors = [{instancePath:instancePath+"/expectedDisbursementDate",schemaPath:"#/properties/expectedDisbursementDate/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}}var valid0 = _errs6 === errors;}else {var valid0 = true;}if(valid0){if(data.fees !== undefined){let data3 = data.fees;const _errs8 = errors;if(errors === _errs8){if(Array.isArray(data3)){var valid1 = true;const len0 = data3.length;for(let i0=0; i0<len0; i0++){let data4 = data3[i0];const _errs10 = errors;const _errs11 = errors;if(errors === _errs11){if(data4 && typeof data4 == "object" && !Array.isArray(data4)){if(data4.amount !== undefined){let data5 = data4.amount;const _errs14 = errors;if(!((typeof data5 == "number") && (isFinite(data5)))){validate26.errors = [{instancePath:instancePath+"/fees/" + i0+"/amount",schemaPath:"#/$defs/CustomPredefinedFeeaf30/properties/amount/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid3 = _errs14 === errors;}else {var valid3 = true;}if(valid3){if(data4.encodedKey !== undefined){const _errs16 = errors;if(typeof data4.encodedKey !== "string"){validate26.errors = [{instancePath:instancePath+"/fees/" + i0+"/encodedKey",schemaPath:"#/$defs/CustomPredefinedFeeaf30/properties/encodedKey/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid3 = _errs16 === errors;}else {var valid3 = true;}if(valid3){if(data4.percentage !== undefined){let data7 = data4.percentage;const _errs18 = errors;if(!((typeof data7 == "number") && (isFinite(data7)))){validate26.errors = [{instancePath:instancePath+"/fees/" + i0+"/percentage",schemaPath:"#/$defs/CustomPredefinedFeeaf30/properties/percentage/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid3 = _errs18 === errors;}else {var valid3 = true;}if(valid3){if(data4.predefinedFeeEncodedKey !== undefined){const _errs20 = errors;if(typeof data4.predefinedFeeEncodedKey !== "string"){validate26.errors = [{instancePath:instancePath+"/fees/" + i0+"/predefinedFeeEncodedKey",schemaPath:"#/$defs/CustomPredefinedFeeaf30/properties/predefinedFeeEncodedKey/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid3 = _errs20 === errors;}else {var valid3 = true;}}}}}else {validate26.errors = [{instancePath:instancePath+"/fees/" + i0,schemaPath:"#/$defs/CustomPredefinedFeeaf30/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}var valid1 = _errs10 === errors;if(!valid1){break;}}}else {validate26.errors = [{instancePath:instancePath+"/fees",schemaPath:"#/properties/fees/type",keyword:"type",params:{type: "array"},message:"must be array"}];return false;}}var valid0 = _errs8 === errors;}else {var valid0 = true;}if(valid0){if(data.firstRepaymentDate !== undefined){const _errs22 = errors;if(errors === _errs22){if(errors === _errs22){if(!(typeof data.firstRepaymentDate === "string")){validate26.errors = [{instancePath:instancePath+"/firstRepaymentDate",schemaPath:"#/properties/firstRepaymentDate/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}}var valid0 = _errs22 === errors;}else {var valid0 = true;}if(valid0){if(data.transactionDetails !== undefined){let data10 = data.transactionDetails;const _errs24 = errors;const _errs25 = errors;if(errors === _errs25){if(data10 && typeof data10 == "object" && !Array.isArray(data10)){if(data10.encodedKey !== undefined){const _errs28 = errors;if(typeof data10.encodedKey !== "string"){validate26.errors = [{instancePath:instancePath+"/transactionDetails/encodedKey",schemaPath:"#/$defs/LoanTransactionDetailsaf30/properties/encodedKey/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid5 = _errs28 === errors;}else {var valid5 = true;}if(valid5){if(data10.internalTransfer !== undefined){const _errs30 = errors;if(typeof data10.internalTransfer !== "boolean"){validate26.errors = [{instancePath:instancePath+"/transactionDetails/internalTransfer",schemaPath:"#/$defs/LoanTransactionDetailsaf30/properties/internalTransfer/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"}];return false;}var valid5 = _errs30 === errors;}else {var valid5 = true;}if(valid5){if(data10.targetDepositAccountKey !== undefined){const _errs32 = errors;if(typeof data10.targetDepositAccountKey !== "string"){validate26.errors = [{instancePath:instancePath+"/transactionDetails/targetDepositAccountKey",schemaPath:"#/$defs/LoanTransactionDetailsaf30/properties/targetDepositAccountKey/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid5 = _errs32 === errors;}else {var valid5 = true;}if(valid5){if(data10.transactionChannelId !== undefined){const _errs34 = errors;if(typeof data10.transactionChannelId !== "string"){validate26.errors = [{instancePath:instancePath+"/transactionDetails/transactionChannelId",schemaPath:"#/$defs/LoanTransactionDetailsaf30/properties/transactionChannelId/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid5 = _errs34 === errors;}else {var valid5 = true;}if(valid5){if(data10.transactionChannelKey !== undefined){const _errs36 = errors;if(typeof data10.transactionChannelKey !== "string"){validate26.errors = [{instancePath:instancePath+"/transactionDetails/transactionChannelKey",schemaPath:"#/$defs/LoanTransactionDetailsaf30/properties/transactionChannelKey/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid5 = _errs36 === errors;}else {var valid5 = true;}}}}}}else {validate26.errors = [{instancePath:instancePath+"/transactionDetails",schemaPath:"#/$defs/LoanTransactionDetailsaf30/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}var valid0 = _errs24 === errors;}else {var valid0 = true;}}}}}}}else {validate26.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}validate26.errors = vErrors;return errors === 0;}const schema36 = {"type":"object","title":"InterestSettingsaf30","description":"The interest settings, holds all the properties regarding interests for the loan account.","properties":{"accountInterestRateSettings":{"type":"array","title":"accountInterestRateSettings","description":"Adjustable interest rates settings for loan account","items":{"$ref":"#/$defs/AccountInterestRateSettingsaf30"}},"accrueInterestAfterMaturity":{"type":"boolean","title":"accrueInterestAfterMaturity","description":"The accrue interest after maturity. If the product support this option, specify if the interest should be accrued after the account maturity date."},"accrueLateInterest":{"type":"boolean","title":"accrueLateInterest","description":"Indicates whether late interest is accrued for this loan account"},"interestApplicationDays":{"title":"interestApplicationDays","$ref":"#/$defs/DaysInMonthaf30"},"interestApplicationMethod":{"title":"interestApplicationMethod","description":"The interest application method. Represents the interest application method that determines whether the interest gets applied on the account's disbursement or on each repayment.","enum":["AFTER_DISBURSEMENT","REPAYMENT_DUE_DATE","FIXED_DAYS_OF_MONTH"]},"interestBalanceCalculationMethod":{"title":"interestBalanceCalculationMethod","description":"The interest balance calculation method. Represents the option which determines the way the balance for the account's interest is computed.","enum":["ONLY_PRINCIPAL","PRINCIPAL_AND_INTEREST"]},"interestCalculationMethod":{"title":"interestCalculationMethod","description":"The interest calculation method. Holds the type of interest calculation method.","enum":["FLAT","DECLINING_BALANCE","DECLINING_BALANCE_DISCOUNTED","EQUAL_INSTALLMENTS"]},"interestChargeFrequency":{"title":"interestChargeFrequency","description":"The interest change frequency. Holds the possible values for how often is interest charged on loan or deposit accounts","enum":["ANNUALIZED","EVERY_MONTH","EVERY_FOUR_WEEKS","EVERY_WEEK","EVERY_DAY","EVERY_X_DAYS"]},"interestRate":{"type":"number","title":"interestRate","description":"The interest rate. Represents the interest rate for the loan account. The interest on loans is accrued on a daily basis, which allows charging the clients only for the days they actually used the loan amount."},"interestRateChangePMTAdjustmentThreshold":{"title":"interestRateChangePMTAdjustmentThreshold","$ref":"#/$defs/InterestRateChangePMTAdjustmentThresholdaf30"},"interestRateReviewCount":{"type":"integer","title":"interestRateReviewCount","description":"Interest rate update frequency unit count."},"interestRateReviewUnit":{"title":"interestRateReviewUnit","description":"The interest rate review unit. Defines the interest rate update frequency measurement unit.","enum":["DAYS","WEEKS","MONTHS"]},"interestRateSource":{"title":"interestRateSource","description":"The interest rate source. Represents the interest calculation method: fixed or (interest spread + active organization index interest rate)","enum":["FIXED_INTEREST_RATE","INDEX_INTEREST_RATE"]},"interestSpread":{"type":"number","title":"interestSpread","description":"Interest to be added to active organization index interest rate in order to find out actual interest rate"},"interestType":{"title":"interestType","description":"The possible values for how we compute and apply the interest","enum":["SIMPLE_INTEREST","CAPITALIZED_INTEREST","COMPOUNDING_INTEREST"]}},"additionalProperties":true};const schema37 = {"type":"object","title":"AccountInterestRateSettingsaf30","description":"Adjustable interest rates settings for loan account","properties":{"encodedKey":{"type":"string","title":"encodedKey","description":"The encoded key of the interest rate settings, auto generated, unique"},"indexSourceKey":{"type":"string","title":"indexSourceKey","description":"Index rate source key."},"interestRate":{"type":"number","title":"interestRate","description":"Interest rate value."},"interestRateCeilingValue":{"type":"number","title":"interestRateCeilingValue","description":"Maximum value allowed for index based interest rate. Valid only for index interest rate."},"interestRateFloorValue":{"type":"number","title":"interestRateFloorValue","description":"Minimum value allowed for index based interest rate. Valid only for index interest rate."},"interestRateReviewCount":{"type":"integer","title":"interestRateReviewCount","description":"Interest rate review frequency unit count. Valid only for index interest rate."},"interestRateReviewUnit":{"title":"interestRateReviewUnit","description":"Interest rate review frequency measurement unit. Valid only for index interest rate.","enum":["DAYS","WEEKS","MONTHS"]},"interestRateSource":{"title":"interestRateSource","description":"Interest calculation method: fixed or indexed(interest spread + active organization index interest rate)","enum":["FIXED_INTEREST_RATE","INDEX_INTEREST_RATE"]},"interestSpread":{"type":"number","title":"interestSpread","description":"Interest spread value."},"validFrom":{"type":"string","title":"validFrom","description":"Date since an interest rate is valid","format":"date-time"}},"required":["interestRateSource","validFrom"],"additionalProperties":true};const schema38 = {"type":"object","title":"DaysInMonthaf30","description":"Enumeration for days of month and method of handling shorter months.","properties":{"daysInMonth":{"type":"array","title":"daysInMonth","description":" Specifies the day(s) of the month when the interest application dates should be. Only available if the Interest Application Method is InterestApplicationMethodDTO#FIXED_DAYS_OF_MONTH. Currently only 1 value can be specified.","items":{"type":"integer"}},"shortMonthHandlingMethod":{"title":"shortMonthHandlingMethod","description":"Determines how to handle the short months, if they select a fixed day of month > 28. Will be null if no such date is selected. Only available if the Interest Application Method is InterestApplicationMethodDTO#FIXED_DAYS_OF_MONTH.","enum":["LAST_DAY_IN_MONTH","FIRST_DAY_OF_NEXT_MONTH"]}},"additionalProperties":true};const schema39 = {"type":"object","title":"InterestRateChangePMTAdjustmentThresholdaf30","description":"Represents interest rate change threshold settings for loan accounts and loan products.","properties":{"method":{"title":"method","description":"The method used to calculate the interest rate change threshold. Supported value is CALENDAR_DAYS","enum":["WORKING_DAYS","CALENDAR_DAYS"]},"numberOfDays":{"type":"integer","title":"numberOfDays","description":"The number of days that trigger an interest rate change."}},"additionalProperties":true};function validate28(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){let vErrors = null;let errors = 0;if(errors === 0){if(data && typeof data == "object" && !Array.isArray(data)){if(data.accountInterestRateSettings !== undefined){let data0 = data.accountInterestRateSettings;const _errs2 = errors;if(errors === _errs2){if(Array.isArray(data0)){var valid1 = true;const len0 = data0.length;for(let i0=0; i0<len0; i0++){let data1 = data0[i0];const _errs4 = errors;const _errs5 = errors;if(errors === _errs5){if(data1 && typeof data1 == "object" && !Array.isArray(data1)){let missing0;if(((data1.interestRateSource === undefined) && (missing0 = "interestRateSource")) || ((data1.validFrom === undefined) && (missing0 = "validFrom"))){validate28.errors = [{instancePath:instancePath+"/accountInterestRateSettings/" + i0,schemaPath:"#/$defs/AccountInterestRateSettingsaf30/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];return false;}else {if(data1.encodedKey !== undefined){const _errs8 = errors;if(typeof data1.encodedKey !== "string"){validate28.errors = [{instancePath:instancePath+"/accountInterestRateSettings/" + i0+"/encodedKey",schemaPath:"#/$defs/AccountInterestRateSettingsaf30/properties/encodedKey/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid3 = _errs8 === errors;}else {var valid3 = true;}if(valid3){if(data1.indexSourceKey !== undefined){const _errs10 = errors;if(typeof data1.indexSourceKey !== "string"){validate28.errors = [{instancePath:instancePath+"/accountInterestRateSettings/" + i0+"/indexSourceKey",schemaPath:"#/$defs/AccountInterestRateSettingsaf30/properties/indexSourceKey/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid3 = _errs10 === errors;}else {var valid3 = true;}if(valid3){if(data1.interestRate !== undefined){let data4 = data1.interestRate;const _errs12 = errors;if(!((typeof data4 == "number") && (isFinite(data4)))){validate28.errors = [{instancePath:instancePath+"/accountInterestRateSettings/" + i0+"/interestRate",schemaPath:"#/$defs/AccountInterestRateSettingsaf30/properties/interestRate/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid3 = _errs12 === errors;}else {var valid3 = true;}if(valid3){if(data1.interestRateCeilingValue !== undefined){let data5 = data1.interestRateCeilingValue;const _errs14 = errors;if(!((typeof data5 == "number") && (isFinite(data5)))){validate28.errors = [{instancePath:instancePath+"/accountInterestRateSettings/" + i0+"/interestRateCeilingValue",schemaPath:"#/$defs/AccountInterestRateSettingsaf30/properties/interestRateCeilingValue/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid3 = _errs14 === errors;}else {var valid3 = true;}if(valid3){if(data1.interestRateFloorValue !== undefined){let data6 = data1.interestRateFloorValue;const _errs16 = errors;if(!((typeof data6 == "number") && (isFinite(data6)))){validate28.errors = [{instancePath:instancePath+"/accountInterestRateSettings/" + i0+"/interestRateFloorValue",schemaPath:"#/$defs/AccountInterestRateSettingsaf30/properties/interestRateFloorValue/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid3 = _errs16 === errors;}else {var valid3 = true;}if(valid3){if(data1.interestRateReviewCount !== undefined){let data7 = data1.interestRateReviewCount;const _errs18 = errors;if(!(((typeof data7 == "number") && (!(data7 % 1) && !isNaN(data7))) && (isFinite(data7)))){validate28.errors = [{instancePath:instancePath+"/accountInterestRateSettings/" + i0+"/interestRateReviewCount",schemaPath:"#/$defs/AccountInterestRateSettingsaf30/properties/interestRateReviewCount/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];return false;}var valid3 = _errs18 === errors;}else {var valid3 = true;}if(valid3){if(data1.interestRateReviewUnit !== undefined){let data8 = data1.interestRateReviewUnit;const _errs20 = errors;if(!(((data8 === "DAYS") || (data8 === "WEEKS")) || (data8 === "MONTHS"))){validate28.errors = [{instancePath:instancePath+"/accountInterestRateSettings/" + i0+"/interestRateReviewUnit",schemaPath:"#/$defs/AccountInterestRateSettingsaf30/properties/interestRateReviewUnit/enum",keyword:"enum",params:{allowedValues: schema37.properties.interestRateReviewUnit.enum},message:"must be equal to one of the allowed values"}];return false;}var valid3 = _errs20 === errors;}else {var valid3 = true;}if(valid3){if(data1.interestRateSource !== undefined){let data9 = data1.interestRateSource;const _errs21 = errors;if(!((data9 === "FIXED_INTEREST_RATE") || (data9 === "INDEX_INTEREST_RATE"))){validate28.errors = [{instancePath:instancePath+"/accountInterestRateSettings/" + i0+"/interestRateSource",schemaPath:"#/$defs/AccountInterestRateSettingsaf30/properties/interestRateSource/enum",keyword:"enum",params:{allowedValues: schema37.properties.interestRateSource.enum},message:"must be equal to one of the allowed values"}];return false;}var valid3 = _errs21 === errors;}else {var valid3 = true;}if(valid3){if(data1.interestSpread !== undefined){let data10 = data1.interestSpread;const _errs22 = errors;if(!((typeof data10 == "number") && (isFinite(data10)))){validate28.errors = [{instancePath:instancePath+"/accountInterestRateSettings/" + i0+"/interestSpread",schemaPath:"#/$defs/AccountInterestRateSettingsaf30/properties/interestSpread/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid3 = _errs22 === errors;}else {var valid3 = true;}if(valid3){if(data1.validFrom !== undefined){const _errs24 = errors;if(errors === _errs24){if(errors === _errs24){if(!(typeof data1.validFrom === "string")){validate28.errors = [{instancePath:instancePath+"/accountInterestRateSettings/" + i0+"/validFrom",schemaPath:"#/$defs/AccountInterestRateSettingsaf30/properties/validFrom/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}}var valid3 = _errs24 === errors;}else {var valid3 = true;}}}}}}}}}}}}else {validate28.errors = [{instancePath:instancePath+"/accountInterestRateSettings/" + i0,schemaPath:"#/$defs/AccountInterestRateSettingsaf30/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}var valid1 = _errs4 === errors;if(!valid1){break;}}}else {validate28.errors = [{instancePath:instancePath+"/accountInterestRateSettings",schemaPath:"#/properties/accountInterestRateSettings/type",keyword:"type",params:{type: "array"},message:"must be array"}];return false;}}var valid0 = _errs2 === errors;}else {var valid0 = true;}if(valid0){if(data.accrueInterestAfterMaturity !== undefined){const _errs26 = errors;if(typeof data.accrueInterestAfterMaturity !== "boolean"){validate28.errors = [{instancePath:instancePath+"/accrueInterestAfterMaturity",schemaPath:"#/properties/accrueInterestAfterMaturity/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"}];return false;}var valid0 = _errs26 === errors;}else {var valid0 = true;}if(valid0){if(data.accrueLateInterest !== undefined){const _errs28 = errors;if(typeof data.accrueLateInterest !== "boolean"){validate28.errors = [{instancePath:instancePath+"/accrueLateInterest",schemaPath:"#/properties/accrueLateInterest/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"}];return false;}var valid0 = _errs28 === errors;}else {var valid0 = true;}if(valid0){if(data.interestApplicationDays !== undefined){let data14 = data.interestApplicationDays;const _errs30 = errors;const _errs31 = errors;if(errors === _errs31){if(data14 && typeof data14 == "object" && !Array.isArray(data14)){if(data14.daysInMonth !== undefined){let data15 = data14.daysInMonth;const _errs34 = errors;if(errors === _errs34){if(Array.isArray(data15)){var valid6 = true;const len1 = data15.length;for(let i1=0; i1<len1; i1++){let data16 = data15[i1];const _errs36 = errors;if(!(((typeof data16 == "number") && (!(data16 % 1) && !isNaN(data16))) && (isFinite(data16)))){validate28.errors = [{instancePath:instancePath+"/interestApplicationDays/daysInMonth/" + i1,schemaPath:"#/$defs/DaysInMonthaf30/properties/daysInMonth/items/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];return false;}var valid6 = _errs36 === errors;if(!valid6){break;}}}else {validate28.errors = [{instancePath:instancePath+"/interestApplicationDays/daysInMonth",schemaPath:"#/$defs/DaysInMonthaf30/properties/daysInMonth/type",keyword:"type",params:{type: "array"},message:"must be array"}];return false;}}var valid5 = _errs34 === errors;}else {var valid5 = true;}if(valid5){if(data14.shortMonthHandlingMethod !== undefined){let data17 = data14.shortMonthHandlingMethod;const _errs38 = errors;if(!((data17 === "LAST_DAY_IN_MONTH") || (data17 === "FIRST_DAY_OF_NEXT_MONTH"))){validate28.errors = [{instancePath:instancePath+"/interestApplicationDays/shortMonthHandlingMethod",schemaPath:"#/$defs/DaysInMonthaf30/properties/shortMonthHandlingMethod/enum",keyword:"enum",params:{allowedValues: schema38.properties.shortMonthHandlingMethod.enum},message:"must be equal to one of the allowed values"}];return false;}var valid5 = _errs38 === errors;}else {var valid5 = true;}}}else {validate28.errors = [{instancePath:instancePath+"/interestApplicationDays",schemaPath:"#/$defs/DaysInMonthaf30/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}var valid0 = _errs30 === errors;}else {var valid0 = true;}if(valid0){if(data.interestApplicationMethod !== undefined){let data18 = data.interestApplicationMethod;const _errs39 = errors;if(!(((data18 === "AFTER_DISBURSEMENT") || (data18 === "REPAYMENT_DUE_DATE")) || (data18 === "FIXED_DAYS_OF_MONTH"))){validate28.errors = [{instancePath:instancePath+"/interestApplicationMethod",schemaPath:"#/properties/interestApplicationMethod/enum",keyword:"enum",params:{allowedValues: schema36.properties.interestApplicationMethod.enum},message:"must be equal to one of the allowed values"}];return false;}var valid0 = _errs39 === errors;}else {var valid0 = true;}if(valid0){if(data.interestBalanceCalculationMethod !== undefined){let data19 = data.interestBalanceCalculationMethod;const _errs40 = errors;if(!((data19 === "ONLY_PRINCIPAL") || (data19 === "PRINCIPAL_AND_INTEREST"))){validate28.errors = [{instancePath:instancePath+"/interestBalanceCalculationMethod",schemaPath:"#/properties/interestBalanceCalculationMethod/enum",keyword:"enum",params:{allowedValues: schema36.properties.interestBalanceCalculationMethod.enum},message:"must be equal to one of the allowed values"}];return false;}var valid0 = _errs40 === errors;}else {var valid0 = true;}if(valid0){if(data.interestCalculationMethod !== undefined){let data20 = data.interestCalculationMethod;const _errs41 = errors;if(!((((data20 === "FLAT") || (data20 === "DECLINING_BALANCE")) || (data20 === "DECLINING_BALANCE_DISCOUNTED")) || (data20 === "EQUAL_INSTALLMENTS"))){validate28.errors = [{instancePath:instancePath+"/interestCalculationMethod",schemaPath:"#/properties/interestCalculationMethod/enum",keyword:"enum",params:{allowedValues: schema36.properties.interestCalculationMethod.enum},message:"must be equal to one of the allowed values"}];return false;}var valid0 = _errs41 === errors;}else {var valid0 = true;}if(valid0){if(data.interestChargeFrequency !== undefined){const _errs42 = errors;let valid7;valid7 = false;for(const v0 of schema36.properties.interestChargeFrequency.enum){if(func0(data.interestChargeFrequency, v0)){valid7 = true;break;}}if(!valid7){validate28.errors = [{instancePath:instancePath+"/interestChargeFrequency",schemaPath:"#/properties/interestChargeFrequency/enum",keyword:"enum",params:{allowedValues: schema36.properties.interestChargeFrequency.enum},message:"must be equal to one of the allowed values"}];return false;}var valid0 = _errs42 === errors;}else {var valid0 = true;}if(valid0){if(data.interestRate !== undefined){let data22 = data.interestRate;const _errs43 = errors;if(!((typeof data22 == "number") && (isFinite(data22)))){validate28.errors = [{instancePath:instancePath+"/interestRate",schemaPath:"#/properties/interestRate/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid0 = _errs43 === errors;}else {var valid0 = true;}if(valid0){if(data.interestRateChangePMTAdjustmentThreshold !== undefined){let data23 = data.interestRateChangePMTAdjustmentThreshold;const _errs45 = errors;const _errs46 = errors;if(errors === _errs46){if(data23 && typeof data23 == "object" && !Array.isArray(data23)){if(data23.method !== undefined){let data24 = data23.method;const _errs49 = errors;if(!((data24 === "WORKING_DAYS") || (data24 === "CALENDAR_DAYS"))){validate28.errors = [{instancePath:instancePath+"/interestRateChangePMTAdjustmentThreshold/method",schemaPath:"#/$defs/InterestRateChangePMTAdjustmentThresholdaf30/properties/method/enum",keyword:"enum",params:{allowedValues: schema39.properties.method.enum},message:"must be equal to one of the allowed values"}];return false;}var valid9 = _errs49 === errors;}else {var valid9 = true;}if(valid9){if(data23.numberOfDays !== undefined){let data25 = data23.numberOfDays;const _errs50 = errors;if(!(((typeof data25 == "number") && (!(data25 % 1) && !isNaN(data25))) && (isFinite(data25)))){validate28.errors = [{instancePath:instancePath+"/interestRateChangePMTAdjustmentThreshold/numberOfDays",schemaPath:"#/$defs/InterestRateChangePMTAdjustmentThresholdaf30/properties/numberOfDays/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];return false;}var valid9 = _errs50 === errors;}else {var valid9 = true;}}}else {validate28.errors = [{instancePath:instancePath+"/interestRateChangePMTAdjustmentThreshold",schemaPath:"#/$defs/InterestRateChangePMTAdjustmentThresholdaf30/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}var valid0 = _errs45 === errors;}else {var valid0 = true;}if(valid0){if(data.interestRateReviewCount !== undefined){let data26 = data.interestRateReviewCount;const _errs52 = errors;if(!(((typeof data26 == "number") && (!(data26 % 1) && !isNaN(data26))) && (isFinite(data26)))){validate28.errors = [{instancePath:instancePath+"/interestRateReviewCount",schemaPath:"#/properties/interestRateReviewCount/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];return false;}var valid0 = _errs52 === errors;}else {var valid0 = true;}if(valid0){if(data.interestRateReviewUnit !== undefined){let data27 = data.interestRateReviewUnit;const _errs54 = errors;if(!(((data27 === "DAYS") || (data27 === "WEEKS")) || (data27 === "MONTHS"))){validate28.errors = [{instancePath:instancePath+"/interestRateReviewUnit",schemaPath:"#/properties/interestRateReviewUnit/enum",keyword:"enum",params:{allowedValues: schema36.properties.interestRateReviewUnit.enum},message:"must be equal to one of the allowed values"}];return false;}var valid0 = _errs54 === errors;}else {var valid0 = true;}if(valid0){if(data.interestRateSource !== undefined){let data28 = data.interestRateSource;const _errs55 = errors;if(!((data28 === "FIXED_INTEREST_RATE") || (data28 === "INDEX_INTEREST_RATE"))){validate28.errors = [{instancePath:instancePath+"/interestRateSource",schemaPath:"#/properties/interestRateSource/enum",keyword:"enum",params:{allowedValues: schema36.properties.interestRateSource.enum},message:"must be equal to one of the allowed values"}];return false;}var valid0 = _errs55 === errors;}else {var valid0 = true;}if(valid0){if(data.interestSpread !== undefined){let data29 = data.interestSpread;const _errs56 = errors;if(!((typeof data29 == "number") && (isFinite(data29)))){validate28.errors = [{instancePath:instancePath+"/interestSpread",schemaPath:"#/properties/interestSpread/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid0 = _errs56 === errors;}else {var valid0 = true;}if(valid0){if(data.interestType !== undefined){let data30 = data.interestType;const _errs58 = errors;if(!(((data30 === "SIMPLE_INTEREST") || (data30 === "CAPITALIZED_INTEREST")) || (data30 === "COMPOUNDING_INTEREST"))){validate28.errors = [{instancePath:instancePath+"/interestType",schemaPath:"#/properties/interestType/enum",keyword:"enum",params:{allowedValues: schema36.properties.interestType.enum},message:"must be equal to one of the allowed values"}];return false;}var valid0 = _errs58 === errors;}else {var valid0 = true;}}}}}}}}}}}}}}}}else {validate28.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}validate28.errors = vErrors;return errors === 0;}const schema45 = {"type":"object","title":"ScheduleSettingsaf30","description":"The schedule settings, holds all schedule properties.","properties":{"amortizationPeriod":{"type":"integer","title":"amortizationPeriod","description":"The PMT is calculated as the loan would have [amortizationPeriod] installments."},"billingCycle":{"title":"billingCycle","$ref":"#/$defs/BillingCycleDaysaf30"},"defaultFirstRepaymentDueDateOffset":{"type":"integer","title":"defaultFirstRepaymentDueDateOffset","description":"The default first repayment due date offset, indicates how many days the first repayment due date should be extended(all other due dates from the schedule are relative to first repayment due date - they will also be affected by the offset)"},"fixedDaysOfMonth":{"type":"array","title":"fixedDaysOfMonth","description":"Specifies the days of the month when the repayment due dates should be. Only available if the Repayment Methodology is FIXED_DAYS_OF_MONTH.","items":{"type":"integer"}},"gracePeriod":{"type":"integer","title":"gracePeriod","description":"The grace period. Represents the grace period for loan repayment - in number of installments."},"gracePeriodType":{"title":"gracePeriodType","description":"The grace period type. Representing the type of grace period which is possible for a loan account.","enum":["NONE","PAY_INTEREST_ONLY","INTEREST_FORGIVENESS"]},"hasCustomSchedule":{"type":"boolean","title":"hasCustomSchedule","description":"Flag used when the repayments schedule for the current account was determined by the user, by editing the due dates or the principal due"},"paymentPlan":{"type":"array","title":"paymentPlan","description":"A list of periodic payments for the current loan account.","items":{"$ref":"#/$defs/PeriodicPaymentaf30"}},"periodicPayment":{"type":"number","title":"periodicPayment","description":"The periodic payment amount for the accounts which have balloon payments or Reduce Number of Installments and Optimized Payments"},"previewSchedule":{"title":"previewSchedule","$ref":"#/$defs/RevolvingAccountSettingsaf30"},"principalRepaymentInterval":{"type":"integer","title":"principalRepaymentInterval","description":"The principal repayment interval. Indicates the interval of repayments that the principal has to be paid."},"repaymentInstallments":{"type":"integer","title":"repaymentInstallments","description":"The repayment installments. Represents how many installments are required to pay back the loan."},"repaymentPeriodCount":{"type":"integer","title":"repaymentPeriodCount","description":"The repayment period count. Represents how often the loan is to be repaid: stored based on the type repayment option."},"repaymentPeriodUnit":{"title":"repaymentPeriodUnit","description":"The repayment period unit. Represents the frequency of loan repayment.","enum":["DAYS","WEEKS","MONTHS","YEARS"]},"repaymentScheduleMethod":{"title":"repaymentScheduleMethod","description":"The repayment schedule method. Represents the method that determines whether the schedule will be fixed all over the loan account's life cycle or will be dynamically recomputed when required.","enum":["NONE","FIXED","DYNAMIC"]},"scheduleDueDatesMethod":{"title":"scheduleDueDatesMethod","description":"The schedule due dates method. Represents the methodology used by this account to compute the due dates of the repayments.","enum":["INTERVAL","FIXED_DAYS_OF_MONTH"]},"shortMonthHandlingMethod":{"title":"shortMonthHandlingMethod","description":"The short handling method. Determines how to handle the short months, if they select a fixed day of month > 28. Will be null if no such date is selected and also for the Interval methodology. Only available if the Repayment Methodology is FIXED_DAYS_OF_MONTH.","enum":["LAST_DAY_IN_MONTH","FIRST_DAY_OF_NEXT_MONTH"]}},"required":["gracePeriod"],"additionalProperties":true};const schema46 = {"type":"object","title":"BillingCycleDaysaf30","description":"Defines the billing cycles settings for a loan account","properties":{"days":{"type":"array","title":"days","description":"The billing cycle start days in case it is enabled","items":{"type":"integer"},"uniqueItems":true}},"additionalProperties":true};const schema47 = {"type":"object","title":"PeriodicPaymentaf30","description":"For fixed term loans there is the possibility to define a payment plan. A payment plan consists of multiple periodic payments. This class holds information about a periodic payment.","properties":{"amount":{"type":"number","title":"amount","description":"The PMT value used in periodic payment"},"encodedKey":{"type":"string","title":"encodedKey","description":"The encoded key of the periodic payment, auto generated, unique."},"toInstallment":{"type":"integer","title":"toInstallment","description":"The installment's position up to which the PMT will be used"}},"required":["amount","toInstallment"],"additionalProperties":true};const schema48 = {"type":"object","title":"RevolvingAccountSettingsaf30","description":"The number of previewed instalments for an account","properties":{"numberOfPreviewedInstalments":{"type":"integer","title":"numberOfPreviewedInstalments","description":"The number of previewed instalments"}},"additionalProperties":true};function validate30(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){let vErrors = null;let errors = 0;if(errors === 0){if(data && typeof data == "object" && !Array.isArray(data)){let missing0;if((data.gracePeriod === undefined) && (missing0 = "gracePeriod")){validate30.errors = [{instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];return false;}else {if(data.amortizationPeriod !== undefined){let data0 = data.amortizationPeriod;const _errs2 = errors;if(!(((typeof data0 == "number") && (!(data0 % 1) && !isNaN(data0))) && (isFinite(data0)))){validate30.errors = [{instancePath:instancePath+"/amortizationPeriod",schemaPath:"#/properties/amortizationPeriod/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];return false;}var valid0 = _errs2 === errors;}else {var valid0 = true;}if(valid0){if(data.billingCycle !== undefined){let data1 = data.billingCycle;const _errs4 = errors;const _errs5 = errors;if(errors === _errs5){if(data1 && typeof data1 == "object" && !Array.isArray(data1)){if(data1.days !== undefined){let data2 = data1.days;const _errs8 = errors;if(errors === _errs8){if(Array.isArray(data2)){var valid3 = true;const len0 = data2.length;for(let i0=0; i0<len0; i0++){let data3 = data2[i0];const _errs10 = errors;if(!(((typeof data3 == "number") && (!(data3 % 1) && !isNaN(data3))) && (isFinite(data3)))){validate30.errors = [{instancePath:instancePath+"/billingCycle/days/" + i0,schemaPath:"#/$defs/BillingCycleDaysaf30/properties/days/items/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];return false;}var valid3 = _errs10 === errors;if(!valid3){break;}}if(valid3){let i1 = data2.length;let j0;if(i1 > 1){const indices0 = {};for(;i1--;){let item0 = data2[i1];if(!(((typeof item0 == "number") && (!(item0 % 1) && !isNaN(item0))) && (isFinite(item0)))){continue;}if(typeof indices0[item0] == "number"){j0 = indices0[item0];validate30.errors = [{instancePath:instancePath+"/billingCycle/days",schemaPath:"#/$defs/BillingCycleDaysaf30/properties/days/uniqueItems",keyword:"uniqueItems",params:{i: i1, j: j0},message:"must NOT have duplicate items (items ## "+j0+" and "+i1+" are identical)"}];return false;break;}indices0[item0] = i1;}}}}else {validate30.errors = [{instancePath:instancePath+"/billingCycle/days",schemaPath:"#/$defs/BillingCycleDaysaf30/properties/days/type",keyword:"type",params:{type: "array"},message:"must be array"}];return false;}}}}else {validate30.errors = [{instancePath:instancePath+"/billingCycle",schemaPath:"#/$defs/BillingCycleDaysaf30/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}var valid0 = _errs4 === errors;}else {var valid0 = true;}if(valid0){if(data.defaultFirstRepaymentDueDateOffset !== undefined){let data4 = data.defaultFirstRepaymentDueDateOffset;const _errs12 = errors;if(!(((typeof data4 == "number") && (!(data4 % 1) && !isNaN(data4))) && (isFinite(data4)))){validate30.errors = [{instancePath:instancePath+"/defaultFirstRepaymentDueDateOffset",schemaPath:"#/properties/defaultFirstRepaymentDueDateOffset/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];return false;}var valid0 = _errs12 === errors;}else {var valid0 = true;}if(valid0){if(data.fixedDaysOfMonth !== undefined){let data5 = data.fixedDaysOfMonth;const _errs14 = errors;if(errors === _errs14){if(Array.isArray(data5)){var valid5 = true;const len1 = data5.length;for(let i2=0; i2<len1; i2++){let data6 = data5[i2];const _errs16 = errors;if(!(((typeof data6 == "number") && (!(data6 % 1) && !isNaN(data6))) && (isFinite(data6)))){validate30.errors = [{instancePath:instancePath+"/fixedDaysOfMonth/" + i2,schemaPath:"#/properties/fixedDaysOfMonth/items/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];return false;}var valid5 = _errs16 === errors;if(!valid5){break;}}}else {validate30.errors = [{instancePath:instancePath+"/fixedDaysOfMonth",schemaPath:"#/properties/fixedDaysOfMonth/type",keyword:"type",params:{type: "array"},message:"must be array"}];return false;}}var valid0 = _errs14 === errors;}else {var valid0 = true;}if(valid0){if(data.gracePeriod !== undefined){let data7 = data.gracePeriod;const _errs18 = errors;if(!(((typeof data7 == "number") && (!(data7 % 1) && !isNaN(data7))) && (isFinite(data7)))){validate30.errors = [{instancePath:instancePath+"/gracePeriod",schemaPath:"#/properties/gracePeriod/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];return false;}var valid0 = _errs18 === errors;}else {var valid0 = true;}if(valid0){if(data.gracePeriodType !== undefined){let data8 = data.gracePeriodType;const _errs20 = errors;if(!(((data8 === "NONE") || (data8 === "PAY_INTEREST_ONLY")) || (data8 === "INTEREST_FORGIVENESS"))){validate30.errors = [{instancePath:instancePath+"/gracePeriodType",schemaPath:"#/properties/gracePeriodType/enum",keyword:"enum",params:{allowedValues: schema45.properties.gracePeriodType.enum},message:"must be equal to one of the allowed values"}];return false;}var valid0 = _errs20 === errors;}else {var valid0 = true;}if(valid0){if(data.hasCustomSchedule !== undefined){const _errs21 = errors;if(typeof data.hasCustomSchedule !== "boolean"){validate30.errors = [{instancePath:instancePath+"/hasCustomSchedule",schemaPath:"#/properties/hasCustomSchedule/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"}];return false;}var valid0 = _errs21 === errors;}else {var valid0 = true;}if(valid0){if(data.paymentPlan !== undefined){let data10 = data.paymentPlan;const _errs23 = errors;if(errors === _errs23){if(Array.isArray(data10)){var valid6 = true;const len2 = data10.length;for(let i3=0; i3<len2; i3++){let data11 = data10[i3];const _errs25 = errors;const _errs26 = errors;if(errors === _errs26){if(data11 && typeof data11 == "object" && !Array.isArray(data11)){let missing1;if(((data11.amount === undefined) && (missing1 = "amount")) || ((data11.toInstallment === undefined) && (missing1 = "toInstallment"))){validate30.errors = [{instancePath:instancePath+"/paymentPlan/" + i3,schemaPath:"#/$defs/PeriodicPaymentaf30/required",keyword:"required",params:{missingProperty: missing1},message:"must have required property '"+missing1+"'"}];return false;}else {if(data11.amount !== undefined){let data12 = data11.amount;const _errs29 = errors;if(!((typeof data12 == "number") && (isFinite(data12)))){validate30.errors = [{instancePath:instancePath+"/paymentPlan/" + i3+"/amount",schemaPath:"#/$defs/PeriodicPaymentaf30/properties/amount/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid8 = _errs29 === errors;}else {var valid8 = true;}if(valid8){if(data11.encodedKey !== undefined){const _errs31 = errors;if(typeof data11.encodedKey !== "string"){validate30.errors = [{instancePath:instancePath+"/paymentPlan/" + i3+"/encodedKey",schemaPath:"#/$defs/PeriodicPaymentaf30/properties/encodedKey/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid8 = _errs31 === errors;}else {var valid8 = true;}if(valid8){if(data11.toInstallment !== undefined){let data14 = data11.toInstallment;const _errs33 = errors;if(!(((typeof data14 == "number") && (!(data14 % 1) && !isNaN(data14))) && (isFinite(data14)))){validate30.errors = [{instancePath:instancePath+"/paymentPlan/" + i3+"/toInstallment",schemaPath:"#/$defs/PeriodicPaymentaf30/properties/toInstallment/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];return false;}var valid8 = _errs33 === errors;}else {var valid8 = true;}}}}}else {validate30.errors = [{instancePath:instancePath+"/paymentPlan/" + i3,schemaPath:"#/$defs/PeriodicPaymentaf30/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}var valid6 = _errs25 === errors;if(!valid6){break;}}}else {validate30.errors = [{instancePath:instancePath+"/paymentPlan",schemaPath:"#/properties/paymentPlan/type",keyword:"type",params:{type: "array"},message:"must be array"}];return false;}}var valid0 = _errs23 === errors;}else {var valid0 = true;}if(valid0){if(data.periodicPayment !== undefined){let data15 = data.periodicPayment;const _errs35 = errors;if(!((typeof data15 == "number") && (isFinite(data15)))){validate30.errors = [{instancePath:instancePath+"/periodicPayment",schemaPath:"#/properties/periodicPayment/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid0 = _errs35 === errors;}else {var valid0 = true;}if(valid0){if(data.previewSchedule !== undefined){let data16 = data.previewSchedule;const _errs37 = errors;const _errs38 = errors;if(errors === _errs38){if(data16 && typeof data16 == "object" && !Array.isArray(data16)){if(data16.numberOfPreviewedInstalments !== undefined){let data17 = data16.numberOfPreviewedInstalments;if(!(((typeof data17 == "number") && (!(data17 % 1) && !isNaN(data17))) && (isFinite(data17)))){validate30.errors = [{instancePath:instancePath+"/previewSchedule/numberOfPreviewedInstalments",schemaPath:"#/$defs/RevolvingAccountSettingsaf30/properties/numberOfPreviewedInstalments/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];return false;}}}else {validate30.errors = [{instancePath:instancePath+"/previewSchedule",schemaPath:"#/$defs/RevolvingAccountSettingsaf30/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}var valid0 = _errs37 === errors;}else {var valid0 = true;}if(valid0){if(data.principalRepaymentInterval !== undefined){let data18 = data.principalRepaymentInterval;const _errs43 = errors;if(!(((typeof data18 == "number") && (!(data18 % 1) && !isNaN(data18))) && (isFinite(data18)))){validate30.errors = [{instancePath:instancePath+"/principalRepaymentInterval",schemaPath:"#/properties/principalRepaymentInterval/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];return false;}var valid0 = _errs43 === errors;}else {var valid0 = true;}if(valid0){if(data.repaymentInstallments !== undefined){let data19 = data.repaymentInstallments;const _errs45 = errors;if(!(((typeof data19 == "number") && (!(data19 % 1) && !isNaN(data19))) && (isFinite(data19)))){validate30.errors = [{instancePath:instancePath+"/repaymentInstallments",schemaPath:"#/properties/repaymentInstallments/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];return false;}var valid0 = _errs45 === errors;}else {var valid0 = true;}if(valid0){if(data.repaymentPeriodCount !== undefined){let data20 = data.repaymentPeriodCount;const _errs47 = errors;if(!(((typeof data20 == "number") && (!(data20 % 1) && !isNaN(data20))) && (isFinite(data20)))){validate30.errors = [{instancePath:instancePath+"/repaymentPeriodCount",schemaPath:"#/properties/repaymentPeriodCount/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];return false;}var valid0 = _errs47 === errors;}else {var valid0 = true;}if(valid0){if(data.repaymentPeriodUnit !== undefined){let data21 = data.repaymentPeriodUnit;const _errs49 = errors;if(!((((data21 === "DAYS") || (data21 === "WEEKS")) || (data21 === "MONTHS")) || (data21 === "YEARS"))){validate30.errors = [{instancePath:instancePath+"/repaymentPeriodUnit",schemaPath:"#/properties/repaymentPeriodUnit/enum",keyword:"enum",params:{allowedValues: schema45.properties.repaymentPeriodUnit.enum},message:"must be equal to one of the allowed values"}];return false;}var valid0 = _errs49 === errors;}else {var valid0 = true;}if(valid0){if(data.repaymentScheduleMethod !== undefined){let data22 = data.repaymentScheduleMethod;const _errs50 = errors;if(!(((data22 === "NONE") || (data22 === "FIXED")) || (data22 === "DYNAMIC"))){validate30.errors = [{instancePath:instancePath+"/repaymentScheduleMethod",schemaPath:"#/properties/repaymentScheduleMethod/enum",keyword:"enum",params:{allowedValues: schema45.properties.repaymentScheduleMethod.enum},message:"must be equal to one of the allowed values"}];return false;}var valid0 = _errs50 === errors;}else {var valid0 = true;}if(valid0){if(data.scheduleDueDatesMethod !== undefined){let data23 = data.scheduleDueDatesMethod;const _errs51 = errors;if(!((data23 === "INTERVAL") || (data23 === "FIXED_DAYS_OF_MONTH"))){validate30.errors = [{instancePath:instancePath+"/scheduleDueDatesMethod",schemaPath:"#/properties/scheduleDueDatesMethod/enum",keyword:"enum",params:{allowedValues: schema45.properties.scheduleDueDatesMethod.enum},message:"must be equal to one of the allowed values"}];return false;}var valid0 = _errs51 === errors;}else {var valid0 = true;}if(valid0){if(data.shortMonthHandlingMethod !== undefined){let data24 = data.shortMonthHandlingMethod;const _errs52 = errors;if(!((data24 === "LAST_DAY_IN_MONTH") || (data24 === "FIRST_DAY_OF_NEXT_MONTH"))){validate30.errors = [{instancePath:instancePath+"/shortMonthHandlingMethod",schemaPath:"#/properties/shortMonthHandlingMethod/enum",keyword:"enum",params:{allowedValues: schema45.properties.shortMonthHandlingMethod.enum},message:"must be equal to one of the allowed values"}];return false;}var valid0 = _errs52 === errors;}else {var valid0 = true;}}}}}}}}}}}}}}}}}}}else {validate30.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}validate30.errors = vErrors;return errors === 0;}const schema49 = {"type":"object","title":"LoanTrancheaf30","description":"In some cases organizations may approve loans but not disburse the full amount initially. They would like to spread the disbursement (and risk) over time. Likewise for the client, they may not need the full loan amount up front. They may want to have a loan to buy some equipment for their business but will make one purchase today and another purchase in a few months.  In these cases, they don't need the full amount and wouldn't want to pay interest on cash they don't need yet. A solution for this matter is the usage of disbursement in tranches. This class holds the information required for one of this tranche. ","properties":{"amount":{"type":"number","title":"amount","description":"The amount this tranche has available for disburse"},"disbursementDetails":{"title":"disbursementDetails","$ref":"#/$defs/TrancheDisbursementDetailsaf30"},"encodedKey":{"type":"string","title":"encodedKey","description":"The encoded key of the transaction details , auto generated, unique."},"fees":{"type":"array","title":"fees","description":"Fees that are associated with this tranche","items":{"$ref":"#/$defs/CustomPredefinedFeeaf30"}},"trancheNumber":{"type":"integer","title":"trancheNumber","description":"Index indicating the tranche number"}},"required":["amount"],"additionalProperties":true};const schema50 = {"type":"object","title":"TrancheDisbursementDetailsaf30","description":"The disbursement details regarding a loan tranche.","properties":{"disbursementTransactionKey":{"type":"string","title":"disbursementTransactionKey","description":"The key of the disbursement transaction logged when this tranche was disbursed. This field will be null until the tranche disbursement"},"expectedDisbursementDate":{"type":"string","title":"expectedDisbursementDate","description":"The date when this tranche is supposed to be disbursed (as Organization Time)","format":"date-time"}},"additionalProperties":true};function validate32(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){let vErrors = null;let errors = 0;if(errors === 0){if(data && typeof data == "object" && !Array.isArray(data)){let missing0;if((data.amount === undefined) && (missing0 = "amount")){validate32.errors = [{instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];return false;}else {if(data.amount !== undefined){let data0 = data.amount;const _errs2 = errors;if(!((typeof data0 == "number") && (isFinite(data0)))){validate32.errors = [{instancePath:instancePath+"/amount",schemaPath:"#/properties/amount/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid0 = _errs2 === errors;}else {var valid0 = true;}if(valid0){if(data.disbursementDetails !== undefined){let data1 = data.disbursementDetails;const _errs4 = errors;const _errs5 = errors;if(errors === _errs5){if(data1 && typeof data1 == "object" && !Array.isArray(data1)){if(data1.disbursementTransactionKey !== undefined){const _errs8 = errors;if(typeof data1.disbursementTransactionKey !== "string"){validate32.errors = [{instancePath:instancePath+"/disbursementDetails/disbursementTransactionKey",schemaPath:"#/$defs/TrancheDisbursementDetailsaf30/properties/disbursementTransactionKey/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid2 = _errs8 === errors;}else {var valid2 = true;}if(valid2){if(data1.expectedDisbursementDate !== undefined){const _errs10 = errors;if(errors === _errs10){if(errors === _errs10){if(!(typeof data1.expectedDisbursementDate === "string")){validate32.errors = [{instancePath:instancePath+"/disbursementDetails/expectedDisbursementDate",schemaPath:"#/$defs/TrancheDisbursementDetailsaf30/properties/expectedDisbursementDate/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}}var valid2 = _errs10 === errors;}else {var valid2 = true;}}}else {validate32.errors = [{instancePath:instancePath+"/disbursementDetails",schemaPath:"#/$defs/TrancheDisbursementDetailsaf30/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}var valid0 = _errs4 === errors;}else {var valid0 = true;}if(valid0){if(data.encodedKey !== undefined){const _errs12 = errors;if(typeof data.encodedKey !== "string"){validate32.errors = [{instancePath:instancePath+"/encodedKey",schemaPath:"#/properties/encodedKey/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid0 = _errs12 === errors;}else {var valid0 = true;}if(valid0){if(data.fees !== undefined){let data5 = data.fees;const _errs14 = errors;if(errors === _errs14){if(Array.isArray(data5)){var valid3 = true;const len0 = data5.length;for(let i0=0; i0<len0; i0++){let data6 = data5[i0];const _errs16 = errors;const _errs17 = errors;if(errors === _errs17){if(data6 && typeof data6 == "object" && !Array.isArray(data6)){if(data6.amount !== undefined){let data7 = data6.amount;const _errs20 = errors;if(!((typeof data7 == "number") && (isFinite(data7)))){validate32.errors = [{instancePath:instancePath+"/fees/" + i0+"/amount",schemaPath:"#/$defs/CustomPredefinedFeeaf30/properties/amount/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid5 = _errs20 === errors;}else {var valid5 = true;}if(valid5){if(data6.encodedKey !== undefined){const _errs22 = errors;if(typeof data6.encodedKey !== "string"){validate32.errors = [{instancePath:instancePath+"/fees/" + i0+"/encodedKey",schemaPath:"#/$defs/CustomPredefinedFeeaf30/properties/encodedKey/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid5 = _errs22 === errors;}else {var valid5 = true;}if(valid5){if(data6.percentage !== undefined){let data9 = data6.percentage;const _errs24 = errors;if(!((typeof data9 == "number") && (isFinite(data9)))){validate32.errors = [{instancePath:instancePath+"/fees/" + i0+"/percentage",schemaPath:"#/$defs/CustomPredefinedFeeaf30/properties/percentage/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid5 = _errs24 === errors;}else {var valid5 = true;}if(valid5){if(data6.predefinedFeeEncodedKey !== undefined){const _errs26 = errors;if(typeof data6.predefinedFeeEncodedKey !== "string"){validate32.errors = [{instancePath:instancePath+"/fees/" + i0+"/predefinedFeeEncodedKey",schemaPath:"#/$defs/CustomPredefinedFeeaf30/properties/predefinedFeeEncodedKey/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid5 = _errs26 === errors;}else {var valid5 = true;}}}}}else {validate32.errors = [{instancePath:instancePath+"/fees/" + i0,schemaPath:"#/$defs/CustomPredefinedFeeaf30/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}var valid3 = _errs16 === errors;if(!valid3){break;}}}else {validate32.errors = [{instancePath:instancePath+"/fees",schemaPath:"#/properties/fees/type",keyword:"type",params:{type: "array"},message:"must be array"}];return false;}}var valid0 = _errs14 === errors;}else {var valid0 = true;}if(valid0){if(data.trancheNumber !== undefined){let data11 = data.trancheNumber;const _errs28 = errors;if(!(((typeof data11 == "number") && (!(data11 % 1) && !isNaN(data11))) && (isFinite(data11)))){validate32.errors = [{instancePath:instancePath+"/trancheNumber",schemaPath:"#/properties/trancheNumber/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];return false;}var valid0 = _errs28 === errors;}else {var valid0 = true;}}}}}}}else {validate32.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}validate32.errors = vErrors;return errors === 0;}function validate23(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){let vErrors = null;let errors = 0;if(errors === 0){if(data && typeof data == "object" && !Array.isArray(data)){let missing0;let valid0 = true;for( missing0 of schema25.required){valid0 = data[missing0] !== undefined;if(!valid0){validate23.errors = [{instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];return false;break;}}if(valid0){if(data.accountArrearsSettings !== undefined){let data0 = data.accountArrearsSettings;const _errs2 = errors;const _errs3 = errors;if(errors === _errs3){if(data0 && typeof data0 == "object" && !Array.isArray(data0)){if(data0.dateCalculationMethod !== undefined){let data1 = data0.dateCalculationMethod;const _errs6 = errors;if(!(((data1 === "ACCOUNT_FIRST_WENT_TO_ARREARS") || (data1 === "LAST_LATE_REPAYMENT")) || (data1 === "ACCOUNT_FIRST_BREACHED_MATERIALITY_THRESHOLD"))){validate23.errors = [{instancePath:instancePath+"/accountArrearsSettings/dateCalculationMethod",schemaPath:"#/$defs/AccountArrearsSettingsaf30/properties/dateCalculationMethod/enum",keyword:"enum",params:{allowedValues: schema26.properties.dateCalculationMethod.enum},message:"must be equal to one of the allowed values"}];return false;}var valid3 = _errs6 === errors;}else {var valid3 = true;}if(valid3){if(data0.encodedKey !== undefined){const _errs7 = errors;if(typeof data0.encodedKey !== "string"){validate23.errors = [{instancePath:instancePath+"/accountArrearsSettings/encodedKey",schemaPath:"#/$defs/AccountArrearsSettingsaf30/properties/encodedKey/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid3 = _errs7 === errors;}else {var valid3 = true;}if(valid3){if(data0.monthlyToleranceDay !== undefined){let data3 = data0.monthlyToleranceDay;const _errs9 = errors;if(!(((typeof data3 == "number") && (!(data3 % 1) && !isNaN(data3))) && (isFinite(data3)))){validate23.errors = [{instancePath:instancePath+"/accountArrearsSettings/monthlyToleranceDay",schemaPath:"#/$defs/AccountArrearsSettingsaf30/properties/monthlyToleranceDay/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];return false;}var valid3 = _errs9 === errors;}else {var valid3 = true;}if(valid3){if(data0.nonWorkingDaysMethod !== undefined){let data4 = data0.nonWorkingDaysMethod;const _errs11 = errors;if(!((data4 === "INCLUDED") || (data4 === "EXCLUDED"))){validate23.errors = [{instancePath:instancePath+"/accountArrearsSettings/nonWorkingDaysMethod",schemaPath:"#/$defs/AccountArrearsSettingsaf30/properties/nonWorkingDaysMethod/enum",keyword:"enum",params:{allowedValues: schema26.properties.nonWorkingDaysMethod.enum},message:"must be equal to one of the allowed values"}];return false;}var valid3 = _errs11 === errors;}else {var valid3 = true;}if(valid3){if(data0.toleranceCalculationMethod !== undefined){let data5 = data0.toleranceCalculationMethod;const _errs12 = errors;if(!((data5 === "ARREARS_TOLERANCE_PERIOD") || (data5 === "MONTHLY_ARREARS_TOLERANCE_DAY"))){validate23.errors = [{instancePath:instancePath+"/accountArrearsSettings/toleranceCalculationMethod",schemaPath:"#/$defs/AccountArrearsSettingsaf30/properties/toleranceCalculationMethod/enum",keyword:"enum",params:{allowedValues: schema26.properties.toleranceCalculationMethod.enum},message:"must be equal to one of the allowed values"}];return false;}var valid3 = _errs12 === errors;}else {var valid3 = true;}if(valid3){if(data0.toleranceFloorAmount !== undefined){let data6 = data0.toleranceFloorAmount;const _errs13 = errors;if(!((typeof data6 == "number") && (isFinite(data6)))){validate23.errors = [{instancePath:instancePath+"/accountArrearsSettings/toleranceFloorAmount",schemaPath:"#/$defs/AccountArrearsSettingsaf30/properties/toleranceFloorAmount/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid3 = _errs13 === errors;}else {var valid3 = true;}if(valid3){if(data0.tolerancePercentageOfOutstandingPrincipal !== undefined){let data7 = data0.tolerancePercentageOfOutstandingPrincipal;const _errs15 = errors;if(!((typeof data7 == "number") && (isFinite(data7)))){validate23.errors = [{instancePath:instancePath+"/accountArrearsSettings/tolerancePercentageOfOutstandingPrincipal",schemaPath:"#/$defs/AccountArrearsSettingsaf30/properties/tolerancePercentageOfOutstandingPrincipal/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid3 = _errs15 === errors;}else {var valid3 = true;}if(valid3){if(data0.tolerancePeriod !== undefined){let data8 = data0.tolerancePeriod;const _errs17 = errors;if(!(((typeof data8 == "number") && (!(data8 % 1) && !isNaN(data8))) && (isFinite(data8)))){validate23.errors = [{instancePath:instancePath+"/accountArrearsSettings/tolerancePeriod",schemaPath:"#/$defs/AccountArrearsSettingsaf30/properties/tolerancePeriod/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];return false;}var valid3 = _errs17 === errors;}else {var valid3 = true;}}}}}}}}}else {validate23.errors = [{instancePath:instancePath+"/accountArrearsSettings",schemaPath:"#/$defs/AccountArrearsSettingsaf30/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}var valid1 = _errs2 === errors;}else {var valid1 = true;}if(valid1){if(data.accountHolderKey !== undefined){const _errs19 = errors;if(typeof data.accountHolderKey !== "string"){validate23.errors = [{instancePath:instancePath+"/accountHolderKey",schemaPath:"#/properties/accountHolderKey/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid1 = _errs19 === errors;}else {var valid1 = true;}if(valid1){if(data.accountHolderType !== undefined){let data10 = data.accountHolderType;const _errs21 = errors;if(!((data10 === "CLIENT") || (data10 === "GROUP"))){validate23.errors = [{instancePath:instancePath+"/accountHolderType",schemaPath:"#/properties/accountHolderType/enum",keyword:"enum",params:{allowedValues: schema25.properties.accountHolderType.enum},message:"must be equal to one of the allowed values"}];return false;}var valid1 = _errs21 === errors;}else {var valid1 = true;}if(valid1){if(data.accountState !== undefined){const _errs22 = errors;let valid4;valid4 = false;for(const v0 of schema25.properties.accountState.enum){if(func0(data.accountState, v0)){valid4 = true;break;}}if(!valid4){validate23.errors = [{instancePath:instancePath+"/accountState",schemaPath:"#/properties/accountState/enum",keyword:"enum",params:{allowedValues: schema25.properties.accountState.enum},message:"must be equal to one of the allowed values"}];return false;}var valid1 = _errs22 === errors;}else {var valid1 = true;}if(valid1){if(data.accountSubState !== undefined){const _errs23 = errors;let valid5;valid5 = false;for(const v1 of schema25.properties.accountSubState.enum){if(func0(data.accountSubState, v1)){valid5 = true;break;}}if(!valid5){validate23.errors = [{instancePath:instancePath+"/accountSubState",schemaPath:"#/properties/accountSubState/enum",keyword:"enum",params:{allowedValues: schema25.properties.accountSubState.enum},message:"must be equal to one of the allowed values"}];return false;}var valid1 = _errs23 === errors;}else {var valid1 = true;}if(valid1){if(data.accruedInterest !== undefined){let data13 = data.accruedInterest;const _errs24 = errors;if(!((typeof data13 == "number") && (isFinite(data13)))){validate23.errors = [{instancePath:instancePath+"/accruedInterest",schemaPath:"#/properties/accruedInterest/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid1 = _errs24 === errors;}else {var valid1 = true;}if(valid1){if(data.accruedPenalty !== undefined){let data14 = data.accruedPenalty;const _errs26 = errors;if(!((typeof data14 == "number") && (isFinite(data14)))){validate23.errors = [{instancePath:instancePath+"/accruedPenalty",schemaPath:"#/properties/accruedPenalty/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid1 = _errs26 === errors;}else {var valid1 = true;}if(valid1){if(data.activationTransactionKey !== undefined){const _errs28 = errors;if(typeof data.activationTransactionKey !== "string"){validate23.errors = [{instancePath:instancePath+"/activationTransactionKey",schemaPath:"#/properties/activationTransactionKey/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid1 = _errs28 === errors;}else {var valid1 = true;}if(valid1){if(data.allowOffset !== undefined){const _errs30 = errors;if(typeof data.allowOffset !== "boolean"){validate23.errors = [{instancePath:instancePath+"/allowOffset",schemaPath:"#/properties/allowOffset/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"}];return false;}var valid1 = _errs30 === errors;}else {var valid1 = true;}if(valid1){if(data.approvedDate !== undefined){const _errs32 = errors;if(errors === _errs32){if(errors === _errs32){if(!(typeof data.approvedDate === "string")){validate23.errors = [{instancePath:instancePath+"/approvedDate",schemaPath:"#/properties/approvedDate/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}}var valid1 = _errs32 === errors;}else {var valid1 = true;}if(valid1){if(data.arrearsTolerancePeriod !== undefined){let data18 = data.arrearsTolerancePeriod;const _errs34 = errors;if(!(((typeof data18 == "number") && (!(data18 % 1) && !isNaN(data18))) && (isFinite(data18)))){validate23.errors = [{instancePath:instancePath+"/arrearsTolerancePeriod",schemaPath:"#/properties/arrearsTolerancePeriod/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];return false;}var valid1 = _errs34 === errors;}else {var valid1 = true;}if(valid1){if(data.assets !== undefined){let data19 = data.assets;const _errs36 = errors;if(errors === _errs36){if(Array.isArray(data19)){var valid6 = true;const len0 = data19.length;for(let i0=0; i0<len0; i0++){const _errs38 = errors;if(!(validate24(data19[i0], {instancePath:instancePath+"/assets/" + i0,parentData:data19,parentDataProperty:i0,rootData}))){vErrors = vErrors === null ? validate24.errors : vErrors.concat(validate24.errors);errors = vErrors.length;}var valid6 = _errs38 === errors;if(!valid6){break;}}}else {validate23.errors = [{instancePath:instancePath+"/assets",schemaPath:"#/properties/assets/type",keyword:"type",params:{type: "array"},message:"must be array"}];return false;}}var valid1 = _errs36 === errors;}else {var valid1 = true;}if(valid1){if(data.assignedBranchKey !== undefined){const _errs39 = errors;if(typeof data.assignedBranchKey !== "string"){validate23.errors = [{instancePath:instancePath+"/assignedBranchKey",schemaPath:"#/properties/assignedBranchKey/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid1 = _errs39 === errors;}else {var valid1 = true;}if(valid1){if(data.assignedCentreKey !== undefined){const _errs41 = errors;if(typeof data.assignedCentreKey !== "string"){validate23.errors = [{instancePath:instancePath+"/assignedCentreKey",schemaPath:"#/properties/assignedCentreKey/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid1 = _errs41 === errors;}else {var valid1 = true;}if(valid1){if(data.assignedUserKey !== undefined){const _errs43 = errors;if(typeof data.assignedUserKey !== "string"){validate23.errors = [{instancePath:instancePath+"/assignedUserKey",schemaPath:"#/properties/assignedUserKey/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid1 = _errs43 === errors;}else {var valid1 = true;}if(valid1){if(data.balances !== undefined){let data24 = data.balances;const _errs45 = errors;const _errs46 = errors;if(errors === _errs46){if(data24 && typeof data24 == "object" && !Array.isArray(data24)){if(data24.feesBalance !== undefined){let data25 = data24.feesBalance;const _errs49 = errors;if(!((typeof data25 == "number") && (isFinite(data25)))){validate23.errors = [{instancePath:instancePath+"/balances/feesBalance",schemaPath:"#/$defs/Balancesaf30/properties/feesBalance/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid8 = _errs49 === errors;}else {var valid8 = true;}if(valid8){if(data24.feesDue !== undefined){let data26 = data24.feesDue;const _errs51 = errors;if(!((typeof data26 == "number") && (isFinite(data26)))){validate23.errors = [{instancePath:instancePath+"/balances/feesDue",schemaPath:"#/$defs/Balancesaf30/properties/feesDue/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid8 = _errs51 === errors;}else {var valid8 = true;}if(valid8){if(data24.feesPaid !== undefined){let data27 = data24.feesPaid;const _errs53 = errors;if(!((typeof data27 == "number") && (isFinite(data27)))){validate23.errors = [{instancePath:instancePath+"/balances/feesPaid",schemaPath:"#/$defs/Balancesaf30/properties/feesPaid/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid8 = _errs53 === errors;}else {var valid8 = true;}if(valid8){if(data24.holdBalance !== undefined){let data28 = data24.holdBalance;const _errs55 = errors;if(!((typeof data28 == "number") && (isFinite(data28)))){validate23.errors = [{instancePath:instancePath+"/balances/holdBalance",schemaPath:"#/$defs/Balancesaf30/properties/holdBalance/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid8 = _errs55 === errors;}else {var valid8 = true;}if(valid8){if(data24.interestBalance !== undefined){let data29 = data24.interestBalance;const _errs57 = errors;if(!((typeof data29 == "number") && (isFinite(data29)))){validate23.errors = [{instancePath:instancePath+"/balances/interestBalance",schemaPath:"#/$defs/Balancesaf30/properties/interestBalance/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid8 = _errs57 === errors;}else {var valid8 = true;}if(valid8){if(data24.interestDue !== undefined){let data30 = data24.interestDue;const _errs59 = errors;if(!((typeof data30 == "number") && (isFinite(data30)))){validate23.errors = [{instancePath:instancePath+"/balances/interestDue",schemaPath:"#/$defs/Balancesaf30/properties/interestDue/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid8 = _errs59 === errors;}else {var valid8 = true;}if(valid8){if(data24.interestFromArrearsBalance !== undefined){let data31 = data24.interestFromArrearsBalance;const _errs61 = errors;if(!((typeof data31 == "number") && (isFinite(data31)))){validate23.errors = [{instancePath:instancePath+"/balances/interestFromArrearsBalance",schemaPath:"#/$defs/Balancesaf30/properties/interestFromArrearsBalance/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid8 = _errs61 === errors;}else {var valid8 = true;}if(valid8){if(data24.interestFromArrearsDue !== undefined){let data32 = data24.interestFromArrearsDue;const _errs63 = errors;if(!((typeof data32 == "number") && (isFinite(data32)))){validate23.errors = [{instancePath:instancePath+"/balances/interestFromArrearsDue",schemaPath:"#/$defs/Balancesaf30/properties/interestFromArrearsDue/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid8 = _errs63 === errors;}else {var valid8 = true;}if(valid8){if(data24.interestFromArrearsPaid !== undefined){let data33 = data24.interestFromArrearsPaid;const _errs65 = errors;if(!((typeof data33 == "number") && (isFinite(data33)))){validate23.errors = [{instancePath:instancePath+"/balances/interestFromArrearsPaid",schemaPath:"#/$defs/Balancesaf30/properties/interestFromArrearsPaid/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid8 = _errs65 === errors;}else {var valid8 = true;}if(valid8){if(data24.interestPaid !== undefined){let data34 = data24.interestPaid;const _errs67 = errors;if(!((typeof data34 == "number") && (isFinite(data34)))){validate23.errors = [{instancePath:instancePath+"/balances/interestPaid",schemaPath:"#/$defs/Balancesaf30/properties/interestPaid/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid8 = _errs67 === errors;}else {var valid8 = true;}if(valid8){if(data24.penaltyBalance !== undefined){let data35 = data24.penaltyBalance;const _errs69 = errors;if(!((typeof data35 == "number") && (isFinite(data35)))){validate23.errors = [{instancePath:instancePath+"/balances/penaltyBalance",schemaPath:"#/$defs/Balancesaf30/properties/penaltyBalance/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid8 = _errs69 === errors;}else {var valid8 = true;}if(valid8){if(data24.penaltyDue !== undefined){let data36 = data24.penaltyDue;const _errs71 = errors;if(!((typeof data36 == "number") && (isFinite(data36)))){validate23.errors = [{instancePath:instancePath+"/balances/penaltyDue",schemaPath:"#/$defs/Balancesaf30/properties/penaltyDue/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid8 = _errs71 === errors;}else {var valid8 = true;}if(valid8){if(data24.penaltyPaid !== undefined){let data37 = data24.penaltyPaid;const _errs73 = errors;if(!((typeof data37 == "number") && (isFinite(data37)))){validate23.errors = [{instancePath:instancePath+"/balances/penaltyPaid",schemaPath:"#/$defs/Balancesaf30/properties/penaltyPaid/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid8 = _errs73 === errors;}else {var valid8 = true;}if(valid8){if(data24.principalBalance !== undefined){let data38 = data24.principalBalance;const _errs75 = errors;if(!((typeof data38 == "number") && (isFinite(data38)))){validate23.errors = [{instancePath:instancePath+"/balances/principalBalance",schemaPath:"#/$defs/Balancesaf30/properties/principalBalance/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid8 = _errs75 === errors;}else {var valid8 = true;}if(valid8){if(data24.principalDue !== undefined){let data39 = data24.principalDue;const _errs77 = errors;if(!((typeof data39 == "number") && (isFinite(data39)))){validate23.errors = [{instancePath:instancePath+"/balances/principalDue",schemaPath:"#/$defs/Balancesaf30/properties/principalDue/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid8 = _errs77 === errors;}else {var valid8 = true;}if(valid8){if(data24.principalPaid !== undefined){let data40 = data24.principalPaid;const _errs79 = errors;if(!((typeof data40 == "number") && (isFinite(data40)))){validate23.errors = [{instancePath:instancePath+"/balances/principalPaid",schemaPath:"#/$defs/Balancesaf30/properties/principalPaid/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid8 = _errs79 === errors;}else {var valid8 = true;}if(valid8){if(data24.redrawBalance !== undefined){let data41 = data24.redrawBalance;const _errs81 = errors;if(!((typeof data41 == "number") && (isFinite(data41)))){validate23.errors = [{instancePath:instancePath+"/balances/redrawBalance",schemaPath:"#/$defs/Balancesaf30/properties/redrawBalance/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid8 = _errs81 === errors;}else {var valid8 = true;}}}}}}}}}}}}}}}}}}else {validate23.errors = [{instancePath:instancePath+"/balances",schemaPath:"#/$defs/Balancesaf30/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}var valid1 = _errs45 === errors;}else {var valid1 = true;}if(valid1){if(data.closedDate !== undefined){const _errs83 = errors;if(errors === _errs83){if(errors === _errs83){if(!(typeof data.closedDate === "string")){validate23.errors = [{instancePath:instancePath+"/closedDate",schemaPath:"#/properties/closedDate/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}}var valid1 = _errs83 === errors;}else {var valid1 = true;}if(valid1){if(data.creationDate !== undefined){const _errs85 = errors;if(errors === _errs85){if(errors === _errs85){if(!(typeof data.creationDate === "string")){validate23.errors = [{instancePath:instancePath+"/creationDate",schemaPath:"#/properties/creationDate/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}}var valid1 = _errs85 === errors;}else {var valid1 = true;}if(valid1){if(data.creditArrangementKey !== undefined){const _errs87 = errors;if(typeof data.creditArrangementKey !== "string"){validate23.errors = [{instancePath:instancePath+"/creditArrangementKey",schemaPath:"#/properties/creditArrangementKey/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid1 = _errs87 === errors;}else {var valid1 = true;}if(valid1){if(data.currency !== undefined){let data45 = data.currency;const _errs89 = errors;const _errs90 = errors;if(errors === _errs90){if(data45 && typeof data45 == "object" && !Array.isArray(data45)){if(data45.code !== undefined){const _errs93 = errors;let valid11;valid11 = false;for(const v2 of schema28.properties.code.enum){if(func0(data45.code, v2)){valid11 = true;break;}}if(!valid11){validate23.errors = [{instancePath:instancePath+"/currency/code",schemaPath:"#/$defs/Currencyaf30/properties/code/enum",keyword:"enum",params:{allowedValues: schema28.properties.code.enum},message:"must be equal to one of the allowed values"}];return false;}var valid10 = _errs93 === errors;}else {var valid10 = true;}if(valid10){if(data45.currencyCode !== undefined){const _errs94 = errors;if(typeof data45.currencyCode !== "string"){validate23.errors = [{instancePath:instancePath+"/currency/currencyCode",schemaPath:"#/$defs/Currencyaf30/properties/currencyCode/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid10 = _errs94 === errors;}else {var valid10 = true;}}}else {validate23.errors = [{instancePath:instancePath+"/currency",schemaPath:"#/$defs/Currencyaf30/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}var valid1 = _errs89 === errors;}else {var valid1 = true;}if(valid1){if(data.daysInArrears !== undefined){let data48 = data.daysInArrears;const _errs96 = errors;if(!(((typeof data48 == "number") && (!(data48 % 1) && !isNaN(data48))) && (isFinite(data48)))){validate23.errors = [{instancePath:instancePath+"/daysInArrears",schemaPath:"#/properties/daysInArrears/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];return false;}var valid1 = _errs96 === errors;}else {var valid1 = true;}if(valid1){if(data.daysLate !== undefined){let data49 = data.daysLate;const _errs98 = errors;if(!(((typeof data49 == "number") && (!(data49 % 1) && !isNaN(data49))) && (isFinite(data49)))){validate23.errors = [{instancePath:instancePath+"/daysLate",schemaPath:"#/properties/daysLate/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];return false;}var valid1 = _errs98 === errors;}else {var valid1 = true;}if(valid1){if(data.disbursementDetails !== undefined){const _errs100 = errors;if(!(validate26(data.disbursementDetails, {instancePath:instancePath+"/disbursementDetails",parentData:data,parentDataProperty:"disbursementDetails",rootData}))){vErrors = vErrors === null ? validate26.errors : vErrors.concat(validate26.errors);errors = vErrors.length;}var valid1 = _errs100 === errors;}else {var valid1 = true;}if(valid1){if(data.encodedKey !== undefined){const _errs101 = errors;if(typeof data.encodedKey !== "string"){validate23.errors = [{instancePath:instancePath+"/encodedKey",schemaPath:"#/properties/encodedKey/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid1 = _errs101 === errors;}else {var valid1 = true;}if(valid1){if(data.fundingSources !== undefined){let data52 = data.fundingSources;const _errs103 = errors;if(errors === _errs103){if(Array.isArray(data52)){var valid12 = true;const len1 = data52.length;for(let i1=0; i1<len1; i1++){let data53 = data52[i1];const _errs105 = errors;const _errs106 = errors;if(errors === _errs106){if(data53 && typeof data53 == "object" && !Array.isArray(data53)){let missing1;if((((data53.amount === undefined) && (missing1 = "amount")) || ((data53.guarantorKey === undefined) && (missing1 = "guarantorKey"))) || ((data53.guarantorType === undefined) && (missing1 = "guarantorType"))){validate23.errors = [{instancePath:instancePath+"/fundingSources/" + i1,schemaPath:"#/$defs/InvestorFundaf30/required",keyword:"required",params:{missingProperty: missing1},message:"must have required property '"+missing1+"'"}];return false;}else {if(data53.amount !== undefined){let data54 = data53.amount;const _errs109 = errors;if(!((typeof data54 == "number") && (isFinite(data54)))){validate23.errors = [{instancePath:instancePath+"/fundingSources/" + i1+"/amount",schemaPath:"#/$defs/InvestorFundaf30/properties/amount/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid14 = _errs109 === errors;}else {var valid14 = true;}if(valid14){if(data53.assetName !== undefined){const _errs111 = errors;if(typeof data53.assetName !== "string"){validate23.errors = [{instancePath:instancePath+"/fundingSources/" + i1+"/assetName",schemaPath:"#/$defs/InvestorFundaf30/properties/assetName/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid14 = _errs111 === errors;}else {var valid14 = true;}if(valid14){if(data53.depositAccountKey !== undefined){const _errs113 = errors;if(typeof data53.depositAccountKey !== "string"){validate23.errors = [{instancePath:instancePath+"/fundingSources/" + i1+"/depositAccountKey",schemaPath:"#/$defs/InvestorFundaf30/properties/depositAccountKey/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid14 = _errs113 === errors;}else {var valid14 = true;}if(valid14){if(data53.encodedKey !== undefined){const _errs115 = errors;if(typeof data53.encodedKey !== "string"){validate23.errors = [{instancePath:instancePath+"/fundingSources/" + i1+"/encodedKey",schemaPath:"#/$defs/InvestorFundaf30/properties/encodedKey/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid14 = _errs115 === errors;}else {var valid14 = true;}if(valid14){if(data53.guarantorKey !== undefined){const _errs117 = errors;if(typeof data53.guarantorKey !== "string"){validate23.errors = [{instancePath:instancePath+"/fundingSources/" + i1+"/guarantorKey",schemaPath:"#/$defs/InvestorFundaf30/properties/guarantorKey/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid14 = _errs117 === errors;}else {var valid14 = true;}if(valid14){if(data53.guarantorType !== undefined){let data59 = data53.guarantorType;const _errs119 = errors;if(!((data59 === "CLIENT") || (data59 === "GROUP"))){validate23.errors = [{instancePath:instancePath+"/fundingSources/" + i1+"/guarantorType",schemaPath:"#/$defs/InvestorFundaf30/properties/guarantorType/enum",keyword:"enum",params:{allowedValues: schema34.properties.guarantorType.enum},message:"must be equal to one of the allowed values"}];return false;}var valid14 = _errs119 === errors;}else {var valid14 = true;}if(valid14){if(data53.id !== undefined){const _errs120 = errors;if(typeof data53.id !== "string"){validate23.errors = [{instancePath:instancePath+"/fundingSources/" + i1+"/id",schemaPath:"#/$defs/InvestorFundaf30/properties/id/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid14 = _errs120 === errors;}else {var valid14 = true;}if(valid14){if(data53.interestCommission !== undefined){let data61 = data53.interestCommission;const _errs122 = errors;if(!((typeof data61 == "number") && (isFinite(data61)))){validate23.errors = [{instancePath:instancePath+"/fundingSources/" + i1+"/interestCommission",schemaPath:"#/$defs/InvestorFundaf30/properties/interestCommission/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid14 = _errs122 === errors;}else {var valid14 = true;}if(valid14){if(data53.sharePercentage !== undefined){let data62 = data53.sharePercentage;const _errs124 = errors;if(!((typeof data62 == "number") && (isFinite(data62)))){validate23.errors = [{instancePath:instancePath+"/fundingSources/" + i1+"/sharePercentage",schemaPath:"#/$defs/InvestorFundaf30/properties/sharePercentage/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid14 = _errs124 === errors;}else {var valid14 = true;}}}}}}}}}}}else {validate23.errors = [{instancePath:instancePath+"/fundingSources/" + i1,schemaPath:"#/$defs/InvestorFundaf30/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}var valid12 = _errs105 === errors;if(!valid12){break;}}}else {validate23.errors = [{instancePath:instancePath+"/fundingSources",schemaPath:"#/properties/fundingSources/type",keyword:"type",params:{type: "array"},message:"must be array"}];return false;}}var valid1 = _errs103 === errors;}else {var valid1 = true;}if(valid1){if(data.futurePaymentsAcceptance !== undefined){let data63 = data.futurePaymentsAcceptance;const _errs126 = errors;if(!(((data63 === "NO_FUTURE_PAYMENTS") || (data63 === "ACCEPT_FUTURE_PAYMENTS")) || (data63 === "ACCEPT_OVERPAYMENTS"))){validate23.errors = [{instancePath:instancePath+"/futurePaymentsAcceptance",schemaPath:"#/properties/futurePaymentsAcceptance/enum",keyword:"enum",params:{allowedValues: schema25.properties.futurePaymentsAcceptance.enum},message:"must be equal to one of the allowed values"}];return false;}var valid1 = _errs126 === errors;}else {var valid1 = true;}if(valid1){if(data.guarantors !== undefined){let data64 = data.guarantors;const _errs127 = errors;if(errors === _errs127){if(Array.isArray(data64)){var valid15 = true;const len2 = data64.length;for(let i2=0; i2<len2; i2++){let data65 = data64[i2];const _errs129 = errors;const _errs130 = errors;if(errors === _errs130){if(data65 && typeof data65 == "object" && !Array.isArray(data65)){let missing2;if((((data65.amount === undefined) && (missing2 = "amount")) || ((data65.guarantorKey === undefined) && (missing2 = "guarantorKey"))) || ((data65.guarantorType === undefined) && (missing2 = "guarantorType"))){validate23.errors = [{instancePath:instancePath+"/guarantors/" + i2,schemaPath:"#/$defs/Guarantoraf30/required",keyword:"required",params:{missingProperty: missing2},message:"must have required property '"+missing2+"'"}];return false;}else {if(data65.amount !== undefined){let data66 = data65.amount;const _errs133 = errors;if(!((typeof data66 == "number") && (isFinite(data66)))){validate23.errors = [{instancePath:instancePath+"/guarantors/" + i2+"/amount",schemaPath:"#/$defs/Guarantoraf30/properties/amount/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid17 = _errs133 === errors;}else {var valid17 = true;}if(valid17){if(data65.assetName !== undefined){const _errs135 = errors;if(typeof data65.assetName !== "string"){validate23.errors = [{instancePath:instancePath+"/guarantors/" + i2+"/assetName",schemaPath:"#/$defs/Guarantoraf30/properties/assetName/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid17 = _errs135 === errors;}else {var valid17 = true;}if(valid17){if(data65.depositAccountKey !== undefined){const _errs137 = errors;if(typeof data65.depositAccountKey !== "string"){validate23.errors = [{instancePath:instancePath+"/guarantors/" + i2+"/depositAccountKey",schemaPath:"#/$defs/Guarantoraf30/properties/depositAccountKey/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid17 = _errs137 === errors;}else {var valid17 = true;}if(valid17){if(data65.encodedKey !== undefined){const _errs139 = errors;if(typeof data65.encodedKey !== "string"){validate23.errors = [{instancePath:instancePath+"/guarantors/" + i2+"/encodedKey",schemaPath:"#/$defs/Guarantoraf30/properties/encodedKey/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid17 = _errs139 === errors;}else {var valid17 = true;}if(valid17){if(data65.guarantorKey !== undefined){const _errs141 = errors;if(typeof data65.guarantorKey !== "string"){validate23.errors = [{instancePath:instancePath+"/guarantors/" + i2+"/guarantorKey",schemaPath:"#/$defs/Guarantoraf30/properties/guarantorKey/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid17 = _errs141 === errors;}else {var valid17 = true;}if(valid17){if(data65.guarantorType !== undefined){let data71 = data65.guarantorType;const _errs143 = errors;if(!((data71 === "CLIENT") || (data71 === "GROUP"))){validate23.errors = [{instancePath:instancePath+"/guarantors/" + i2+"/guarantorType",schemaPath:"#/$defs/Guarantoraf30/properties/guarantorType/enum",keyword:"enum",params:{allowedValues: schema35.properties.guarantorType.enum},message:"must be equal to one of the allowed values"}];return false;}var valid17 = _errs143 === errors;}else {var valid17 = true;}}}}}}}}else {validate23.errors = [{instancePath:instancePath+"/guarantors/" + i2,schemaPath:"#/$defs/Guarantoraf30/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}var valid15 = _errs129 === errors;if(!valid15){break;}}}else {validate23.errors = [{instancePath:instancePath+"/guarantors",schemaPath:"#/properties/guarantors/type",keyword:"type",params:{type: "array"},message:"must be array"}];return false;}}var valid1 = _errs127 === errors;}else {var valid1 = true;}if(valid1){if(data.id !== undefined){const _errs144 = errors;if(typeof data.id !== "string"){validate23.errors = [{instancePath:instancePath+"/id",schemaPath:"#/properties/id/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid1 = _errs144 === errors;}else {var valid1 = true;}if(valid1){if(data.interestAccruedInBillingCycle !== undefined){let data73 = data.interestAccruedInBillingCycle;const _errs146 = errors;if(!((typeof data73 == "number") && (isFinite(data73)))){validate23.errors = [{instancePath:instancePath+"/interestAccruedInBillingCycle",schemaPath:"#/properties/interestAccruedInBillingCycle/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid1 = _errs146 === errors;}else {var valid1 = true;}if(valid1){if(data.interestCommission !== undefined){let data74 = data.interestCommission;const _errs148 = errors;if(!((typeof data74 == "number") && (isFinite(data74)))){validate23.errors = [{instancePath:instancePath+"/interestCommission",schemaPath:"#/properties/interestCommission/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid1 = _errs148 === errors;}else {var valid1 = true;}if(valid1){if(data.interestFromArrearsAccrued !== undefined){let data75 = data.interestFromArrearsAccrued;const _errs150 = errors;if(!((typeof data75 == "number") && (isFinite(data75)))){validate23.errors = [{instancePath:instancePath+"/interestFromArrearsAccrued",schemaPath:"#/properties/interestFromArrearsAccrued/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid1 = _errs150 === errors;}else {var valid1 = true;}if(valid1){if(data.interestSettings !== undefined){const _errs152 = errors;if(!(validate28(data.interestSettings, {instancePath:instancePath+"/interestSettings",parentData:data,parentDataProperty:"interestSettings",rootData}))){vErrors = vErrors === null ? validate28.errors : vErrors.concat(validate28.errors);errors = vErrors.length;}var valid1 = _errs152 === errors;}else {var valid1 = true;}if(valid1){if(data.lastAccountAppraisalDate !== undefined){const _errs153 = errors;if(errors === _errs153){if(errors === _errs153){if(!(typeof data.lastAccountAppraisalDate === "string")){validate23.errors = [{instancePath:instancePath+"/lastAccountAppraisalDate",schemaPath:"#/properties/lastAccountAppraisalDate/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}}var valid1 = _errs153 === errors;}else {var valid1 = true;}if(valid1){if(data.lastInterestAppliedDate !== undefined){const _errs155 = errors;if(errors === _errs155){if(errors === _errs155){if(!(typeof data.lastInterestAppliedDate === "string")){validate23.errors = [{instancePath:instancePath+"/lastInterestAppliedDate",schemaPath:"#/properties/lastInterestAppliedDate/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}}var valid1 = _errs155 === errors;}else {var valid1 = true;}if(valid1){if(data.lastInterestReviewDate !== undefined){const _errs157 = errors;if(errors === _errs157){if(errors === _errs157){if(!(typeof data.lastInterestReviewDate === "string")){validate23.errors = [{instancePath:instancePath+"/lastInterestReviewDate",schemaPath:"#/properties/lastInterestReviewDate/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}}var valid1 = _errs157 === errors;}else {var valid1 = true;}if(valid1){if(data.lastLockedDate !== undefined){const _errs159 = errors;if(errors === _errs159){if(errors === _errs159){if(!(typeof data.lastLockedDate === "string")){validate23.errors = [{instancePath:instancePath+"/lastLockedDate",schemaPath:"#/properties/lastLockedDate/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}}var valid1 = _errs159 === errors;}else {var valid1 = true;}if(valid1){if(data.lastModifiedDate !== undefined){const _errs161 = errors;if(errors === _errs161){if(errors === _errs161){if(!(typeof data.lastModifiedDate === "string")){validate23.errors = [{instancePath:instancePath+"/lastModifiedDate",schemaPath:"#/properties/lastModifiedDate/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}}var valid1 = _errs161 === errors;}else {var valid1 = true;}if(valid1){if(data.lastSetToArrearsDate !== undefined){const _errs163 = errors;if(errors === _errs163){if(errors === _errs163){if(!(typeof data.lastSetToArrearsDate === "string")){validate23.errors = [{instancePath:instancePath+"/lastSetToArrearsDate",schemaPath:"#/properties/lastSetToArrearsDate/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}}var valid1 = _errs163 === errors;}else {var valid1 = true;}if(valid1){if(data.lastTaxRateReviewDate !== undefined){const _errs165 = errors;if(errors === _errs165){if(errors === _errs165){if(!(typeof data.lastTaxRateReviewDate === "string")){validate23.errors = [{instancePath:instancePath+"/lastTaxRateReviewDate",schemaPath:"#/properties/lastTaxRateReviewDate/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}}var valid1 = _errs165 === errors;}else {var valid1 = true;}if(valid1){if(data.latePaymentsRecalculationMethod !== undefined){let data84 = data.latePaymentsRecalculationMethod;const _errs167 = errors;if(!((data84 === "OVERDUE_INSTALLMENTS_INCREASE") || (data84 === "LAST_INSTALLMENT_INCREASE"))){validate23.errors = [{instancePath:instancePath+"/latePaymentsRecalculationMethod",schemaPath:"#/properties/latePaymentsRecalculationMethod/enum",keyword:"enum",params:{allowedValues: schema25.properties.latePaymentsRecalculationMethod.enum},message:"must be equal to one of the allowed values"}];return false;}var valid1 = _errs167 === errors;}else {var valid1 = true;}if(valid1){if(data.loanAmount !== undefined){let data85 = data.loanAmount;const _errs168 = errors;if(!((typeof data85 == "number") && (isFinite(data85)))){validate23.errors = [{instancePath:instancePath+"/loanAmount",schemaPath:"#/properties/loanAmount/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid1 = _errs168 === errors;}else {var valid1 = true;}if(valid1){if(data.loanName !== undefined){const _errs170 = errors;if(typeof data.loanName !== "string"){validate23.errors = [{instancePath:instancePath+"/loanName",schemaPath:"#/properties/loanName/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid1 = _errs170 === errors;}else {var valid1 = true;}if(valid1){if(data.lockedAccountTotalDueType !== undefined){let data87 = data.lockedAccountTotalDueType;const _errs172 = errors;if(!((data87 === "BALANCE_AMOUNT") || (data87 === "DUE_AMOUNT_ON_LATE_INSTALLMENTS"))){validate23.errors = [{instancePath:instancePath+"/lockedAccountTotalDueType",schemaPath:"#/properties/lockedAccountTotalDueType/enum",keyword:"enum",params:{allowedValues: schema25.properties.lockedAccountTotalDueType.enum},message:"must be equal to one of the allowed values"}];return false;}var valid1 = _errs172 === errors;}else {var valid1 = true;}if(valid1){if(data.lockedOperations !== undefined){let data88 = data.lockedOperations;const _errs173 = errors;if(errors === _errs173){if(Array.isArray(data88)){var valid18 = true;const len3 = data88.length;for(let i3=0; i3<len3; i3++){let data89 = data88[i3];const _errs175 = errors;if(!(((data89 === "APPLY_INTEREST") || (data89 === "APPLY_FEES")) || (data89 === "APPLY_PENALTIES"))){validate23.errors = [{instancePath:instancePath+"/lockedOperations/" + i3,schemaPath:"#/properties/lockedOperations/items/enum",keyword:"enum",params:{allowedValues: schema25.properties.lockedOperations.items.enum},message:"must be equal to one of the allowed values"}];return false;}var valid18 = _errs175 === errors;if(!valid18){break;}}}else {validate23.errors = [{instancePath:instancePath+"/lockedOperations",schemaPath:"#/properties/lockedOperations/type",keyword:"type",params:{type: "array"},message:"must be array"}];return false;}}var valid1 = _errs173 === errors;}else {var valid1 = true;}if(valid1){if(data.migrationEventKey !== undefined){const _errs176 = errors;if(typeof data.migrationEventKey !== "string"){validate23.errors = [{instancePath:instancePath+"/migrationEventKey",schemaPath:"#/properties/migrationEventKey/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid1 = _errs176 === errors;}else {var valid1 = true;}if(valid1){if(data.modifyInterestForFirstInstallment !== undefined){const _errs178 = errors;if(typeof data.modifyInterestForFirstInstallment !== "boolean"){validate23.errors = [{instancePath:instancePath+"/modifyInterestForFirstInstallment",schemaPath:"#/properties/modifyInterestForFirstInstallment/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"}];return false;}var valid1 = _errs178 === errors;}else {var valid1 = true;}if(valid1){if(data.notes !== undefined){const _errs180 = errors;if(typeof data.notes !== "string"){validate23.errors = [{instancePath:instancePath+"/notes",schemaPath:"#/properties/notes/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid1 = _errs180 === errors;}else {var valid1 = true;}if(valid1){if(data.originalAccountKey !== undefined){const _errs182 = errors;if(typeof data.originalAccountKey !== "string"){validate23.errors = [{instancePath:instancePath+"/originalAccountKey",schemaPath:"#/properties/originalAccountKey/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid1 = _errs182 === errors;}else {var valid1 = true;}if(valid1){if(data.paymentHolidaysAccruedInterest !== undefined){let data94 = data.paymentHolidaysAccruedInterest;const _errs184 = errors;if(!((typeof data94 == "number") && (isFinite(data94)))){validate23.errors = [{instancePath:instancePath+"/paymentHolidaysAccruedInterest",schemaPath:"#/properties/paymentHolidaysAccruedInterest/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid1 = _errs184 === errors;}else {var valid1 = true;}if(valid1){if(data.paymentMethod !== undefined){let data95 = data.paymentMethod;const _errs186 = errors;if(!((data95 === "HORIZONTAL") || (data95 === "VERTICAL"))){validate23.errors = [{instancePath:instancePath+"/paymentMethod",schemaPath:"#/properties/paymentMethod/enum",keyword:"enum",params:{allowedValues: schema25.properties.paymentMethod.enum},message:"must be equal to one of the allowed values"}];return false;}var valid1 = _errs186 === errors;}else {var valid1 = true;}if(valid1){if(data.penaltySettings !== undefined){let data96 = data.penaltySettings;const _errs187 = errors;const _errs188 = errors;if(errors === _errs188){if(data96 && typeof data96 == "object" && !Array.isArray(data96)){if(data96.loanPenaltyCalculationMethod !== undefined){let data97 = data96.loanPenaltyCalculationMethod;const _errs191 = errors;if(!((((data97 === "NONE") || (data97 === "OVERDUE_BALANCE")) || (data97 === "OVERDUE_BALANCE_AND_INTEREST")) || (data97 === "OUTSTANDING_PRINCIPAL"))){validate23.errors = [{instancePath:instancePath+"/penaltySettings/loanPenaltyCalculationMethod",schemaPath:"#/$defs/PenaltySettingsaf30/properties/loanPenaltyCalculationMethod/enum",keyword:"enum",params:{allowedValues: schema40.properties.loanPenaltyCalculationMethod.enum},message:"must be equal to one of the allowed values"}];return false;}var valid20 = _errs191 === errors;}else {var valid20 = true;}if(valid20){if(data96.penaltyRate !== undefined){let data98 = data96.penaltyRate;const _errs192 = errors;if(!((typeof data98 == "number") && (isFinite(data98)))){validate23.errors = [{instancePath:instancePath+"/penaltySettings/penaltyRate",schemaPath:"#/$defs/PenaltySettingsaf30/properties/penaltyRate/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid20 = _errs192 === errors;}else {var valid20 = true;}}}else {validate23.errors = [{instancePath:instancePath+"/penaltySettings",schemaPath:"#/$defs/PenaltySettingsaf30/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}var valid1 = _errs187 === errors;}else {var valid1 = true;}if(valid1){if(data.plannedInstallmentFees !== undefined){let data99 = data.plannedInstallmentFees;const _errs194 = errors;if(errors === _errs194){if(Array.isArray(data99)){var valid21 = true;const len4 = data99.length;for(let i4=0; i4<len4; i4++){let data100 = data99[i4];const _errs196 = errors;const _errs197 = errors;if(errors === _errs197){if(data100 && typeof data100 == "object" && !Array.isArray(data100)){let missing3;if((data100.predefinedFeeKey === undefined) && (missing3 = "predefinedFeeKey")){validate23.errors = [{instancePath:instancePath+"/plannedInstallmentFees/" + i4,schemaPath:"#/$defs/PlannedInstallmentFeeaf30/required",keyword:"required",params:{missingProperty: missing3},message:"must have required property '"+missing3+"'"}];return false;}else {if(data100.amount !== undefined){let data101 = data100.amount;const _errs200 = errors;if(!((typeof data101 == "number") && (isFinite(data101)))){validate23.errors = [{instancePath:instancePath+"/plannedInstallmentFees/" + i4+"/amount",schemaPath:"#/$defs/PlannedInstallmentFeeaf30/properties/amount/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid23 = _errs200 === errors;}else {var valid23 = true;}if(valid23){if(data100.applyOnDate !== undefined){const _errs202 = errors;if(errors === _errs202){if(errors === _errs202){if(!(typeof data100.applyOnDate === "string")){validate23.errors = [{instancePath:instancePath+"/plannedInstallmentFees/" + i4+"/applyOnDate",schemaPath:"#/$defs/PlannedInstallmentFeeaf30/properties/applyOnDate/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}}var valid23 = _errs202 === errors;}else {var valid23 = true;}if(valid23){if(data100.encodedKey !== undefined){const _errs204 = errors;if(typeof data100.encodedKey !== "string"){validate23.errors = [{instancePath:instancePath+"/plannedInstallmentFees/" + i4+"/encodedKey",schemaPath:"#/$defs/PlannedInstallmentFeeaf30/properties/encodedKey/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid23 = _errs204 === errors;}else {var valid23 = true;}if(valid23){if(data100.installmentKey !== undefined){const _errs206 = errors;if(typeof data100.installmentKey !== "string"){validate23.errors = [{instancePath:instancePath+"/plannedInstallmentFees/" + i4+"/installmentKey",schemaPath:"#/$defs/PlannedInstallmentFeeaf30/properties/installmentKey/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid23 = _errs206 === errors;}else {var valid23 = true;}if(valid23){if(data100.installmentNumber !== undefined){let data105 = data100.installmentNumber;const _errs208 = errors;if(!(((typeof data105 == "number") && (!(data105 % 1) && !isNaN(data105))) && (isFinite(data105)))){validate23.errors = [{instancePath:instancePath+"/plannedInstallmentFees/" + i4+"/installmentNumber",schemaPath:"#/$defs/PlannedInstallmentFeeaf30/properties/installmentNumber/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];return false;}var valid23 = _errs208 === errors;}else {var valid23 = true;}if(valid23){if(data100.predefinedFeeKey !== undefined){const _errs210 = errors;if(typeof data100.predefinedFeeKey !== "string"){validate23.errors = [{instancePath:instancePath+"/plannedInstallmentFees/" + i4+"/predefinedFeeKey",schemaPath:"#/$defs/PlannedInstallmentFeeaf30/properties/predefinedFeeKey/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid23 = _errs210 === errors;}else {var valid23 = true;}}}}}}}}else {validate23.errors = [{instancePath:instancePath+"/plannedInstallmentFees/" + i4,schemaPath:"#/$defs/PlannedInstallmentFeeaf30/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}var valid21 = _errs196 === errors;if(!valid21){break;}}}else {validate23.errors = [{instancePath:instancePath+"/plannedInstallmentFees",schemaPath:"#/properties/plannedInstallmentFees/type",keyword:"type",params:{type: "array"},message:"must be array"}];return false;}}var valid1 = _errs194 === errors;}else {var valid1 = true;}if(valid1){if(data.prepaymentSettings !== undefined){let data107 = data.prepaymentSettings;const _errs212 = errors;const _errs213 = errors;if(errors === _errs213){if(data107 && typeof data107 == "object" && !Array.isArray(data107)){if(data107.applyInterestOnPrepaymentMethod !== undefined){let data108 = data107.applyInterestOnPrepaymentMethod;const _errs216 = errors;if(!((data108 === "AUTOMATIC") || (data108 === "MANUAL"))){validate23.errors = [{instancePath:instancePath+"/prepaymentSettings/applyInterestOnPrepaymentMethod",schemaPath:"#/$defs/PrepaymentSettingsaf30/properties/applyInterestOnPrepaymentMethod/enum",keyword:"enum",params:{allowedValues: schema42.properties.applyInterestOnPrepaymentMethod.enum},message:"must be equal to one of the allowed values"}];return false;}var valid25 = _errs216 === errors;}else {var valid25 = true;}if(valid25){if(data107.elementsRecalculationMethod !== undefined){let data109 = data107.elementsRecalculationMethod;const _errs217 = errors;if(!((data109 === "PRINCIPAL_EXPECTED_FIXED") || (data109 === "TOTAL_EXPECTED_FIXED"))){validate23.errors = [{instancePath:instancePath+"/prepaymentSettings/elementsRecalculationMethod",schemaPath:"#/$defs/PrepaymentSettingsaf30/properties/elementsRecalculationMethod/enum",keyword:"enum",params:{allowedValues: schema42.properties.elementsRecalculationMethod.enum},message:"must be equal to one of the allowed values"}];return false;}var valid25 = _errs217 === errors;}else {var valid25 = true;}if(valid25){if(data107.ercFreeAllowanceAmount !== undefined){let data110 = data107.ercFreeAllowanceAmount;const _errs218 = errors;if(!((typeof data110 == "number") && (isFinite(data110)))){validate23.errors = [{instancePath:instancePath+"/prepaymentSettings/ercFreeAllowanceAmount",schemaPath:"#/$defs/PrepaymentSettingsaf30/properties/ercFreeAllowanceAmount/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid25 = _errs218 === errors;}else {var valid25 = true;}if(valid25){if(data107.ercFreeAllowancePercentage !== undefined){let data111 = data107.ercFreeAllowancePercentage;const _errs220 = errors;if(!((typeof data111 == "number") && (isFinite(data111)))){validate23.errors = [{instancePath:instancePath+"/prepaymentSettings/ercFreeAllowancePercentage",schemaPath:"#/$defs/PrepaymentSettingsaf30/properties/ercFreeAllowancePercentage/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid25 = _errs220 === errors;}else {var valid25 = true;}if(valid25){if(data107.prepaymentRecalculationMethod !== undefined){const _errs222 = errors;let valid26;valid26 = false;for(const v3 of schema42.properties.prepaymentRecalculationMethod.enum){if(func0(data107.prepaymentRecalculationMethod, v3)){valid26 = true;break;}}if(!valid26){validate23.errors = [{instancePath:instancePath+"/prepaymentSettings/prepaymentRecalculationMethod",schemaPath:"#/$defs/PrepaymentSettingsaf30/properties/prepaymentRecalculationMethod/enum",keyword:"enum",params:{allowedValues: schema42.properties.prepaymentRecalculationMethod.enum},message:"must be equal to one of the allowed values"}];return false;}var valid25 = _errs222 === errors;}else {var valid25 = true;}if(valid25){if(data107.principalPaidInstallmentStatus !== undefined){let data113 = data107.principalPaidInstallmentStatus;const _errs223 = errors;if(!(((data113 === "PARTIALLY_PAID") || (data113 === "PAID")) || (data113 === "ORIGINAL_TOTAL_EXPECTED_PAID"))){validate23.errors = [{instancePath:instancePath+"/prepaymentSettings/principalPaidInstallmentStatus",schemaPath:"#/$defs/PrepaymentSettingsaf30/properties/principalPaidInstallmentStatus/enum",keyword:"enum",params:{allowedValues: schema42.properties.principalPaidInstallmentStatus.enum},message:"must be equal to one of the allowed values"}];return false;}var valid25 = _errs223 === errors;}else {var valid25 = true;}}}}}}}else {validate23.errors = [{instancePath:instancePath+"/prepaymentSettings",schemaPath:"#/$defs/PrepaymentSettingsaf30/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}var valid1 = _errs212 === errors;}else {var valid1 = true;}if(valid1){if(data.principalPaymentSettings !== undefined){let data114 = data.principalPaymentSettings;const _errs224 = errors;const _errs225 = errors;if(errors === _errs225){if(data114 && typeof data114 == "object" && !Array.isArray(data114)){if(data114.amount !== undefined){let data115 = data114.amount;const _errs228 = errors;if(!((typeof data115 == "number") && (isFinite(data115)))){validate23.errors = [{instancePath:instancePath+"/principalPaymentSettings/amount",schemaPath:"#/$defs/PrincipalPaymentAccountSettingsaf30/properties/amount/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid28 = _errs228 === errors;}else {var valid28 = true;}if(valid28){if(data114.encodedKey !== undefined){const _errs230 = errors;if(typeof data114.encodedKey !== "string"){validate23.errors = [{instancePath:instancePath+"/principalPaymentSettings/encodedKey",schemaPath:"#/$defs/PrincipalPaymentAccountSettingsaf30/properties/encodedKey/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid28 = _errs230 === errors;}else {var valid28 = true;}if(valid28){if(data114.includeFeesInFloorAmount !== undefined){const _errs232 = errors;if(typeof data114.includeFeesInFloorAmount !== "boolean"){validate23.errors = [{instancePath:instancePath+"/principalPaymentSettings/includeFeesInFloorAmount",schemaPath:"#/$defs/PrincipalPaymentAccountSettingsaf30/properties/includeFeesInFloorAmount/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"}];return false;}var valid28 = _errs232 === errors;}else {var valid28 = true;}if(valid28){if(data114.includeInterestInFloorAmount !== undefined){const _errs234 = errors;if(typeof data114.includeInterestInFloorAmount !== "boolean"){validate23.errors = [{instancePath:instancePath+"/principalPaymentSettings/includeInterestInFloorAmount",schemaPath:"#/$defs/PrincipalPaymentAccountSettingsaf30/properties/includeInterestInFloorAmount/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"}];return false;}var valid28 = _errs234 === errors;}else {var valid28 = true;}if(valid28){if(data114.percentage !== undefined){let data119 = data114.percentage;const _errs236 = errors;if(!((typeof data119 == "number") && (isFinite(data119)))){validate23.errors = [{instancePath:instancePath+"/principalPaymentSettings/percentage",schemaPath:"#/$defs/PrincipalPaymentAccountSettingsaf30/properties/percentage/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid28 = _errs236 === errors;}else {var valid28 = true;}if(valid28){if(data114.principalCeilingValue !== undefined){let data120 = data114.principalCeilingValue;const _errs238 = errors;if(!((typeof data120 == "number") && (isFinite(data120)))){validate23.errors = [{instancePath:instancePath+"/principalPaymentSettings/principalCeilingValue",schemaPath:"#/$defs/PrincipalPaymentAccountSettingsaf30/properties/principalCeilingValue/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid28 = _errs238 === errors;}else {var valid28 = true;}if(valid28){if(data114.principalFloorValue !== undefined){let data121 = data114.principalFloorValue;const _errs240 = errors;if(!((typeof data121 == "number") && (isFinite(data121)))){validate23.errors = [{instancePath:instancePath+"/principalPaymentSettings/principalFloorValue",schemaPath:"#/$defs/PrincipalPaymentAccountSettingsaf30/properties/principalFloorValue/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid28 = _errs240 === errors;}else {var valid28 = true;}if(valid28){if(data114.principalPaymentMethod !== undefined){const _errs242 = errors;let valid29;valid29 = false;for(const v4 of schema43.properties.principalPaymentMethod.enum){if(func0(data114.principalPaymentMethod, v4)){valid29 = true;break;}}if(!valid29){validate23.errors = [{instancePath:instancePath+"/principalPaymentSettings/principalPaymentMethod",schemaPath:"#/$defs/PrincipalPaymentAccountSettingsaf30/properties/principalPaymentMethod/enum",keyword:"enum",params:{allowedValues: schema43.properties.principalPaymentMethod.enum},message:"must be equal to one of the allowed values"}];return false;}var valid28 = _errs242 === errors;}else {var valid28 = true;}if(valid28){if(data114.totalDueAmountFloor !== undefined){let data123 = data114.totalDueAmountFloor;const _errs243 = errors;if(!((typeof data123 == "number") && (isFinite(data123)))){validate23.errors = [{instancePath:instancePath+"/principalPaymentSettings/totalDueAmountFloor",schemaPath:"#/$defs/PrincipalPaymentAccountSettingsaf30/properties/totalDueAmountFloor/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid28 = _errs243 === errors;}else {var valid28 = true;}if(valid28){if(data114.totalDuePayment !== undefined){const _errs245 = errors;let valid30;valid30 = false;for(const v5 of schema43.properties.totalDuePayment.enum){if(func0(data114.totalDuePayment, v5)){valid30 = true;break;}}if(!valid30){validate23.errors = [{instancePath:instancePath+"/principalPaymentSettings/totalDuePayment",schemaPath:"#/$defs/PrincipalPaymentAccountSettingsaf30/properties/totalDuePayment/enum",keyword:"enum",params:{allowedValues: schema43.properties.totalDuePayment.enum},message:"must be equal to one of the allowed values"}];return false;}var valid28 = _errs245 === errors;}else {var valid28 = true;}}}}}}}}}}}else {validate23.errors = [{instancePath:instancePath+"/principalPaymentSettings",schemaPath:"#/$defs/PrincipalPaymentAccountSettingsaf30/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}var valid1 = _errs224 === errors;}else {var valid1 = true;}if(valid1){if(data.productTypeKey !== undefined){const _errs246 = errors;if(typeof data.productTypeKey !== "string"){validate23.errors = [{instancePath:instancePath+"/productTypeKey",schemaPath:"#/properties/productTypeKey/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid1 = _errs246 === errors;}else {var valid1 = true;}if(valid1){if(data.redrawSettings !== undefined){let data126 = data.redrawSettings;const _errs248 = errors;const _errs249 = errors;if(errors === _errs249){if(data126 && typeof data126 == "object" && !Array.isArray(data126)){let missing4;if((data126.restrictNextDueWithdrawal === undefined) && (missing4 = "restrictNextDueWithdrawal")){validate23.errors = [{instancePath:instancePath+"/redrawSettings",schemaPath:"#/$defs/LoanAccountRedrawSettingsaf30/required",keyword:"required",params:{missingProperty: missing4},message:"must have required property '"+missing4+"'"}];return false;}else {if(data126.restrictNextDueWithdrawal !== undefined){if(typeof data126.restrictNextDueWithdrawal !== "boolean"){validate23.errors = [{instancePath:instancePath+"/redrawSettings/restrictNextDueWithdrawal",schemaPath:"#/$defs/LoanAccountRedrawSettingsaf30/properties/restrictNextDueWithdrawal/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"}];return false;}}}}else {validate23.errors = [{instancePath:instancePath+"/redrawSettings",schemaPath:"#/$defs/LoanAccountRedrawSettingsaf30/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}var valid1 = _errs248 === errors;}else {var valid1 = true;}if(valid1){if(data.rescheduledAccountKey !== undefined){const _errs254 = errors;if(typeof data.rescheduledAccountKey !== "string"){validate23.errors = [{instancePath:instancePath+"/rescheduledAccountKey",schemaPath:"#/properties/rescheduledAccountKey/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid1 = _errs254 === errors;}else {var valid1 = true;}if(valid1){if(data.scheduleSettings !== undefined){const _errs256 = errors;if(!(validate30(data.scheduleSettings, {instancePath:instancePath+"/scheduleSettings",parentData:data,parentDataProperty:"scheduleSettings",rootData}))){vErrors = vErrors === null ? validate30.errors : vErrors.concat(validate30.errors);errors = vErrors.length;}var valid1 = _errs256 === errors;}else {var valid1 = true;}if(valid1){if(data.settlementAccountKey !== undefined){const _errs257 = errors;if(typeof data.settlementAccountKey !== "string"){validate23.errors = [{instancePath:instancePath+"/settlementAccountKey",schemaPath:"#/properties/settlementAccountKey/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid1 = _errs257 === errors;}else {var valid1 = true;}if(valid1){if(data.taxRate !== undefined){let data131 = data.taxRate;const _errs259 = errors;if(!((typeof data131 == "number") && (isFinite(data131)))){validate23.errors = [{instancePath:instancePath+"/taxRate",schemaPath:"#/properties/taxRate/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid1 = _errs259 === errors;}else {var valid1 = true;}if(valid1){if(data.terminationDate !== undefined){const _errs261 = errors;if(errors === _errs261){if(errors === _errs261){if(!(typeof data.terminationDate === "string")){validate23.errors = [{instancePath:instancePath+"/terminationDate",schemaPath:"#/properties/terminationDate/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}}var valid1 = _errs261 === errors;}else {var valid1 = true;}if(valid1){if(data.tranches !== undefined){let data133 = data.tranches;const _errs263 = errors;if(errors === _errs263){if(Array.isArray(data133)){var valid33 = true;const len5 = data133.length;for(let i5=0; i5<len5; i5++){const _errs265 = errors;if(!(validate32(data133[i5], {instancePath:instancePath+"/tranches/" + i5,parentData:data133,parentDataProperty:i5,rootData}))){vErrors = vErrors === null ? validate32.errors : vErrors.concat(validate32.errors);errors = vErrors.length;}var valid33 = _errs265 === errors;if(!valid33){break;}}}else {validate23.errors = [{instancePath:instancePath+"/tranches",schemaPath:"#/properties/tranches/type",keyword:"type",params:{type: "array"},message:"must be array"}];return false;}}var valid1 = _errs263 === errors;}else {var valid1 = true;}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}else {validate23.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}validate23.errors = vErrors;return errors === 0;}function validate10(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){let vErrors = null;let errors = 0;if(errors === 0){if(data && typeof data == "object" && !Array.isArray(data)){if(data.depositAccounts !== undefined){let data0 = data.depositAccounts;const _errs2 = errors;if(errors === _errs2){if(Array.isArray(data0)){var valid1 = true;const len0 = data0.length;for(let i0=0; i0<len0; i0++){const _errs4 = errors;if(!(validate11(data0[i0], {instancePath:instancePath+"/depositAccounts/" + i0,parentData:data0,parentDataProperty:i0,rootData}))){vErrors = vErrors === null ? validate11.errors : vErrors.concat(validate11.errors);errors = vErrors.length;}var valid1 = _errs4 === errors;if(!valid1){break;}}}else {validate10.errors = [{instancePath:instancePath+"/depositAccounts",schemaPath:"#/properties/depositAccounts/type",keyword:"type",params:{type: "array"},message:"must be array"}];return false;}}var valid0 = _errs2 === errors;}else {var valid0 = true;}if(valid0){if(data.loanAccounts !== undefined){let data2 = data.loanAccounts;const _errs5 = errors;if(errors === _errs5){if(Array.isArray(data2)){var valid2 = true;const len1 = data2.length;for(let i1=0; i1<len1; i1++){const _errs7 = errors;if(!(validate23(data2[i1], {instancePath:instancePath+"/loanAccounts/" + i1,parentData:data2,parentDataProperty:i1,rootData}))){vErrors = vErrors === null ? validate23.errors : vErrors.concat(validate23.errors);errors = vErrors.length;}var valid2 = _errs7 === errors;if(!valid2){break;}}}else {validate10.errors = [{instancePath:instancePath+"/loanAccounts",schemaPath:"#/properties/loanAccounts/type",keyword:"type",params:{type: "array"},message:"must be array"}];return false;}}var valid0 = _errs5 === errors;}else {var valid0 = true;}}}else {validate10.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}validate10.errors = vErrors;return errors === 0;};validate.schema=schema11;