/**
 * Generated by @skyleague/therefore
 * Do not manually touch this
 */
/* eslint-disable */

import { z } from 'zod'

export const TransactionInterestSettings = z
    .object({
        indexInterestRate: z.number().describe('The value of the index interest rate').optional(),
        interestRate: z
            .number()
            .describe(
                'The interest rate. Represents the interest rate for the loan account. The interest on loans is accrued on a daily basis, which allows charging the clients only for the days they actually used the loan amount.',
            )
            .optional(),
    })
    .describe('The interest settings, holds all the properties regarding interests for the loan account.')

export type TransactionInterestSettings = z.infer<typeof TransactionInterestSettings>

export const CardAcceptor = z
    .object({
        city: z.string().describe('The city in which the card acceptor has the business.').optional(),
        country: z.string().describe('The country in which the card acceptor has the business.').optional(),
        mcc: z.number().int().describe('The Merchant Category Code of the card acceptor.').optional(),
        name: z.string().describe('The name of the card acceptor.').optional(),
        state: z.string().describe('The state in which the card acceptor has the business.').optional(),
        street: z.string().describe('The street in which the card acceptor has the business.').optional(),
        zip: z.string().describe('The ZIP code of the location in which the card acceptor has the business.').optional(),
    })
    .describe('The details of the card acceptor (merchant) in a transaction hold.')

export type CardAcceptor = z.infer<typeof CardAcceptor>

export const TransferDetails = z
    .object({
        linkedDepositTransactionKey: z.string().describe('The key of the related deposit transaction').optional(),
        linkedLoanTransactionKey: z.string().describe('The key of the related loan transaction').optional(),
    })
    .describe('Represents the transfer details, such as the linked transaction key')

export type TransferDetails = z.infer<typeof TransferDetails>

export const TransactionDetails = z
    .object({
        transactionChannelId: z
            .string()
            .describe('The id of the transaction channel associated with the transaction details.')
            .optional(),
        transactionChannelKey: z
            .string()
            .describe('The encoded key of the transaction channel associated with the transaction details.')
            .optional(),
    })
    .describe('Contains the details about transaction including fields like transaction channel key and channel id')

export type TransactionDetails = z.infer<typeof TransactionDetails>

export const LoanTerms = z
    .object({
        interestSettings: TransactionInterestSettings.optional(),
        periodicPayment: z
            .number()
            .describe('The periodic payment value logged when changing it for a Balloon Payments account')
            .optional(),
        principalPaymentAmount: z
            .number()
            .describe('The principal payment flat amount logged when changing it for a Revolving Credit account')
            .optional(),
        principalPaymentPercentage: z
            .number()
            .describe('The principal payment percentage value logged when changing it for a Revolving Credit account')
            .optional(),
    })
    .describe('The loan transaction terms')

export type LoanTerms = z.infer<typeof LoanTerms>

export const Taxes = z
    .object({
        deferredTaxOnInterestAmount: z
            .number()
            .describe(
                'How much taxes on the interest that was pre-paid were added/removed in account, within this transaction. If there is any deferred tax on interest amount set in this transaction, that amount should be included in this field.',
            )
            .optional(),
        taxOnFeesAmount: z
            .number()
            .describe(
                'How much taxes on the fees that were paid in this transaction were added/removed in account, within this transaction.',
            )
            .optional(),
        taxOnInterestAmount: z
            .number()
            .describe(
                'How much taxes on the interest that was paid in this transaction were added/removed in account, within this transaction.',
            )
            .optional(),
        taxOnInterestFromArrearsAmount: z
            .number()
            .describe(
                'The amount of taxes on the interest from arrears that were applied/paid in account, within this transaction.',
            )
            .optional(),
        taxOnPaymentHolidaysInterest: z
            .number()
            .describe(
                'The amount of taxes on the Payment Holidays interest that were added/removed in account, within this transaction.',
            )
            .optional(),
        taxOnPenaltyAmount: z
            .number()
            .describe(
                'How much taxes on the penalties that were paid in this transaction were added/removed in account, within this transaction.',
            )
            .optional(),
        taxRate: z.number().describe('The tax rate that was set or changed in this transaction.').optional(),
    })
    .describe('The taxes applied within a transaction.')

export type Taxes = z.infer<typeof Taxes>

export const Fee = z
    .object({
        amount: z
            .number()
            .describe('The amount of the fee that was applied/paid in the transaction for the given predefined fee.')
            .optional(),
        name: z.string().describe('The name of the predefined fee').optional(),
        predefinedFeeKey: z.string().describe('The encoded key of the predefined fee, auto generated, unique'),
        taxAmount: z.number().describe('The amount of the taxes on fee that was applied/paid in the transaction.').optional(),
        trigger: z
            .enum([
                'MANUAL',
                'MANUAL_PLANNED',
                'DISBURSEMENT',
                'CAPITALIZED_DISBURSEMENT',
                'UPFRONT_DISBURSEMENT',
                'LATE_REPAYMENT',
                'PAYMENT_DUE',
                'PAYMENT_DUE_APPLIED_ON_DUE_DATES',
                'ARBITRARY',
                'IOF',
                'EARLY_REPAYMENT_CHARGE',
                'FEE_INCLUDED_IN_PMT',
            ])
            .describe('Shows the event that will trigger a fee')
            .optional(),
    })
    .describe('An amount of predefined fee that was applied or paid on an account.')

export type Fee = z.infer<typeof Fee>

export const CustomPaymentAmount = z
    .object({
        amount: z.number().describe('The amount of the payment paid in the transaction for the given type.'),
        customPaymentAmountType: z
            .enum([
                'PRINCIPAL',
                'INTEREST',
                'MANUAL_FEE',
                'UPFRONT_DISBURSEMENT_FEE',
                'LATE_REPAYMENT_FEE',
                'PAYMENT_DUE_FEE',
                'PENALTY',
                'INTEREST_FROM_ARREARS',
                'NON_SCHEDULED_FEE',
                'INTEREST_BEARING_FEE',
                'INTEREST_BEARING_FEE_INTEREST',
                'CF_INTEREST',
                'CF_INTEREST_FROM_ARREARS',
                'CF_INTEREST_FROM_ARREARS_ACCRUED',
            ])
            .describe('The type of the custom payment'),
        predefinedFeeKey: z.string().describe('The encodedKey of the predefined fee to be paid.').optional(),
        taxOnAmount: z.number().describe('The amount of the taxes paid in the transaction for the given type.').optional(),
    })
    .describe('Custom payment amount for a specific element type')

export type CustomPaymentAmount = z.infer<typeof CustomPaymentAmount>

export const Currency = z
    .object({
        code: z
            .enum([
                'AED',
                'AFN',
                'ALL',
                'AMD',
                'ANG',
                'AOA',
                'ARS',
                'AUD',
                'AWG',
                'AZN',
                'BAM',
                'BBD',
                'BDT',
                'BGN',
                'BHD',
                'BIF',
                'BMD',
                'BND',
                'BOB',
                'BOV',
                'BRL',
                'BSD',
                'BTN',
                'BWP',
                'BYR',
                'BYN',
                'BZD',
                'CAD',
                'CDF',
                'CHE',
                'CHF',
                'CHW',
                'CLF',
                'CLP',
                'CNY',
                'COP',
                'COU',
                'CRC',
                'CUC',
                'CUP',
                'CVE',
                'CZK',
                'DJF',
                'DKK',
                'DOP',
                'DZD',
                'EGP',
                'ERN',
                'ETB',
                'EUR',
                'FJD',
                'FKP',
                'GBP',
                'GEL',
                'GHS',
                'GIP',
                'GMD',
                'GNF',
                'GTQ',
                'GYD',
                'HKD',
                'HNL',
                'HRK',
                'HTG',
                'HUF',
                'IDR',
                'ILS',
                'INR',
                'IQD',
                'IRR',
                'ISK',
                'JMD',
                'JOD',
                'JPY',
                'KES',
                'KGS',
                'KHR',
                'KMF',
                'KPW',
                'KRW',
                'KWD',
                'KYD',
                'KZT',
                'LAK',
                'LBP',
                'LKR',
                'LRD',
                'LSL',
                'LTL',
                'LVL',
                'LYD',
                'MAD',
                'MDL',
                'MGA',
                'MKD',
                'MMK',
                'MNT',
                'MOP',
                'MRO',
                'MRU',
                'MUR',
                'MVR',
                'MWK',
                'MXN',
                'MXV',
                'MYR',
                'MZN',
                'NAD',
                'NGN',
                'NIO',
                'NOK',
                'NPR',
                'NZD',
                'OMR',
                'PAB',
                'PEN',
                'PGK',
                'PHP',
                'PKR',
                'PLN',
                'PYG',
                'QAR',
                'RON',
                'RSD',
                'RUB',
                'RWF',
                'SAR',
                'SBD',
                'SCR',
                'SDG',
                'SEK',
                'SGD',
                'SHP',
                'SLL',
                'SOS',
                'SRD',
                'STD',
                'STN',
                'SVC',
                'SYP',
                'SZL',
                'THB',
                'TJS',
                'TMT',
                'TND',
                'TOP',
                'TRY',
                'TTD',
                'TWD',
                'TZS',
                'UAH',
                'UGX',
                'USD',
                'USN',
                'UYI',
                'UYU',
                'UYW',
                'UZS',
                'VED',
                'VEF',
                'VES',
                'VND',
                'VUV',
                'WST',
                'XAG',
                'XAU',
                'XAF',
                'XBA',
                'XBB',
                'XBC',
                'XBD',
                'XCD',
                'XDR',
                'XOF',
                'XPD',
                'XPF',
                'XPT',
                'XSU',
                'XTS',
                'XUA',
                'XXX',
                'YER',
                'ZAR',
                'ZIG',
                'ZMK',
                'ZWL',
                'ZMW',
                'SSP',
                'NON_FIAT',
            ])
            .describe('Fiat(ISO-4217) currency code or NON_FIAT for non fiat currencies.')
            .optional(),
        currencyCode: z.string().describe('Currency code for NON_FIAT currency.').optional(),
    })
    .describe('Represents a currency eg. USD, EUR.')

export type Currency = z.infer<typeof Currency>

export const CardTransaction = z
    .object({
        advice: z.boolean().describe('Whether the given request should be accepted without balance validations.'),
        amount: z.number().describe('The amount of money to be withdrawn in the financial transaction.'),
        cardAcceptor: CardAcceptor.optional(),
        cardToken: z.string().describe('The reference token of the card.').optional(),
        currencyCode: z
            .string()
            .describe(
                'The ISO currency code in which the card reversal transaction is posted. The amounts are stored in the base currency, but the transaction can be created with a foreign currency.',
            )
            .optional(),
        encodedKey: z.string().describe('The encoded key of the entity, generated, globally unique').optional(),
        externalAuthorizationReferenceId: z
            .string()
            .describe(
                'The external authorization hold reference ID, which relates this card transaction to a previous authorization hold.',
            )
            .optional(),
        externalReferenceId: z
            .string()
            .describe('The external reference ID to be used to reference the card transaction in subsequent requests.'),
        userTransactionTime: z.string().describe('The formatted time at which the user made this card transaction.').optional(),
    })
    .describe('A card transaction entry which will have a corresponding a financial transaction performed.')

export type CardTransaction = z.infer<typeof CardTransaction>

export const LoanAffectedAmounts = z
    .object({
        deferredInterestAmount: z
            .number()
            .describe('How much interest pre-paid was added/removed in account, within this transaction (including taxes).')
            .optional(),
        feesAmount: z.number().describe(' How much fees was added/removed in account, within this transaction.').optional(),
        fundersInterestAmount: z
            .number()
            .describe('How much interest is given to the investors, within this transaction (only for p2p products)')
            .optional(),
        interestAmount: z
            .number()
            .describe(
                'How much interest was added/removed in account, within this transaction (including taxes). If there is any deferred interest amount set in this transaction, that amount should be included in this field.',
            )
            .optional(),
        interestFromArrearsAmount: z
            .number()
            .describe('How much interest from arrears was added/removed in account, within this transaction (including taxes).')
            .optional(),
        organizationCommissionAmount: z
            .number()
            .describe('How much interest is given to the organization, within this transaction (only for p2p products)')
            .optional(),
        paymentHolidaysInterestAmount: z
            .number()
            .describe(
                'How much Payment Holidays interest was added/removed in account, within this transaction (including taxes).',
            )
            .optional(),
        penaltyAmount: z
            .number()
            .describe('How much penalties was added/removed in account, within this transaction.')
            .optional(),
        principalAmount: z
            .number()
            .describe('How much principal was added/removed in account, within this transaction.')
            .optional(),
    })
    .describe('The amounts affected after completing the loan transaction')

export type LoanAffectedAmounts = z.infer<typeof LoanAffectedAmounts>

export const TransactionBalances = z
    .object({
        advancePosition: z.number().describe('Captures the advance (prepaid) amount.').optional(),
        arrearsPosition: z.number().describe('Captures the arrears position amount for the account in arrears.').optional(),
        expectedPrincipalRedraw: z
            .number()
            .describe(
                'The difference between principal balance and redraw balance after each transaction performed on the loan account.',
            )
            .optional(),
        principalBalance: z.number().describe('The account redraw balance captured after the transaction update.').optional(),
        redrawBalance: z.number().describe('The account redraw balance captured after the transaction update.').optional(),
        totalBalance: z.number().describe('The running balance still owed for the loan.').optional(),
    })
    .describe('The balances changed within a transaction.')

export type TransactionBalances = z.infer<typeof TransactionBalances>

export const DisbursementTransferDetailsInput = z
    .object({
        linkedAccountId: z.string().describe('The id of the linked deposit account').optional(),
        linkedAccountKey: z.string().describe('The encoded key of the linked deposit account').optional(),
    })
    .describe('Represents the input for the transfer details for a disbursement transaction')

export type DisbursementTransferDetailsInput = z.infer<typeof DisbursementTransferDetailsInput>

export const TransactionDetailsInput = z
    .object({
        transactionChannelId: z
            .string()
            .describe('The id of the transaction channel associated with the transaction details.')
            .optional(),
        transactionChannelKey: z
            .string()
            .describe('The encoded key of the transaction channel associated with the transaction details.')
            .optional(),
    })
    .describe('Contains the details about transaction including fields like transaction channel key and channel ID')

export type TransactionDetailsInput = z.infer<typeof TransactionDetailsInput>

export const FeeInput = z
    .object({
        amount: z.number().describe('The amount of the fee to apply').optional(),
        percentage: z.number().describe('The percentage of the fee to apply').optional(),
        predefinedFeeKey: z.string().describe('The encoded key of the predefined fee'),
    })
    .describe('An amount of predefined fee to apply on account.')

export type FeeInput = z.infer<typeof FeeInput>

export const RestError = z.object({
    errorCode: z.number().int().optional(),
    errorReason: z.string().optional(),
    errorSource: z.string().optional(),
})

export type RestError = z.infer<typeof RestError>

export const LoanTransaction = z
    .object({
        accountBalances: TransactionBalances.optional(),
        adjustmentTransactionKey: z
            .string()
            .describe(
                'The key of the loan transaction where the adjustment for the transaction was made (if any adjustment was involved).',
            )
            .optional(),
        affectedAmounts: LoanAffectedAmounts.optional(),
        amount: z.number().describe('The amount that was added or removed on the loan account.').optional(),
        bookingDate: z
            .string()
            .datetime({ offset: true })
            .describe('The date when the corresponding journal entry is booked.')
            .optional(),
        branchKey: z.string().describe('The branch where the transaction was performed.').optional(),
        cardTransaction: CardTransaction.optional(),
        centreKey: z.string().describe('The center where the transaction was performed.').optional(),
        creationDate: z
            .string()
            .datetime({ offset: true })
            .describe('The date when this loan transaction was created.')
            .optional(),
        currency: Currency.optional(),
        customPaymentAmounts: CustomPaymentAmount.array()
            .describe('The list of custom amounts which the user has paid as part of this transaction.')
            .optional(),
        encodedKey: z
            .string()
            .describe('The encoded key of the loan transaction, which is auto generated, and must be unique.')
            .optional(),
        externalId: z
            .string()
            .describe('The external ID of the loan transaction, it is customizable, and must be unique.')
            .optional(),
        fees: Fee.array()
            .describe('The amounts that have been applied or paid as part of this transaction and involved predefined fees.')
            .optional(),
        id: z
            .string()
            .describe('The ID of the loan transaction, can be generated and customized, and must be unique.')
            .optional(),
        installmentEncodedKey: z
            .string()
            .describe('The specific installment encoded key associated to the loan transaction.')
            .optional(),
        migrationEventKey: z
            .string()
            .describe(
                `The migration event encoded key associated with the loan account. If the account was imported, track which 'migration event' it came from.`,
            )
            .optional(),
        notes: z.string().describe('The notes or description for the loan transaction.').optional(),
        originalAmount: z
            .number()
            .describe(
                'The amount that was posted in a foreign currency. This amount was converted using the exchange rate available at entry date and set into the amount field.',
            )
            .optional(),
        originalCurrencyCode: z
            .string()
            .describe(
                'The currency in which this transaction was posted. The amounts are stored in the base currency, but the user may enter it in a foreign currency.',
            )
            .optional(),
        originalTransactionKey: z
            .string()
            .describe(
                'The encoded key of the transaction that was adjusted as part of this one. Available only for adjustment transactions.',
            )
            .optional(),
        parentAccountKey: z.string().describe('The key of the parent loan account.').optional(),
        parentLoanTransactionKey: z.string().describe('The key of the parent loan transaction.').optional(),
        prepaymentRecalculationMethod: z
            .enum([
                'NO_RECALCULATION',
                'RESCHEDULE_REMAINING_REPAYMENTS',
                'RECALCULATE_SCHEDULE_KEEP_SAME_NUMBER_OF_TERMS',
                'RECALCULATE_SCHEDULE_KEEP_SAME_PRINCIPAL_AMOUNT',
                'RECALCULATE_SCHEDULE_KEEP_SAME_TOTAL_REPAYMENT_AMOUNT',
                'REDUCE_AMOUNT_PER_INSTALLMENT',
                'REDUCE_NUMBER_OF_INSTALLMENTS',
                'REDUCE_NUMBER_OF_INSTALLMENTS_NEW',
            ])
            .describe('The prepayment recalculation method of the loan transaction.')
            .optional(),
        taxes: Taxes.optional(),
        terms: LoanTerms.optional(),
        tillKey: z.string().describe('The till key associated with the transaction.').optional(),
        transactionDetails: TransactionDetails.optional(),
        transferDetails: TransferDetails.optional(),
        type: z
            .enum([
                'IMPORT',
                'DISBURSEMENT',
                'DISBURSEMENT_ADJUSTMENT',
                'WRITE_OFF',
                'WRITE_OFF_ADJUSTMENT',
                'REPAYMENT',
                'PAYMENT_MADE',
                'WITHDRAWAL_REDRAW',
                'WITHDRAWAL_REDRAW_ADJUSTMENT',
                'FEE_APPLIED',
                'FEE_CHARGED',
                'FEE_CAPITALISED',
                'SCHEDULE_FIX_APPLIED',
                'FEES_DUE_REDUCED',
                'FEE_REFUND',
                'FEE_REFUND_ADJUSTMENT',
                'FEE_ADJUSTMENT',
                'PENALTY_APPLIED',
                'PENALTY_ADJUSTMENT',
                'PENALTIES_DUE_REDUCED',
                'REPAYMENT_ADJUSTMENT',
                'FEE_CAPITALISED_ADJUSTMENT',
                'PAYMENT_MADE_ADJUSTMENT',
                'INTEREST_RATE_CHANGED',
                'TAX_RATE_CHANGED',
                'PENALTY_RATE_CHANGED',
                'INTEREST_APPLIED',
                'IBF_INTEREST_APPLIED',
                'INTEREST_APPLIED_ADJUSTMENT',
                'INTEREST_DUE_REDUCED',
                'PENALTY_REDUCTION_ADJUSTMENT',
                'FEE_REDUCTION_ADJUSTMENT',
                'INTEREST_REDUCTION_ADJUSTMENT',
                'DEFERRED_INTEREST_APPLIED',
                'DEFERRED_INTEREST_APPLIED_ADJUSTMENT',
                'DEFERRED_INTEREST_PAID',
                'DEFERRED_INTEREST_PAID_ADJUSTMENT',
                'INTEREST_LOCKED',
                'FEE_LOCKED',
                'PENALTY_LOCKED',
                'INTEREST_UNLOCKED',
                'FEE_UNLOCKED',
                'PENALTY_UNLOCKED',
                'REDRAW_TRANSFER',
                'REDRAW_REPAYMENT',
                'REDRAW_TRANSFER_ADJUSTMENT',
                'REDRAW_REPAYMENT_ADJUSTMENT',
                'TRANSFER',
                'TRANSFER_ADJUSTMENT',
                'BRANCH_CHANGED',
                'TERMS_CHANGED',
                'CARD_TRANSACTION_REVERSAL',
                'CARD_TRANSACTION_REVERSAL_ADJUSTMENT',
                'DUE_DATE_CHANGED',
                'DUE_DATE_CHANGED_ADJUSTMENT',
                'ACCOUNT_TERMINATED',
                'ACCOUNT_TERMINATED_ADJUSTMENT',
                'REFUND',
                'REFUND_ADJUSTMENT',
                'REDUCE_BALANCE',
                'REDUCE_BALANCE_ADJUSTMENT',
                'PRINCIPAL_OVERPAYMENT',
                'PRINCIPAL_OVERPAYMENT_ADJUSTMENT',
            ])
            .describe('The type of loan transaction.')
            .optional(),
        userKey: z.string().describe('The user that performed the transaction.').optional(),
        valueDate: z
            .string()
            .datetime({ offset: true })
            .describe('The date of the entry in the organization time format and timezone.')
            .optional(),
    })
    .passthrough()
    .describe(`Represents the action performed on a loan account after which the account's amount changes its value.`)

export type LoanTransaction = z.infer<typeof LoanTransaction>

export const AdjustTransactionInstallmentDetailsDTO = z
    .object({
        amountToAdd: z
            .number()
            .describe(
                'The amount to be added on the fee/penalty due amounts (depending on transaction type), on the corresponding installment',
            )
            .optional(),
        installmentKey: z.string().describe('The encoded key of the installment').optional(),
    })
    .describe('Contains the details for the spread of the adjusted amount over the installments')

export type AdjustTransactionInstallmentDetailsDTO = z.infer<typeof AdjustTransactionInstallmentDetailsDTO>

export const LoanTransactionSortingCriteria = z
    .object({
        field: z
            .enum([
                'id',
                'externalId',
                'creationDate',
                'valueDate',
                'parentAccountId',
                'productId',
                'amount',
                'originalAmount',
                'originalCurrencyCode',
                'branchId',
                'centreId',
                'tillId',
                'terms.interestSettings.interestRate',
                'transactionDetails.transactionChannelId',
                'fees.name',
                'accountBalances.totalBalance',
                'accountBalances.principalBalance',
                'accountBalances.redrawBalance',
                'accountBalances.expectedPrincipalRedraw',
                'accountBalances.advancePosition',
                'accountBalances.arrearsPosition',
                'affectedAmounts.principalAmount',
                'affectedAmounts.interestAmount',
                'affectedAmounts.interestFromArrearsAmount',
                'affectedAmounts.deferredInterestAmount',
                'affectedAmounts.feesAmount',
                'affectedAmounts.penaltyAmount',
                'affectedAmounts.organizationCommissionAmount',
                'affectedAmounts.fundersInterestAmount',
                'taxes.taxRate',
            ])
            .describe(
                'Contains the field that can be used as sorting selection. Can be native (one from the provided list) or otherwise can specify a custom field using the format [customFieldSetId].[customFieldId].',
            ),
        order: z.enum(['ASC', 'DESC']).describe('The sorting order: `ASC` or `DESC`. The default order is `DESC`.').optional(),
    })
    .describe('The sorting criteria used for when searching loan transactions.')

export type LoanTransactionSortingCriteria = z.infer<typeof LoanTransactionSortingCriteria>

export const LoanTransactionFilterCriteria = z
    .object({
        field: z.union([
            z
                .enum([
                    'encodedKey',
                    'id',
                    'externalId',
                    'creationDate',
                    'valueDate',
                    'parentAccountKey',
                    'parentAccountHolderKey',
                    'productTypeKey',
                    'productID',
                    'type',
                    'amount',
                    'originalAmount',
                    'originalCurrencyCode',
                    'affectedAmounts.principalAmount',
                    'affectedAmounts.interestAmount',
                    'affectedAmounts.fundersInterestAmount',
                    'affectedAmounts.organizationCommissionAmount',
                    'affectedAmounts.deferredInterestAmount',
                    'affectedAmounts.feesAmount',
                    'affectedAmounts.penaltyAmount',
                    'taxes.taxRate',
                    'accountBalances.totalBalance',
                    'accountBalances.advancePosition',
                    'accountBalances.arrearsPosition',
                    'accountBalances.expectedPrincipalRedraw',
                    'accountBalances.redrawBalance',
                    'accountBalances.principalBalance',
                    'userKey',
                    'branchKey',
                    'branchID',
                    'centreKey',
                    'centreID',
                    'tillKey',
                    'tillID',
                    'adjustmentTransactionKey',
                    'originalTransactionKey',
                    'terms.interestSettings.interestRate',
                    'transactionDetails.transactionChannelKey',
                    'transactionDetails.transactionChannelId',
                    'wasAdjusted',
                    'typeIsAdjustment',
                    'fees.predefinedFeeKey',
                    'fees.trigger',
                    'fees.name',
                    'parentAccountID',
                    'adjustmentTransactionID',
                    'originalTransactionID',
                ])
                .describe(
                    'Contains the actual searching fields that can be native (one from the provided list) or otherwise can specify a custom field definition using the format [customFieldSetId].[customFieldId].\\n|Field with limited capabilities          |Data Type |Operators   |\\n|-----------------------------------------|----------|------------|\\n|originalTransactionKey                   |KEY       |EQUALS, IN  |\\n|transactionDetails.transactionChannelId  |STRING    |EQUALS      |\\n|originalTransactionID                    |STRING    |EQUALS      |\\n',
                ),
            z.string(),
        ]),
        operator: z
            .enum([
                'EQUALS',
                'EQUALS_CASE_SENSITIVE',
                'DIFFERENT_THAN',
                'MORE_THAN',
                'LESS_THAN',
                'BETWEEN',
                'ON',
                'AFTER',
                'AFTER_INCLUSIVE',
                'BEFORE',
                'BEFORE_INCLUSIVE',
                'STARTS_WITH',
                'STARTS_WITH_CASE_SENSITIVE',
                'IN',
                'TODAY',
                'THIS_WEEK',
                'THIS_MONTH',
                'THIS_YEAR',
                'LAST_DAYS',
                'EMPTY',
                'NOT_EMPTY',
            ])
            .describe(
                '| **Operator**                | **Affected values**  | **Available for**                                                    |\\n|---------------               |----------------------|----------------------------------------------------------------------|\\n| EQUALS                       | ONE_VALUE            | BIG_DECIMAL,BOOLEAN,LONG,MONEY,NUMBER,PERCENT,STRING,ENUM,KEY        |\\n| EQUALS_CASE_SENSITIVE        | ONE_VALUE            | BIG_DECIMAL,BOOLEAN,LONG,MONEY,NUMBER,PERCENT,STRING,ENUM,KEY 		  |\\n| MORE_THAN                    | ONE_VALUE            | BIG_DECIMAL,NUMBER,MONEY                                             |\\n| LESS_THAN                    | ONE_VALUE            | BIG_DECIMAL,NUMBER,MONEY                                             |\\n| BETWEEN                      | TWO_VALUES           | BIG_DECIMAL,NUMBER,MONEY,DATE,DATE_TIME                              |\\n| ON                           | ONE_VALUE            | DATE,DATE_TIME                                                       |\\n| AFTER                        | ONE_VALUE            | DATE,DATE_TIME                                                       |\\n| BEFORE                       | ONE_VALUE            | DATE,DATE_TIME                                                       |\\n| BEFORE_INCLUSIVE             | ONE_VALUE            | DATE,DATE_TIME                                                       |\\n| STARTS_WITH                  | ONE_VALUE            | STRING                                                               |\\n| STARTS_WITH_CASE_SENSITIVE   | ONE_VALUE            | STRING                                                               |\\n| IN                           | LIST                 | ENUM,KEY                                                             |\\n| TODAY                        | NO_VALUE             | DATE,DATE_TIME                                                       |\\n| THIS_WEEK                    | NO_VALUE             | DATE,DATE_TIME                                                       |\\n| THIS_MONTH                   | NO_VALUE             | DATE,DATE_TIME                                                       |\\n| THIS_YEAR                    | NO_VALUE             | DATE,DATE_TIME                                                       |\\n| LAST_DAYS                    | ONE_VALUE            | NUMBER                                                               |\\n| EMPTY                        | NO_VALUE             | BIG_DECIMAL,LONG,MONEY,NUMBER,PERCENT,STRING,ENUM,KEY,DATE,DATE_TIME |\\n| NOT_EMPTY                    | NO_VALUE             | BIG_DECIMAL,LONG,MONEY,NUMBER,PERCENT,STRING,ENUM,KEY,DATE,DATE_TIME |',
            ),
        secondValue: z
            .string()
            .describe('The second value to match the searching criteria, when the `BETWEEN` operator is used.')
            .optional(),
        value: z.string().describe('The value to match the searching criteria.').optional(),
        values: z.string().array().describe('List of values when the `IN` operator is used.').optional(),
    })
    .describe('The unit that composes the list used for Loan transaction client directed queries searching')

export type LoanTransactionFilterCriteria = z.infer<typeof LoanTransactionFilterCriteria>

export const LoanTransactionDetailsInput = z
    .object({
        transactionChannelId: z
            .string()
            .describe('The id of the transaction channel associated with the transaction details input.')
            .optional(),
        transactionChannelKey: z
            .string()
            .describe('The encoded key of the transaction channel associated with the transaction details input.')
            .optional(),
    })
    .describe('Contains the details about transaction including fields like transaction channel key and channel ID')

export type LoanTransactionDetailsInput = z.infer<typeof LoanTransactionDetailsInput>

export const DisbursementLoanTransactionInput = z
    .object({
        amount: z.number().describe('The amount to disburse').optional(),
        bookingDate: z
            .string()
            .datetime({ offset: true })
            .describe('The date when disbursement is logged into accounting)')
            .optional(),
        externalId: z.string().describe('The external id of the disbursement transaction. Customizable and unique').optional(),
        fees: FeeInput.array().describe('The list of the fees to apply').optional(),
        firstRepaymentDate: z
            .string()
            .datetime({ offset: true })
            .describe('The date of the first repayment for the loan account (as Organization Time)')
            .optional(),
        notes: z.string().describe('Extra notes related to disbursement action or transaction').optional(),
        originalCurrencyCode: z.string().describe('The currency for the disbursement transaction').optional(),
        shiftAdjustableInterestPeriods: z
            .boolean()
            .describe('Indicates whether the validFrom dates from Adjustable Interest Rates can be shifted automatically or not')
            .optional(),
        transactionDetails: TransactionDetailsInput.optional(),
        transferDetails: DisbursementTransferDetailsInput.optional(),
        valueDate: z.string().datetime({ offset: true }).describe('The date of the disbursal (as Organization Time)').optional(),
    })
    .passthrough()
    .describe('The input representation of a loan transaction when making a disbursement')

export type DisbursementLoanTransactionInput = z.infer<typeof DisbursementLoanTransactionInput>

export const ErrorResponse = z.object({
    errors: RestError.array().optional(),
})

export type ErrorResponse = z.infer<typeof ErrorResponse>

export const FeeLoanTransactionInput = z
    .object({
        amount: z.number().describe('The fee amount to be applied on the account').optional(),
        bookingDate: z
            .string()
            .datetime({ offset: true })
            .describe('The date when the fee transaction is logged into accounting (as Organization Time)')
            .optional(),
        externalId: z.string().describe('The external id of the repayment transaction, customizable, unique').optional(),
        feeCapitalisation: z.boolean().describe('This flag indicates whether the fee should be capitalised or not').optional(),
        firstRepaymentDate: z
            .string()
            .datetime({ offset: true })
            .describe('The date of the first repayment for the loan account (as Organization Time)')
            .optional(),
        installmentNumber: z.number().int().describe('The installment number on which the fee will be applied').optional(),
        notes: z.string().describe('Extra notes about the current transaction').optional(),
        predefinedFeeKey: z.string().describe('The encodedKey of the predefined fee that defines the current fee').optional(),
        valueDate: z
            .string()
            .datetime({ offset: true })
            .describe('The date when to apply the fee (as Organization Time)')
            .optional(),
    })
    .describe('Represents the request payload for creating a transaction of type FEE_APPLIED')

export type FeeLoanTransactionInput = z.infer<typeof FeeLoanTransactionInput>

export const GetAllResponse = LoanTransaction.array()

export type GetAllResponse = z.infer<typeof GetAllResponse>

export const GetTransactionsForAllVersionsResponse = LoanTransaction.array()

export type GetTransactionsForAllVersionsResponse = z.infer<typeof GetTransactionsForAllVersionsResponse>

export const LoanTransactionAdjustmentDetails = z
    .object({
        bookingDate: z
            .string()
            .datetime({ offset: true })
            .describe(
                'Date when the adjustment transaction is logged into accounting. Can be null. Available only for REPAYMENT, PAYMENT_MADE and FEE',
            )
            .optional(),
        installments: AdjustTransactionInstallmentDetailsDTO.array()
            .describe('Details of installments with their corresponding amounts to be added to the reduced fee/penalty')
            .optional(),
        notes: z.string().describe('Notes detailing why the transaction is adjusted'),
    })
    .describe('Contains the details of the transaction adjustment')

export type LoanTransactionAdjustmentDetails = z.infer<typeof LoanTransactionAdjustmentDetails>

export const LoanTransactionSearchCriteria = z
    .object({
        filterCriteria: LoanTransactionFilterCriteria.array().describe('The list of filtering criteria.').optional(),
        sortingCriteria: LoanTransactionSortingCriteria.optional(),
    })
    .describe('Represents the filtering and sorting criteria when searching loan transactions.')

export type LoanTransactionSearchCriteria = z.infer<typeof LoanTransactionSearchCriteria>

export const LockLoanAccountInput = z
    .object({
        lockedAccountTotalDueType: z
            .enum(['BALANCE_AMOUNT', 'DUE_AMOUNT_ON_LATE_INSTALLMENTS'])
            .describe('The locked account total due type.')
            .optional(),
        lockedOperations: z
            .enum(['APPLY_INTEREST', 'APPLY_FEES', 'APPLY_PENALTIES'])
            .array()
            .describe(
                'A list with operations which are locked when the account is in substate AccountState.LOCKED. Allowed options are `APPLY_INTEREST`, `APPLY_PENALTIES`, and `APPLY_FEES`.',
            )
            .optional(),
        notes: z.string().describe('The notes about the account locking operation.').optional(),
    })
    .describe('Represents the information for locking an account.')

export type LockLoanAccountInput = z.infer<typeof LockLoanAccountInput>

export const LockLoanTransactionsWrapper = z
    .object({
        loanTransactions: LoanTransaction.array().describe('The list of loan transactions').optional(),
    })
    .describe('Represents a wrapper over a list of loan transactions, to be used when locking and unlocking an account.')

export type LockLoanTransactionsWrapper = z.infer<typeof LockLoanTransactionsWrapper>

export const PaymentMadeTransactionInput = z
    .object({
        amount: z.number().describe('The amount of the payment'),
        bookingDate: z
            .string()
            .datetime({ offset: true })
            .describe('The booking date of the payment made transaction (as Organization Time)')
            .optional(),
        externalId: z.string().describe('The external id of the payment made transaction, customizable, unique').optional(),
        notes: z
            .string()
            .describe('Notes about the payment made transaction. The notes can have at most 255 characters in length.')
            .optional(),
        originalCurrencyCode: z.string().describe('The currency code for the payment made transaction').optional(),
        transactionDetails: LoanTransactionDetailsInput.optional(),
        valueDate: z
            .string()
            .datetime({ offset: true })
            .describe('The entry date of the payment made transaction (as Organization Time)')
            .optional(),
    })
    .passthrough()
    .describe('Represents the request payload for creating a transaction of type PAYMENT_MADE')

export type PaymentMadeTransactionInput = z.infer<typeof PaymentMadeTransactionInput>

export const PrincipalOverpaymentLoanTransactionInput = z
    .object({
        amount: z.number().describe('The amount of the repayment'),
        bookingDate: z
            .string()
            .datetime({ offset: true })
            .describe('The booking date of the repayment (as Organization Time)')
            .optional(),
        externalId: z.string().describe('The external id of the repayment transaction, customizable, unique').optional(),
        notes: z
            .string()
            .describe('Extra notes about the repayment transaction. Notes can have at most 255 characters in length.')
            .optional(),
        originalCurrencyCode: z.string().describe('The currency code for the repayment transaction').optional(),
        transactionDetails: LoanTransactionDetailsInput.optional(),
        valueDate: z
            .string()
            .datetime({ offset: true })
            .describe('The entry date of the repayment (as Organization Time)')
            .optional(),
    })
    .describe('Represents the request payload for creating a transaction of type PRINCIPAL_OVERPAYMENT')

export type PrincipalOverpaymentLoanTransactionInput = z.infer<typeof PrincipalOverpaymentLoanTransactionInput>

export const RedrawRepaymentTransactionInputDTO = z
    .object({
        amount: z.number().describe('The amount of the redraw repayment').optional(),
        bookingDate: z
            .string()
            .datetime({ offset: true })
            .describe('The booking date of the repayment (as Organization Time)')
            .optional(),
        notes: z
            .string()
            .describe('Extra notes about the redraw repayment transaction. Notes can have at most 255 characters in length.')
            .optional(),
        valueDate: z
            .string()
            .datetime({ offset: true })
            .describe('The entry date of the repayment (as Organization Time)')
            .optional(),
    })
    .describe('Represents the request payload for creating a transaction of type REDRAW_REPAYMENT')

export type RedrawRepaymentTransactionInputDTO = z.infer<typeof RedrawRepaymentTransactionInputDTO>

export const RefundLoanTransactionInput = z
    .object({
        amount: z.number().describe('The amount of the refund'),
        bookingDate: z
            .string()
            .datetime({ offset: true })
            .describe('The booking date of the refund (as Organization Time)')
            .optional(),
        externalId: z.string().describe('The external id of the refund transaction. Customizable and unique').optional(),
        linkedDisbursementKey: z.string().describe('The disbursement key for which the refund is performed'),
        notes: z
            .string()
            .describe('Extra notes about the refund transaction. Notes can have at most 255 characters in length.')
            .optional(),
        transactionDetails: LoanTransactionDetailsInput.optional(),
        valueDate: z
            .string()
            .datetime({ offset: true })
            .describe('The entry date of the refund (as Organization Time)')
            .optional(),
    })
    .describe('Represents the request payload for creating a transaction of type REFUND')

export type RefundLoanTransactionInput = z.infer<typeof RefundLoanTransactionInput>

export const RepaymentLoanTransactionInput = z
    .object({
        amount: z.number().describe('The amount of the repayment'),
        bookingDate: z
            .string()
            .datetime({ offset: true })
            .describe('The booking date of the repayment (as Organization Time)')
            .optional(),
        customPaymentAmounts: CustomPaymentAmount.array().describe('The list of custom amounts of the repayment').optional(),
        externalId: z.string().describe('The external id of the repayment transaction, customizable, unique').optional(),
        installmentEncodedKey: z
            .string()
            .describe('The encoded key of the schedule installment to which this repayment is associated')
            .optional(),
        notes: z
            .string()
            .describe('Extra notes about the repayment transaction. Notes can have at most 255 characters in length.')
            .optional(),
        originalCurrencyCode: z.string().describe('The currency code for the repayment transaction').optional(),
        prepaymentRecalculationMethod: z
            .enum([
                'NO_RECALCULATION',
                'RESCHEDULE_REMAINING_REPAYMENTS',
                'RECALCULATE_SCHEDULE_KEEP_SAME_NUMBER_OF_TERMS',
                'RECALCULATE_SCHEDULE_KEEP_SAME_PRINCIPAL_AMOUNT',
                'RECALCULATE_SCHEDULE_KEEP_SAME_TOTAL_REPAYMENT_AMOUNT',
                'REDUCE_AMOUNT_PER_INSTALLMENT',
                'REDUCE_NUMBER_OF_INSTALLMENTS',
                'REDUCE_NUMBER_OF_INSTALLMENTS_NEW',
            ])
            .describe('The prepayment recalculation method of the repayment')
            .optional(),
        transactionDetails: LoanTransactionDetailsInput.optional(),
        valueDate: z
            .string()
            .datetime({ offset: true })
            .describe('The entry date of the repayment (as Organization Time)')
            .optional(),
    })
    .passthrough()
    .describe('Represents the request payload for creating a transaction of type REPAYMENT')

export type RepaymentLoanTransactionInput = z.infer<typeof RepaymentLoanTransactionInput>

export const SearchResponse = LoanTransaction.array()

export type SearchResponse = z.infer<typeof SearchResponse>

export const UnlockLoanAccountInput = z
    .object({
        notes: z.string().describe('Extra notes about the current unlocking of account').optional(),
    })
    .describe('Represents the request payload for unlocking an account')

export type UnlockLoanAccountInput = z.infer<typeof UnlockLoanAccountInput>

export const WithdrawalRedrawTransactionInput = z
    .object({
        amount: z.number().describe('The amount to be withdrawn from redraw balance'),
        bookingDate: z
            .string()
            .datetime({ offset: true })
            .describe('The booking date of the withdrawal transaction (as Organization Time)')
            .optional(),
        externalId: z.string().describe('The external id of the withdrawal transaction, customizable, unique').optional(),
        notes: z
            .string()
            .describe('Extra notes about the withdrawal transaction. Notes can have at most 255 characters in length.')
            .optional(),
        originalCurrencyCode: z.string().describe('The currency code for the transaction').optional(),
        transactionDetails: LoanTransactionDetailsInput.optional(),
        valueDate: z
            .string()
            .datetime({ offset: true })
            .describe('The value date of the withdrawal transaction (as Organization Time)')
            .optional(),
    })
    .passthrough()
    .describe('Represents the request payload for creating a transaction of type WITHDRAWAL_REDRAW')

export type WithdrawalRedrawTransactionInput = z.infer<typeof WithdrawalRedrawTransactionInput>
