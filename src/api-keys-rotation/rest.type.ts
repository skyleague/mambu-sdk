/**
 * Generated by @skyleague/therefore@v1.0.0-local
 * Do not manually touch this
 */
/* eslint-disable */

import type { DefinedError, ValidateFunction } from 'ajv'

import { validate as ApiKeyRotationResultValidator } from './schemas/api-key-rotation-result.schema.js'
import { validate as ApiKeyValidator } from './schemas/api-key.schema.js'
import { validate as ErrorResponseValidator } from './schemas/error-response.schema.js'

/**
 * Represents an API key of an API consumer.
 */
export interface ApiKey {
    /**
     * A six character cleartext prefix of the API key. The prefix is not guaranteed to be unique. You must base any identification process on the API key ID, not the prefix.
     */
    apiKey?: string | undefined
    /**
     * The time to live (TTL) for the API key in seconds.
     */
    expirationTime?: number | undefined
    /**
     * The API key ID. You must base any identification process on the the API key ID as it is guaranteed to be unique.
     */
    id?: string | undefined
}

export const ApiKey = {
    validate: ApiKeyValidator as ValidateFunction<ApiKey>,
    get schema() {
        return ApiKey.validate.schema
    },
    get errors() {
        return ApiKey.validate.errors ?? undefined
    },
    is: (o: unknown): o is ApiKey => ApiKey.validate(o) === true,
    parse: (o: unknown): { right: ApiKey } | { left: DefinedError[] } => {
        if (ApiKey.is(o)) {
            return { right: o }
        }
        return { left: (ApiKey.errors ?? []) as DefinedError[] }
    },
} as const

/**
 * Represents the result of an API key rotation.
 */
export interface ApiKeyRotationResult {
    /**
     * The new API key created after rotating an existing API key.
     */
    apiKey?: string | undefined
    /**
     * The API key ID. You must base any identification process on the the API key ID as it is guaranteed to be unique.
     */
    id?: string | undefined
    /**
     * The new secret key created after rotating an existing API key.
     */
    secretKey?: string | undefined
}

export const ApiKeyRotationResult = {
    validate: ApiKeyRotationResultValidator as ValidateFunction<ApiKeyRotationResult>,
    get schema() {
        return ApiKeyRotationResult.validate.schema
    },
    get errors() {
        return ApiKeyRotationResult.validate.errors ?? undefined
    },
    is: (o: unknown): o is ApiKeyRotationResult => ApiKeyRotationResult.validate(o) === true,
    parse: (o: unknown): { right: ApiKeyRotationResult } | { left: DefinedError[] } => {
        if (ApiKeyRotationResult.is(o)) {
            return { right: o }
        }
        return { left: (ApiKeyRotationResult.errors ?? []) as DefinedError[] }
    },
} as const

export interface ErrorResponse {
    errors?: RestError[] | undefined
}

export const ErrorResponse = {
    validate: ErrorResponseValidator as ValidateFunction<ErrorResponse>,
    get schema() {
        return ErrorResponse.validate.schema
    },
    get errors() {
        return ErrorResponse.validate.errors ?? undefined
    },
    is: (o: unknown): o is ErrorResponse => ErrorResponse.validate(o) === true,
    parse: (o: unknown): { right: ErrorResponse } | { left: DefinedError[] } => {
        if (ErrorResponse.is(o)) {
            return { right: o }
        }
        return { left: (ErrorResponse.errors ?? []) as DefinedError[] }
    },
} as const

export interface RestError {
    errorCode?: number | undefined
    errorReason?: string | undefined
    errorSource?: string | undefined
}
