/**
 * Generated by @skyleague/therefore@v1.0.0-local
 * Do not manually touch this
 */
/* eslint-disable */
import type { ValidateFunction } from 'ajv'
import { ValidationError } from 'ajv'

/**
 * Represents an API key of an API consumer.
 */
export interface ApiKey {
    /**
     * A six character cleartext prefix of the API key. The prefix is not guaranteed to be unique. You must base any identification process on the API key ID, not the prefix.
     */
    apiKey?: string
    /**
     * The time to live (TTL) for the API key in seconds.
     */
    expirationTime?: number
    /**
     * The API key ID. You must base any identification process on the the API key ID as it is guaranteed to be unique.
     */
    id?: string
}

export const ApiKey = {
    validate: (await import('./schemas/api-key.schema.js')).validate as ValidateFunction<ApiKey>,
    get schema() {
        return ApiKey.validate.schema
    },
    get errors() {
        return ApiKey.validate.errors ?? undefined
    },
    is: (o: unknown): o is ApiKey => ApiKey.validate(o) === true,
    assert: (o: unknown) => {
        if (!ApiKey.validate(o)) {
            throw new ValidationError(ApiKey.errors ?? [])
        }
    },
} as const

/**
 * Represents the result of an API key rotation.
 */
export interface ApiKeyRotationResult {
    /**
     * The new API key created after rotating an existing API key.
     */
    apiKey?: string
    /**
     * The API key ID. You must base any identification process on the the API key ID as it is guaranteed to be unique.
     */
    id?: string
    /**
     * The new secret key created after rotating an existing API key.
     */
    secretKey?: string
}

export const ApiKeyRotationResult = {
    validate: (await import('./schemas/api-key-rotation-result.schema.js')).validate as ValidateFunction<ApiKeyRotationResult>,
    get schema() {
        return ApiKeyRotationResult.validate.schema
    },
    get errors() {
        return ApiKeyRotationResult.validate.errors ?? undefined
    },
    is: (o: unknown): o is ApiKeyRotationResult => ApiKeyRotationResult.validate(o) === true,
} as const

export interface ErrorResponse {
    errors?: RestError[]
}

export const ErrorResponse = {
    validate: (await import('./schemas/error-response.schema.js')).validate as ValidateFunction<ErrorResponse>,
    get schema() {
        return ErrorResponse.validate.schema
    },
    get errors() {
        return ErrorResponse.validate.errors ?? undefined
    },
    is: (o: unknown): o is ErrorResponse => ErrorResponse.validate(o) === true,
    assert: (o: unknown) => {
        if (!ErrorResponse.validate(o)) {
            throw new ValidationError(ErrorResponse.errors ?? [])
        }
    },
} as const

export interface RestError {
    errorCode?: number
    errorReason?: string
    errorSource?: string
}
