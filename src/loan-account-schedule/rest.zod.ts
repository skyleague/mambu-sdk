/**
 * Generated by @skyleague/therefore
 * Do not manually touch this
 */
/* eslint-disable */

import { z } from 'zod'

export const Amount = z
    .object({
        due: z.number().describe('The due amount.').optional(),
        expected: z.number().describe('The expected amount, which is sum of paid and due amounts.').optional(),
        paid: z.number().describe('The paid amount.').optional(),
    })
    .describe('Represents a simple installment amount structure.')

export type Amount = z.infer<typeof Amount>

export const AmountWithReduced = z
    .object({
        due: z.number().describe('The due amount.').optional(),
        expected: z.number().describe('The expected amount, which is sum of paid and due amounts.').optional(),
        paid: z.number().describe('The paid amount.').optional(),
        reduced: z.number().describe('The reduced amount.').optional(),
    })
    .describe('Represents a simple installment amount structure.')

export type AmountWithReduced = z.infer<typeof AmountWithReduced>

export const FeeAmount = z
    .object({
        due: z.number().describe('The due amount.').optional(),
        expected: z.number().describe('The expected amount, which is sum of paid and due amounts.').optional(),
        expectedUnapplied: z
            .number()
            .describe(
                'The expected amount, which is the sum of unapplied fee and planned fee due amounts. This value is not always retrieved. It is retrieved when the loan schedule is requestedwith full details.',
            )
            .optional(),
        paid: z.number().describe('The paid amount.').optional(),
    })
    .describe('Represents a fee amount.')

export type FeeAmount = z.infer<typeof FeeAmount>

export const InstallmentAllocationElementAmount = z
    .object({
        amount: Amount.optional(),
    })
    .describe('Represents an installment allocation element amount structure.')

export type InstallmentAllocationElementAmount = z.infer<typeof InstallmentAllocationElementAmount>

export const InstallmentAllocationElementTaxableAmount = z
    .object({
        amount: Amount.optional(),
        tax: Amount.optional(),
    })
    .describe('Represents an installment allocation element taxable amount structure.')

export type InstallmentAllocationElementTaxableAmount = z.infer<typeof InstallmentAllocationElementTaxableAmount>

export const InstallmentFeeDetails = z
    .object({
        amount: AmountWithReduced.optional(),
        encodedKey: z.string().describe('The encoded key of the predefined fee, auto generated, unique').optional(),
        id: z.string().describe('The id of the fee, provided by the client').optional(),
        name: z.string().describe('The name of the fee').optional(),
        tax: AmountWithReduced.optional(),
    })
    .describe('Represents fee details for an installment.')

export type InstallmentFeeDetails = z.infer<typeof InstallmentFeeDetails>

export const InstallmentFee = z
    .object({
        amount: FeeAmount.optional(),
        tax: Amount.optional(),
    })
    .describe('Represents an installment fee structure.')

export type InstallmentFee = z.infer<typeof InstallmentFee>

export const CustomSettingDetails = z
    .object({
        loanTransactionKey: z.string().describe('The loan transaction associated with the custom setting.').optional(),
        source: z.string().describe('The source of the custom setting').optional(),
        type: z.string().describe('The type of custom setting.').optional(),
    })
    .describe('Represents the custom settings for a loan schedule.')

export type CustomSettingDetails = z.infer<typeof CustomSettingDetails>

export const CarryForwardInterestSplit = z
    .object({
        amount: z.number().describe('The carry forward interest amount.').optional(),
        tax: z.number().describe('The taxes amount on the carry forward interest.').optional(),
    })
    .describe('Represents carry forward interest split')

export type CarryForwardInterestSplit = z.infer<typeof CarryForwardInterestSplit>

export const Installment = z
    .object({
        carryForwardInterestSplit: CarryForwardInterestSplit.optional(),
        customSettingDetails: CustomSettingDetails.array()
            .describe('Custom settings associated with the installment.')
            .optional(),
        dueDate: z.string().datetime({ offset: true }).describe('The installment due date.').optional(),
        encodedKey: z.string().describe('The encoded key of the installment, which is auto generated, and unique.').optional(),
        expectedClosingBalance: z
            .number()
            .describe(
                'The expected closing balance is the remaining amount per installment only applicable for interest only equal installment products.',
            )
            .optional(),
        fee: InstallmentFee.optional(),
        feeDetails: InstallmentFeeDetails.array()
            .describe('The breakdown of the fee amounts that have been applied to the loan account.')
            .optional(),
        fundersInterestDue: z.number().describe('The amount of interest allocated to funders for P2P accounts only.').optional(),
        interest: InstallmentAllocationElementTaxableAmount.optional(),
        interestAccrued: z
            .number()
            .describe(
                'The interest accrued calculated on previous repayment closing balance only applicable interest only equal installment products.',
            )
            .optional(),
        isPaymentHoliday: z
            .boolean()
            .describe('`TRUE` if a payment holiday is offered for the installment, `FALSE` otherwise.')
            .optional(),
        lastPaidDate: z.string().datetime({ offset: true }).describe('The installment last paid date.').optional(),
        lastPenaltyAppliedDate: z
            .string()
            .datetime({ offset: true })
            .describe('The most recent date on which a penalty was applied to the account.')
            .optional(),
        nonScheduledPrincipalBalanceOverpayment: z
            .number()
            .describe('The non-scheduled principal balance overpayment for the loan account')
            .optional(),
        notes: z.string().describe('Any comment or notes added to the installment.').optional(),
        number: z
            .string()
            .describe(
                'The order number of an installment among all the installments generated for a loan. Loan installments are put in ascending order by due date. The order number only applies to the content of a particular JSON response therefore it is not unique.',
            )
            .optional(),
        organizationCommissionDue: z
            .number()
            .describe('The amount of interest allocated to organization as commission for P2P accounts only.')
            .optional(),
        parentAccountKey: z.string().describe('The parent account key of the installment.').optional(),
        penalty: InstallmentAllocationElementTaxableAmount.optional(),
        principal: InstallmentAllocationElementAmount.optional(),
        repaidDate: z.string().datetime({ offset: true }).describe('The installment repaid date.').optional(),
        state: z.enum(['PENDING', 'LATE', 'PAID', 'PARTIALLY_PAID', 'GRACE']).describe('The installment state.').optional(),
    })
    .describe('Represents a single installment details structure.')

export type Installment = z.infer<typeof Installment>

export const CustomPredefinedFee = z
    .object({
        amount: z.number().describe('The amount of the custom fee.').optional(),
        encodedKey: z.string().describe('The encoded key of the custom predefined fee, auto generated, unique.').optional(),
        percentage: z.number().describe('The percentage of the custom fee.').optional(),
        predefinedFeeEncodedKey: z.string().describe('The encoded key of the predefined fee').optional(),
    })
    .describe(
        'The custom predefined fees, they may be used as the expected predefined fees that will be applied on the disbursement.',
    )

export type CustomPredefinedFee = z.infer<typeof CustomPredefinedFee>

export const TrancheDisbursementDetails = z
    .object({
        disbursementTransactionKey: z
            .string()
            .describe(
                'The key of the disbursement transaction logged when this tranche was disbursed. This field will be null until the tranche disbursement',
            )
            .optional(),
        expectedDisbursementDate: z
            .string()
            .datetime({ offset: true })
            .describe('The date when this tranche is supposed to be disbursed (as Organization Time)')
            .optional(),
    })
    .describe('The disbursement details regarding a loan tranche.')

export type TrancheDisbursementDetails = z.infer<typeof TrancheDisbursementDetails>

export const PeriodicPaymentForSchedulePreview = z
    .object({
        amount: z.number().describe('The PMT value used in periodic payment'),
        toInstallment: z.number().int().describe(`The installment's position up to which the PMT will be used`),
    })
    .describe(
        'For fixed term loans there is the possibility to define a payment plan. A payment plan consists of multiple periodic payments. This class holds information about a periodic payment for schedule preview.',
    )

export type PeriodicPaymentForSchedulePreview = z.infer<typeof PeriodicPaymentForSchedulePreview>

export const AccountInterestRateSettings = z
    .object({
        encodedKey: z.string().describe('The encoded key of the interest rate settings, auto generated, unique').optional(),
        indexSourceKey: z.string().describe('Index rate source key.').optional(),
        interestRate: z.number().describe('Interest rate value.').optional(),
        interestRateCeilingValue: z
            .number()
            .describe('Maximum value allowed for index based interest rate. Valid only for index interest rate.')
            .optional(),
        interestRateFloorValue: z
            .number()
            .describe('Minimum value allowed for index based interest rate. Valid only for index interest rate.')
            .optional(),
        interestRateReviewCount: z
            .number()
            .int()
            .describe('Interest rate review frequency unit count. Valid only for index interest rate.')
            .optional(),
        interestRateReviewUnit: z
            .enum(['DAYS', 'WEEKS', 'MONTHS'])
            .describe('Interest rate review frequency measurement unit. Valid only for index interest rate.')
            .optional(),
        interestRateSource: z
            .enum(['FIXED_INTEREST_RATE', 'INDEX_INTEREST_RATE'])
            .describe('Interest calculation method: fixed or indexed(interest spread + active organization index interest rate)'),
        interestSpread: z.number().describe('Interest spread value.').optional(),
        validFrom: z.string().datetime({ offset: true }).describe('Date since an interest rate is valid'),
    })
    .describe('Adjustable interest rates settings for loan account')

export type AccountInterestRateSettings = z.infer<typeof AccountInterestRateSettings>

export const RestError = z.object({
    errorCode: z.number().int().optional(),
    errorReason: z.string().optional(),
    errorSource: z.string().optional(),
})

export type RestError = z.infer<typeof RestError>

export const LoanAccountSchedulesPreviewProcessPMTTransactionally = z
    .object({
        differences: z.boolean().describe('Whether there differences on schedule or not.').optional(),
        existingSchedule: Installment.array().describe('The loan account existing schedule installments list.').optional(),
        schedule: Installment.array().describe('The loan account new schedule installments list.').optional(),
    })
    .describe('Payload structure to preview the loan account schedule differences when processing PMT transactionally.')

export type LoanAccountSchedulesPreviewProcessPMTTransactionally = z.infer<
    typeof LoanAccountSchedulesPreviewProcessPMTTransactionally
>

export const Currency = z
    .object({
        code: z
            .enum([
                'AED',
                'AFN',
                'ALL',
                'AMD',
                'ANG',
                'AOA',
                'ARS',
                'AUD',
                'AWG',
                'AZN',
                'BAM',
                'BBD',
                'BDT',
                'BGN',
                'BHD',
                'BIF',
                'BMD',
                'BND',
                'BOB',
                'BOV',
                'BRL',
                'BSD',
                'BTN',
                'BWP',
                'BYR',
                'BYN',
                'BZD',
                'CAD',
                'CDF',
                'CHE',
                'CHF',
                'CHW',
                'CLF',
                'CLP',
                'CNY',
                'COP',
                'COU',
                'CRC',
                'CUC',
                'CUP',
                'CVE',
                'CZK',
                'DJF',
                'DKK',
                'DOP',
                'DZD',
                'EGP',
                'ERN',
                'ETB',
                'EUR',
                'FJD',
                'FKP',
                'GBP',
                'GEL',
                'GHS',
                'GIP',
                'GMD',
                'GNF',
                'GTQ',
                'GYD',
                'HKD',
                'HNL',
                'HRK',
                'HTG',
                'HUF',
                'IDR',
                'ILS',
                'INR',
                'IQD',
                'IRR',
                'ISK',
                'JMD',
                'JOD',
                'JPY',
                'KES',
                'KGS',
                'KHR',
                'KMF',
                'KPW',
                'KRW',
                'KWD',
                'KYD',
                'KZT',
                'LAK',
                'LBP',
                'LKR',
                'LRD',
                'LSL',
                'LTL',
                'LVL',
                'LYD',
                'MAD',
                'MDL',
                'MGA',
                'MKD',
                'MMK',
                'MNT',
                'MOP',
                'MRO',
                'MRU',
                'MUR',
                'MVR',
                'MWK',
                'MXN',
                'MXV',
                'MYR',
                'MZN',
                'NAD',
                'NGN',
                'NIO',
                'NOK',
                'NPR',
                'NZD',
                'OMR',
                'PAB',
                'PEN',
                'PGK',
                'PHP',
                'PKR',
                'PLN',
                'PYG',
                'QAR',
                'RON',
                'RSD',
                'RUB',
                'RWF',
                'SAR',
                'SBD',
                'SCR',
                'SDG',
                'SEK',
                'SGD',
                'SHP',
                'SLL',
                'SOS',
                'SRD',
                'STD',
                'STN',
                'SVC',
                'SYP',
                'SZL',
                'THB',
                'TJS',
                'TMT',
                'TND',
                'TOP',
                'TRY',
                'TTD',
                'TWD',
                'TZS',
                'UAH',
                'UGX',
                'USD',
                'USN',
                'UYI',
                'UYU',
                'UYW',
                'UZS',
                'VED',
                'VEF',
                'VES',
                'VND',
                'VUV',
                'WST',
                'XAG',
                'XAU',
                'XAF',
                'XBA',
                'XBB',
                'XBC',
                'XBD',
                'XCD',
                'XDR',
                'XOF',
                'XPD',
                'XPF',
                'XPT',
                'XSU',
                'XTS',
                'XUA',
                'XXX',
                'YER',
                'ZAR',
                'ZIG',
                'ZMK',
                'ZWL',
                'ZMW',
                'SSP',
                'NON_FIAT',
            ])
            .describe('Fiat(ISO-4217) currency code or NON_FIAT for non fiat currencies.')
            .optional(),
        currencyCode: z.string().describe('Currency code for NON_FIAT currency.').optional(),
    })
    .describe('Represents a currency eg. USD, EUR.')

export type Currency = z.infer<typeof Currency>

export const LoanTranche = z
    .object({
        amount: z.number().describe('The amount this tranche has available for disburse'),
        disbursementDetails: TrancheDisbursementDetails.optional(),
        encodedKey: z.string().describe('The encoded key of the transaction details , auto generated, unique.').optional(),
        fees: CustomPredefinedFee.array().describe('Fees that are associated with this tranche').optional(),
        trancheNumber: z.number().int().describe('Index indicating the tranche number').optional(),
    })
    .describe(
        `In some cases organizations may approve loans but not disburse the full amount initially. They would like to spread the disbursement (and risk) over time. Likewise for the client, they may not need the full loan amount up front. They may want to have a loan to buy some equipment for their business but will make one purchase today and another purchase in a few months.  In these cases, they don't need the full amount and wouldn't want to pay interest on cash they don't need yet. A solution for this matter is the usage of disbursement in tranches. This class holds the information required for one of this tranche. `,
    )

export type LoanTranche = z.infer<typeof LoanTranche>

export const ScheduleSettingsForSchedulePreview = z
    .object({
        amortizationPeriod: z
            .number()
            .int()
            .describe('The PMT is calculated as the loan would have [amortizationPeriod] installments.')
            .optional(),
        fixedDaysOfMonth: z
            .number()
            .int()
            .array()
            .describe(
                'Specifies the days of the month when the repayment due dates should be. Only available if the Repayment Methodology is FIXED_DAYS_OF_MONTH.',
            )
            .optional(),
        gracePeriod: z
            .number()
            .int()
            .describe('The grace period. Represents the grace period for loan repayment - in number of installments.')
            .optional(),
        paymentPlan: PeriodicPaymentForSchedulePreview.array()
            .describe('A list of periodic payments for the current loan account.')
            .optional(),
        periodicPayment: z
            .number()
            .describe(
                'The periodic payment amount for the accounts which have balloon payments or Reduce Number of Installments and Optimized Payments',
            )
            .optional(),
        principalRepaymentInterval: z
            .number()
            .int()
            .describe('The principal repayment interval. Indicates the interval of repayments that the principal has to be paid.')
            .optional(),
        repaymentInstallments: z
            .number()
            .int()
            .describe('The repayment installments. Represents how many installments are required to pay back the loan.')
            .optional(),
        repaymentPeriodCount: z
            .number()
            .int()
            .describe(
                'The repayment period count. Represents how often the loan is to be repaid: stored based on the type repayment option.',
            )
            .optional(),
        repaymentPeriodUnit: z
            .enum(['DAYS', 'WEEKS', 'MONTHS', 'YEARS'])
            .describe('The repayment period unit. Represents the frequency of loan repayment.')
            .optional(),
    })
    .describe('The schedule settings, holds all schedule properties needed for schedule preview request.')

export type ScheduleSettingsForSchedulePreview = z.infer<typeof ScheduleSettingsForSchedulePreview>

export const PlannedInstallmentFee = z
    .object({
        amount: z.number().describe('The amount of the planned fee.').optional(),
        applyOnDate: z
            .string()
            .datetime({ offset: true })
            .describe(
                `The date when a planned fee should be applied, overriding installment's due date. It should match the interval of the installment. If it belong to first installment, it should be between disbursement date and installment due date.`,
            )
            .optional(),
        encodedKey: z.string().describe('The encoded key of the planned installment fee, auto generated, unique.').optional(),
        installmentKey: z
            .string()
            .describe('The encoded key of the installment on which the predefined fee is planned.')
            .optional(),
        installmentNumber: z
            .number()
            .int()
            .describe(
                'The number of the installment on which the predefined fee is planned. It is used only in the case when fees are created at the same time with the loan account creation or during preview schedule, before account creation, otherwise this should be empty and installmentKey will be used to identify an installment.',
            )
            .optional(),
        predefinedFeeKey: z.string().describe('The encoded key of the predefined fee which is planned.'),
    })
    .describe('The planned fee details holds the information related to the installment key, predefined fee key and amount')

export type PlannedInstallmentFee = z.infer<typeof PlannedInstallmentFee>

export const InterestSettingsForSchedulePreview = z
    .object({
        accountInterestRateSettings: AccountInterestRateSettings.array()
            .describe('The interest settings details for schedule preview.')
            .optional(),
        interestRate: z
            .number()
            .describe(
                'The interest rate. Represents the interest rate for the loan account. The interest on loans is accrued on a daily basis, which allows charging the clients only for the days they actually used the loan amount.',
            )
            .optional(),
        interestSpread: z
            .number()
            .describe('Interest to be added to active organization index interest rate in order to find out actual interest rate')
            .optional(),
    })
    .describe('The interest settings, holds all the properties regarding interests for the loan account.')

export type InterestSettingsForSchedulePreview = z.infer<typeof InterestSettingsForSchedulePreview>

export const DisbursementDetailsForSchedulePreview = z
    .object({
        expectedDisbursementDate: z
            .string()
            .datetime({ offset: true })
            .describe('The date of the expected disbursement.Stored as Organization Time.')
            .optional(),
        fees: CustomPredefinedFee.array().describe('List of fees that should be applied at the disbursement time.').optional(),
        firstRepaymentDate: z
            .string()
            .datetime({ offset: true })
            .describe('The date of the expected first repayment. Stored as Organization Time.')
            .optional(),
    })
    .describe(
        'The the disbursement details it holds the information related to the disbursement details as disbursement date, first repayment date, disbursement fees.',
    )

export type DisbursementDetailsForSchedulePreview = z.infer<typeof DisbursementDetailsForSchedulePreview>

export const EditScheduleRequest = Installment.array()

export type EditScheduleRequest = z.infer<typeof EditScheduleRequest>

export const ErrorResponse = z.object({
    errors: RestError.array().optional(),
})

export type ErrorResponse = z.infer<typeof ErrorResponse>

export const LoanAccountPreviewProcessPMTTransactionally = z
    .object({
        error: z.string().describe('The error code of the request.').optional(),
        info: z.string().describe('Additional information about the request.').optional(),
        result: LoanAccountSchedulesPreviewProcessPMTTransactionally.optional(),
        status: z.string().describe('The status of the request.').optional(),
    })
    .describe('Payload structure to preview the schedules of a loan account when processing PMT transactionally.')

export type LoanAccountPreviewProcessPMTTransactionally = z.infer<typeof LoanAccountPreviewProcessPMTTransactionally>

export const LoanAccountSchedule = z
    .object({
        currency: Currency.optional(),
        installments: Installment.array().describe('The loan account schedule installments list.').optional(),
    })
    .describe('Represents a single loan account schedule structure.')

export type LoanAccountSchedule = z.infer<typeof LoanAccountSchedule>

export const PreviewLoanAccountSchedule = z
    .object({
        disbursementDetails: DisbursementDetailsForSchedulePreview.optional(),
        interestCommission: z
            .number()
            .describe(
                'The value of the interest booked by the organization from the accounts funded by investors. Null if the funds are not enable',
            )
            .optional(),
        interestSettings: InterestSettingsForSchedulePreview.optional(),
        loanAmount: z.number().describe('The loan amount'),
        plannedInstallmentFees: PlannedInstallmentFee.array()
            .describe('A list with planned manual fees to be applied on the installments for schedule preview.')
            .optional(),
        productTypeKey: z.string().describe('The key to the type of product that this account is based on.'),
        scheduleSettings: ScheduleSettingsForSchedulePreview.optional(),
        topUpAmount: z.number().describe('The top up amount in case of a refinanced account').optional(),
        tranches: LoanTranche.array().describe('List of tranches to be considered for schedule preview.').optional(),
    })
    .describe('Payload structure to preview loan account schedule.')

export type PreviewLoanAccountSchedule = z.infer<typeof PreviewLoanAccountSchedule>

export const PreviewTranchesOnScheduleRequest = LoanTranche.array()

export type PreviewTranchesOnScheduleRequest = z.infer<typeof PreviewTranchesOnScheduleRequest>
