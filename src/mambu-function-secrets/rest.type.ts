/**
 * Generated by @skyleague/therefore@v1.0.0-local
 * Do not manually touch this
 */
/* eslint-disable */
import type { ValidateFunction } from 'ajv'
import { ValidationError } from 'ajv'

export interface ErrorResponse {
    errors?: RestError[]
}

export const ErrorResponse = {
    validate: (await import('./schemas/error-response.schema.js')).validate as ValidateFunction<ErrorResponse>,
    get schema() {
        return ErrorResponse.validate.schema
    },
    get errors() {
        return ErrorResponse.validate.errors ?? undefined
    },
    is: (o: unknown): o is ErrorResponse => ErrorResponse.validate(o) === true,
    assert: (o: unknown) => {
        if (!ErrorResponse.validate(o)) {
            throw new ValidationError(ErrorResponse.errors ?? [])
        }
    },
} as const

/**
 * Mambu Function Tenant Secret create data.
 */
export interface MambuFunctionSecretCreate {
    /**
     * Customer secret name
     */
    name?: string
    /**
     * The value of the customer secret
     */
    value?: string
}

export const MambuFunctionSecretCreate = {
    validate: (await import('./schemas/mambu-function-secret-create.schema.js'))
        .validate as ValidateFunction<MambuFunctionSecretCreate>,
    get schema() {
        return MambuFunctionSecretCreate.validate.schema
    },
    get errors() {
        return MambuFunctionSecretCreate.validate.errors ?? undefined
    },
    is: (o: unknown): o is MambuFunctionSecretCreate => MambuFunctionSecretCreate.validate(o) === true,
    assert: (o: unknown) => {
        if (!MambuFunctionSecretCreate.validate(o)) {
            throw new ValidationError(MambuFunctionSecretCreate.errors ?? [])
        }
    },
} as const

/**
 * Mambu Function Tenant Secret update data.
 */
export interface MambuFunctionSecretUpdate {
    /**
     * The value of the customer secret
     */
    value?: string
}

export const MambuFunctionSecretUpdate = {
    validate: (await import('./schemas/mambu-function-secret-update.schema.js'))
        .validate as ValidateFunction<MambuFunctionSecretUpdate>,
    get schema() {
        return MambuFunctionSecretUpdate.validate.schema
    },
    get errors() {
        return MambuFunctionSecretUpdate.validate.errors ?? undefined
    },
    is: (o: unknown): o is MambuFunctionSecretUpdate => MambuFunctionSecretUpdate.validate(o) === true,
    assert: (o: unknown) => {
        if (!MambuFunctionSecretUpdate.validate(o)) {
            throw new ValidationError(MambuFunctionSecretUpdate.errors ?? [])
        }
    },
} as const

export interface RestError {
    errorCode?: number
    errorReason?: string
    errorSource?: string
}
