/**
 * Generated by @skyleague/therefore@v1.0.0-local
 * Do not manually touch this
 */
/* eslint-disable */
import type { ValidateFunction } from 'ajv'

/**
 * Represents details of the Background Process
 */
export interface BackgroundProcess {
    /**
     * When this process was ended. Stored as Organization Time
     */
    endDate?: string
    /**
     * The encoded key of the entity, generated, globally unique
     */
    encodedKey?: string
    /**
     * The current status of this process
     */
    state?:
        | 'QUEUED'
        | 'IN_PROGRESS'
        | 'COMPLETE'
        | 'NOT_FOUND'
        | 'CANCEL'
        | 'TO_BE_CANCELED'
        | 'TIMED_OUT'
        | 'ERROR'
        | 'TRANSIENT_ERROR'
        | 'OVERRIDDEN'
    /**
     * The type of the background process
     */
    type?: 'CRON_JOBS' | 'MANUAL_CRON_JOBS_TRIGGER'
    /**
     * When this process was created. Stored as Organization Time
     */
    creationDate?: string
    /**
     * When this process was started. Stored as Organization Time
     */
    startDate?: string
}

export const BackgroundProcess = {
    validate: require('./schemas/background-process.schema.js') as ValidateFunction<BackgroundProcess>,
    get schema() {
        return BackgroundProcess.validate.schema
    },
    is: (o: unknown): o is BackgroundProcess => BackgroundProcess.validate(o) === true,
} as const

export interface ErrorResponse {
    errors?: RestError[]
}

export const ErrorResponse = {
    validate: require('./schemas/error-response.schema.js') as ValidateFunction<ErrorResponse>,
    get schema() {
        return ErrorResponse.validate.schema
    },
    is: (o: unknown): o is ErrorResponse => ErrorResponse.validate(o) === true,
} as const

export interface RestError {
    errorCode?: number
    errorSource?: string
    errorReason?: string
}
