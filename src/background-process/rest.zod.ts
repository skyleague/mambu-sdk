/**
 * Generated by @skyleague/therefore
 * Do not manually touch this
 */
/* eslint-disable */

import { z } from 'zod'

export const RestError = z.object({
    errorCode: z.number().int().optional(),
    errorReason: z.string().optional(),
    errorSource: z.string().optional(),
})

export type RestError = z.infer<typeof RestError>

export const BackgroundProcess = z
    .object({
        creationDate: z
            .string()
            .datetime({ offset: true })
            .describe('When this process was created. Stored as Organization Time')
            .optional(),
        encodedKey: z.string().describe('The encoded key of the entity, generated, globally unique').optional(),
        endDate: z
            .string()
            .datetime({ offset: true })
            .describe('When this process was ended. Stored as Organization Time')
            .optional(),
        startDate: z
            .string()
            .datetime({ offset: true })
            .describe('When this process was started. Stored as Organization Time')
            .optional(),
        state: z
            .enum([
                'QUEUED',
                'IN_PROGRESS',
                'COMPLETE',
                'NOT_FOUND',
                'CANCEL',
                'TO_BE_CANCELED',
                'TIMED_OUT',
                'ERROR',
                'TRANSIENT_ERROR',
                'OVERRIDDEN',
                'RECOVERABLE_ERROR',
            ])
            .describe('The current status of this process')
            .optional(),
        type: z.enum(['CRON_JOBS', 'MANUAL_CRON_JOBS_TRIGGER']).describe('The type of the background process').optional(),
    })
    .describe('Represents details of the Background Process')

export type BackgroundProcess = z.infer<typeof BackgroundProcess>

export const ErrorResponse = z.object({
    errors: RestError.array().optional(),
})

export type ErrorResponse = z.infer<typeof ErrorResponse>
