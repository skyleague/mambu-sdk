/**
 * Generated by @skyleague/therefore@v1.0.0-local
 * Do not manually touch this
 */
/* eslint-disable */

import type { DefinedError, ValidateFunction } from 'ajv'

import { validate as ErrorResponseValidator } from './schemas/error-response.schema.js'
import { validate as HolidaysValidator } from './schemas/holidays.schema.js'

export interface ErrorResponse {
    errors?: RestError[] | undefined
}

export const ErrorResponse = {
    validate: ErrorResponseValidator as ValidateFunction<ErrorResponse>,
    get schema() {
        return ErrorResponse.validate.schema
    },
    get errors() {
        return ErrorResponse.validate.errors ?? undefined
    },
    is: (o: unknown): o is ErrorResponse => ErrorResponse.validate(o) === true,
    parse: (o: unknown): { right: ErrorResponse } | { left: DefinedError[] } => {
        if (ErrorResponse.is(o)) {
            return { right: o }
        }
        return { left: (ErrorResponse.errors ?? []) as DefinedError[] }
    },
} as const

/**
 * Represents the holiday.
 */
export interface Holiday {
    /**
     * The date when the holiday was created.
     */
    creationDate?: string | undefined
    /**
     * The date the holiday takes place.
     */
    date?: string | undefined
    /**
     * The encoded key of the entity, generated, globally unique
     */
    encodedKey?: string | undefined
    /**
     * The ID of the holiday.
     */
    id?: number | undefined
    /**
     * `TRUE` if a holiday is annually recurring, `FALSE` otherwise.
     */
    isAnnuallyRecurring?: boolean | undefined
    /**
     * The name of the holiday.
     */
    name?: string | undefined
}

/**
 * Represents the holidays of the organization.
 */
export interface Holidays {
    /**
     * The general holidays of the organization.
     */
    holidays?: Holiday[] | undefined
    /**
     * The non-working days of the organization.
     */
    nonWorkingDays?: NonWorkingDays[] | undefined
}

export const Holidays = {
    validate: HolidaysValidator as ValidateFunction<Holidays>,
    get schema() {
        return Holidays.validate.schema
    },
    get errors() {
        return Holidays.validate.errors ?? undefined
    },
    is: (o: unknown): o is Holidays => Holidays.validate(o) === true,
    parse: (o: unknown): { right: Holidays } | { left: DefinedError[] } => {
        if (Holidays.is(o)) {
            return { right: o }
        }
        return { left: (Holidays.errors ?? []) as DefinedError[] }
    },
} as const

type NonWorkingDays = 'MONDAY' | 'TUESDAY' | 'WEDNESDAY' | 'THURSDAY' | 'FRIDAY' | 'SATURDAY' | 'SUNDAY'

export interface RestError {
    errorCode?: number | undefined
    errorReason?: string | undefined
    errorSource?: string | undefined
}
