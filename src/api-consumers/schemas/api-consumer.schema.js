/**
 * Generated by @skyleague/therefore
 * eslint-disable
 */
"use strict";module.exports = validate10;module.exports.default = validate10;const schema11 = {"$schema":"http://json-schema.org/draft-07/schema#","type":"object","title":"ApiConsumer","description":"Api Consumer containing keys that can be used to access mambu API","properties":{"role":{"title":"role","$ref":"#/$defs/RoleIdentifier6d0a"},"access":{"title":"access","$ref":"#/$defs/ApiConsumerAccess6d0a"},"lastModifiedDate":{"type":"string","title":"lastModifiedDate","description":"The last time Api Consumer was modified, as UTC","format":"date-time"},"name":{"type":"string","title":"name","description":"Api Consumer name"},"encodedKey":{"type":"string","title":"encodedKey","description":"The encoded key of the entity, generated, globally unique"},"id":{"type":"string","title":"id","description":"Id of the Api Consumer"},"transactionLimits":{"type":"object","title":"transactionLimits","description":"Map of specifying Api Consumer transaction limits.","properties":{},"additionalProperties":{"type":"integer"}},"type":{"title":"type","description":"The type of Api Consumer","enum":["STREAMING_API","AUDIT_TRAIL","PAYMENTS","MAMBU_API","CARDS_CAPABILITY"]},"creationDate":{"type":"string","title":"creationDate","description":"Date when the Api Consumer was created, as UTC","format":"date-time"},"assignedBranchKey":{"type":"string","title":"assignedBranchKey","description":"The encoded key of the branch this Api Consumer is assigned to."}},"required":["name"],"additionalProperties":false,"$defs":{"RoleIdentifier6d0a":{"type":"object","title":"RoleIdentifier","description":"The user role identifier","properties":{"encodedKey":{"type":"string","title":"encodedKey","description":"The encoded key of the entity, generated, globally unique"},"id":{"type":"string","title":"id","description":"Id of the role, unique, can be generated and customized"}},"additionalProperties":false},"ApiConsumerAccess6d0a":{"type":"object","title":"ApiConsumerAccess","description":"Wrapper containing the available API Consumer permissions and access rights","properties":{"canManageEntitiesAssignedToOtherOfficers":{"type":"boolean","title":"canManageEntitiesAssignedToOtherOfficers","description":"Flag specific to Credit Officers determining the access to entities assigned to other Credit Officers (eg clients, accounts)"},"administratorAccess":{"type":"boolean","title":"administratorAccess","description":"Whether the API Consumer is an administrator in Mambu. The administrators in mambu are having full permissions for all entities and for Mambu settings."},"apiAccess":{"type":"boolean","title":"apiAccess","description":"API access allows the API Consumer to authenticate and interact with Mambu using Mambu's APIs, this means that most of the time such an API Consumer is not an actual person, but a piece of software that is programmed to interact with Mambu. The API API Consumer would still require the right API Consumer permissions, depending on what it is required to do in the system, and transactions posted by that API Consumer are kept in the logs in the same way as API Consumer actions from regular users."},"permissions":{"type":"array","title":"permissions","description":"Permissions for the API Consumer. The non-admin users are authorized to do actions based a set of permissions in order to access Mambu features. Note that not all this permissions are used for validating API calls, some are used only for UI validations","items":{"enum":["AUDIT_TRANSACTIONS","VIEW_EXCHANGE_RATES","CREATE_EXCHANGE_RATE","VIEW_LOAN_ACCOUNT_DETAILS","CREATE_LOAN_ACCOUNT","EDIT_LOAN_ACCOUNT","APPROVE_LOANS","DIBURSE_LOANS","APPLY_LOAN_FEES","ENTER_REPAYMENT","EDIT_PLANNED_FEES","EDIT_REPAYMENT_SCHEDULE","APPLY_LOAN_ADJUSTMENTS","BACKDATE_LOAN_TRANSACTIONS","APPLY_ACCRUED_LOAN_INTEREST","POST_TRANSACTIONS_ON_LOCKED_LOAN_ACCOUNTS","EDIT_PENALTY_RATE","VIEW_INVESTOR_FUNDS_DETAILS","CREATE_INVESTOR_FUNDS","EDIT_INVESTOR_FUNDS","DELETE_INVESTOR_FUNDS","SELL_LOAN_FRACTION","REQUEST_LOAN_APPROVAL","EDIT_LOAN_TRANCHES","REJECT_LOANS","WRITE_OFF_LOAN_ACCOUNTS","PAY_OFF_LOAN","REVERSE_LOAN_ACCOUNT_WRITE_OFF","CLOSE_LOAN_ACCOUNTS","LOCK_LOAN_ACCOUNTS","WITHDRAW_LOAN_ACCOUNTS","DELETE_LOAN_ACCOUNT","SET_DISBURSEMENT_CONDITIONS","RESCHEDULE_LOAN_ACCOUNT","REFINANCE_LOAN_ACCOUNT","EDIT_LOAN_TRANSACTIONS","BULK_LOAN_CORRECTIONS","EDIT_INTEREST_RATE","EDIT_REPAYMENT_METHOD_VALUE","EDIT_PERIODIC_PAYMENT_FOR_ACTIVE_ACCOUNT","UNDO_LOAN_ACCOUNT_CLOSURE","UNDO_REJECT_LOANS","UNDO_WITHDRAW_LOAN_ACCOUNTS","LINK_ACCOUNTS","EDIT_PRINCIPAL_PAYMENT_ACTIVE_REVOLVING_CREDIT","PERFORM_REPAYMENTS_WITH_CUSTOM_AMOUNTS_ALLOCATION","MANAGE_LOAN_ASSOCIATION","MAKE_WITHDRAWAL_REDRAW","VIEW_SAVINGS_ACCOUNT_DETAILS","CREATE_SAVINGS_ACCOUNT","EDIT_SAVINGS_ACCOUNT","APPROVE_SAVINGS","MAKE_DEPOSIT","MAKE_WITHDRAWAL","BACKDATE_SAVINGS_TRANSACTIONS","APPLY_SAVINGS_ADJUSTMENTS","MAKE_TRANSFER","MAKE_INTER_CLIENTS_TRANSFERS","CLOSE_SAVINGS_ACCOUNTS","REOPEN_SAVINGS_ACCOUNT","APPLY_SAVINGS_FEES","DELETE_SAVINGS_ACCOUNT","POST_TRANSACTIONS_ON_DORMANT_ACCOUNTS","EDIT_SAVINGS_TRANSACTIONS","BULK_DEPOSIT_CORRECTIONS","ACTIVATE_MATURITY","APPLY_ACCRUED_SAVINGS_INTEREST","LOCK_SAVINGS_ACCOUNT","UNLOCK_SAVINGS_ACCOUNT","UNDO_MATURITY","MAKE_EARLY_WITHDRAWALS","BLOCK_AND_SEIZE_FUNDS","WITHDRAW_BLOCKED_FUNDS","CREATE_CARDS","VIEW_CARDS","DELETE_CARDS","REVERSE_CARD_WITHDRAWAL_TRANSACTION","CARD_BALANCE_INQUIRY","CREATE_AUTHORIZATION_HOLD","UPDATE_AUTHORIZATION_HOLD","VIEW_AUTHORIZATION_HOLD","CREATE_CARD_TRANSACTION","CREATE_ACCOUNT_HOLD","UPDATE_ACCOUNT_HOLD","VIEW_ACCOUNT_HOLD","VIEW_SECURITIES_DETAILS","CREATE_SECURITIES","EDIT_SECURITIES","DELETE_SECURITIES","CREATE_LINES_OF_CREDIT","EDIT_LINES_OF_CREDIT","VIEW_LINE_OF_CREDIT_DETAILS","ADD_ACCOUNTS_TO_LINE_OF_CREDIT","REMOVE_ACCOUNTS_FROM_LINE_OF_CREDIT","APPROVE_LINE_OF_CREDIT","UNDO_APPROVE_LINE_OF_CREDIT","WITHDRAW_LINE_OF_CREDIT","UNDO_WITHDRAW_LINE_OF_CREDIT","REJECT_LINE_OF_CREDIT","UNDO_REJECT_LINE_OF_CREDIT","CLOSE_LINES_OF_CREDIT","DELETE_LINES_OF_CREDIT","VIEW_LOAN_PRODUCT_DETAILS","CREATE_LOAN_PRODUCT","DELETE_LOAN_PRODUCTS","EDIT_LOAN_PRODUCT","VIEW_SAVINGS_PRODUCT_DETAILS","CREATE_SAVINGS_PRODUCT","EDIT_SAVINGS_PRODUCT","DELETE_SAVINGS_PRODUCT","VIEW_CLIENT_DETAILS","CREATE_CLIENT","EDIT_CLIENT","DELETE_CLIENTS","VIEW_GROUP_DETAILS","CREATE_GROUP","EDIT_GROUP","DELETE_GROUP","CHANGE_CLIENT_TYPE","CHANGE_GROUP_TYPE","APPROVE_CLIENT","REJECT_CLIENT","EXIT_CLIENT","BLACKLIST_CLIENT","UNDO_CLIENT_STATE_CHANGED","ANONYMIZE_CLIENT","MANAGE_CLIENT_ASSOCIATION","MANAGE_GROUP_ASSOCIATION","EDIT_CLIENT_ID","EDIT_GROUP_ID","EDIT_BLACKLISTED_CLIENT_CFV","VIEW_ACCOUNTING_REPORTS","LOG_JOURNAL_ENTRIES","BOOKING_DATE_LOANS_GL","BOOKING_DATE_SAVINGS_GL","RECTIFY_ADJUSTMENT","VIEW_ACCOUNTING_RATES","CREATE_ACCOUNTING_RATES","VIEW_DOCUMENTS","CREATE_DOCUMENTS","EDIT_DOCUMENTS","DELETE_DOCUMENTS","VIEW_TASK","CREATE_TASK","EDIT_TASK","DELETE_TASK","VIEW_USER_DETAILS","CREATE_USER","EDIT_USER","DELETE_USER","VIEW_ROLE","CREATE_ROLE","EDIT_ROLE","DELETE_ROLE","RESEND_FAILED_MESSAGES","SEND_MANUAL_SMS","SEND_MANUAL_EMAIL","MANAGE_CONFIGURATION_AS_CODE","MANAGE_RISK_LEVELS","MANAGE_EOD_PROCESSING","VIEW_INTELLIGENCE","CREATE_INDEX_RATE","VIEW_COMMENTS","CREATE_COMMENTS","EDIT_COMMENTS","VIEW_COMMUNICATION_HISTORY","DOWNLOAD_BACKUPS","IMPORT_DATA","VIEW_TRANSACTION_CHANNELS","CREATE_TRANSACTION_CHANNELS","EDIT_TRANSACTION_CHANNELS","DELETE_TRANSACTION_CHANNELS","POST_TRANSACTIONS_WITHOUT_OPENED_TILL","VIEW_CUSTOM_FIELD","VIEW_BRANCH_DETAILS","CREATE_BRANCH","EDIT_BRANCH","VIEW_CENTRE_DETAILS","CREATE_CENTRE","EDIT_CENTRE","DELETE_CENTRE","MANAGE_HOLIDAYS","MANAGE_EVENTS_STREAMING","MANAGE_AUDIT_TRAIL","MANAGE_PAYMENTS","MANAGE_CARDS_CAPABILITY","CREATE_API_CONSUMERS_AND_KEYS","DELETE_API_CONSUMERS_AND_KEYS","EDIT_API_CONSUMERS_AND_KEYS","VIEW_API_CONSUMERS_AND_KEYS"]}},"creditOfficerAccess":{"type":"boolean","title":"creditOfficerAccess","description":"Whether the API Consumer is a credit officer or not. Credit Officers have the option of having clients and groups assigned to them, this relationship allows for better reporting and client management."},"canManageAllBranches":{"type":"boolean","title":"canManageAllBranches","description":"Whether the API Consumer permissions apply to all branches or only for some branches"},"managedBranches":{"type":"array","title":"managedBranches","description":" The list of branches that can be managed by current API Consumer. If the API Consumer has the canManageAllBranches true, this list is not taken in consideration.","items":{"description":" The list of branches that can be managed by current API Consumer. If the API Consumer has the canManageAllBranches true, this list is not taken in consideration.","$ref":"#/$defs/UserManagedBranch6d0a"}}},"additionalProperties":false},"UserManagedBranch6d0a":{"type":"object","title":"UserManagedBranch","description":"Branch that can be managed by the user or API Consumer","properties":{"branchKey":{"type":"string","title":"branchKey","description":"The encoded key of the branch, generated"}},"additionalProperties":false}}};const schema12 = {"type":"object","title":"RoleIdentifier","description":"The user role identifier","properties":{"encodedKey":{"type":"string","title":"encodedKey","description":"The encoded key of the entity, generated, globally unique"},"id":{"type":"string","title":"id","description":"Id of the role, unique, can be generated and customized"}},"additionalProperties":false};const func2 = Object.prototype.hasOwnProperty;const schema13 = {"type":"object","title":"ApiConsumerAccess","description":"Wrapper containing the available API Consumer permissions and access rights","properties":{"canManageEntitiesAssignedToOtherOfficers":{"type":"boolean","title":"canManageEntitiesAssignedToOtherOfficers","description":"Flag specific to Credit Officers determining the access to entities assigned to other Credit Officers (eg clients, accounts)"},"administratorAccess":{"type":"boolean","title":"administratorAccess","description":"Whether the API Consumer is an administrator in Mambu. The administrators in mambu are having full permissions for all entities and for Mambu settings."},"apiAccess":{"type":"boolean","title":"apiAccess","description":"API access allows the API Consumer to authenticate and interact with Mambu using Mambu's APIs, this means that most of the time such an API Consumer is not an actual person, but a piece of software that is programmed to interact with Mambu. The API API Consumer would still require the right API Consumer permissions, depending on what it is required to do in the system, and transactions posted by that API Consumer are kept in the logs in the same way as API Consumer actions from regular users."},"permissions":{"type":"array","title":"permissions","description":"Permissions for the API Consumer. The non-admin users are authorized to do actions based a set of permissions in order to access Mambu features. Note that not all this permissions are used for validating API calls, some are used only for UI validations","items":{"enum":["AUDIT_TRANSACTIONS","VIEW_EXCHANGE_RATES","CREATE_EXCHANGE_RATE","VIEW_LOAN_ACCOUNT_DETAILS","CREATE_LOAN_ACCOUNT","EDIT_LOAN_ACCOUNT","APPROVE_LOANS","DIBURSE_LOANS","APPLY_LOAN_FEES","ENTER_REPAYMENT","EDIT_PLANNED_FEES","EDIT_REPAYMENT_SCHEDULE","APPLY_LOAN_ADJUSTMENTS","BACKDATE_LOAN_TRANSACTIONS","APPLY_ACCRUED_LOAN_INTEREST","POST_TRANSACTIONS_ON_LOCKED_LOAN_ACCOUNTS","EDIT_PENALTY_RATE","VIEW_INVESTOR_FUNDS_DETAILS","CREATE_INVESTOR_FUNDS","EDIT_INVESTOR_FUNDS","DELETE_INVESTOR_FUNDS","SELL_LOAN_FRACTION","REQUEST_LOAN_APPROVAL","EDIT_LOAN_TRANCHES","REJECT_LOANS","WRITE_OFF_LOAN_ACCOUNTS","PAY_OFF_LOAN","REVERSE_LOAN_ACCOUNT_WRITE_OFF","CLOSE_LOAN_ACCOUNTS","LOCK_LOAN_ACCOUNTS","WITHDRAW_LOAN_ACCOUNTS","DELETE_LOAN_ACCOUNT","SET_DISBURSEMENT_CONDITIONS","RESCHEDULE_LOAN_ACCOUNT","REFINANCE_LOAN_ACCOUNT","EDIT_LOAN_TRANSACTIONS","BULK_LOAN_CORRECTIONS","EDIT_INTEREST_RATE","EDIT_REPAYMENT_METHOD_VALUE","EDIT_PERIODIC_PAYMENT_FOR_ACTIVE_ACCOUNT","UNDO_LOAN_ACCOUNT_CLOSURE","UNDO_REJECT_LOANS","UNDO_WITHDRAW_LOAN_ACCOUNTS","LINK_ACCOUNTS","EDIT_PRINCIPAL_PAYMENT_ACTIVE_REVOLVING_CREDIT","PERFORM_REPAYMENTS_WITH_CUSTOM_AMOUNTS_ALLOCATION","MANAGE_LOAN_ASSOCIATION","MAKE_WITHDRAWAL_REDRAW","VIEW_SAVINGS_ACCOUNT_DETAILS","CREATE_SAVINGS_ACCOUNT","EDIT_SAVINGS_ACCOUNT","APPROVE_SAVINGS","MAKE_DEPOSIT","MAKE_WITHDRAWAL","BACKDATE_SAVINGS_TRANSACTIONS","APPLY_SAVINGS_ADJUSTMENTS","MAKE_TRANSFER","MAKE_INTER_CLIENTS_TRANSFERS","CLOSE_SAVINGS_ACCOUNTS","REOPEN_SAVINGS_ACCOUNT","APPLY_SAVINGS_FEES","DELETE_SAVINGS_ACCOUNT","POST_TRANSACTIONS_ON_DORMANT_ACCOUNTS","EDIT_SAVINGS_TRANSACTIONS","BULK_DEPOSIT_CORRECTIONS","ACTIVATE_MATURITY","APPLY_ACCRUED_SAVINGS_INTEREST","LOCK_SAVINGS_ACCOUNT","UNLOCK_SAVINGS_ACCOUNT","UNDO_MATURITY","MAKE_EARLY_WITHDRAWALS","BLOCK_AND_SEIZE_FUNDS","WITHDRAW_BLOCKED_FUNDS","CREATE_CARDS","VIEW_CARDS","DELETE_CARDS","REVERSE_CARD_WITHDRAWAL_TRANSACTION","CARD_BALANCE_INQUIRY","CREATE_AUTHORIZATION_HOLD","UPDATE_AUTHORIZATION_HOLD","VIEW_AUTHORIZATION_HOLD","CREATE_CARD_TRANSACTION","CREATE_ACCOUNT_HOLD","UPDATE_ACCOUNT_HOLD","VIEW_ACCOUNT_HOLD","VIEW_SECURITIES_DETAILS","CREATE_SECURITIES","EDIT_SECURITIES","DELETE_SECURITIES","CREATE_LINES_OF_CREDIT","EDIT_LINES_OF_CREDIT","VIEW_LINE_OF_CREDIT_DETAILS","ADD_ACCOUNTS_TO_LINE_OF_CREDIT","REMOVE_ACCOUNTS_FROM_LINE_OF_CREDIT","APPROVE_LINE_OF_CREDIT","UNDO_APPROVE_LINE_OF_CREDIT","WITHDRAW_LINE_OF_CREDIT","UNDO_WITHDRAW_LINE_OF_CREDIT","REJECT_LINE_OF_CREDIT","UNDO_REJECT_LINE_OF_CREDIT","CLOSE_LINES_OF_CREDIT","DELETE_LINES_OF_CREDIT","VIEW_LOAN_PRODUCT_DETAILS","CREATE_LOAN_PRODUCT","DELETE_LOAN_PRODUCTS","EDIT_LOAN_PRODUCT","VIEW_SAVINGS_PRODUCT_DETAILS","CREATE_SAVINGS_PRODUCT","EDIT_SAVINGS_PRODUCT","DELETE_SAVINGS_PRODUCT","VIEW_CLIENT_DETAILS","CREATE_CLIENT","EDIT_CLIENT","DELETE_CLIENTS","VIEW_GROUP_DETAILS","CREATE_GROUP","EDIT_GROUP","DELETE_GROUP","CHANGE_CLIENT_TYPE","CHANGE_GROUP_TYPE","APPROVE_CLIENT","REJECT_CLIENT","EXIT_CLIENT","BLACKLIST_CLIENT","UNDO_CLIENT_STATE_CHANGED","ANONYMIZE_CLIENT","MANAGE_CLIENT_ASSOCIATION","MANAGE_GROUP_ASSOCIATION","EDIT_CLIENT_ID","EDIT_GROUP_ID","EDIT_BLACKLISTED_CLIENT_CFV","VIEW_ACCOUNTING_REPORTS","LOG_JOURNAL_ENTRIES","BOOKING_DATE_LOANS_GL","BOOKING_DATE_SAVINGS_GL","RECTIFY_ADJUSTMENT","VIEW_ACCOUNTING_RATES","CREATE_ACCOUNTING_RATES","VIEW_DOCUMENTS","CREATE_DOCUMENTS","EDIT_DOCUMENTS","DELETE_DOCUMENTS","VIEW_TASK","CREATE_TASK","EDIT_TASK","DELETE_TASK","VIEW_USER_DETAILS","CREATE_USER","EDIT_USER","DELETE_USER","VIEW_ROLE","CREATE_ROLE","EDIT_ROLE","DELETE_ROLE","RESEND_FAILED_MESSAGES","SEND_MANUAL_SMS","SEND_MANUAL_EMAIL","MANAGE_CONFIGURATION_AS_CODE","MANAGE_RISK_LEVELS","MANAGE_EOD_PROCESSING","VIEW_INTELLIGENCE","CREATE_INDEX_RATE","VIEW_COMMENTS","CREATE_COMMENTS","EDIT_COMMENTS","VIEW_COMMUNICATION_HISTORY","DOWNLOAD_BACKUPS","IMPORT_DATA","VIEW_TRANSACTION_CHANNELS","CREATE_TRANSACTION_CHANNELS","EDIT_TRANSACTION_CHANNELS","DELETE_TRANSACTION_CHANNELS","POST_TRANSACTIONS_WITHOUT_OPENED_TILL","VIEW_CUSTOM_FIELD","VIEW_BRANCH_DETAILS","CREATE_BRANCH","EDIT_BRANCH","VIEW_CENTRE_DETAILS","CREATE_CENTRE","EDIT_CENTRE","DELETE_CENTRE","MANAGE_HOLIDAYS","MANAGE_EVENTS_STREAMING","MANAGE_AUDIT_TRAIL","MANAGE_PAYMENTS","MANAGE_CARDS_CAPABILITY","CREATE_API_CONSUMERS_AND_KEYS","DELETE_API_CONSUMERS_AND_KEYS","EDIT_API_CONSUMERS_AND_KEYS","VIEW_API_CONSUMERS_AND_KEYS"]}},"creditOfficerAccess":{"type":"boolean","title":"creditOfficerAccess","description":"Whether the API Consumer is a credit officer or not. Credit Officers have the option of having clients and groups assigned to them, this relationship allows for better reporting and client management."},"canManageAllBranches":{"type":"boolean","title":"canManageAllBranches","description":"Whether the API Consumer permissions apply to all branches or only for some branches"},"managedBranches":{"type":"array","title":"managedBranches","description":" The list of branches that can be managed by current API Consumer. If the API Consumer has the canManageAllBranches true, this list is not taken in consideration.","items":{"description":" The list of branches that can be managed by current API Consumer. If the API Consumer has the canManageAllBranches true, this list is not taken in consideration.","$ref":"#/$defs/UserManagedBranch6d0a"}}},"additionalProperties":false};const schema14 = {"type":"object","title":"UserManagedBranch","description":"Branch that can be managed by the user or API Consumer","properties":{"branchKey":{"type":"string","title":"branchKey","description":"The encoded key of the branch, generated"}},"additionalProperties":false};function validate11(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){let vErrors = null;let errors = 0;if(errors === 0){if(data && typeof data == "object" && !Array.isArray(data)){const _errs1 = errors;for(const key0 in data){if(!(((((((key0 === "canManageEntitiesAssignedToOtherOfficers") || (key0 === "administratorAccess")) || (key0 === "apiAccess")) || (key0 === "permissions")) || (key0 === "creditOfficerAccess")) || (key0 === "canManageAllBranches")) || (key0 === "managedBranches"))){validate11.errors = [{instancePath,schemaPath:"#/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key0},message:"must NOT have additional properties"}];return false;break;}}if(_errs1 === errors){if(data.canManageEntitiesAssignedToOtherOfficers !== undefined){const _errs2 = errors;if(typeof data.canManageEntitiesAssignedToOtherOfficers !== "boolean"){validate11.errors = [{instancePath:instancePath+"/canManageEntitiesAssignedToOtherOfficers",schemaPath:"#/properties/canManageEntitiesAssignedToOtherOfficers/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"}];return false;}var valid0 = _errs2 === errors;}else {var valid0 = true;}if(valid0){if(data.administratorAccess !== undefined){const _errs4 = errors;if(typeof data.administratorAccess !== "boolean"){validate11.errors = [{instancePath:instancePath+"/administratorAccess",schemaPath:"#/properties/administratorAccess/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"}];return false;}var valid0 = _errs4 === errors;}else {var valid0 = true;}if(valid0){if(data.apiAccess !== undefined){const _errs6 = errors;if(typeof data.apiAccess !== "boolean"){validate11.errors = [{instancePath:instancePath+"/apiAccess",schemaPath:"#/properties/apiAccess/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"}];return false;}var valid0 = _errs6 === errors;}else {var valid0 = true;}if(valid0){if(data.permissions !== undefined){let data3 = data.permissions;const _errs8 = errors;if(errors === _errs8){if(Array.isArray(data3)){var valid1 = true;const len0 = data3.length;for(let i0=0; i0<len0; i0++){let data4 = data3[i0];const _errs10 = errors;if(!((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((data4 === "AUDIT_TRANSACTIONS") || (data4 === "VIEW_EXCHANGE_RATES")) || (data4 === "CREATE_EXCHANGE_RATE")) || (data4 === "VIEW_LOAN_ACCOUNT_DETAILS")) || (data4 === "CREATE_LOAN_ACCOUNT")) || (data4 === "EDIT_LOAN_ACCOUNT")) || (data4 === "APPROVE_LOANS")) || (data4 === "DIBURSE_LOANS")) || (data4 === "APPLY_LOAN_FEES")) || (data4 === "ENTER_REPAYMENT")) || (data4 === "EDIT_PLANNED_FEES")) || (data4 === "EDIT_REPAYMENT_SCHEDULE")) || (data4 === "APPLY_LOAN_ADJUSTMENTS")) || (data4 === "BACKDATE_LOAN_TRANSACTIONS")) || (data4 === "APPLY_ACCRUED_LOAN_INTEREST")) || (data4 === "POST_TRANSACTIONS_ON_LOCKED_LOAN_ACCOUNTS")) || (data4 === "EDIT_PENALTY_RATE")) || (data4 === "VIEW_INVESTOR_FUNDS_DETAILS")) || (data4 === "CREATE_INVESTOR_FUNDS")) || (data4 === "EDIT_INVESTOR_FUNDS")) || (data4 === "DELETE_INVESTOR_FUNDS")) || (data4 === "SELL_LOAN_FRACTION")) || (data4 === "REQUEST_LOAN_APPROVAL")) || (data4 === "EDIT_LOAN_TRANCHES")) || (data4 === "REJECT_LOANS")) || (data4 === "WRITE_OFF_LOAN_ACCOUNTS")) || (data4 === "PAY_OFF_LOAN")) || (data4 === "REVERSE_LOAN_ACCOUNT_WRITE_OFF")) || (data4 === "CLOSE_LOAN_ACCOUNTS")) || (data4 === "LOCK_LOAN_ACCOUNTS")) || (data4 === "WITHDRAW_LOAN_ACCOUNTS")) || (data4 === "DELETE_LOAN_ACCOUNT")) || (data4 === "SET_DISBURSEMENT_CONDITIONS")) || (data4 === "RESCHEDULE_LOAN_ACCOUNT")) || (data4 === "REFINANCE_LOAN_ACCOUNT")) || (data4 === "EDIT_LOAN_TRANSACTIONS")) || (data4 === "BULK_LOAN_CORRECTIONS")) || (data4 === "EDIT_INTEREST_RATE")) || (data4 === "EDIT_REPAYMENT_METHOD_VALUE")) || (data4 === "EDIT_PERIODIC_PAYMENT_FOR_ACTIVE_ACCOUNT")) || (data4 === "UNDO_LOAN_ACCOUNT_CLOSURE")) || (data4 === "UNDO_REJECT_LOANS")) || (data4 === "UNDO_WITHDRAW_LOAN_ACCOUNTS")) || (data4 === "LINK_ACCOUNTS")) || (data4 === "EDIT_PRINCIPAL_PAYMENT_ACTIVE_REVOLVING_CREDIT")) || (data4 === "PERFORM_REPAYMENTS_WITH_CUSTOM_AMOUNTS_ALLOCATION")) || (data4 === "MANAGE_LOAN_ASSOCIATION")) || (data4 === "MAKE_WITHDRAWAL_REDRAW")) || (data4 === "VIEW_SAVINGS_ACCOUNT_DETAILS")) || (data4 === "CREATE_SAVINGS_ACCOUNT")) || (data4 === "EDIT_SAVINGS_ACCOUNT")) || (data4 === "APPROVE_SAVINGS")) || (data4 === "MAKE_DEPOSIT")) || (data4 === "MAKE_WITHDRAWAL")) || (data4 === "BACKDATE_SAVINGS_TRANSACTIONS")) || (data4 === "APPLY_SAVINGS_ADJUSTMENTS")) || (data4 === "MAKE_TRANSFER")) || (data4 === "MAKE_INTER_CLIENTS_TRANSFERS")) || (data4 === "CLOSE_SAVINGS_ACCOUNTS")) || (data4 === "REOPEN_SAVINGS_ACCOUNT")) || (data4 === "APPLY_SAVINGS_FEES")) || (data4 === "DELETE_SAVINGS_ACCOUNT")) || (data4 === "POST_TRANSACTIONS_ON_DORMANT_ACCOUNTS")) || (data4 === "EDIT_SAVINGS_TRANSACTIONS")) || (data4 === "BULK_DEPOSIT_CORRECTIONS")) || (data4 === "ACTIVATE_MATURITY")) || (data4 === "APPLY_ACCRUED_SAVINGS_INTEREST")) || (data4 === "LOCK_SAVINGS_ACCOUNT")) || (data4 === "UNLOCK_SAVINGS_ACCOUNT")) || (data4 === "UNDO_MATURITY")) || (data4 === "MAKE_EARLY_WITHDRAWALS")) || (data4 === "BLOCK_AND_SEIZE_FUNDS")) || (data4 === "WITHDRAW_BLOCKED_FUNDS")) || (data4 === "CREATE_CARDS")) || (data4 === "VIEW_CARDS")) || (data4 === "DELETE_CARDS")) || (data4 === "REVERSE_CARD_WITHDRAWAL_TRANSACTION")) || (data4 === "CARD_BALANCE_INQUIRY")) || (data4 === "CREATE_AUTHORIZATION_HOLD")) || (data4 === "UPDATE_AUTHORIZATION_HOLD")) || (data4 === "VIEW_AUTHORIZATION_HOLD")) || (data4 === "CREATE_CARD_TRANSACTION")) || (data4 === "CREATE_ACCOUNT_HOLD")) || (data4 === "UPDATE_ACCOUNT_HOLD")) || (data4 === "VIEW_ACCOUNT_HOLD")) || (data4 === "VIEW_SECURITIES_DETAILS")) || (data4 === "CREATE_SECURITIES")) || (data4 === "EDIT_SECURITIES")) || (data4 === "DELETE_SECURITIES")) || (data4 === "CREATE_LINES_OF_CREDIT")) || (data4 === "EDIT_LINES_OF_CREDIT")) || (data4 === "VIEW_LINE_OF_CREDIT_DETAILS")) || (data4 === "ADD_ACCOUNTS_TO_LINE_OF_CREDIT")) || (data4 === "REMOVE_ACCOUNTS_FROM_LINE_OF_CREDIT")) || (data4 === "APPROVE_LINE_OF_CREDIT")) || (data4 === "UNDO_APPROVE_LINE_OF_CREDIT")) || (data4 === "WITHDRAW_LINE_OF_CREDIT")) || (data4 === "UNDO_WITHDRAW_LINE_OF_CREDIT")) || (data4 === "REJECT_LINE_OF_CREDIT")) || (data4 === "UNDO_REJECT_LINE_OF_CREDIT")) || (data4 === "CLOSE_LINES_OF_CREDIT")) || (data4 === "DELETE_LINES_OF_CREDIT")) || (data4 === "VIEW_LOAN_PRODUCT_DETAILS")) || (data4 === "CREATE_LOAN_PRODUCT")) || (data4 === "DELETE_LOAN_PRODUCTS")) || (data4 === "EDIT_LOAN_PRODUCT")) || (data4 === "VIEW_SAVINGS_PRODUCT_DETAILS")) || (data4 === "CREATE_SAVINGS_PRODUCT")) || (data4 === "EDIT_SAVINGS_PRODUCT")) || (data4 === "DELETE_SAVINGS_PRODUCT")) || (data4 === "VIEW_CLIENT_DETAILS")) || (data4 === "CREATE_CLIENT")) || (data4 === "EDIT_CLIENT")) || (data4 === "DELETE_CLIENTS")) || (data4 === "VIEW_GROUP_DETAILS")) || (data4 === "CREATE_GROUP")) || (data4 === "EDIT_GROUP")) || (data4 === "DELETE_GROUP")) || (data4 === "CHANGE_CLIENT_TYPE")) || (data4 === "CHANGE_GROUP_TYPE")) || (data4 === "APPROVE_CLIENT")) || (data4 === "REJECT_CLIENT")) || (data4 === "EXIT_CLIENT")) || (data4 === "BLACKLIST_CLIENT")) || (data4 === "UNDO_CLIENT_STATE_CHANGED")) || (data4 === "ANONYMIZE_CLIENT")) || (data4 === "MANAGE_CLIENT_ASSOCIATION")) || (data4 === "MANAGE_GROUP_ASSOCIATION")) || (data4 === "EDIT_CLIENT_ID")) || (data4 === "EDIT_GROUP_ID")) || (data4 === "EDIT_BLACKLISTED_CLIENT_CFV")) || (data4 === "VIEW_ACCOUNTING_REPORTS")) || (data4 === "LOG_JOURNAL_ENTRIES")) || (data4 === "BOOKING_DATE_LOANS_GL")) || (data4 === "BOOKING_DATE_SAVINGS_GL")) || (data4 === "RECTIFY_ADJUSTMENT")) || (data4 === "VIEW_ACCOUNTING_RATES")) || (data4 === "CREATE_ACCOUNTING_RATES")) || (data4 === "VIEW_DOCUMENTS")) || (data4 === "CREATE_DOCUMENTS")) || (data4 === "EDIT_DOCUMENTS")) || (data4 === "DELETE_DOCUMENTS")) || (data4 === "VIEW_TASK")) || (data4 === "CREATE_TASK")) || (data4 === "EDIT_TASK")) || (data4 === "DELETE_TASK")) || (data4 === "VIEW_USER_DETAILS")) || (data4 === "CREATE_USER")) || (data4 === "EDIT_USER")) || (data4 === "DELETE_USER")) || (data4 === "VIEW_ROLE")) || (data4 === "CREATE_ROLE")) || (data4 === "EDIT_ROLE")) || (data4 === "DELETE_ROLE")) || (data4 === "RESEND_FAILED_MESSAGES")) || (data4 === "SEND_MANUAL_SMS")) || (data4 === "SEND_MANUAL_EMAIL")) || (data4 === "MANAGE_CONFIGURATION_AS_CODE")) || (data4 === "MANAGE_RISK_LEVELS")) || (data4 === "MANAGE_EOD_PROCESSING")) || (data4 === "VIEW_INTELLIGENCE")) || (data4 === "CREATE_INDEX_RATE")) || (data4 === "VIEW_COMMENTS")) || (data4 === "CREATE_COMMENTS")) || (data4 === "EDIT_COMMENTS")) || (data4 === "VIEW_COMMUNICATION_HISTORY")) || (data4 === "DOWNLOAD_BACKUPS")) || (data4 === "IMPORT_DATA")) || (data4 === "VIEW_TRANSACTION_CHANNELS")) || (data4 === "CREATE_TRANSACTION_CHANNELS")) || (data4 === "EDIT_TRANSACTION_CHANNELS")) || (data4 === "DELETE_TRANSACTION_CHANNELS")) || (data4 === "POST_TRANSACTIONS_WITHOUT_OPENED_TILL")) || (data4 === "VIEW_CUSTOM_FIELD")) || (data4 === "VIEW_BRANCH_DETAILS")) || (data4 === "CREATE_BRANCH")) || (data4 === "EDIT_BRANCH")) || (data4 === "VIEW_CENTRE_DETAILS")) || (data4 === "CREATE_CENTRE")) || (data4 === "EDIT_CENTRE")) || (data4 === "DELETE_CENTRE")) || (data4 === "MANAGE_HOLIDAYS")) || (data4 === "MANAGE_EVENTS_STREAMING")) || (data4 === "MANAGE_AUDIT_TRAIL")) || (data4 === "MANAGE_PAYMENTS")) || (data4 === "MANAGE_CARDS_CAPABILITY")) || (data4 === "CREATE_API_CONSUMERS_AND_KEYS")) || (data4 === "DELETE_API_CONSUMERS_AND_KEYS")) || (data4 === "EDIT_API_CONSUMERS_AND_KEYS")) || (data4 === "VIEW_API_CONSUMERS_AND_KEYS"))){validate11.errors = [{instancePath:instancePath+"/permissions/" + i0,schemaPath:"#/properties/permissions/items/enum",keyword:"enum",params:{allowedValues: schema13.properties.permissions.items.enum},message:"must be equal to one of the allowed values"}];return false;}var valid1 = _errs10 === errors;if(!valid1){break;}}}else {validate11.errors = [{instancePath:instancePath+"/permissions",schemaPath:"#/properties/permissions/type",keyword:"type",params:{type: "array"},message:"must be array"}];return false;}}var valid0 = _errs8 === errors;}else {var valid0 = true;}if(valid0){if(data.creditOfficerAccess !== undefined){const _errs11 = errors;if(typeof data.creditOfficerAccess !== "boolean"){validate11.errors = [{instancePath:instancePath+"/creditOfficerAccess",schemaPath:"#/properties/creditOfficerAccess/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"}];return false;}var valid0 = _errs11 === errors;}else {var valid0 = true;}if(valid0){if(data.canManageAllBranches !== undefined){const _errs13 = errors;if(typeof data.canManageAllBranches !== "boolean"){validate11.errors = [{instancePath:instancePath+"/canManageAllBranches",schemaPath:"#/properties/canManageAllBranches/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"}];return false;}var valid0 = _errs13 === errors;}else {var valid0 = true;}if(valid0){if(data.managedBranches !== undefined){let data7 = data.managedBranches;const _errs15 = errors;if(errors === _errs15){if(Array.isArray(data7)){var valid2 = true;const len1 = data7.length;for(let i1=0; i1<len1; i1++){let data8 = data7[i1];const _errs17 = errors;const _errs18 = errors;if(errors === _errs18){if(data8 && typeof data8 == "object" && !Array.isArray(data8)){const _errs20 = errors;for(const key1 in data8){if(!(key1 === "branchKey")){validate11.errors = [{instancePath:instancePath+"/managedBranches/" + i1,schemaPath:"#/$defs/UserManagedBranch6d0a/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key1},message:"must NOT have additional properties"}];return false;break;}}if(_errs20 === errors){if(data8.branchKey !== undefined){if(typeof data8.branchKey !== "string"){validate11.errors = [{instancePath:instancePath+"/managedBranches/" + i1+"/branchKey",schemaPath:"#/$defs/UserManagedBranch6d0a/properties/branchKey/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}}}else {validate11.errors = [{instancePath:instancePath+"/managedBranches/" + i1,schemaPath:"#/$defs/UserManagedBranch6d0a/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}var valid2 = _errs17 === errors;if(!valid2){break;}}}else {validate11.errors = [{instancePath:instancePath+"/managedBranches",schemaPath:"#/properties/managedBranches/type",keyword:"type",params:{type: "array"},message:"must be array"}];return false;}}var valid0 = _errs15 === errors;}else {var valid0 = true;}}}}}}}}}else {validate11.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}validate11.errors = vErrors;return errors === 0;}function validate10(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){let vErrors = null;let errors = 0;if(errors === 0){if(data && typeof data == "object" && !Array.isArray(data)){let missing0;if((data.name === undefined) && (missing0 = "name")){validate10.errors = [{instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];return false;}else {const _errs1 = errors;for(const key0 in data){if(!(func2.call(schema11.properties, key0))){validate10.errors = [{instancePath,schemaPath:"#/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key0},message:"must NOT have additional properties"}];return false;break;}}if(_errs1 === errors){if(data.role !== undefined){let data0 = data.role;const _errs2 = errors;const _errs3 = errors;if(errors === _errs3){if(data0 && typeof data0 == "object" && !Array.isArray(data0)){const _errs5 = errors;for(const key1 in data0){if(!((key1 === "encodedKey") || (key1 === "id"))){validate10.errors = [{instancePath:instancePath+"/role",schemaPath:"#/$defs/RoleIdentifier6d0a/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key1},message:"must NOT have additional properties"}];return false;break;}}if(_errs5 === errors){if(data0.encodedKey !== undefined){const _errs6 = errors;if(typeof data0.encodedKey !== "string"){validate10.errors = [{instancePath:instancePath+"/role/encodedKey",schemaPath:"#/$defs/RoleIdentifier6d0a/properties/encodedKey/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid2 = _errs6 === errors;}else {var valid2 = true;}if(valid2){if(data0.id !== undefined){const _errs8 = errors;if(typeof data0.id !== "string"){validate10.errors = [{instancePath:instancePath+"/role/id",schemaPath:"#/$defs/RoleIdentifier6d0a/properties/id/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid2 = _errs8 === errors;}else {var valid2 = true;}}}}else {validate10.errors = [{instancePath:instancePath+"/role",schemaPath:"#/$defs/RoleIdentifier6d0a/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}var valid0 = _errs2 === errors;}else {var valid0 = true;}if(valid0){if(data.access !== undefined){const _errs10 = errors;if(!(validate11(data.access, {instancePath:instancePath+"/access",parentData:data,parentDataProperty:"access",rootData}))){vErrors = vErrors === null ? validate11.errors : vErrors.concat(validate11.errors);errors = vErrors.length;}var valid0 = _errs10 === errors;}else {var valid0 = true;}if(valid0){if(data.lastModifiedDate !== undefined){const _errs11 = errors;if(errors === _errs11){if(errors === _errs11){if(!(typeof data.lastModifiedDate === "string")){validate10.errors = [{instancePath:instancePath+"/lastModifiedDate",schemaPath:"#/properties/lastModifiedDate/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}}var valid0 = _errs11 === errors;}else {var valid0 = true;}if(valid0){if(data.name !== undefined){const _errs13 = errors;if(typeof data.name !== "string"){validate10.errors = [{instancePath:instancePath+"/name",schemaPath:"#/properties/name/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid0 = _errs13 === errors;}else {var valid0 = true;}if(valid0){if(data.encodedKey !== undefined){const _errs15 = errors;if(typeof data.encodedKey !== "string"){validate10.errors = [{instancePath:instancePath+"/encodedKey",schemaPath:"#/properties/encodedKey/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid0 = _errs15 === errors;}else {var valid0 = true;}if(valid0){if(data.id !== undefined){const _errs17 = errors;if(typeof data.id !== "string"){validate10.errors = [{instancePath:instancePath+"/id",schemaPath:"#/properties/id/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid0 = _errs17 === errors;}else {var valid0 = true;}if(valid0){if(data.transactionLimits !== undefined){let data8 = data.transactionLimits;const _errs19 = errors;if(errors === _errs19){if(data8 && typeof data8 == "object" && !Array.isArray(data8)){for(const key2 in data8){let data9 = data8[key2];const _errs22 = errors;if(!(((typeof data9 == "number") && (!(data9 % 1) && !isNaN(data9))) && (isFinite(data9)))){validate10.errors = [{instancePath:instancePath+"/transactionLimits/" + key2.replace(/~/g, "~0").replace(/\//g, "~1"),schemaPath:"#/properties/transactionLimits/additionalProperties/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];return false;}var valid3 = _errs22 === errors;if(!valid3){break;}}}else {validate10.errors = [{instancePath:instancePath+"/transactionLimits",schemaPath:"#/properties/transactionLimits/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}var valid0 = _errs19 === errors;}else {var valid0 = true;}if(valid0){if(data.type !== undefined){let data10 = data.type;const _errs24 = errors;if(!(((((data10 === "STREAMING_API") || (data10 === "AUDIT_TRAIL")) || (data10 === "PAYMENTS")) || (data10 === "MAMBU_API")) || (data10 === "CARDS_CAPABILITY"))){validate10.errors = [{instancePath:instancePath+"/type",schemaPath:"#/properties/type/enum",keyword:"enum",params:{allowedValues: schema11.properties.type.enum},message:"must be equal to one of the allowed values"}];return false;}var valid0 = _errs24 === errors;}else {var valid0 = true;}if(valid0){if(data.creationDate !== undefined){const _errs25 = errors;if(errors === _errs25){if(errors === _errs25){if(!(typeof data.creationDate === "string")){validate10.errors = [{instancePath:instancePath+"/creationDate",schemaPath:"#/properties/creationDate/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}}var valid0 = _errs25 === errors;}else {var valid0 = true;}if(valid0){if(data.assignedBranchKey !== undefined){const _errs27 = errors;if(typeof data.assignedBranchKey !== "string"){validate10.errors = [{instancePath:instancePath+"/assignedBranchKey",schemaPath:"#/properties/assignedBranchKey/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid0 = _errs27 === errors;}else {var valid0 = true;}}}}}}}}}}}}}else {validate10.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}validate10.errors = vErrors;return errors === 0;}