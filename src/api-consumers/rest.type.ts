/**
 * Generated by @skyleague/therefore@v1.0.0-local
 * Do not manually touch this
 */
/* eslint-disable */
import AjvValidator from 'ajv'
import type { ValidateFunction } from 'ajv'

export type GetApiKeysByConsumerIdResponse = ApiKey[]

export const GetApiKeysByConsumerIdResponse = {
    validate:
        require('./schemas/get-api-keys-by-consumer-id-response.schema.js') as ValidateFunction<GetApiKeysByConsumerIdResponse>,
    get schema() {
        return GetApiKeysByConsumerIdResponse.validate.schema
    },
    is: (o: unknown): o is GetApiKeysByConsumerIdResponse => GetApiKeysByConsumerIdResponse.validate(o) === true,
} as const

export interface ErrorResponse {
    errors?: RestError[]
}

export const ErrorResponse = {
    validate: require('./schemas/error-response.schema.js') as ValidateFunction<ErrorResponse>,
    get schema() {
        return ErrorResponse.validate.schema
    },
    is: (o: unknown): o is ErrorResponse => ErrorResponse.validate(o) === true,
} as const

/**
 * Representation of an API Consumer's API Key expiration time.
 */
export interface ApiKeyInput {
    /**
     * The time to live of the key in seconds
     */
    expirationTime?: number
}

export const ApiKeyInput = {
    validate: require('./schemas/api-key-input.schema.js') as ValidateFunction<ApiKeyInput>,
    get schema() {
        return ApiKeyInput.validate.schema
    },
    is: (o: unknown): o is ApiKeyInput => ApiKeyInput.validate(o) === true,
    assert: (o: unknown) => {
        if (!ApiKeyInput.validate(o)) {
            throw new AjvValidator.ValidationError(ApiKeyInput.validate.errors ?? [])
        }
    },
} as const

/**
 * Representation of an API Consumer's API Key
 */
export interface ApiKey {
    /**
     * The api key ID
     */
    id?: string
    /**
     * The api key
     */
    apiKey?: string
    /**
     * The time to live for the rotated key
     */
    expirationTime?: number
}

export const ApiKey = {
    validate: require('./schemas/api-key.schema.js') as ValidateFunction<ApiKey>,
    get schema() {
        return ApiKey.validate.schema
    },
    is: (o: unknown): o is ApiKey => ApiKey.validate(o) === true,
} as const

/**
 * Api Consumer containing keys that can be used to access mambu API
 */
export interface ApiConsumer {
    role?: RoleIdentifier
    access?: ApiConsumerAccess
    /**
     * The last time Api Consumer was modified, as UTC
     */
    lastModifiedDate?: string
    /**
     * Api Consumer name
     */
    name: string
    /**
     * The encoded key of the entity, generated, globally unique
     */
    encodedKey?: string
    /**
     * Id of the Api Consumer
     */
    id?: string
    /**
     * Map of specifying Api Consumer transaction limits.
     */
    transactionLimits?: {
        [k: string]: number
    }
    /**
     * The type of Api Consumer
     */
    type?: 'STREAMING_API' | 'AUDIT_TRAIL' | 'PAYMENTS' | 'MAMBU_API'
    /**
     * Date when the Api Consumer was created, as UTC
     */
    creationDate?: string
    /**
     * The encoded key of the branch this Api Consumer is assigned to.
     */
    assignedBranchKey?: string
}

export const ApiConsumer = {
    validate: require('./schemas/api-consumer.schema.js') as ValidateFunction<ApiConsumer>,
    get schema() {
        return ApiConsumer.validate.schema
    },
    is: (o: unknown): o is ApiConsumer => ApiConsumer.validate(o) === true,
    assert: (o: unknown) => {
        if (!ApiConsumer.validate(o)) {
            throw new AjvValidator.ValidationError(ApiConsumer.validate.errors ?? [])
        }
    },
} as const

export type PatchRequest = PatchOperation[]

export const PatchRequest = {
    validate: require('./schemas/patch-request.schema.js') as ValidateFunction<PatchRequest>,
    get schema() {
        return PatchRequest.validate.schema
    },
    is: (o: unknown): o is PatchRequest => PatchRequest.validate(o) === true,
    assert: (o: unknown) => {
        if (!PatchRequest.validate(o)) {
            throw new AjvValidator.ValidationError(PatchRequest.validate.errors ?? [])
        }
    },
} as const

export type GetAllResponse = ApiConsumer[]

export const GetAllResponse = {
    validate: require('./schemas/get-all-response.schema.js') as ValidateFunction<GetAllResponse>,
    get schema() {
        return GetAllResponse.validate.schema
    },
    is: (o: unknown): o is GetAllResponse => GetAllResponse.validate(o) === true,
} as const

/**
 * Representation of an API Consumer's Secret Key
 */
export interface SecretKey {
    /**
     * The secret key
     */
    secretKey?: string
}

export const SecretKey = {
    validate: require('./schemas/secret-key.schema.js') as ValidateFunction<SecretKey>,
    get schema() {
        return SecretKey.validate.schema
    },
    is: (o: unknown): o is SecretKey => SecretKey.validate(o) === true,
} as const

export interface RestError {
    errorCode?: number
    errorSource?: string
    errorReason?: string
}

/**
 * The user role identifier
 */
export interface RoleIdentifier {
    /**
     * The encoded key of the entity, generated, globally unique
     */
    encodedKey?: string
    /**
     * Id of the role, unique, can be generated and customized
     */
    id?: string
}

/**
 * Wrapper containing the available API Consumer permissions and access rights
 */
export interface ApiConsumerAccess {
    /**
     * Flag specific to Credit Officers determining the access to entities assigned to other Credit Officers (eg clients, accounts)
     */
    canManageEntitiesAssignedToOtherOfficers?: boolean
    /**
     * Whether the API Consumer is an administrator in Mambu. The administrators in mambu are having full permissions for all entities and for Mambu settings.
     */
    administratorAccess?: boolean
    /**
     * API access allows the API Consumer to authenticate and interact with Mambu using Mambu's APIs, this means that most of the time such an API Consumer is not an actual person, but a piece of software that is programmed to interact with Mambu. The API API Consumer would still require the right API Consumer permissions, depending on what it is required to do in the system, and transactions posted by that API Consumer are kept in the logs in the same way as API Consumer actions from regular users.
     */
    apiAccess?: boolean
    /**
     * Permissions for the API Consumer. The non-admin users are authorized to do actions based a set of permissions in order to access Mambu features. Note that not all this permissions are used for validating API calls, some are used only for UI validations
     */
    permissions?: Local0[]
    /**
     * Whether the API Consumer is a credit officer or not. Credit Officers have the option of having clients and groups assigned to them, this relationship allows for better reporting and client management.
     */
    creditOfficerAccess?: boolean
    /**
     * Whether the API Consumer permissions apply to all branches or only for some branches
     */
    canManageAllBranches?: boolean
    /**
     * The list of branches that can be managed by current API Consumer. If the API Consumer has the canManageAllBranches true, this list is not taken in consideration.
     */
    managedBranches?: UserManagedBranch[]
}

type Local0 =
    | 'AUDIT_TRANSACTIONS'
    | 'VIEW_EXCHANGE_RATES'
    | 'CREATE_EXCHANGE_RATE'
    | 'VIEW_LOAN_ACCOUNT_DETAILS'
    | 'CREATE_LOAN_ACCOUNT'
    | 'EDIT_LOAN_ACCOUNT'
    | 'APPROVE_LOANS'
    | 'DIBURSE_LOANS'
    | 'APPLY_LOAN_FEES'
    | 'ENTER_REPAYMENT'
    | 'EDIT_PLANNED_FEES'
    | 'EDIT_REPAYMENT_SCHEDULE'
    | 'APPLY_LOAN_ADJUSTMENTS'
    | 'BACKDATE_LOAN_TRANSACTIONS'
    | 'APPLY_ACCRUED_LOAN_INTEREST'
    | 'POST_TRANSACTIONS_ON_LOCKED_LOAN_ACCOUNTS'
    | 'EDIT_PENALTY_RATE'
    | 'VIEW_INVESTOR_FUNDS_DETAILS'
    | 'CREATE_INVESTOR_FUNDS'
    | 'EDIT_INVESTOR_FUNDS'
    | 'DELETE_INVESTOR_FUNDS'
    | 'SELL_LOAN_FRACTION'
    | 'REQUEST_LOAN_APPROVAL'
    | 'EDIT_LOAN_TRANCHES'
    | 'REJECT_LOANS'
    | 'WRITE_OFF_LOAN_ACCOUNTS'
    | 'PAY_OFF_LOAN'
    | 'REVERSE_LOAN_ACCOUNT_WRITE_OFF'
    | 'CLOSE_LOAN_ACCOUNTS'
    | 'LOCK_LOAN_ACCOUNTS'
    | 'WITHDRAW_LOAN_ACCOUNTS'
    | 'DELETE_LOAN_ACCOUNT'
    | 'SET_DISBURSEMENT_CONDITIONS'
    | 'RESCHEDULE_LOAN_ACCOUNT'
    | 'REFINANCE_LOAN_ACCOUNT'
    | 'EDIT_LOAN_TRANSACTIONS'
    | 'BULK_LOAN_CORRECTIONS'
    | 'EDIT_INTEREST_RATE'
    | 'EDIT_REPAYMENT_METHOD_VALUE'
    | 'EDIT_PERIODIC_PAYMENT_FOR_ACTIVE_ACCOUNT'
    | 'UNDO_LOAN_ACCOUNT_CLOSURE'
    | 'UNDO_REJECT_LOANS'
    | 'UNDO_WITHDRAW_LOAN_ACCOUNTS'
    | 'LINK_ACCOUNTS'
    | 'EDIT_PRINCIPAL_PAYMENT_ACTIVE_REVOLVING_CREDIT'
    | 'PERFORM_REPAYMENTS_WITH_CUSTOM_AMOUNTS_ALLOCATION'
    | 'MANAGE_LOAN_ASSOCIATION'
    | 'MAKE_WITHDRAWAL_REDRAW'
    | 'VIEW_SAVINGS_ACCOUNT_DETAILS'
    | 'CREATE_SAVINGS_ACCOUNT'
    | 'EDIT_SAVINGS_ACCOUNT'
    | 'APPROVE_SAVINGS'
    | 'MAKE_DEPOSIT'
    | 'MAKE_WITHDRAWAL'
    | 'BACKDATE_SAVINGS_TRANSACTIONS'
    | 'APPLY_SAVINGS_ADJUSTMENTS'
    | 'MAKE_TRANSFER'
    | 'MAKE_INTER_CLIENTS_TRANSFERS'
    | 'CLOSE_SAVINGS_ACCOUNTS'
    | 'REOPEN_SAVINGS_ACCOUNT'
    | 'APPLY_SAVINGS_FEES'
    | 'DELETE_SAVINGS_ACCOUNT'
    | 'POST_TRANSACTIONS_ON_DORMANT_ACCOUNTS'
    | 'EDIT_SAVINGS_TRANSACTIONS'
    | 'BULK_DEPOSIT_CORRECTIONS'
    | 'ACTIVATE_MATURITY'
    | 'APPLY_ACCRUED_SAVINGS_INTEREST'
    | 'LOCK_SAVINGS_ACCOUNT'
    | 'UNLOCK_SAVINGS_ACCOUNT'
    | 'UNDO_MATURITY'
    | 'MAKE_EARLY_WITHDRAWALS'
    | 'BLOCK_AND_SEIZE_FUNDS'
    | 'WITHDRAW_BLOCKED_FUNDS'
    | 'CREATE_CARDS'
    | 'VIEW_CARDS'
    | 'DELETE_CARDS'
    | 'REVERSE_CARD_WITHDRAWAL_TRANSACTION'
    | 'CARD_BALANCE_INQUIRY'
    | 'CREATE_AUTHORIZATION_HOLD'
    | 'UPDATE_AUTHORIZATION_HOLD'
    | 'VIEW_AUTHORIZATION_HOLD'
    | 'CREATE_CARD_TRANSACTION'
    | 'CREATE_ACCOUNT_HOLD'
    | 'UPDATE_ACCOUNT_HOLD'
    | 'VIEW_ACCOUNT_HOLD'
    | 'VIEW_SECURITIES_DETAILS'
    | 'CREATE_SECURITIES'
    | 'EDIT_SECURITIES'
    | 'DELETE_SECURITIES'
    | 'CREATE_LINES_OF_CREDIT'
    | 'EDIT_LINES_OF_CREDIT'
    | 'VIEW_LINE_OF_CREDIT_DETAILS'
    | 'ADD_ACCOUNTS_TO_LINE_OF_CREDIT'
    | 'REMOVE_ACCOUNTS_FROM_LINE_OF_CREDIT'
    | 'APPROVE_LINE_OF_CREDIT'
    | 'UNDO_APPROVE_LINE_OF_CREDIT'
    | 'WITHDRAW_LINE_OF_CREDIT'
    | 'UNDO_WITHDRAW_LINE_OF_CREDIT'
    | 'REJECT_LINE_OF_CREDIT'
    | 'UNDO_REJECT_LINE_OF_CREDIT'
    | 'CLOSE_LINES_OF_CREDIT'
    | 'DELETE_LINES_OF_CREDIT'
    | 'VIEW_LOAN_PRODUCT_DETAILS'
    | 'CREATE_LOAN_PRODUCT'
    | 'DELETE_LOAN_PRODUCTS'
    | 'EDIT_LOAN_PRODUCT'
    | 'VIEW_SAVINGS_PRODUCT_DETAILS'
    | 'CREATE_SAVINGS_PRODUCT'
    | 'EDIT_SAVINGS_PRODUCT'
    | 'DELETE_SAVINGS_PRODUCT'
    | 'VIEW_CLIENT_DETAILS'
    | 'CREATE_CLIENT'
    | 'EDIT_CLIENT'
    | 'DELETE_CLIENTS'
    | 'VIEW_GROUP_DETAILS'
    | 'CREATE_GROUP'
    | 'EDIT_GROUP'
    | 'DELETE_GROUP'
    | 'CHANGE_CLIENT_TYPE'
    | 'CHANGE_GROUP_TYPE'
    | 'APPROVE_CLIENT'
    | 'REJECT_CLIENT'
    | 'EXIT_CLIENT'
    | 'BLACKLIST_CLIENT'
    | 'UNDO_CLIENT_STATE_CHANGED'
    | 'ANONYMIZE_CLIENT'
    | 'MANAGE_CLIENT_ASSOCIATION'
    | 'MANAGE_GROUP_ASSOCIATION'
    | 'EDIT_CLIENT_ID'
    | 'EDIT_GROUP_ID'
    | 'EDIT_BLACKLISTED_CLIENT_CFV'
    | 'VIEW_ACCOUNTING_REPORTS'
    | 'LOG_JOURNAL_ENTRIES'
    | 'BOOKING_DATE_LOANS_GL'
    | 'BOOKING_DATE_SAVINGS_GL'
    | 'RECTIFY_ADJUSTMENT'
    | 'VIEW_ACCOUNTING_RATES'
    | 'CREATE_ACCOUNTING_RATES'
    | 'VIEW_DOCUMENTS'
    | 'CREATE_DOCUMENTS'
    | 'EDIT_DOCUMENTS'
    | 'DELETE_DOCUMENTS'
    | 'VIEW_TASK'
    | 'CREATE_TASK'
    | 'EDIT_TASK'
    | 'DELETE_TASK'
    | 'VIEW_USER_DETAILS'
    | 'CREATE_USER'
    | 'EDIT_USER'
    | 'DELETE_USER'
    | 'VIEW_ROLE'
    | 'CREATE_ROLE'
    | 'EDIT_ROLE'
    | 'DELETE_ROLE'
    | 'RESEND_FAILED_MESSAGES'
    | 'SEND_MANUAL_SMS'
    | 'SEND_MANUAL_EMAIL'
    | 'MANAGE_CONFIGURATION_AS_CODE'
    | 'MANAGE_RISK_LEVELS'
    | 'MANAGE_EOD_PROCESSING'
    | 'VIEW_INTELLIGENCE'
    | 'CREATE_INDEX_RATE'
    | 'VIEW_COMMENTS'
    | 'CREATE_COMMENTS'
    | 'EDIT_COMMENTS'
    | 'VIEW_COMMUNICATION_HISTORY'
    | 'DOWNLOAD_BACKUPS'
    | 'IMPORT_DATA'
    | 'VIEW_TRANSACTION_CHANNELS'
    | 'CREATE_TRANSACTION_CHANNELS'
    | 'EDIT_TRANSACTION_CHANNELS'
    | 'DELETE_TRANSACTION_CHANNELS'
    | 'POST_TRANSACTIONS_WITHOUT_OPENED_TILL'
    | 'VIEW_CUSTOM_FIELD'
    | 'VIEW_BRANCH_DETAILS'
    | 'CREATE_BRANCH'
    | 'EDIT_BRANCH'
    | 'VIEW_CENTRE_DETAILS'
    | 'CREATE_CENTRE'
    | 'EDIT_CENTRE'
    | 'DELETE_CENTRE'
    | 'MANAGE_HOLIDAYS'
    | 'MANAGE_EVENTS_STREAMING'
    | 'MANAGE_AUDIT_TRAIL'
    | 'MANAGE_PAYMENTS'
    | 'CREATE_API_CONSUMERS_AND_KEYS'
    | 'DELETE_API_CONSUMERS_AND_KEYS'
    | 'EDIT_API_CONSUMERS_AND_KEYS'
    | 'VIEW_API_CONSUMERS_AND_KEYS'

/**
 * Branch that can be managed by the user or API Consumer
 */
export interface UserManagedBranch {
    /**
     * The encoded key of the branch, generated
     */
    branchKey?: string
}

/**
 * A single change that needs to be made to a resource
 */
export interface PatchOperation {
    /**
     * The change to perform
     */
    op: 'ADD' | 'REPLACE' | 'REMOVE' | 'MOVE'
    /**
     * The field to perform the operation on
     */
    path: string
    /**
     * The field from where a value should be moved, when using move
     */
    from?: string
    /**
     * The value of the field, can be null
     */
    value?: unknown
}
