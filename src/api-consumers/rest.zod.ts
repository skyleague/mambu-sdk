/**
 * Generated by @skyleague/therefore
 * Do not manually touch this
 */
/* eslint-disable */

import { z } from 'zod'

export const UserManagedBranch = z
    .object({
        branchKey: z.string().describe('The encoded key of the branch, it is automatically generated.').optional(),
    })
    .describe('Represents a branch that can be managed by the user or API consumer.')

export type UserManagedBranch = z.infer<typeof UserManagedBranch>

export const RoleIdentifier = z
    .object({
        encodedKey: z.string().describe('The encoded key of the entity, generated automatically, globally unique.').optional(),
        id: z.string().describe('The ID of the role, which can be generated and customized, but must be unique.').optional(),
    })
    .describe('Represents the role identifier.')

export type RoleIdentifier = z.infer<typeof RoleIdentifier>

export const ApiConsumerAccess = z
    .object({
        administratorAccess: z
            .boolean()
            .describe(
                '`TRUE` if the API consumer has the administrator user type, `FALSE` otherwise. Administrators (admins) have all permissions and can perform any action in Mambu.',
            )
            .optional(),
        apiAccess: z
            .boolean()
            .describe(
                '`TRUE` if the API consumer can authenticate and interact with Mambu APIs, `FALSE` otherwise. The API consumer may still require additional permissions for specific API requests.',
            )
            .optional(),
        canManageAllBranches: z
            .boolean()
            .describe(
                '`TRUE` if the API consumer permissions apply to all branches, `FALSE` if they only apply to specific branches.',
            )
            .optional(),
        canManageEntitiesAssignedToOtherOfficers: z
            .boolean()
            .describe(
                '`TRUE` if the API consumer (that has the credit officer access) can access entities (for example, clients or accounts) assigned to other credit officers, `FALSE` otherwise.',
            )
            .optional(),
        creditOfficerAccess: z
            .boolean()
            .describe(
                '`TRUE` if the API consumer has the credit officer user type, `FALSE` otherwise. Credit officers have the option of having clients and groups assigned to them.',
            )
            .optional(),
        managedBranches: UserManagedBranch.array()
            .describe(
                'The list of branches that can be managed by the API consumer. If the API consumer has the `canManageAllBranches` property set to `TRUE`, this list does not apply.',
            )
            .optional(),
        permissions: z
            .enum([
                'AUDIT_TRANSACTIONS',
                'VIEW_EXCHANGE_RATES',
                'CREATE_EXCHANGE_RATE',
                'VIEW_LOAN_ACCOUNT_DETAILS',
                'CREATE_LOAN_ACCOUNT',
                'EDIT_LOAN_ACCOUNT',
                'APPROVE_LOANS',
                'DIBURSE_LOANS',
                'APPLY_LOAN_FEES',
                'ENTER_REPAYMENT',
                'EDIT_PLANNED_FEES',
                'EDIT_REPAYMENT_SCHEDULE',
                'APPLY_LOAN_ADJUSTMENTS',
                'BACKDATE_LOAN_TRANSACTIONS',
                'APPLY_ACCRUED_LOAN_INTEREST',
                'POST_TRANSACTIONS_ON_LOCKED_LOAN_ACCOUNTS',
                'EDIT_PENALTY_RATE',
                'VIEW_INVESTOR_FUNDS_DETAILS',
                'CREATE_INVESTOR_FUNDS',
                'EDIT_INVESTOR_FUNDS',
                'DELETE_INVESTOR_FUNDS',
                'SELL_LOAN_FRACTION',
                'REQUEST_LOAN_APPROVAL',
                'EDIT_LOAN_TRANCHES',
                'REJECT_LOANS',
                'WRITE_OFF_LOAN_ACCOUNTS',
                'PAY_OFF_LOAN',
                'REVERSE_LOAN_ACCOUNT_WRITE_OFF',
                'CLOSE_LOAN_ACCOUNTS',
                'LOCK_LOAN_ACCOUNTS',
                'WITHDRAW_LOAN_ACCOUNTS',
                'DELETE_LOAN_ACCOUNT',
                'SET_DISBURSEMENT_CONDITIONS',
                'RESCHEDULE_LOAN_ACCOUNT',
                'REFINANCE_LOAN_ACCOUNT',
                'EDIT_LOAN_TRANSACTIONS',
                'BULK_LOAN_CORRECTIONS',
                'EDIT_INTEREST_RATE',
                'EDIT_REPAYMENT_METHOD_VALUE',
                'EDIT_PERIODIC_PAYMENT_FOR_ACTIVE_ACCOUNT',
                'UNDO_LOAN_ACCOUNT_CLOSURE',
                'UNDO_REJECT_LOANS',
                'UNDO_WITHDRAW_LOAN_ACCOUNTS',
                'LINK_ACCOUNTS',
                'EDIT_PRINCIPAL_PAYMENT_ACTIVE_REVOLVING_CREDIT',
                'PERFORM_REPAYMENTS_WITH_CUSTOM_AMOUNTS_ALLOCATION',
                'MANAGE_LOAN_ASSOCIATION',
                'MAKE_WITHDRAWAL_REDRAW',
                'ENTER_REFUND',
                'VIEW_SAVINGS_ACCOUNT_DETAILS',
                'CREATE_SAVINGS_ACCOUNT',
                'EDIT_SAVINGS_ACCOUNT',
                'APPROVE_SAVINGS',
                'MAKE_DEPOSIT',
                'MAKE_BULK_DEPOSITS',
                'MAKE_WITHDRAWAL',
                'BACKDATE_SAVINGS_TRANSACTIONS',
                'APPLY_SAVINGS_ADJUSTMENTS',
                'MAKE_TRANSFER',
                'MAKE_INTER_CLIENTS_TRANSFERS',
                'CLOSE_SAVINGS_ACCOUNTS',
                'REOPEN_SAVINGS_ACCOUNT',
                'APPLY_SAVINGS_FEES',
                'DELETE_SAVINGS_ACCOUNT',
                'POST_TRANSACTIONS_ON_DORMANT_ACCOUNTS',
                'EDIT_SAVINGS_TRANSACTIONS',
                'BULK_DEPOSIT_CORRECTIONS',
                'ACTIVATE_MATURITY',
                'APPLY_ACCRUED_SAVINGS_INTEREST',
                'LOCK_SAVINGS_ACCOUNT',
                'UNLOCK_SAVINGS_ACCOUNT',
                'UNDO_MATURITY',
                'MAKE_EARLY_WITHDRAWALS',
                'BLOCK_AND_SEIZE_FUNDS',
                'WITHDRAW_BLOCKED_FUNDS',
                'MAKE_BULK_CHANGE_INTEREST_AVAILABILITY',
                'MANAGE_DEPOSIT_ACCOUNT_RECIPIENT',
                'MANAGE_DEPOSIT_ASSOCIATION',
                'BYPASS_ACCOUNT_OWNERSHIP_TRANSFER_VIEW_RESTRICTION',
                'CREATE_CARDS',
                'VIEW_CARDS',
                'DELETE_CARDS',
                'REVERSE_CARD_WITHDRAWAL_TRANSACTION',
                'CARD_BALANCE_INQUIRY',
                'CREATE_AUTHORIZATION_HOLD',
                'UPDATE_AUTHORIZATION_HOLD',
                'VIEW_AUTHORIZATION_HOLD',
                'CREATE_CARD_TRANSACTION',
                'CREATE_ACCOUNT_HOLD',
                'UPDATE_ACCOUNT_HOLD',
                'VIEW_ACCOUNT_HOLD',
                'VIEW_SECURITIES_DETAILS',
                'CREATE_SECURITIES',
                'EDIT_SECURITIES',
                'DELETE_SECURITIES',
                'CREATE_LINES_OF_CREDIT',
                'EDIT_LINES_OF_CREDIT',
                'VIEW_LINE_OF_CREDIT_DETAILS',
                'ADD_ACCOUNTS_TO_LINE_OF_CREDIT',
                'REMOVE_ACCOUNTS_FROM_LINE_OF_CREDIT',
                'APPROVE_LINE_OF_CREDIT',
                'UNDO_APPROVE_LINE_OF_CREDIT',
                'WITHDRAW_LINE_OF_CREDIT',
                'UNDO_WITHDRAW_LINE_OF_CREDIT',
                'REJECT_LINE_OF_CREDIT',
                'UNDO_REJECT_LINE_OF_CREDIT',
                'CLOSE_LINES_OF_CREDIT',
                'DELETE_LINES_OF_CREDIT',
                'VIEW_LOAN_PRODUCT_DETAILS',
                'CREATE_LOAN_PRODUCT',
                'DELETE_LOAN_PRODUCTS',
                'EDIT_LOAN_PRODUCT',
                'VIEW_SAVINGS_PRODUCT_DETAILS',
                'CREATE_SAVINGS_PRODUCT',
                'EDIT_SAVINGS_PRODUCT',
                'DELETE_SAVINGS_PRODUCT',
                'VIEW_CLIENT_DETAILS',
                'CREATE_CLIENT',
                'EDIT_CLIENT',
                'DELETE_CLIENTS',
                'VIEW_GROUP_DETAILS',
                'CREATE_GROUP',
                'EDIT_GROUP',
                'DELETE_GROUP',
                'CHANGE_CLIENT_TYPE',
                'CHANGE_GROUP_TYPE',
                'APPROVE_CLIENT',
                'REJECT_CLIENT',
                'EXIT_CLIENT',
                'BLACKLIST_CLIENT',
                'UNDO_CLIENT_STATE_CHANGED',
                'ANONYMIZE_CLIENT',
                'MANAGE_CLIENT_ASSOCIATION',
                'MANAGE_GROUP_ASSOCIATION',
                'EDIT_CLIENT_ID',
                'EDIT_GROUP_ID',
                'EDIT_BLACKLISTED_CLIENT_CFV',
                'VIEW_ACCOUNTING_REPORTS',
                'LOG_JOURNAL_ENTRIES',
                'BOOKING_DATE_LOANS_GL',
                'BOOKING_DATE_SAVINGS_GL',
                'RECTIFY_ADJUSTMENT',
                'VIEW_ACCOUNTING_RATES',
                'CREATE_ACCOUNTING_RATES',
                'VIEW_DOCUMENTS',
                'CREATE_DOCUMENTS',
                'EDIT_DOCUMENTS',
                'DELETE_DOCUMENTS',
                'VIEW_TASK',
                'CREATE_TASK',
                'EDIT_TASK',
                'DELETE_TASK',
                'VIEW_USER_DETAILS',
                'CREATE_USER',
                'EDIT_USER',
                'DELETE_USER',
                'VIEW_ROLE',
                'CREATE_ROLE',
                'EDIT_ROLE',
                'DELETE_ROLE',
                'RESEND_FAILED_MESSAGES',
                'SEND_MANUAL_SMS',
                'SEND_MANUAL_EMAIL',
                'GET_MANAGE_CONFIGURATION_AS_CODE',
                'PUT_MANAGE_CONFIGURATION_AS_CODE',
                'MANAGE_RISK_LEVELS',
                'MANAGE_EOD_PROCESSING',
                'MANAGE_CURRENCIES',
                'VIEW_INTELLIGENCE',
                'CREATE_INDEX_RATE',
                'VIEW_COMMENTS',
                'CREATE_COMMENTS',
                'EDIT_COMMENTS',
                'VIEW_COMMUNICATION_HISTORY',
                'DOWNLOAD_BACKUPS',
                'IMPORT_DATA',
                'VIEW_TRANSACTION_CHANNELS',
                'CREATE_TRANSACTION_CHANNELS',
                'EDIT_TRANSACTION_CHANNELS',
                'DELETE_TRANSACTION_CHANNELS',
                'POST_TRANSACTIONS_WITHOUT_OPENED_TILL',
                'VIEW_CUSTOM_FIELD',
                'VIEW_BRANCH_DETAILS',
                'CREATE_BRANCH',
                'EDIT_BRANCH',
                'VIEW_CENTRE_DETAILS',
                'CREATE_CENTRE',
                'EDIT_CENTRE',
                'DELETE_CENTRE',
                'MANAGE_HOLIDAYS',
                'MANAGE_INDEX_RATES',
                'MANAGE_EVENTS_STREAMING',
                'MANAGE_AUDIT_TRAIL',
                'MANAGE_PAYMENTS',
                'MANAGE_CARDS_CAPABILITY',
                'CREATE_API_CONSUMERS_AND_KEYS',
                'DELETE_API_CONSUMERS_AND_KEYS',
                'EDIT_API_CONSUMERS_AND_KEYS',
                'VIEW_API_CONSUMERS_AND_KEYS',
                'MANAGE_NOTIFICATIONS',
                'VIEW_MAMBU_FUNCTIONS',
                'CREATE_MAMBU_FUNCTIONS',
                'EDIT_MAMBU_FUNCTIONS',
                'DELETE_MAMBU_FUNCTIONS',
                'VIEW_MAMBU_FUNCTIONS_SECRETS',
                'CREATE_MAMBU_FUNCTIONS_SECRETS',
                'EDIT_MAMBU_FUNCTIONS_SECRETS',
                'DELETE_MAMBU_FUNCTIONS_SECRETS',
                'VIEW_PROFIT_SHARING_PROPOSALS',
                'CREATE_PROFIT_SHARING_CASH_FLOWS',
                'VIEW_PROFIT_SHARING_CASH_FLOWS',
                'EDIT_PROFIT_SHARING_CASH_FLOWS',
                'DELETE_PROFIT_SHARING_CASH_FLOWS',
                'CREATE_PROFIT_SHARING_POOLS',
                'VIEW_PROFIT_SHARING_POOLS',
                'EDIT_PROFIT_SHARING_POOLS',
                'DELETE_PROFIT_SHARING_POOLS',
                'CREATE_PROFIT_SHARING_PRODUCT_SETTINGS',
                'VIEW_PROFIT_SHARING_PRODUCT_SETTINGS',
                'EDIT_PROFIT_SHARING_PRODUCT_SETTINGS',
                'DELETE_PROFIT_SHARING_PRODUCT_SETTINGS',
                'CREATE_RATE_SHEET',
                'VIEW_RATE_SHEET',
            ])
            .array()
            .describe(
                'Permissions for the API consumer. The non-admin API consumers and users are authorized to do actions based a set of permissions in order to access Mambu features. Permissions may be relevant for the API and/or the Mambu UI.',
            )
            .optional(),
    })
    .describe('Represents the API consumer permissions and access rights.')

export type ApiConsumerAccess = z.infer<typeof ApiConsumerAccess>

export const RestError = z.object({
    errorCode: z.number().int().optional(),
    errorReason: z.string().optional(),
    errorSource: z.string().optional(),
})

export type RestError = z.infer<typeof RestError>

export const ApiConsumer = z
    .object({
        access: ApiConsumerAccess.optional(),
        assignedBranchKey: z.string().describe('The encoded key of the branch this API consumer is assigned to.').optional(),
        creationDate: z
            .string()
            .datetime({ offset: true })
            .describe('The date when the API consumer was created in UTC.')
            .optional(),
        encodedKey: z.string().describe('The encoded key of the entity, generated, globally unique').optional(),
        id: z.string().describe('The ID of the API consumer.').optional(),
        lastModifiedDate: z
            .string()
            .datetime({ offset: true })
            .describe('The last time the API consumer was modified in UTC.')
            .optional(),
        name: z.string().describe('The API consumer name.'),
        role: RoleIdentifier.optional(),
        transactionLimits: z.record(z.number().optional()).describe('The API consumer transaction limits.').optional(),
    })
    .describe('Represents an API consumer.')

export type ApiConsumer = z.infer<typeof ApiConsumer>

export const ApiKey = z
    .object({
        apiKey: z
            .string()
            .describe(
                'A six character cleartext prefix of the API key. The prefix is not guaranteed to be unique. You must base any identification process on the API key ID, not the prefix.',
            )
            .optional(),
        expirationTime: z.number().int().nonnegative().describe('The time to live (TTL) for the API key in seconds.').optional(),
        id: z
            .string()
            .describe(
                'The API key ID. You must base any identification process on the the API key ID as it is guaranteed to be unique.',
            )
            .optional(),
    })
    .describe('Represents an API key of an API consumer.')

export type ApiKey = z.infer<typeof ApiKey>

export const PatchOperation = z
    .object({
        from: z.string().describe('The field from where a value should be moved, when using move').optional(),
        op: z.enum(['ADD', 'REPLACE', 'REMOVE', 'MOVE']).describe('The change to perform'),
        path: z.string().describe('The field to perform the operation on'),
        value: z.unknown().describe('The value of the field, can be null').optional(),
    })
    .describe('A single change that needs to be made to a resource')

export type PatchOperation = z.infer<typeof PatchOperation>

export const ApiKeyInput = z
    .object({
        expirationTime: z.number().int().nonnegative().describe('The time to live (TTL) for the API key in seconds.').optional(),
    })
    .describe('Represents an API key expiration time.')

export type ApiKeyInput = z.infer<typeof ApiKeyInput>

export const ErrorResponse = z.object({
    errors: RestError.array().optional(),
})

export type ErrorResponse = z.infer<typeof ErrorResponse>

export const GetAllResponse = ApiConsumer.array()

export type GetAllResponse = z.infer<typeof GetAllResponse>

export const GetKeysByConsumerIdResponse = ApiKey.array()

export type GetKeysByConsumerIdResponse = z.infer<typeof GetKeysByConsumerIdResponse>

export const PatchRequest = PatchOperation.array()

export type PatchRequest = z.infer<typeof PatchRequest>

export const SecretKey = z
    .object({
        secretKey: z.string().describe('The secret key').optional(),
    })
    .describe(`Representation of an API Consumer's Secret Key`)

export type SecretKey = z.infer<typeof SecretKey>
