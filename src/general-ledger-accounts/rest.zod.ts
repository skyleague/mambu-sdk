/**
 * Generated by @skyleague/therefore
 * Do not manually touch this
 */
/* eslint-disable */

import { z } from 'zod'

export const Currency = z
    .object({
        code: z
            .enum([
                'AED',
                'AFN',
                'ALL',
                'AMD',
                'ANG',
                'AOA',
                'ARS',
                'AUD',
                'AWG',
                'AZN',
                'BAM',
                'BBD',
                'BDT',
                'BGN',
                'BHD',
                'BIF',
                'BMD',
                'BND',
                'BOB',
                'BOV',
                'BRL',
                'BSD',
                'BTN',
                'BWP',
                'BYR',
                'BYN',
                'BZD',
                'CAD',
                'CDF',
                'CHE',
                'CHF',
                'CHW',
                'CLF',
                'CLP',
                'CNY',
                'COP',
                'COU',
                'CRC',
                'CUC',
                'CUP',
                'CVE',
                'CZK',
                'DJF',
                'DKK',
                'DOP',
                'DZD',
                'EGP',
                'ERN',
                'ETB',
                'EUR',
                'FJD',
                'FKP',
                'GBP',
                'GEL',
                'GHS',
                'GIP',
                'GMD',
                'GNF',
                'GTQ',
                'GYD',
                'HKD',
                'HNL',
                'HRK',
                'HTG',
                'HUF',
                'IDR',
                'ILS',
                'INR',
                'IQD',
                'IRR',
                'ISK',
                'JMD',
                'JOD',
                'JPY',
                'KES',
                'KGS',
                'KHR',
                'KMF',
                'KPW',
                'KRW',
                'KWD',
                'KYD',
                'KZT',
                'LAK',
                'LBP',
                'LKR',
                'LRD',
                'LSL',
                'LTL',
                'LVL',
                'LYD',
                'MAD',
                'MDL',
                'MGA',
                'MKD',
                'MMK',
                'MNT',
                'MOP',
                'MRO',
                'MRU',
                'MUR',
                'MVR',
                'MWK',
                'MXN',
                'MXV',
                'MYR',
                'MZN',
                'NAD',
                'NGN',
                'NIO',
                'NOK',
                'NPR',
                'NZD',
                'OMR',
                'PAB',
                'PEN',
                'PGK',
                'PHP',
                'PKR',
                'PLN',
                'PYG',
                'QAR',
                'RON',
                'RSD',
                'RUB',
                'RWF',
                'SAR',
                'SBD',
                'SCR',
                'SDG',
                'SEK',
                'SGD',
                'SHP',
                'SLL',
                'SOS',
                'SRD',
                'STD',
                'STN',
                'SVC',
                'SYP',
                'SZL',
                'THB',
                'TJS',
                'TMT',
                'TND',
                'TOP',
                'TRY',
                'TTD',
                'TWD',
                'TZS',
                'UAH',
                'UGX',
                'USD',
                'USN',
                'UYI',
                'UYU',
                'UYW',
                'UZS',
                'VED',
                'VEF',
                'VES',
                'VND',
                'VUV',
                'WST',
                'XAG',
                'XAU',
                'XAF',
                'XBA',
                'XBB',
                'XBC',
                'XBD',
                'XCD',
                'XDR',
                'XOF',
                'XPD',
                'XPF',
                'XPT',
                'XSU',
                'XTS',
                'XUA',
                'XXX',
                'YER',
                'ZAR',
                'ZIG',
                'ZMK',
                'ZWL',
                'ZMW',
                'SSP',
                'NON_FIAT',
            ])
            .describe('Fiat(ISO-4217) currency code or NON_FIAT for non fiat currencies.')
            .optional(),
        currencyCode: z.string().describe('Currency code for NON_FIAT currency.').optional(),
    })
    .describe('Represents a currency eg. USD, EUR.')

export type Currency = z.infer<typeof Currency>

export const GLAccountInput = z
    .object({
        allowManualJournalEntries: z
            .boolean()
            .describe(
                '`TRUE` if manual journal entries are allowed, `FALSE` otherwise. This is only available for Detail Accounts.',
            )
            .optional(),
        currency: Currency.optional(),
        description: z.string().describe('The description of the general ledger account.').optional(),
        glCode: z
            .string()
            .describe(
                `The general ledger code used to identify different account types. Also used for grouping and categorizing accounts. For example: an account code of '3201' is considered a subtype of '3200'.`,
            ),
        name: z.string().describe('The name of the general ledger account.'),
        stripTrailingZeros: z
            .boolean()
            .describe('`TRUE` to strip trailing zeros, `FALSE` otherwise. Only available for Header Accounts.')
            .optional(),
        type: z.enum(['ASSET', 'LIABILITY', 'EQUITY', 'INCOME', 'EXPENSE']).describe('The general ledger account type.'),
        usage: z
            .enum(['DETAIL', 'HEADER'])
            .describe(
                '`DETAIL` for general ledger accounts that log transactions, and `HEADER` for general ledger accounts used for reporting and organizational purposes.',
            ),
    })
    .describe('Represents the request payload for creating a GL Account')

export type GLAccountInput = z.infer<typeof GLAccountInput>

export const GLAccount = z
    .object({
        activated: z.boolean().describe('`TRUE` if the account is activated and may be used, `FALSE` otherwise.').optional(),
        allowManualJournalEntries: z
            .boolean()
            .describe('`TRUE` if manual journal entries are allowed, `FALSE` otherwise.')
            .optional(),
        balance: z
            .number()
            .describe('The balance of the general ledger account, which is only populated for the GET /glaccounts endpoint.')
            .optional(),
        creationDate: z
            .string()
            .datetime({ offset: true })
            .describe('The creation date for this account, which is stored as UTC.')
            .optional(),
        currency: Currency.optional(),
        description: z.string().describe('A description of the general ledger account.').optional(),
        encodedKey: z.string().describe('The encoded key of the entity, generated, globally unique').optional(),
        glCode: z
            .string()
            .describe(
                `The general ledger code used to identify different account types. Also used for grouping and categorizing accounts. For example: an account code of '3201' is considered a subtype of '3200'.`,
            )
            .optional(),
        lastModifiedDate: z
            .string()
            .datetime({ offset: true })
            .describe('The last modification date and time, which is stored as UTC.')
            .optional(),
        migrationEventKey: z
            .string()
            .describe(
                'The data migration event key if the general ledger account was created as a part of a data migration event.',
            )
            .optional(),
        name: z.string().describe('The name of the general ledger account.').optional(),
        stripTrailingZeros: z.boolean().describe('`TRUE` if trailing zeros are stripped, `FALSE` otherwise.').optional(),
        type: z
            .enum(['ASSET', 'LIABILITY', 'EQUITY', 'INCOME', 'EXPENSE'])
            .describe('The general ledger account type.')
            .optional(),
        usage: z
            .enum(['DETAIL', 'HEADER'])
            .describe(
                'The usage type of the general ledger account. `DETAIL` accounts are used to stores transaction balances. `HEADER` accounts are used to organise and group detail accounts for reporting purposes.',
            )
            .optional(),
    })
    .describe('Represents a general ledger account.')

export type GLAccount = z.infer<typeof GLAccount>

export const RestError = z.object({
    errorCode: z.number().int().optional(),
    errorReason: z.string().optional(),
    errorSource: z.string().optional(),
})

export type RestError = z.infer<typeof RestError>

export const PatchOperation = z
    .object({
        from: z.string().describe('The field from where a value should be moved, when using move').optional(),
        op: z.enum(['ADD', 'REPLACE', 'REMOVE', 'MOVE']).describe('The change to perform'),
        path: z.string().describe('The field to perform the operation on'),
        value: z.unknown().describe('The value of the field, can be null').optional(),
    })
    .describe('A single change that needs to be made to a resource')

export type PatchOperation = z.infer<typeof PatchOperation>

export const CreateRequest = GLAccountInput.array()

export type CreateRequest = z.infer<typeof CreateRequest>

export const CreateResponse = GLAccount.array()

export type CreateResponse = z.infer<typeof CreateResponse>

export const ErrorResponse = z.object({
    errors: RestError.array().optional(),
})

export type ErrorResponse = z.infer<typeof ErrorResponse>

export const GetAllResponse = GLAccount.array()

export type GetAllResponse = z.infer<typeof GetAllResponse>

export const PatchRequest = PatchOperation.array()

export type PatchRequest = z.infer<typeof PatchRequest>
