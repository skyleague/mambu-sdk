/**
 * Generated by @skyleague/therefore@v1.0.0-local
 * Do not manually touch this
 */
/* eslint-disable */
import AjvValidator from 'ajv'
import type { ValidateFunction } from 'ajv'

/**
 * The response representation of a GLAccount.
 */
export interface GLAccount {
    /**
     * The data migration event key if this GL Account was created as a part of a data migration event.
     */
    migrationEventKey?: string
    /**
     * Indicates when the last modification occurred. Stored as UTC.
     */
    lastModifiedDate?: string
    /**
     * General ledger code used to identify different account types. Also used for grouping and categorizing accounts. For instance an account code of '3201' is considered a subtype of account of '3200'.
     */
    glCode?: string
    /**
     * Categorization of GL Account by their usage (detail - where transactions are logged, or headers, for reporting and organization purposes).
     */
    usage?: 'DETAIL' | 'HEADER'
    /**
     * Description of the GL Account.
     */
    description?: string
    /**
     * Indicates the creation date for this account. Stored as UTC.
     */
    creationDate?: string
    /**
     * Type of the GL Account
     */
    type?: 'ASSET' | 'LIABILITY' | 'EQUITY' | 'INCOME' | 'EXPENSE'
    /**
     * Indicates whether manual Journal Entries are allowed or not
     */
    allowManualJournalEntries?: boolean
    /**
     * Indicates the balance of the GL Account. This field is populated only for GET /glaccounts endpoint.
     */
    balance?: number
    /**
     * Name of the GL Account
     */
    name?: string
    /**
     * The encoded key of the entity, generated, globally unique
     */
    encodedKey?: string
    currency?: Currency
    /**
     * Indicates whether to strip trailing zeros.
     */
    stripTrailingZeros?: boolean
    /**
     * Whether the Account is activated and may be used.
     */
    activated?: boolean
}

export const GLAccount = {
    validate: (await import('./schemas/gl-account.schema.js')).validate10 as unknown as ValidateFunction<GLAccount>,
    get schema() {
        return GLAccount.validate.schema
    },
    get errors() {
        return GLAccount.validate.errors ?? undefined
    },
    is: (o: unknown): o is GLAccount => GLAccount.validate(o) === true,
} as const

export interface ErrorResponse {
    errors?: RestError[]
}

export const ErrorResponse = {
    validate: (await import('./schemas/error-response.schema.js')).validate10 as unknown as ValidateFunction<ErrorResponse>,
    get schema() {
        return ErrorResponse.validate.schema
    },
    get errors() {
        return ErrorResponse.validate.errors ?? undefined
    },
    is: (o: unknown): o is ErrorResponse => ErrorResponse.validate(o) === true,
    assert: (o: unknown) => {
        if (!ErrorResponse.validate(o)) {
            throw new AjvValidator.ValidationError(ErrorResponse.errors ?? [])
        }
    },
} as const

export type PatchRequest = PatchOperation[]

export const PatchRequest = {
    validate: (await import('./schemas/patch-request.schema.js')).validate10 as unknown as ValidateFunction<PatchRequest>,
    get schema() {
        return PatchRequest.validate.schema
    },
    get errors() {
        return PatchRequest.validate.errors ?? undefined
    },
    is: (o: unknown): o is PatchRequest => PatchRequest.validate(o) === true,
    assert: (o: unknown) => {
        if (!PatchRequest.validate(o)) {
            throw new AjvValidator.ValidationError(PatchRequest.errors ?? [])
        }
    },
} as const

export type GetAllResponse = GLAccount[]

export const GetAllResponse = {
    validate: (await import('./schemas/get-all-response.schema.js')).validate10 as unknown as ValidateFunction<GetAllResponse>,
    get schema() {
        return GetAllResponse.validate.schema
    },
    get errors() {
        return GetAllResponse.validate.errors ?? undefined
    },
    is: (o: unknown): o is GetAllResponse => GetAllResponse.validate(o) === true,
} as const

export type CreateRequest = GLAccountInput[]

export const CreateRequest = {
    validate: (await import('./schemas/create-request.schema.js')).validate10 as unknown as ValidateFunction<CreateRequest>,
    get schema() {
        return CreateRequest.validate.schema
    },
    get errors() {
        return CreateRequest.validate.errors ?? undefined
    },
    is: (o: unknown): o is CreateRequest => CreateRequest.validate(o) === true,
    assert: (o: unknown) => {
        if (!CreateRequest.validate(o)) {
            throw new AjvValidator.ValidationError(CreateRequest.errors ?? [])
        }
    },
} as const

export type CreateResponse = GLAccount[]

export const CreateResponse = {
    validate: (await import('./schemas/create-response.schema.js')).validate10 as unknown as ValidateFunction<CreateResponse>,
    get schema() {
        return CreateResponse.validate.schema
    },
    get errors() {
        return CreateResponse.validate.errors ?? undefined
    },
    is: (o: unknown): o is CreateResponse => CreateResponse.validate(o) === true,
} as const

/**
 * Represents a currency eg. USD, EUR.
 */
export interface Currency {
    /**
     * Currency code for NON_FIAT currency.
     */
    currencyCode?: string
    /**
     * Fiat(ISO-4217) currency code or NON_FIAT for non fiat currencies.
     */
    code?:
        | 'AED'
        | 'AFN'
        | 'ALL'
        | 'AMD'
        | 'ANG'
        | 'AOA'
        | 'ARS'
        | 'AUD'
        | 'AWG'
        | 'AZN'
        | 'BAM'
        | 'BBD'
        | 'BDT'
        | 'BGN'
        | 'BHD'
        | 'BIF'
        | 'BMD'
        | 'BND'
        | 'BOB'
        | 'BOV'
        | 'BRL'
        | 'BSD'
        | 'BTN'
        | 'BWP'
        | 'BYR'
        | 'BYN'
        | 'BZD'
        | 'CAD'
        | 'CDF'
        | 'CHE'
        | 'CHF'
        | 'CHW'
        | 'CLF'
        | 'CLP'
        | 'CNY'
        | 'COP'
        | 'COU'
        | 'CRC'
        | 'CUC'
        | 'CUP'
        | 'CVE'
        | 'CZK'
        | 'DJF'
        | 'DKK'
        | 'DOP'
        | 'DZD'
        | 'EGP'
        | 'ERN'
        | 'ETB'
        | 'EUR'
        | 'FJD'
        | 'FKP'
        | 'GBP'
        | 'GEL'
        | 'GHS'
        | 'GIP'
        | 'GMD'
        | 'GNF'
        | 'GTQ'
        | 'GYD'
        | 'HKD'
        | 'HNL'
        | 'HRK'
        | 'HTG'
        | 'HUF'
        | 'IDR'
        | 'ILS'
        | 'INR'
        | 'IQD'
        | 'IRR'
        | 'ISK'
        | 'JMD'
        | 'JOD'
        | 'JPY'
        | 'KES'
        | 'KGS'
        | 'KHR'
        | 'KMF'
        | 'KPW'
        | 'KRW'
        | 'KWD'
        | 'KYD'
        | 'KZT'
        | 'LAK'
        | 'LBP'
        | 'LKR'
        | 'LRD'
        | 'LSL'
        | 'LTL'
        | 'LVL'
        | 'LYD'
        | 'MAD'
        | 'MDL'
        | 'MGA'
        | 'MKD'
        | 'MMK'
        | 'MNT'
        | 'MOP'
        | 'MRO'
        | 'MRU'
        | 'MUR'
        | 'MVR'
        | 'MWK'
        | 'MXN'
        | 'MXV'
        | 'MYR'
        | 'MZN'
        | 'NAD'
        | 'NGN'
        | 'NIO'
        | 'NOK'
        | 'NPR'
        | 'NZD'
        | 'OMR'
        | 'PAB'
        | 'PEN'
        | 'PGK'
        | 'PHP'
        | 'PKR'
        | 'PLN'
        | 'PYG'
        | 'QAR'
        | 'RON'
        | 'RSD'
        | 'RUB'
        | 'RWF'
        | 'SAR'
        | 'SBD'
        | 'SCR'
        | 'SDG'
        | 'SEK'
        | 'SGD'
        | 'SHP'
        | 'SLL'
        | 'SOS'
        | 'SRD'
        | 'STD'
        | 'STN'
        | 'SVC'
        | 'SYP'
        | 'SZL'
        | 'THB'
        | 'TJS'
        | 'TMT'
        | 'TND'
        | 'TOP'
        | 'TRY'
        | 'TTD'
        | 'TWD'
        | 'TZS'
        | 'UAH'
        | 'UGX'
        | 'USD'
        | 'USN'
        | 'UYI'
        | 'UYU'
        | 'UYW'
        | 'UZS'
        | 'VED'
        | 'VEF'
        | 'VES'
        | 'VND'
        | 'VUV'
        | 'WST'
        | 'XAG'
        | 'XAU'
        | 'XAF'
        | 'XBA'
        | 'XBB'
        | 'XBC'
        | 'XBD'
        | 'XCD'
        | 'XDR'
        | 'XOF'
        | 'XPD'
        | 'XPF'
        | 'XPT'
        | 'XSU'
        | 'XTS'
        | 'XUA'
        | 'XXX'
        | 'YER'
        | 'ZAR'
        | 'ZMK'
        | 'ZWL'
        | 'ZMW'
        | 'SSP'
        | 'NON_FIAT'
}

export interface RestError {
    errorCode?: number
    errorSource?: string
    errorReason?: string
}

/**
 * A single change that needs to be made to a resource
 */
export interface PatchOperation {
    /**
     * The change to perform
     */
    op: 'ADD' | 'REPLACE' | 'REMOVE' | 'MOVE'
    /**
     * The field to perform the operation on
     */
    path: string
    /**
     * The field from where a value should be moved, when using move
     */
    from?: string
    /**
     * The value of the field, can be null
     */
    value?: {
        [k: string]: unknown | undefined
    }
}

/**
 * Represents the request payload for creating a GL Account
 */
export interface GLAccountInput {
    /**
     * General ledger code used to identify different account types. Also used for grouping and categorizing accounts. For instance an account code of '3201' is considered a subtype of account of '3200'
     */
    glCode: string
    /**
     * Categorization of GL Account by their usage (detail - where transactions are logged, or headers, for reporting and organization purposes)
     */
    usage: 'DETAIL' | 'HEADER'
    /**
     * Name of the GL Account
     */
    name: string
    /**
     * Description of the GL Account
     */
    description?: string
    currency?: Currency
    /**
     * Indicates whether to strip trailing zeros (Only for Header Accounts)
     */
    stripTrailingZeros?: boolean
    /**
     * Type of the GL Account
     */
    type: 'ASSET' | 'LIABILITY' | 'EQUITY' | 'INCOME' | 'EXPENSE'
    /**
     * Indicates whether manual Journal Entries are allowed or not (Only available for Detail Accounts)
     */
    allowManualJournalEntries?: boolean
}
