/**
 * Generated by @skyleague/therefore
 * eslint-disable
 */
"use strict";module.exports = validate10;module.exports.default = validate10;const schema11 = {"$schema":"http://json-schema.org/draft-07/schema#","type":"array","title":"createRequest","items":{"$ref":"#/$defs/GlAccountInput6d0a"},"$defs":{"GlAccountInput6d0a":{"type":"object","title":"GLAccountInput","description":"Represents the request payload for creating a GL Account","properties":{"glCode":{"type":"string","title":"glCode","description":"General ledger code used to identify different account types. Also used for grouping and categorizing accounts. For instance an account code of '3201' is considered a subtype of account of '3200'"},"usage":{"title":"usage","description":"Categorization of GL Account by their usage (detail - where transactions are logged, or headers, for reporting and organization purposes)","enum":["DETAIL","HEADER"]},"name":{"type":"string","title":"name","description":"Name of the GL Account"},"description":{"type":"string","title":"description","description":"Description of the GL Account"},"currency":{"title":"currency","$ref":"#/$defs/Currency6d0a"},"stripTrailingZeros":{"type":"boolean","title":"stripTrailingZeros","description":"Indicates whether to strip trailing zeros (Only for Header Accounts)"},"type":{"title":"type","description":"Type of the GL Account","enum":["ASSET","LIABILITY","EQUITY","INCOME","EXPENSE"]},"allowManualJournalEntries":{"type":"boolean","title":"allowManualJournalEntries","description":"Indicates whether manual Journal Entries are allowed or not (Only available for Detail Accounts)"}},"required":["glCode","usage","name","type"],"additionalProperties":false},"Currency6d0a":{"type":"object","title":"Currency","description":"Represents a currency eg. USD, EUR.","properties":{"currencyCode":{"type":"string","title":"currencyCode","description":"Currency code for NON_FIAT currency."},"code":{"title":"code","description":"Fiat(ISO-4217) currency code or NON_FIAT for non fiat currencies.","enum":["AED","AFN","ALL","AMD","ANG","AOA","ARS","AUD","AWG","AZN","BAM","BBD","BDT","BGN","BHD","BIF","BMD","BND","BOB","BOV","BRL","BSD","BTC","BTN","BWP","BYR","BYN","BZD","CAD","CDF","CHE","CHF","CHW","CLF","CLP","CNY","COP","COU","CRC","CUC","CUP","CVE","CZK","DJF","DKK","DOP","DZD","EGP","ERN","ETB","EUR","FJD","FKP","GBP","GEL","GHS","GIP","GMD","GNF","GTQ","GYD","HKD","HNL","HRK","HTG","HUF","IDR","ILS","INR","IQD","IRR","ISK","JMD","JOD","JPY","KES","KGS","KHR","KMF","KPW","KRW","KWD","KYD","KZT","LAK","LBP","LKR","LRD","LSL","LTL","LVL","LYD","MAD","MDL","MGA","MKD","MMK","MNT","MOP","MRO","MRU","MUR","MVR","MWK","MXN","MXV","MYR","MZN","NAD","NGN","NIO","NOK","NPR","NZD","OMR","PAB","PEN","PGK","PHP","PKR","PLN","PYG","QAR","RON","RSD","RUB","RWF","SAR","SBD","SCR","SDG","SEK","SGD","SHP","SLL","SOS","SRD","STD","STN","SVC","SYP","SZL","THB","TJS","TMT","TND","TOP","TRY","TTD","TWD","TZS","UAH","UGX","USD","USN","UYI","UYU","UYW","UZS","VED","VEF","VES","VND","VUV","WST","XAG","XAU","XAF","XBA","XBB","XBC","XBD","XCD","XDR","XOF","XPD","XPF","XPT","XSU","XTS","XUA","XXX","YER","ZAR","ZMK","ZWL","ZMW","SSP","NON_FIAT"]}},"additionalProperties":false}}};const schema12 = {"type":"object","title":"GLAccountInput","description":"Represents the request payload for creating a GL Account","properties":{"glCode":{"type":"string","title":"glCode","description":"General ledger code used to identify different account types. Also used for grouping and categorizing accounts. For instance an account code of '3201' is considered a subtype of account of '3200'"},"usage":{"title":"usage","description":"Categorization of GL Account by their usage (detail - where transactions are logged, or headers, for reporting and organization purposes)","enum":["DETAIL","HEADER"]},"name":{"type":"string","title":"name","description":"Name of the GL Account"},"description":{"type":"string","title":"description","description":"Description of the GL Account"},"currency":{"title":"currency","$ref":"#/$defs/Currency6d0a"},"stripTrailingZeros":{"type":"boolean","title":"stripTrailingZeros","description":"Indicates whether to strip trailing zeros (Only for Header Accounts)"},"type":{"title":"type","description":"Type of the GL Account","enum":["ASSET","LIABILITY","EQUITY","INCOME","EXPENSE"]},"allowManualJournalEntries":{"type":"boolean","title":"allowManualJournalEntries","description":"Indicates whether manual Journal Entries are allowed or not (Only available for Detail Accounts)"}},"required":["glCode","usage","name","type"],"additionalProperties":false};const schema13 = {"type":"object","title":"Currency","description":"Represents a currency eg. USD, EUR.","properties":{"currencyCode":{"type":"string","title":"currencyCode","description":"Currency code for NON_FIAT currency."},"code":{"title":"code","description":"Fiat(ISO-4217) currency code or NON_FIAT for non fiat currencies.","enum":["AED","AFN","ALL","AMD","ANG","AOA","ARS","AUD","AWG","AZN","BAM","BBD","BDT","BGN","BHD","BIF","BMD","BND","BOB","BOV","BRL","BSD","BTC","BTN","BWP","BYR","BYN","BZD","CAD","CDF","CHE","CHF","CHW","CLF","CLP","CNY","COP","COU","CRC","CUC","CUP","CVE","CZK","DJF","DKK","DOP","DZD","EGP","ERN","ETB","EUR","FJD","FKP","GBP","GEL","GHS","GIP","GMD","GNF","GTQ","GYD","HKD","HNL","HRK","HTG","HUF","IDR","ILS","INR","IQD","IRR","ISK","JMD","JOD","JPY","KES","KGS","KHR","KMF","KPW","KRW","KWD","KYD","KZT","LAK","LBP","LKR","LRD","LSL","LTL","LVL","LYD","MAD","MDL","MGA","MKD","MMK","MNT","MOP","MRO","MRU","MUR","MVR","MWK","MXN","MXV","MYR","MZN","NAD","NGN","NIO","NOK","NPR","NZD","OMR","PAB","PEN","PGK","PHP","PKR","PLN","PYG","QAR","RON","RSD","RUB","RWF","SAR","SBD","SCR","SDG","SEK","SGD","SHP","SLL","SOS","SRD","STD","STN","SVC","SYP","SZL","THB","TJS","TMT","TND","TOP","TRY","TTD","TWD","TZS","UAH","UGX","USD","USN","UYI","UYU","UYW","UZS","VED","VEF","VES","VND","VUV","WST","XAG","XAU","XAF","XBA","XBB","XBC","XBD","XCD","XDR","XOF","XPD","XPF","XPT","XSU","XTS","XUA","XXX","YER","ZAR","ZMK","ZWL","ZMW","SSP","NON_FIAT"]}},"additionalProperties":false};function validate11(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){let vErrors = null;let errors = 0;if(errors === 0){if(data && typeof data == "object" && !Array.isArray(data)){let missing0;if(((((data.glCode === undefined) && (missing0 = "glCode")) || ((data.usage === undefined) && (missing0 = "usage"))) || ((data.name === undefined) && (missing0 = "name"))) || ((data.type === undefined) && (missing0 = "type"))){validate11.errors = [{instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];return false;}else {const _errs1 = errors;for(const key0 in data){if(!((((((((key0 === "glCode") || (key0 === "usage")) || (key0 === "name")) || (key0 === "description")) || (key0 === "currency")) || (key0 === "stripTrailingZeros")) || (key0 === "type")) || (key0 === "allowManualJournalEntries"))){validate11.errors = [{instancePath,schemaPath:"#/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key0},message:"must NOT have additional properties"}];return false;break;}}if(_errs1 === errors){if(data.glCode !== undefined){const _errs2 = errors;if(typeof data.glCode !== "string"){validate11.errors = [{instancePath:instancePath+"/glCode",schemaPath:"#/properties/glCode/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid0 = _errs2 === errors;}else {var valid0 = true;}if(valid0){if(data.usage !== undefined){let data1 = data.usage;const _errs4 = errors;if(!((data1 === "DETAIL") || (data1 === "HEADER"))){validate11.errors = [{instancePath:instancePath+"/usage",schemaPath:"#/properties/usage/enum",keyword:"enum",params:{allowedValues: schema12.properties.usage.enum},message:"must be equal to one of the allowed values"}];return false;}var valid0 = _errs4 === errors;}else {var valid0 = true;}if(valid0){if(data.name !== undefined){const _errs5 = errors;if(typeof data.name !== "string"){validate11.errors = [{instancePath:instancePath+"/name",schemaPath:"#/properties/name/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid0 = _errs5 === errors;}else {var valid0 = true;}if(valid0){if(data.description !== undefined){const _errs7 = errors;if(typeof data.description !== "string"){validate11.errors = [{instancePath:instancePath+"/description",schemaPath:"#/properties/description/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid0 = _errs7 === errors;}else {var valid0 = true;}if(valid0){if(data.currency !== undefined){let data4 = data.currency;const _errs9 = errors;const _errs10 = errors;if(errors === _errs10){if(data4 && typeof data4 == "object" && !Array.isArray(data4)){const _errs12 = errors;for(const key1 in data4){if(!((key1 === "currencyCode") || (key1 === "code"))){validate11.errors = [{instancePath:instancePath+"/currency",schemaPath:"#/$defs/Currency6d0a/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key1},message:"must NOT have additional properties"}];return false;break;}}if(_errs12 === errors){if(data4.currencyCode !== undefined){const _errs13 = errors;if(typeof data4.currencyCode !== "string"){validate11.errors = [{instancePath:instancePath+"/currency/currencyCode",schemaPath:"#/$defs/Currency6d0a/properties/currencyCode/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid2 = _errs13 === errors;}else {var valid2 = true;}if(valid2){if(data4.code !== undefined){let data6 = data4.code;const _errs15 = errors;if(!(((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((data6 === "AED") || (data6 === "AFN")) || (data6 === "ALL")) || (data6 === "AMD")) || (data6 === "ANG")) || (data6 === "AOA")) || (data6 === "ARS")) || (data6 === "AUD")) || (data6 === "AWG")) || (data6 === "AZN")) || (data6 === "BAM")) || (data6 === "BBD")) || (data6 === "BDT")) || (data6 === "BGN")) || (data6 === "BHD")) || (data6 === "BIF")) || (data6 === "BMD")) || (data6 === "BND")) || (data6 === "BOB")) || (data6 === "BOV")) || (data6 === "BRL")) || (data6 === "BSD")) || (data6 === "BTC")) || (data6 === "BTN")) || (data6 === "BWP")) || (data6 === "BYR")) || (data6 === "BYN")) || (data6 === "BZD")) || (data6 === "CAD")) || (data6 === "CDF")) || (data6 === "CHE")) || (data6 === "CHF")) || (data6 === "CHW")) || (data6 === "CLF")) || (data6 === "CLP")) || (data6 === "CNY")) || (data6 === "COP")) || (data6 === "COU")) || (data6 === "CRC")) || (data6 === "CUC")) || (data6 === "CUP")) || (data6 === "CVE")) || (data6 === "CZK")) || (data6 === "DJF")) || (data6 === "DKK")) || (data6 === "DOP")) || (data6 === "DZD")) || (data6 === "EGP")) || (data6 === "ERN")) || (data6 === "ETB")) || (data6 === "EUR")) || (data6 === "FJD")) || (data6 === "FKP")) || (data6 === "GBP")) || (data6 === "GEL")) || (data6 === "GHS")) || (data6 === "GIP")) || (data6 === "GMD")) || (data6 === "GNF")) || (data6 === "GTQ")) || (data6 === "GYD")) || (data6 === "HKD")) || (data6 === "HNL")) || (data6 === "HRK")) || (data6 === "HTG")) || (data6 === "HUF")) || (data6 === "IDR")) || (data6 === "ILS")) || (data6 === "INR")) || (data6 === "IQD")) || (data6 === "IRR")) || (data6 === "ISK")) || (data6 === "JMD")) || (data6 === "JOD")) || (data6 === "JPY")) || (data6 === "KES")) || (data6 === "KGS")) || (data6 === "KHR")) || (data6 === "KMF")) || (data6 === "KPW")) || (data6 === "KRW")) || (data6 === "KWD")) || (data6 === "KYD")) || (data6 === "KZT")) || (data6 === "LAK")) || (data6 === "LBP")) || (data6 === "LKR")) || (data6 === "LRD")) || (data6 === "LSL")) || (data6 === "LTL")) || (data6 === "LVL")) || (data6 === "LYD")) || (data6 === "MAD")) || (data6 === "MDL")) || (data6 === "MGA")) || (data6 === "MKD")) || (data6 === "MMK")) || (data6 === "MNT")) || (data6 === "MOP")) || (data6 === "MRO")) || (data6 === "MRU")) || (data6 === "MUR")) || (data6 === "MVR")) || (data6 === "MWK")) || (data6 === "MXN")) || (data6 === "MXV")) || (data6 === "MYR")) || (data6 === "MZN")) || (data6 === "NAD")) || (data6 === "NGN")) || (data6 === "NIO")) || (data6 === "NOK")) || (data6 === "NPR")) || (data6 === "NZD")) || (data6 === "OMR")) || (data6 === "PAB")) || (data6 === "PEN")) || (data6 === "PGK")) || (data6 === "PHP")) || (data6 === "PKR")) || (data6 === "PLN")) || (data6 === "PYG")) || (data6 === "QAR")) || (data6 === "RON")) || (data6 === "RSD")) || (data6 === "RUB")) || (data6 === "RWF")) || (data6 === "SAR")) || (data6 === "SBD")) || (data6 === "SCR")) || (data6 === "SDG")) || (data6 === "SEK")) || (data6 === "SGD")) || (data6 === "SHP")) || (data6 === "SLL")) || (data6 === "SOS")) || (data6 === "SRD")) || (data6 === "STD")) || (data6 === "STN")) || (data6 === "SVC")) || (data6 === "SYP")) || (data6 === "SZL")) || (data6 === "THB")) || (data6 === "TJS")) || (data6 === "TMT")) || (data6 === "TND")) || (data6 === "TOP")) || (data6 === "TRY")) || (data6 === "TTD")) || (data6 === "TWD")) || (data6 === "TZS")) || (data6 === "UAH")) || (data6 === "UGX")) || (data6 === "USD")) || (data6 === "USN")) || (data6 === "UYI")) || (data6 === "UYU")) || (data6 === "UYW")) || (data6 === "UZS")) || (data6 === "VED")) || (data6 === "VEF")) || (data6 === "VES")) || (data6 === "VND")) || (data6 === "VUV")) || (data6 === "WST")) || (data6 === "XAG")) || (data6 === "XAU")) || (data6 === "XAF")) || (data6 === "XBA")) || (data6 === "XBB")) || (data6 === "XBC")) || (data6 === "XBD")) || (data6 === "XCD")) || (data6 === "XDR")) || (data6 === "XOF")) || (data6 === "XPD")) || (data6 === "XPF")) || (data6 === "XPT")) || (data6 === "XSU")) || (data6 === "XTS")) || (data6 === "XUA")) || (data6 === "XXX")) || (data6 === "YER")) || (data6 === "ZAR")) || (data6 === "ZMK")) || (data6 === "ZWL")) || (data6 === "ZMW")) || (data6 === "SSP")) || (data6 === "NON_FIAT"))){validate11.errors = [{instancePath:instancePath+"/currency/code",schemaPath:"#/$defs/Currency6d0a/properties/code/enum",keyword:"enum",params:{allowedValues: schema13.properties.code.enum},message:"must be equal to one of the allowed values"}];return false;}var valid2 = _errs15 === errors;}else {var valid2 = true;}}}}else {validate11.errors = [{instancePath:instancePath+"/currency",schemaPath:"#/$defs/Currency6d0a/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}var valid0 = _errs9 === errors;}else {var valid0 = true;}if(valid0){if(data.stripTrailingZeros !== undefined){const _errs16 = errors;if(typeof data.stripTrailingZeros !== "boolean"){validate11.errors = [{instancePath:instancePath+"/stripTrailingZeros",schemaPath:"#/properties/stripTrailingZeros/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"}];return false;}var valid0 = _errs16 === errors;}else {var valid0 = true;}if(valid0){if(data.type !== undefined){let data8 = data.type;const _errs18 = errors;if(!(((((data8 === "ASSET") || (data8 === "LIABILITY")) || (data8 === "EQUITY")) || (data8 === "INCOME")) || (data8 === "EXPENSE"))){validate11.errors = [{instancePath:instancePath+"/type",schemaPath:"#/properties/type/enum",keyword:"enum",params:{allowedValues: schema12.properties.type.enum},message:"must be equal to one of the allowed values"}];return false;}var valid0 = _errs18 === errors;}else {var valid0 = true;}if(valid0){if(data.allowManualJournalEntries !== undefined){const _errs19 = errors;if(typeof data.allowManualJournalEntries !== "boolean"){validate11.errors = [{instancePath:instancePath+"/allowManualJournalEntries",schemaPath:"#/properties/allowManualJournalEntries/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"}];return false;}var valid0 = _errs19 === errors;}else {var valid0 = true;}}}}}}}}}}}else {validate11.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}validate11.errors = vErrors;return errors === 0;}function validate10(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){let vErrors = null;let errors = 0;if(errors === 0){if(Array.isArray(data)){var valid0 = true;const len0 = data.length;for(let i0=0; i0<len0; i0++){const _errs1 = errors;if(!(validate11(data[i0], {instancePath:instancePath+"/" + i0,parentData:data,parentDataProperty:i0,rootData}))){vErrors = vErrors === null ? validate11.errors : vErrors.concat(validate11.errors);errors = vErrors.length;}var valid0 = _errs1 === errors;if(!valid0){break;}}}else {validate10.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "array"},message:"must be array"}];return false;}}validate10.errors = vErrors;return errors === 0;}