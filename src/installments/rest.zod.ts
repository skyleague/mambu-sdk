/**
 * Generated by @skyleague/therefore
 * Do not manually touch this
 */
/* eslint-disable */

import { z } from 'zod'

export const Amount = z
    .object({
        due: z.number().describe('The due amount.').optional(),
        expected: z.number().describe('The expected amount, which is sum of paid and due amounts.').optional(),
        paid: z.number().describe('The paid amount.').optional(),
    })
    .describe('Represents a simple installment amount structure.')

export type Amount = z.infer<typeof Amount>

export const AmountWithReduced = z
    .object({
        due: z.number().describe('The due amount.').optional(),
        expected: z.number().describe('The expected amount, which is sum of paid and due amounts.').optional(),
        paid: z.number().describe('The paid amount.').optional(),
        reduced: z.number().describe('The reduced amount.').optional(),
    })
    .describe('Represents a simple installment amount structure.')

export type AmountWithReduced = z.infer<typeof AmountWithReduced>

export const FeeAmount = z
    .object({
        due: z.number().describe('The due amount.').optional(),
        expected: z.number().describe('The expected amount, which is sum of paid and due amounts.').optional(),
        expectedUnapplied: z
            .number()
            .describe(
                'The expected amount, which is the sum of unapplied fee and planned fee due amounts. This value is not always retrieved. It is retrieved when the loan schedule is requestedwith full details.',
            )
            .optional(),
        paid: z.number().describe('The paid amount.').optional(),
    })
    .describe('Represents a fee amount.')

export type FeeAmount = z.infer<typeof FeeAmount>

export const InstallmentAllocationElementAmount = z
    .object({
        amount: Amount.optional(),
    })
    .describe('Represents an installment allocation element amount structure.')

export type InstallmentAllocationElementAmount = z.infer<typeof InstallmentAllocationElementAmount>

export const InstallmentAllocationElementTaxableAmount = z
    .object({
        amount: Amount.optional(),
        tax: Amount.optional(),
    })
    .describe('Represents an installment allocation element taxable amount structure.')

export type InstallmentAllocationElementTaxableAmount = z.infer<typeof InstallmentAllocationElementTaxableAmount>

export const InstallmentFeeDetails = z
    .object({
        amount: AmountWithReduced.optional(),
        encodedKey: z.string().describe('The encoded key of the predefined fee, auto generated, unique').optional(),
        id: z.string().describe('The id of the fee, provided by the client').optional(),
        name: z.string().describe('The name of the fee').optional(),
        tax: AmountWithReduced.optional(),
    })
    .describe('Represents fee details for an installment.')

export type InstallmentFeeDetails = z.infer<typeof InstallmentFeeDetails>

export const InstallmentFee = z
    .object({
        amount: FeeAmount.optional(),
        tax: Amount.optional(),
    })
    .describe('Represents an installment fee structure.')

export type InstallmentFee = z.infer<typeof InstallmentFee>

export const CustomSettingDetails = z
    .object({
        loanTransactionKey: z.string().describe('The loan transaction associated with the custom setting.').optional(),
        source: z.string().describe('The source of the custom setting').optional(),
        type: z.string().describe('The type of custom setting.').optional(),
    })
    .describe('Represents the custom settings for a loan schedule.')

export type CustomSettingDetails = z.infer<typeof CustomSettingDetails>

export const CarryForwardInterestSplit = z
    .object({
        amount: z.number().describe('The carry forward interest amount.').optional(),
        tax: z.number().describe('The taxes amount on the carry forward interest.').optional(),
    })
    .describe('Represents carry forward interest split')

export type CarryForwardInterestSplit = z.infer<typeof CarryForwardInterestSplit>

export const RestError = z.object({
    errorCode: z.number().int().optional(),
    errorReason: z.string().optional(),
    errorSource: z.string().optional(),
})

export type RestError = z.infer<typeof RestError>

export const Installment = z
    .object({
        carryForwardInterestSplit: CarryForwardInterestSplit.optional(),
        customSettingDetails: CustomSettingDetails.array()
            .describe('Custom settings associated with the installment.')
            .optional(),
        dueDate: z.string().datetime({ offset: true }).describe('The installment due date.').optional(),
        encodedKey: z.string().describe('The encoded key of the installment, which is auto generated, and unique.').optional(),
        expectedClosingBalance: z
            .number()
            .describe(
                'The expected closing balance is the remaining amount per installment only applicable for interest only equal installment products.',
            )
            .optional(),
        fee: InstallmentFee.optional(),
        feeDetails: InstallmentFeeDetails.array()
            .describe('The breakdown of the fee amounts that have been applied to the loan account.')
            .optional(),
        fundersInterestDue: z.number().describe('The amount of interest allocated to funders for P2P accounts only.').optional(),
        interest: InstallmentAllocationElementTaxableAmount.optional(),
        interestAccrued: z
            .number()
            .describe(
                'The interest accrued calculated on previous repayment closing balance only applicable interest only equal installment products.',
            )
            .optional(),
        isPaymentHoliday: z
            .boolean()
            .describe('`TRUE` if a payment holiday is offered for the installment, `FALSE` otherwise.')
            .optional(),
        lastPaidDate: z.string().datetime({ offset: true }).describe('The installment last paid date.').optional(),
        lastPenaltyAppliedDate: z
            .string()
            .datetime({ offset: true })
            .describe('The most recent date on which a penalty was applied to the account.')
            .optional(),
        nonScheduledPrincipalBalanceOverpayment: z
            .number()
            .describe('The non-scheduled principal balance overpayment for the loan account')
            .optional(),
        notes: z.string().describe('Any comment or notes added to the installment.').optional(),
        number: z
            .string()
            .describe(
                'The order number of an installment among all the installments generated for a loan. Loan installments are put in ascending order by due date. The order number only applies to the content of a particular JSON response therefore it is not unique.',
            )
            .optional(),
        organizationCommissionDue: z
            .number()
            .describe('The amount of interest allocated to organization as commission for P2P accounts only.')
            .optional(),
        parentAccountKey: z.string().describe('The parent account key of the installment.').optional(),
        penalty: InstallmentAllocationElementTaxableAmount.optional(),
        principal: InstallmentAllocationElementAmount.optional(),
        repaidDate: z.string().datetime({ offset: true }).describe('The installment repaid date.').optional(),
        state: z.enum(['PENDING', 'LATE', 'PAID', 'PARTIALLY_PAID', 'GRACE']).describe('The installment state.').optional(),
    })
    .describe('Represents a single installment details structure.')

export type Installment = z.infer<typeof Installment>

export const ErrorResponse = z.object({
    errors: RestError.array().optional(),
})

export type ErrorResponse = z.infer<typeof ErrorResponse>

export const GetAllResponse = Installment.array()

export type GetAllResponse = z.infer<typeof GetAllResponse>
