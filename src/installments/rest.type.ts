/**
 * Generated by @skyleague/therefore@v1.0.0-local
 * Do not manually touch this
 */
/* eslint-disable */
import type { ValidateFunction } from 'ajv'
import { ValidationError } from 'ajv'

/**
 * Represents a simple installment amount structure.
 */
export interface Amount {
    /**
     * The due amount.
     */
    due?: number
    /**
     * The expected amount, which is sum of paid and due amounts.
     */
    expected?: number
    /**
     * The paid amount.
     */
    paid?: number
}

/**
 * Represents a simple installment amount structure.
 */
export interface AmountWithReduced {
    /**
     * The due amount.
     */
    due?: number
    /**
     * The expected amount, which is sum of paid and due amounts.
     */
    expected?: number
    /**
     * The paid amount.
     */
    paid?: number
    /**
     * The reduced amount.
     */
    reduced?: number
}

export interface ErrorResponse {
    errors?: RestError[]
}

export const ErrorResponse = {
    validate: (await import('./schemas/error-response.schema.js')).validate as ValidateFunction<ErrorResponse>,
    get schema() {
        return ErrorResponse.validate.schema
    },
    get errors() {
        return ErrorResponse.validate.errors ?? undefined
    },
    is: (o: unknown): o is ErrorResponse => ErrorResponse.validate(o) === true,
    assert: (o: unknown) => {
        if (!ErrorResponse.validate(o)) {
            throw new ValidationError(ErrorResponse.errors ?? [])
        }
    },
} as const

/**
 * Represents a fee amount.
 */
export interface FeeAmount {
    /**
     * The due amount.
     */
    due?: number
    /**
     * The expected amount, which is sum of paid and due amounts.
     */
    expected?: number
    /**
     * The expected amount, which is the sum of unapplied fee and planned fee due amounts.
     */
    expectedUnapplied?: number
    /**
     * The paid amount.
     */
    paid?: number
}

export type GetAllResponse = Installment[]

export const GetAllResponse = {
    validate: (await import('./schemas/get-all-response.schema.js')).validate as ValidateFunction<GetAllResponse>,
    get schema() {
        return GetAllResponse.validate.schema
    },
    get errors() {
        return GetAllResponse.validate.errors ?? undefined
    },
    is: (o: unknown): o is GetAllResponse => GetAllResponse.validate(o) === true,
} as const

/**
 * Represents a single installment details structure.
 */
export interface Installment {
    /**
     * The installment due date.
     */
    dueDate?: string
    /**
     * The encoded key of the installment, which is auto generated, and unique.
     */
    encodedKey?: string
    /**
     * The expected closing balance is the remaining amount per installment only applicable for interest only equal installment products.
     */
    expectedClosingBalance?: number
    fee?: InstallmentFee
    /**
     * The breakdown of the fee amounts that have been applied to the loan account.
     */
    feeDetails?: InstallmentFeeDetails[]
    interest?: InstallmentAllocationElementTaxableAmount
    /**
     * The interest accrued calculated on previous repayment closing balance only applicable interest only equal installment products.
     */
    interestAccrued?: number
    /**
     * `TRUE` if a payment holiday is offered for the installment, `FALSE` otherwise.
     */
    isPaymentHoliday?: boolean
    /**
     * The installment last paid date.
     */
    lastPaidDate?: string
    /**
     * The order number of an installment among all the installments generated for a loan. Loan installments are put in ascending order by due date. The order number only applies to the content of a particular JSON response therefore it is not unique.
     */
    number?: string
    /**
     * The parent account key of the installment.
     */
    parentAccountKey?: string
    penalty?: InstallmentAllocationElementTaxableAmount
    principal?: InstallmentAllocationElementAmount
    /**
     * The installment repaid date.
     */
    repaidDate?: string
    /**
     * The installment state.
     */
    state?: 'PENDING' | 'LATE' | 'PAID' | 'PARTIALLY_PAID' | 'GRACE'
}

/**
 * Represents an installment allocation element amount structure.
 */
export interface InstallmentAllocationElementAmount {
    amount?: Amount
}

/**
 * Represents an installment allocation element taxable amount structure.
 */
export interface InstallmentAllocationElementTaxableAmount {
    amount?: Amount
    tax?: Amount
}

/**
 * Represents an installment fee structure.
 */
export interface InstallmentFee {
    amount?: FeeAmount
    tax?: Amount
}

/**
 * Represents fee details for an installment.
 */
export interface InstallmentFeeDetails {
    amount?: AmountWithReduced
    /**
     * The encoded key of the predefined fee, auto generated, unique
     */
    encodedKey?: string
    /**
     * The id of the fee, provided by the client
     */
    id?: string
    /**
     * The name of the fee
     */
    name?: string
    tax?: AmountWithReduced
}

export interface RestError {
    errorCode?: number
    errorReason?: string
    errorSource?: string
}
