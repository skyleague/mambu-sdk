/**
 * Generated by Ajv https://ajv.js.org/guide/managing-schemas.html#standalone-validation-code 
 * eslint-disable
 */
import {createRequire} from 'module';const require = createRequire(import.meta.url);"use strict";export const validate = validate10;export default validate10;const schema11 = {"$schema":"http://json-schema.org/draft-07/schema#","title":"AccountingReportGenerationInput","type":"object","description":"Represents the input for the accounting report generation.","properties":{"balanceTypes":{"type":"array","title":"balanceTypes","description":"The balance types to include in the generated report.","items":{"enum":["OPENING_BALANCE","NET_CHANGE","CLOSING_BALANCE"]}},"branchId":{"type":"string","title":"branchId","description":"The branch ID  or encoded key to filter general ledger journal entries by."},"currencyCode":{"type":"string","title":"currencyCode","description":"The ISO currency code to filter general ledger accounts by."},"endDate":{"type":"string","title":"endDate","description":"The inclusive end date in the organization time format and timezone that the general ledger journal entries' entry date is filtered to.","format":"date"},"glTypes":{"type":"array","title":"glTypes","description":"The account types to filter general ledger accounts by. For header general ledger accounts the report will reflect the sum of the detail general ledger accounts that match the given filters used.","items":{"enum":["ASSET","LIABILITY","EQUITY","INCOME","EXPENSE"]}},"startDate":{"type":"string","title":"startDate","description":"The inclusive start date in the organization time format and timezone that the general ledger journal entries' entry date is filtered from.","format":"date"}},"required":["endDate","startDate"],"additionalProperties":true};const func0 = require("ajv/dist/runtime/equal").default;function validate10(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){let vErrors = null;let errors = 0;if(errors === 0){if(data && typeof data == "object" && !Array.isArray(data)){let missing0;if(((data.endDate === undefined) && (missing0 = "endDate")) || ((data.startDate === undefined) && (missing0 = "startDate"))){validate10.errors = [{instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];return false;}else {if(data.balanceTypes !== undefined){let data0 = data.balanceTypes;const _errs2 = errors;if(errors === _errs2){if(Array.isArray(data0)){var valid1 = true;const len0 = data0.length;for(let i0=0; i0<len0; i0++){let data1 = data0[i0];const _errs4 = errors;if(!(((data1 === "OPENING_BALANCE") || (data1 === "NET_CHANGE")) || (data1 === "CLOSING_BALANCE"))){validate10.errors = [{instancePath:instancePath+"/balanceTypes/" + i0,schemaPath:"#/properties/balanceTypes/items/enum",keyword:"enum",params:{allowedValues: schema11.properties.balanceTypes.items.enum},message:"must be equal to one of the allowed values"}];return false;}var valid1 = _errs4 === errors;if(!valid1){break;}}}else {validate10.errors = [{instancePath:instancePath+"/balanceTypes",schemaPath:"#/properties/balanceTypes/type",keyword:"type",params:{type: "array"},message:"must be array"}];return false;}}var valid0 = _errs2 === errors;}else {var valid0 = true;}if(valid0){if(data.branchId !== undefined){const _errs5 = errors;if(typeof data.branchId !== "string"){validate10.errors = [{instancePath:instancePath+"/branchId",schemaPath:"#/properties/branchId/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid0 = _errs5 === errors;}else {var valid0 = true;}if(valid0){if(data.currencyCode !== undefined){const _errs7 = errors;if(typeof data.currencyCode !== "string"){validate10.errors = [{instancePath:instancePath+"/currencyCode",schemaPath:"#/properties/currencyCode/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid0 = _errs7 === errors;}else {var valid0 = true;}if(valid0){if(data.endDate !== undefined){const _errs9 = errors;if(errors === _errs9){if(errors === _errs9){if(!(typeof data.endDate === "string")){validate10.errors = [{instancePath:instancePath+"/endDate",schemaPath:"#/properties/endDate/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}}var valid0 = _errs9 === errors;}else {var valid0 = true;}if(valid0){if(data.glTypes !== undefined){let data5 = data.glTypes;const _errs11 = errors;if(errors === _errs11){if(Array.isArray(data5)){var valid2 = true;const len1 = data5.length;for(let i1=0; i1<len1; i1++){const _errs13 = errors;let valid3;valid3 = false;for(const v0 of schema11.properties.glTypes.items.enum){if(func0(data5[i1], v0)){valid3 = true;break;}}if(!valid3){validate10.errors = [{instancePath:instancePath+"/glTypes/" + i1,schemaPath:"#/properties/glTypes/items/enum",keyword:"enum",params:{allowedValues: schema11.properties.glTypes.items.enum},message:"must be equal to one of the allowed values"}];return false;}var valid2 = _errs13 === errors;if(!valid2){break;}}}else {validate10.errors = [{instancePath:instancePath+"/glTypes",schemaPath:"#/properties/glTypes/type",keyword:"type",params:{type: "array"},message:"must be array"}];return false;}}var valid0 = _errs11 === errors;}else {var valid0 = true;}if(valid0){if(data.startDate !== undefined){const _errs14 = errors;if(errors === _errs14){if(errors === _errs14){if(!(typeof data.startDate === "string")){validate10.errors = [{instancePath:instancePath+"/startDate",schemaPath:"#/properties/startDate/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}}var valid0 = _errs14 === errors;}else {var valid0 = true;}}}}}}}}else {validate10.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}validate10.errors = vErrors;return errors === 0;};validate.schema=schema11;