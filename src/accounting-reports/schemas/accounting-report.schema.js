/**
 * Generated by Ajv https://ajv.js.org/guide/managing-schemas.html#standalone-validation-code 
 * eslint-disable
 */
const validate=validate10;var stdin_default=validate10;const schema11={"$schema":"http://json-schema.org/draft-07/schema#","title":"AccountingReport","type":"object","description":"Represents information about the accounting report.","properties":{"reportKey":{"type":"string","title":"reportKey","description":"The encoded key of the generated accounting report."},"items":{"type":"array","title":"items","description":"The list of the accounting report items.","items":{"$ref":"#/$defs/AccountingReportItemaf30"}},"status":{"title":"status","description":"The accounting report generation status.","enum":["QUEUED","IN_PROGRESS","COMPLETE","NOT_FOUND","CANCEL","TO_BE_CANCELED","TIMED_OUT","ERROR","TRANSIENT_ERROR","OVERRIDDEN","RECOVERABLE_ERROR"]}},"additionalProperties":true,"$defs":{"AccountingReportItemaf30":{"type":"object","title":"AccountingReportItemaf30","description":"Represents the accounting report information about general ledger accounts and their amounts in both the organization's currency and foreign currencies.","properties":{"foreignAmounts":{"title":"foreignAmounts","$ref":"#/$defs/AccountingReportAmountsaf30"},"glAccount":{"title":"glAccount","$ref":"#/$defs/GLAccountaf30"},"amounts":{"title":"amounts","$ref":"#/$defs/AccountingReportAmountsaf30"}},"additionalProperties":true},"AccountingReportAmountsaf30":{"type":"object","title":"AccountingReportAmountsaf30","description":"Represents information about the accounting report amounts.","properties":{"netChange":{"type":"number","title":"netChange","description":"The net change amount of the general ledger account."},"closingBalance":{"type":"number","title":"closingBalance","description":"The closing balance amount of the general ledger account."},"openingBalance":{"type":"number","title":"openingBalance","description":"The opening balance amount of the general ledger account."},"debits":{"type":"number","title":"debits","description":"The debit amount of the general ledger account."},"credits":{"type":"number","title":"credits","description":"The credit amount of the general ledger account."}},"additionalProperties":true},"GLAccountaf30":{"type":"object","title":"GLAccountaf30","description":"Represents a general ledger account.","properties":{"migrationEventKey":{"type":"string","title":"migrationEventKey","description":"The data migration event key if the general ledger account was created as a part of a data migration event."},"lastModifiedDate":{"type":"string","title":"lastModifiedDate","description":"The last modification date and time, which is stored as UTC.","format":"date-time"},"glCode":{"type":"string","title":"glCode","description":"The general ledger code used to identify different account types. Also used for grouping and categorizing accounts. For example: an account code of '3201' is considered a subtype of '3200'."},"usage":{"title":"usage","description":"The usage type of the general ledger account. `DETAIL` accounts are used to stores transaction balances. `HEADER` accounts are used to organise and group detail accounts for reporting purposes.","enum":["DETAIL","HEADER"]},"description":{"type":"string","title":"description","description":"A description of the general ledger account."},"creationDate":{"type":"string","title":"creationDate","description":"The creation date for this account, which is stored as UTC.","format":"date-time"},"type":{"title":"type","description":"The general ledger account type.","enum":["ASSET","LIABILITY","EQUITY","INCOME","EXPENSE"]},"allowManualJournalEntries":{"type":"boolean","title":"allowManualJournalEntries","description":"`TRUE` if manual journal entries are allowed, `FALSE` otherwise."},"balance":{"type":"number","title":"balance","description":"The balance of the general ledger account, which is only populated for the GET /glaccounts endpoint."},"name":{"type":"string","title":"name","description":"The name of the general ledger account."},"encodedKey":{"type":"string","title":"encodedKey","description":"The encoded key of the entity, generated, globally unique"},"currency":{"title":"currency","$ref":"#/$defs/Currencyaf30"},"stripTrailingZeros":{"type":"boolean","title":"stripTrailingZeros","description":"`TRUE` if trailing zeros are stripped, `FALSE` otherwise."},"activated":{"type":"boolean","title":"activated","description":"`TRUE` if the account is activated and may be used, `FALSE` otherwise."}},"additionalProperties":true},"Currencyaf30":{"type":"object","title":"Currencyaf30","description":"Represents a currency eg. USD, EUR.","properties":{"currencyCode":{"type":"string","title":"currencyCode","description":"Currency code for NON_FIAT currency."},"code":{"title":"code","description":"Fiat(ISO-4217) currency code or NON_FIAT for non fiat currencies.","enum":["AED","AFN","ALL","AMD","ANG","AOA","ARS","AUD","AWG","AZN","BAM","BBD","BDT","BGN","BHD","BIF","BMD","BND","BOB","BOV","BRL","BSD","BTN","BWP","BYR","BYN","BZD","CAD","CDF","CHE","CHF","CHW","CLF","CLP","CNY","COP","COU","CRC","CUC","CUP","CVE","CZK","DJF","DKK","DOP","DZD","EGP","ERN","ETB","EUR","FJD","FKP","GBP","GEL","GHS","GIP","GMD","GNF","GTQ","GYD","HKD","HNL","HRK","HTG","HUF","IDR","ILS","INR","IQD","IRR","ISK","JMD","JOD","JPY","KES","KGS","KHR","KMF","KPW","KRW","KWD","KYD","KZT","LAK","LBP","LKR","LRD","LSL","LTL","LVL","LYD","MAD","MDL","MGA","MKD","MMK","MNT","MOP","MRO","MRU","MUR","MVR","MWK","MXN","MXV","MYR","MZN","NAD","NGN","NIO","NOK","NPR","NZD","OMR","PAB","PEN","PGK","PHP","PKR","PLN","PYG","QAR","RON","RSD","RUB","RWF","SAR","SBD","SCR","SDG","SEK","SGD","SHP","SLL","SOS","SRD","STD","STN","SVC","SYP","SZL","THB","TJS","TMT","TND","TOP","TRY","TTD","TWD","TZS","UAH","UGX","USD","USN","UYI","UYU","UYW","UZS","VED","VEF","VES","VND","VUV","WST","XAG","XAU","XAF","XBA","XBB","XBC","XBD","XCD","XDR","XOF","XPD","XPF","XPT","XSU","XTS","XUA","XXX","YER","ZAR","ZMK","ZWL","ZMW","SSP","NON_FIAT"]}},"additionalProperties":true}}};const schema12={"type":"object","title":"AccountingReportItemaf30","description":"Represents the accounting report information about general ledger accounts and their amounts in both the organization's currency and foreign currencies.","properties":{"foreignAmounts":{"title":"foreignAmounts","$ref":"#/$defs/AccountingReportAmountsaf30"},"glAccount":{"title":"glAccount","$ref":"#/$defs/GLAccountaf30"},"amounts":{"title":"amounts","$ref":"#/$defs/AccountingReportAmountsaf30"}},"additionalProperties":true};const schema13={"type":"object","title":"AccountingReportAmountsaf30","description":"Represents information about the accounting report amounts.","properties":{"netChange":{"type":"number","title":"netChange","description":"The net change amount of the general ledger account."},"closingBalance":{"type":"number","title":"closingBalance","description":"The closing balance amount of the general ledger account."},"openingBalance":{"type":"number","title":"openingBalance","description":"The opening balance amount of the general ledger account."},"debits":{"type":"number","title":"debits","description":"The debit amount of the general ledger account."},"credits":{"type":"number","title":"credits","description":"The credit amount of the general ledger account."}},"additionalProperties":true};const schema14={"type":"object","title":"GLAccountaf30","description":"Represents a general ledger account.","properties":{"migrationEventKey":{"type":"string","title":"migrationEventKey","description":"The data migration event key if the general ledger account was created as a part of a data migration event."},"lastModifiedDate":{"type":"string","title":"lastModifiedDate","description":"The last modification date and time, which is stored as UTC.","format":"date-time"},"glCode":{"type":"string","title":"glCode","description":"The general ledger code used to identify different account types. Also used for grouping and categorizing accounts. For example: an account code of '3201' is considered a subtype of '3200'."},"usage":{"title":"usage","description":"The usage type of the general ledger account. `DETAIL` accounts are used to stores transaction balances. `HEADER` accounts are used to organise and group detail accounts for reporting purposes.","enum":["DETAIL","HEADER"]},"description":{"type":"string","title":"description","description":"A description of the general ledger account."},"creationDate":{"type":"string","title":"creationDate","description":"The creation date for this account, which is stored as UTC.","format":"date-time"},"type":{"title":"type","description":"The general ledger account type.","enum":["ASSET","LIABILITY","EQUITY","INCOME","EXPENSE"]},"allowManualJournalEntries":{"type":"boolean","title":"allowManualJournalEntries","description":"`TRUE` if manual journal entries are allowed, `FALSE` otherwise."},"balance":{"type":"number","title":"balance","description":"The balance of the general ledger account, which is only populated for the GET /glaccounts endpoint."},"name":{"type":"string","title":"name","description":"The name of the general ledger account."},"encodedKey":{"type":"string","title":"encodedKey","description":"The encoded key of the entity, generated, globally unique"},"currency":{"title":"currency","$ref":"#/$defs/Currencyaf30"},"stripTrailingZeros":{"type":"boolean","title":"stripTrailingZeros","description":"`TRUE` if trailing zeros are stripped, `FALSE` otherwise."},"activated":{"type":"boolean","title":"activated","description":"`TRUE` if the account is activated and may be used, `FALSE` otherwise."}},"additionalProperties":true};const schema15={"type":"object","title":"Currencyaf30","description":"Represents a currency eg. USD, EUR.","properties":{"currencyCode":{"type":"string","title":"currencyCode","description":"Currency code for NON_FIAT currency."},"code":{"title":"code","description":"Fiat(ISO-4217) currency code or NON_FIAT for non fiat currencies.","enum":["AED","AFN","ALL","AMD","ANG","AOA","ARS","AUD","AWG","AZN","BAM","BBD","BDT","BGN","BHD","BIF","BMD","BND","BOB","BOV","BRL","BSD","BTN","BWP","BYR","BYN","BZD","CAD","CDF","CHE","CHF","CHW","CLF","CLP","CNY","COP","COU","CRC","CUC","CUP","CVE","CZK","DJF","DKK","DOP","DZD","EGP","ERN","ETB","EUR","FJD","FKP","GBP","GEL","GHS","GIP","GMD","GNF","GTQ","GYD","HKD","HNL","HRK","HTG","HUF","IDR","ILS","INR","IQD","IRR","ISK","JMD","JOD","JPY","KES","KGS","KHR","KMF","KPW","KRW","KWD","KYD","KZT","LAK","LBP","LKR","LRD","LSL","LTL","LVL","LYD","MAD","MDL","MGA","MKD","MMK","MNT","MOP","MRO","MRU","MUR","MVR","MWK","MXN","MXV","MYR","MZN","NAD","NGN","NIO","NOK","NPR","NZD","OMR","PAB","PEN","PGK","PHP","PKR","PLN","PYG","QAR","RON","RSD","RUB","RWF","SAR","SBD","SCR","SDG","SEK","SGD","SHP","SLL","SOS","SRD","STD","STN","SVC","SYP","SZL","THB","TJS","TMT","TND","TOP","TRY","TTD","TWD","TZS","UAH","UGX","USD","USN","UYI","UYU","UYW","UZS","VED","VEF","VES","VND","VUV","WST","XAG","XAU","XAF","XBA","XBB","XBC","XBD","XCD","XDR","XOF","XPD","XPF","XPT","XSU","XTS","XUA","XXX","YER","ZAR","ZMK","ZWL","ZMW","SSP","NON_FIAT"]}},"additionalProperties":true};const func0=require("ajv/dist/runtime/equal").default;function validate12(data,{instancePath="",parentData,parentDataProperty,rootData=data}={}){let vErrors=null;let errors=0;if(errors===0){if(data&&typeof data=="object"&&!Array.isArray(data)){if(data.migrationEventKey!==void 0){const _errs2=errors;if(typeof data.migrationEventKey!=="string"){validate12.errors=[{instancePath:instancePath+"/migrationEventKey",schemaPath:"#/properties/migrationEventKey/type",keyword:"type",params:{type:"string"},message:"must be string"}];return false}var valid0=_errs2===errors}else{var valid0=true}if(valid0){if(data.lastModifiedDate!==void 0){const _errs4=errors;if(errors===_errs4){if(errors===_errs4){if(!(typeof data.lastModifiedDate==="string")){validate12.errors=[{instancePath:instancePath+"/lastModifiedDate",schemaPath:"#/properties/lastModifiedDate/type",keyword:"type",params:{type:"string"},message:"must be string"}];return false}}}var valid0=_errs4===errors}else{var valid0=true}if(valid0){if(data.glCode!==void 0){const _errs6=errors;if(typeof data.glCode!=="string"){validate12.errors=[{instancePath:instancePath+"/glCode",schemaPath:"#/properties/glCode/type",keyword:"type",params:{type:"string"},message:"must be string"}];return false}var valid0=_errs6===errors}else{var valid0=true}if(valid0){if(data.usage!==void 0){let data3=data.usage;const _errs8=errors;if(!(data3==="DETAIL"||data3==="HEADER")){validate12.errors=[{instancePath:instancePath+"/usage",schemaPath:"#/properties/usage/enum",keyword:"enum",params:{allowedValues:schema14.properties.usage.enum},message:"must be equal to one of the allowed values"}];return false}var valid0=_errs8===errors}else{var valid0=true}if(valid0){if(data.description!==void 0){const _errs9=errors;if(typeof data.description!=="string"){validate12.errors=[{instancePath:instancePath+"/description",schemaPath:"#/properties/description/type",keyword:"type",params:{type:"string"},message:"must be string"}];return false}var valid0=_errs9===errors}else{var valid0=true}if(valid0){if(data.creationDate!==void 0){const _errs11=errors;if(errors===_errs11){if(errors===_errs11){if(!(typeof data.creationDate==="string")){validate12.errors=[{instancePath:instancePath+"/creationDate",schemaPath:"#/properties/creationDate/type",keyword:"type",params:{type:"string"},message:"must be string"}];return false}}}var valid0=_errs11===errors}else{var valid0=true}if(valid0){if(data.type!==void 0){const _errs13=errors;let valid1;valid1=false;for(const v0 of schema14.properties.type.enum){if(func0(data.type,v0)){valid1=true;break}}if(!valid1){validate12.errors=[{instancePath:instancePath+"/type",schemaPath:"#/properties/type/enum",keyword:"enum",params:{allowedValues:schema14.properties.type.enum},message:"must be equal to one of the allowed values"}];return false}var valid0=_errs13===errors}else{var valid0=true}if(valid0){if(data.allowManualJournalEntries!==void 0){const _errs14=errors;if(typeof data.allowManualJournalEntries!=="boolean"){validate12.errors=[{instancePath:instancePath+"/allowManualJournalEntries",schemaPath:"#/properties/allowManualJournalEntries/type",keyword:"type",params:{type:"boolean"},message:"must be boolean"}];return false}var valid0=_errs14===errors}else{var valid0=true}if(valid0){if(data.balance!==void 0){let data8=data.balance;const _errs16=errors;if(!(typeof data8=="number"&&isFinite(data8))){validate12.errors=[{instancePath:instancePath+"/balance",schemaPath:"#/properties/balance/type",keyword:"type",params:{type:"number"},message:"must be number"}];return false}var valid0=_errs16===errors}else{var valid0=true}if(valid0){if(data.name!==void 0){const _errs18=errors;if(typeof data.name!=="string"){validate12.errors=[{instancePath:instancePath+"/name",schemaPath:"#/properties/name/type",keyword:"type",params:{type:"string"},message:"must be string"}];return false}var valid0=_errs18===errors}else{var valid0=true}if(valid0){if(data.encodedKey!==void 0){const _errs20=errors;if(typeof data.encodedKey!=="string"){validate12.errors=[{instancePath:instancePath+"/encodedKey",schemaPath:"#/properties/encodedKey/type",keyword:"type",params:{type:"string"},message:"must be string"}];return false}var valid0=_errs20===errors}else{var valid0=true}if(valid0){if(data.currency!==void 0){let data11=data.currency;const _errs22=errors;const _errs23=errors;if(errors===_errs23){if(data11&&typeof data11=="object"&&!Array.isArray(data11)){if(data11.currencyCode!==void 0){const _errs26=errors;if(typeof data11.currencyCode!=="string"){validate12.errors=[{instancePath:instancePath+"/currency/currencyCode",schemaPath:"#/$defs/Currencyaf30/properties/currencyCode/type",keyword:"type",params:{type:"string"},message:"must be string"}];return false}var valid3=_errs26===errors}else{var valid3=true}if(valid3){if(data11.code!==void 0){const _errs28=errors;let valid4;valid4=false;for(const v1 of schema15.properties.code.enum){if(func0(data11.code,v1)){valid4=true;break}}if(!valid4){validate12.errors=[{instancePath:instancePath+"/currency/code",schemaPath:"#/$defs/Currencyaf30/properties/code/enum",keyword:"enum",params:{allowedValues:schema15.properties.code.enum},message:"must be equal to one of the allowed values"}];return false}var valid3=_errs28===errors}else{var valid3=true}}}else{validate12.errors=[{instancePath:instancePath+"/currency",schemaPath:"#/$defs/Currencyaf30/type",keyword:"type",params:{type:"object"},message:"must be object"}];return false}}var valid0=_errs22===errors}else{var valid0=true}if(valid0){if(data.stripTrailingZeros!==void 0){const _errs29=errors;if(typeof data.stripTrailingZeros!=="boolean"){validate12.errors=[{instancePath:instancePath+"/stripTrailingZeros",schemaPath:"#/properties/stripTrailingZeros/type",keyword:"type",params:{type:"boolean"},message:"must be boolean"}];return false}var valid0=_errs29===errors}else{var valid0=true}if(valid0){if(data.activated!==void 0){const _errs31=errors;if(typeof data.activated!=="boolean"){validate12.errors=[{instancePath:instancePath+"/activated",schemaPath:"#/properties/activated/type",keyword:"type",params:{type:"boolean"},message:"must be boolean"}];return false}var valid0=_errs31===errors}else{var valid0=true}}}}}}}}}}}}}}}else{validate12.errors=[{instancePath,schemaPath:"#/type",keyword:"type",params:{type:"object"},message:"must be object"}];return false}}validate12.errors=vErrors;return errors===0}function validate11(data,{instancePath="",parentData,parentDataProperty,rootData=data}={}){let vErrors=null;let errors=0;if(errors===0){if(data&&typeof data=="object"&&!Array.isArray(data)){if(data.foreignAmounts!==void 0){let data0=data.foreignAmounts;const _errs2=errors;const _errs3=errors;if(errors===_errs3){if(data0&&typeof data0=="object"&&!Array.isArray(data0)){if(data0.netChange!==void 0){let data1=data0.netChange;const _errs6=errors;if(!(typeof data1=="number"&&isFinite(data1))){validate11.errors=[{instancePath:instancePath+"/foreignAmounts/netChange",schemaPath:"#/$defs/AccountingReportAmountsaf30/properties/netChange/type",keyword:"type",params:{type:"number"},message:"must be number"}];return false}var valid2=_errs6===errors}else{var valid2=true}if(valid2){if(data0.closingBalance!==void 0){let data2=data0.closingBalance;const _errs8=errors;if(!(typeof data2=="number"&&isFinite(data2))){validate11.errors=[{instancePath:instancePath+"/foreignAmounts/closingBalance",schemaPath:"#/$defs/AccountingReportAmountsaf30/properties/closingBalance/type",keyword:"type",params:{type:"number"},message:"must be number"}];return false}var valid2=_errs8===errors}else{var valid2=true}if(valid2){if(data0.openingBalance!==void 0){let data3=data0.openingBalance;const _errs10=errors;if(!(typeof data3=="number"&&isFinite(data3))){validate11.errors=[{instancePath:instancePath+"/foreignAmounts/openingBalance",schemaPath:"#/$defs/AccountingReportAmountsaf30/properties/openingBalance/type",keyword:"type",params:{type:"number"},message:"must be number"}];return false}var valid2=_errs10===errors}else{var valid2=true}if(valid2){if(data0.debits!==void 0){let data4=data0.debits;const _errs12=errors;if(!(typeof data4=="number"&&isFinite(data4))){validate11.errors=[{instancePath:instancePath+"/foreignAmounts/debits",schemaPath:"#/$defs/AccountingReportAmountsaf30/properties/debits/type",keyword:"type",params:{type:"number"},message:"must be number"}];return false}var valid2=_errs12===errors}else{var valid2=true}if(valid2){if(data0.credits!==void 0){let data5=data0.credits;const _errs14=errors;if(!(typeof data5=="number"&&isFinite(data5))){validate11.errors=[{instancePath:instancePath+"/foreignAmounts/credits",schemaPath:"#/$defs/AccountingReportAmountsaf30/properties/credits/type",keyword:"type",params:{type:"number"},message:"must be number"}];return false}var valid2=_errs14===errors}else{var valid2=true}}}}}}else{validate11.errors=[{instancePath:instancePath+"/foreignAmounts",schemaPath:"#/$defs/AccountingReportAmountsaf30/type",keyword:"type",params:{type:"object"},message:"must be object"}];return false}}var valid0=_errs2===errors}else{var valid0=true}if(valid0){if(data.glAccount!==void 0){const _errs16=errors;if(!validate12(data.glAccount,{instancePath:instancePath+"/glAccount",parentData:data,parentDataProperty:"glAccount",rootData})){vErrors=vErrors===null?validate12.errors:vErrors.concat(validate12.errors);errors=vErrors.length}var valid0=_errs16===errors}else{var valid0=true}if(valid0){if(data.amounts!==void 0){let data7=data.amounts;const _errs17=errors;const _errs18=errors;if(errors===_errs18){if(data7&&typeof data7=="object"&&!Array.isArray(data7)){if(data7.netChange!==void 0){let data8=data7.netChange;const _errs21=errors;if(!(typeof data8=="number"&&isFinite(data8))){validate11.errors=[{instancePath:instancePath+"/amounts/netChange",schemaPath:"#/$defs/AccountingReportAmountsaf30/properties/netChange/type",keyword:"type",params:{type:"number"},message:"must be number"}];return false}var valid4=_errs21===errors}else{var valid4=true}if(valid4){if(data7.closingBalance!==void 0){let data9=data7.closingBalance;const _errs23=errors;if(!(typeof data9=="number"&&isFinite(data9))){validate11.errors=[{instancePath:instancePath+"/amounts/closingBalance",schemaPath:"#/$defs/AccountingReportAmountsaf30/properties/closingBalance/type",keyword:"type",params:{type:"number"},message:"must be number"}];return false}var valid4=_errs23===errors}else{var valid4=true}if(valid4){if(data7.openingBalance!==void 0){let data10=data7.openingBalance;const _errs25=errors;if(!(typeof data10=="number"&&isFinite(data10))){validate11.errors=[{instancePath:instancePath+"/amounts/openingBalance",schemaPath:"#/$defs/AccountingReportAmountsaf30/properties/openingBalance/type",keyword:"type",params:{type:"number"},message:"must be number"}];return false}var valid4=_errs25===errors}else{var valid4=true}if(valid4){if(data7.debits!==void 0){let data11=data7.debits;const _errs27=errors;if(!(typeof data11=="number"&&isFinite(data11))){validate11.errors=[{instancePath:instancePath+"/amounts/debits",schemaPath:"#/$defs/AccountingReportAmountsaf30/properties/debits/type",keyword:"type",params:{type:"number"},message:"must be number"}];return false}var valid4=_errs27===errors}else{var valid4=true}if(valid4){if(data7.credits!==void 0){let data12=data7.credits;const _errs29=errors;if(!(typeof data12=="number"&&isFinite(data12))){validate11.errors=[{instancePath:instancePath+"/amounts/credits",schemaPath:"#/$defs/AccountingReportAmountsaf30/properties/credits/type",keyword:"type",params:{type:"number"},message:"must be number"}];return false}var valid4=_errs29===errors}else{var valid4=true}}}}}}else{validate11.errors=[{instancePath:instancePath+"/amounts",schemaPath:"#/$defs/AccountingReportAmountsaf30/type",keyword:"type",params:{type:"object"},message:"must be object"}];return false}}var valid0=_errs17===errors}else{var valid0=true}}}}else{validate11.errors=[{instancePath,schemaPath:"#/type",keyword:"type",params:{type:"object"},message:"must be object"}];return false}}validate11.errors=vErrors;return errors===0}function validate10(data,{instancePath="",parentData,parentDataProperty,rootData=data}={}){let vErrors=null;let errors=0;if(errors===0){if(data&&typeof data=="object"&&!Array.isArray(data)){if(data.reportKey!==void 0){const _errs2=errors;if(typeof data.reportKey!=="string"){validate10.errors=[{instancePath:instancePath+"/reportKey",schemaPath:"#/properties/reportKey/type",keyword:"type",params:{type:"string"},message:"must be string"}];return false}var valid0=_errs2===errors}else{var valid0=true}if(valid0){if(data.items!==void 0){let data1=data.items;const _errs4=errors;if(errors===_errs4){if(Array.isArray(data1)){var valid1=true;const len0=data1.length;for(let i0=0;i0<len0;i0++){const _errs6=errors;if(!validate11(data1[i0],{instancePath:instancePath+"/items/"+i0,parentData:data1,parentDataProperty:i0,rootData})){vErrors=vErrors===null?validate11.errors:vErrors.concat(validate11.errors);errors=vErrors.length}var valid1=_errs6===errors;if(!valid1){break}}}else{validate10.errors=[{instancePath:instancePath+"/items",schemaPath:"#/properties/items/type",keyword:"type",params:{type:"array"},message:"must be array"}];return false}}var valid0=_errs4===errors}else{var valid0=true}if(valid0){if(data.status!==void 0){const _errs7=errors;let valid2;valid2=false;for(const v0 of schema11.properties.status.enum){if(func0(data.status,v0)){valid2=true;break}}if(!valid2){validate10.errors=[{instancePath:instancePath+"/status",schemaPath:"#/properties/status/enum",keyword:"enum",params:{allowedValues:schema11.properties.status.enum},message:"must be equal to one of the allowed values"}];return false}var valid0=_errs7===errors}else{var valid0=true}}}}else{validate10.errors=[{instancePath,schemaPath:"#/type",keyword:"type",params:{type:"object"},message:"must be object"}];return false}}validate10.errors=vErrors;return errors===0};validate.schema=schema11;export{stdin_default as default,validate};
