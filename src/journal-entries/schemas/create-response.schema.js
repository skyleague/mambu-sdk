/* eslint-disable */
// @ts-nocheck
/**
 * Generated by Ajv https://ajv.js.org/guide/managing-schemas.html#standalone-validation-code
 */
import {createRequire} from 'module';const require = createRequire(import.meta.url);"use strict";
/** @type {unknown} */
export const validate = validate10;export default validate10;const schema11 = {"$schema":"http://json-schema.org/draft-07/schema#","title":"CreateResponse","type":"array","items":{"$ref":"#/$defs/GLJournalEntry"},"$defs":{"GLJournalEntry":{"type":"object","description":"Represents a general ledger journal entry.","properties":{"accountKey":{"type":"string","description":"The account associated with this journal entry. `Null` if the journal entry is not associated to any account."},"amount":{"type":"number","description":"The amount which was debited or credited in the organization's currency."},"assignedBranchKey":{"type":"string","description":"The key of the assigned branch for this general ledger journal entry."},"bookingDate":{"type":"string","description":"The date and time when the general ledger journal entry was recorded.","format":"date-time"},"creationDate":{"type":"string","description":"The creation date of the general ledger journal entry.","format":"date-time"},"encodedKey":{"type":"string","description":"The encoded key of the entity, generated, globally unique"},"entryID":{"type":"integer","description":"The ID of the general ledger journal entry."},"foreignAmount":{"$ref":"#/$defs/GLJournalEntryForeignAmount"},"glAccount":{"$ref":"#/$defs/GLAccount"},"notes":{"type":"string","description":"Optional notes entered by the user when they performed the journal entry."},"productKey":{"type":"string","description":"The product associated with this journal entry. `Null` if the journal entry is not associated with any product."},"productType":{"description":"The product type that is referenced by the account key. `Null` if the journal entry is not associated to any product.","enum":["LOAN","SAVINGS"]},"reversalEntryKey":{"type":"string","description":"The entry key of the general ledger journal entry that reverses this general ledger journal entry. Null if the general ledger journal entry isn't reversed."},"transactionId":{"type":"string","description":"The transation ID, which is not unique."},"type":{"description":"The general ledger journal entry type, which may be debit or credit.","enum":["DEBIT","CREDIT"]},"userKey":{"type":"string","description":"The encoded key of the user that performed the transaction."}},"additionalProperties":true},"GLJournalEntryForeignAmount":{"type":"object","description":"Represents the details of the general ledger journal entry amount posted in foreign currency.","properties":{"accountingRate":{"$ref":"#/$defs/AccountingRate"},"amount":{"type":"number","description":"The amount of an accounting entry in foreign currency."},"currency":{"$ref":"#/$defs/Currency"}},"additionalProperties":true},"AccountingRate":{"type":"object","description":"Represents the conversion rate used in accounting to convert amounts from one currency to organisation currency","properties":{"encodedKey":{"type":"string","description":"The encoded key of the accounting rate, auto generated, unique"},"endDate":{"type":"string","description":"Rate validity end date","format":"date-time"},"fromCurrencyCode":{"type":"string","description":"Organisation currency code"},"rate":{"type":"number","description":"Value of rate to be used for accounting conversions"},"startDate":{"type":"string","description":"Rate validity start date","format":"date-time"},"toCurrencyCode":{"type":"string","description":"Foreign currency code"}},"additionalProperties":true},"Currency":{"type":"object","description":"Represents a currency eg. USD, EUR.","properties":{"code":{"description":"Fiat(ISO-4217) currency code or NON_FIAT for non fiat currencies.","enum":["AED","AFN","ALL","AMD","ANG","AOA","ARS","AUD","AWG","AZN","BAM","BBD","BDT","BGN","BHD","BIF","BMD","BND","BOB","BOV","BRL","BSD","BTN","BWP","BYR","BYN","BZD","CAD","CDF","CHE","CHF","CHW","CLF","CLP","CNY","COP","COU","CRC","CUC","CUP","CVE","CZK","DJF","DKK","DOP","DZD","EGP","ERN","ETB","EUR","FJD","FKP","GBP","GEL","GHS","GIP","GMD","GNF","GTQ","GYD","HKD","HNL","HRK","HTG","HUF","IDR","ILS","INR","IQD","IRR","ISK","JMD","JOD","JPY","KES","KGS","KHR","KMF","KPW","KRW","KWD","KYD","KZT","LAK","LBP","LKR","LRD","LSL","LTL","LVL","LYD","MAD","MDL","MGA","MKD","MMK","MNT","MOP","MRO","MRU","MUR","MVR","MWK","MXN","MXV","MYR","MZN","NAD","NGN","NIO","NOK","NPR","NZD","OMR","PAB","PEN","PGK","PHP","PKR","PLN","PYG","QAR","RON","RSD","RUB","RWF","SAR","SBD","SCR","SDG","SEK","SGD","SHP","SLL","SOS","SRD","STD","STN","SVC","SYP","SZL","THB","TJS","TMT","TND","TOP","TRY","TTD","TWD","TZS","UAH","UGX","USD","USN","UYI","UYU","UYW","UZS","VED","VEF","VES","VND","VUV","WST","XAG","XAU","XAF","XBA","XBB","XBC","XBD","XCD","XDR","XOF","XPD","XPF","XPT","XSU","XTS","XUA","XXX","YER","ZAR","ZIG","ZMK","ZWL","ZMW","SSP","NON_FIAT"]},"currencyCode":{"type":"string","description":"Currency code for NON_FIAT currency."}},"additionalProperties":true},"GLAccount":{"type":"object","description":"Represents a general ledger account.","properties":{"activated":{"type":"boolean","description":"`TRUE` if the account is activated and may be used, `FALSE` otherwise."},"allowManualJournalEntries":{"type":"boolean","description":"`TRUE` if manual journal entries are allowed, `FALSE` otherwise."},"balance":{"type":"number","description":"The balance of the general ledger account, which is only populated for the GET /glaccounts endpoint."},"creationDate":{"type":"string","description":"The creation date for this account, which is stored as UTC.","format":"date-time"},"currency":{"$ref":"#/$defs/Currency"},"description":{"type":"string","description":"A description of the general ledger account."},"encodedKey":{"type":"string","description":"The encoded key of the entity, generated, globally unique"},"glCode":{"type":"string","description":"The general ledger code used to identify different account types. Also used for grouping and categorizing accounts. For example: an account code of '3201' is considered a subtype of '3200'."},"lastModifiedDate":{"type":"string","description":"The last modification date and time, which is stored as UTC.","format":"date-time"},"migrationEventKey":{"type":"string","description":"The data migration event key if the general ledger account was created as a part of a data migration event."},"name":{"type":"string","description":"The name of the general ledger account."},"stripTrailingZeros":{"type":"boolean","description":"`TRUE` if trailing zeros are stripped, `FALSE` otherwise."},"type":{"description":"The general ledger account type.","enum":["ASSET","LIABILITY","EQUITY","INCOME","EXPENSE"]},"usage":{"description":"The usage type of the general ledger account. `DETAIL` accounts are used to stores transaction balances. `HEADER` accounts are used to organise and group detail accounts for reporting purposes.","enum":["DETAIL","HEADER"]}},"additionalProperties":true}}};const schema12 = {"type":"object","description":"Represents a general ledger journal entry.","properties":{"accountKey":{"type":"string","description":"The account associated with this journal entry. `Null` if the journal entry is not associated to any account."},"amount":{"type":"number","description":"The amount which was debited or credited in the organization's currency."},"assignedBranchKey":{"type":"string","description":"The key of the assigned branch for this general ledger journal entry."},"bookingDate":{"type":"string","description":"The date and time when the general ledger journal entry was recorded.","format":"date-time"},"creationDate":{"type":"string","description":"The creation date of the general ledger journal entry.","format":"date-time"},"encodedKey":{"type":"string","description":"The encoded key of the entity, generated, globally unique"},"entryID":{"type":"integer","description":"The ID of the general ledger journal entry."},"foreignAmount":{"$ref":"#/$defs/GLJournalEntryForeignAmount"},"glAccount":{"$ref":"#/$defs/GLAccount"},"notes":{"type":"string","description":"Optional notes entered by the user when they performed the journal entry."},"productKey":{"type":"string","description":"The product associated with this journal entry. `Null` if the journal entry is not associated with any product."},"productType":{"description":"The product type that is referenced by the account key. `Null` if the journal entry is not associated to any product.","enum":["LOAN","SAVINGS"]},"reversalEntryKey":{"type":"string","description":"The entry key of the general ledger journal entry that reverses this general ledger journal entry. Null if the general ledger journal entry isn't reversed."},"transactionId":{"type":"string","description":"The transation ID, which is not unique."},"type":{"description":"The general ledger journal entry type, which may be debit or credit.","enum":["DEBIT","CREDIT"]},"userKey":{"type":"string","description":"The encoded key of the user that performed the transaction."}},"additionalProperties":true};const formats0 = require("ajv-formats/dist/formats").fullFormats["date-time"];const schema13 = {"type":"object","description":"Represents the details of the general ledger journal entry amount posted in foreign currency.","properties":{"accountingRate":{"$ref":"#/$defs/AccountingRate"},"amount":{"type":"number","description":"The amount of an accounting entry in foreign currency."},"currency":{"$ref":"#/$defs/Currency"}},"additionalProperties":true};const schema14 = {"type":"object","description":"Represents the conversion rate used in accounting to convert amounts from one currency to organisation currency","properties":{"encodedKey":{"type":"string","description":"The encoded key of the accounting rate, auto generated, unique"},"endDate":{"type":"string","description":"Rate validity end date","format":"date-time"},"fromCurrencyCode":{"type":"string","description":"Organisation currency code"},"rate":{"type":"number","description":"Value of rate to be used for accounting conversions"},"startDate":{"type":"string","description":"Rate validity start date","format":"date-time"},"toCurrencyCode":{"type":"string","description":"Foreign currency code"}},"additionalProperties":true};const schema15 = {"type":"object","description":"Represents a currency eg. USD, EUR.","properties":{"code":{"description":"Fiat(ISO-4217) currency code or NON_FIAT for non fiat currencies.","enum":["AED","AFN","ALL","AMD","ANG","AOA","ARS","AUD","AWG","AZN","BAM","BBD","BDT","BGN","BHD","BIF","BMD","BND","BOB","BOV","BRL","BSD","BTN","BWP","BYR","BYN","BZD","CAD","CDF","CHE","CHF","CHW","CLF","CLP","CNY","COP","COU","CRC","CUC","CUP","CVE","CZK","DJF","DKK","DOP","DZD","EGP","ERN","ETB","EUR","FJD","FKP","GBP","GEL","GHS","GIP","GMD","GNF","GTQ","GYD","HKD","HNL","HRK","HTG","HUF","IDR","ILS","INR","IQD","IRR","ISK","JMD","JOD","JPY","KES","KGS","KHR","KMF","KPW","KRW","KWD","KYD","KZT","LAK","LBP","LKR","LRD","LSL","LTL","LVL","LYD","MAD","MDL","MGA","MKD","MMK","MNT","MOP","MRO","MRU","MUR","MVR","MWK","MXN","MXV","MYR","MZN","NAD","NGN","NIO","NOK","NPR","NZD","OMR","PAB","PEN","PGK","PHP","PKR","PLN","PYG","QAR","RON","RSD","RUB","RWF","SAR","SBD","SCR","SDG","SEK","SGD","SHP","SLL","SOS","SRD","STD","STN","SVC","SYP","SZL","THB","TJS","TMT","TND","TOP","TRY","TTD","TWD","TZS","UAH","UGX","USD","USN","UYI","UYU","UYW","UZS","VED","VEF","VES","VND","VUV","WST","XAG","XAU","XAF","XBA","XBB","XBC","XBD","XCD","XDR","XOF","XPD","XPF","XPT","XSU","XTS","XUA","XXX","YER","ZAR","ZIG","ZMK","ZWL","ZMW","SSP","NON_FIAT"]},"currencyCode":{"type":"string","description":"Currency code for NON_FIAT currency."}},"additionalProperties":true};const func0 = require("ajv/dist/runtime/equal").default;function validate12(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){let vErrors = null;let errors = 0;if(errors === 0){if(data && typeof data == "object" && !Array.isArray(data)){if(data.accountingRate !== undefined){let data0 = data.accountingRate;const _errs2 = errors;const _errs3 = errors;if(errors === _errs3){if(data0 && typeof data0 == "object" && !Array.isArray(data0)){if(data0.encodedKey !== undefined){const _errs6 = errors;if(typeof data0.encodedKey !== "string"){validate12.errors = [{instancePath:instancePath+"/accountingRate/encodedKey",schemaPath:"#/$defs/AccountingRate/properties/encodedKey/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid2 = _errs6 === errors;}else {var valid2 = true;}if(valid2){if(data0.endDate !== undefined){let data2 = data0.endDate;const _errs8 = errors;if(errors === _errs8){if(errors === _errs8){if(typeof data2 === "string"){if(!(formats0.validate(data2))){validate12.errors = [{instancePath:instancePath+"/accountingRate/endDate",schemaPath:"#/$defs/AccountingRate/properties/endDate/format",keyword:"format",params:{format: "date-time"},message:"must match format \""+"date-time"+"\""}];return false;}}else {validate12.errors = [{instancePath:instancePath+"/accountingRate/endDate",schemaPath:"#/$defs/AccountingRate/properties/endDate/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}}var valid2 = _errs8 === errors;}else {var valid2 = true;}if(valid2){if(data0.fromCurrencyCode !== undefined){const _errs10 = errors;if(typeof data0.fromCurrencyCode !== "string"){validate12.errors = [{instancePath:instancePath+"/accountingRate/fromCurrencyCode",schemaPath:"#/$defs/AccountingRate/properties/fromCurrencyCode/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid2 = _errs10 === errors;}else {var valid2 = true;}if(valid2){if(data0.rate !== undefined){let data4 = data0.rate;const _errs12 = errors;if(!((typeof data4 == "number") && (isFinite(data4)))){validate12.errors = [{instancePath:instancePath+"/accountingRate/rate",schemaPath:"#/$defs/AccountingRate/properties/rate/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid2 = _errs12 === errors;}else {var valid2 = true;}if(valid2){if(data0.startDate !== undefined){let data5 = data0.startDate;const _errs14 = errors;if(errors === _errs14){if(errors === _errs14){if(typeof data5 === "string"){if(!(formats0.validate(data5))){validate12.errors = [{instancePath:instancePath+"/accountingRate/startDate",schemaPath:"#/$defs/AccountingRate/properties/startDate/format",keyword:"format",params:{format: "date-time"},message:"must match format \""+"date-time"+"\""}];return false;}}else {validate12.errors = [{instancePath:instancePath+"/accountingRate/startDate",schemaPath:"#/$defs/AccountingRate/properties/startDate/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}}var valid2 = _errs14 === errors;}else {var valid2 = true;}if(valid2){if(data0.toCurrencyCode !== undefined){const _errs16 = errors;if(typeof data0.toCurrencyCode !== "string"){validate12.errors = [{instancePath:instancePath+"/accountingRate/toCurrencyCode",schemaPath:"#/$defs/AccountingRate/properties/toCurrencyCode/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid2 = _errs16 === errors;}else {var valid2 = true;}}}}}}}else {validate12.errors = [{instancePath:instancePath+"/accountingRate",schemaPath:"#/$defs/AccountingRate/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}var valid0 = _errs2 === errors;}else {var valid0 = true;}if(valid0){if(data.amount !== undefined){let data7 = data.amount;const _errs18 = errors;if(!((typeof data7 == "number") && (isFinite(data7)))){validate12.errors = [{instancePath:instancePath+"/amount",schemaPath:"#/properties/amount/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid0 = _errs18 === errors;}else {var valid0 = true;}if(valid0){if(data.currency !== undefined){let data8 = data.currency;const _errs20 = errors;const _errs21 = errors;if(errors === _errs21){if(data8 && typeof data8 == "object" && !Array.isArray(data8)){if(data8.code !== undefined){const _errs24 = errors;let valid5;valid5 = false;for(const v0 of schema15.properties.code.enum){if(func0(data8.code, v0)){valid5 = true;break;}}if(!valid5){validate12.errors = [{instancePath:instancePath+"/currency/code",schemaPath:"#/$defs/Currency/properties/code/enum",keyword:"enum",params:{allowedValues: schema15.properties.code.enum},message:"must be equal to one of the allowed values"}];return false;}var valid4 = _errs24 === errors;}else {var valid4 = true;}if(valid4){if(data8.currencyCode !== undefined){const _errs25 = errors;if(typeof data8.currencyCode !== "string"){validate12.errors = [{instancePath:instancePath+"/currency/currencyCode",schemaPath:"#/$defs/Currency/properties/currencyCode/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid4 = _errs25 === errors;}else {var valid4 = true;}}}else {validate12.errors = [{instancePath:instancePath+"/currency",schemaPath:"#/$defs/Currency/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}var valid0 = _errs20 === errors;}else {var valid0 = true;}}}}else {validate12.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}validate12.errors = vErrors;return errors === 0;}const schema16 = {"type":"object","description":"Represents a general ledger account.","properties":{"activated":{"type":"boolean","description":"`TRUE` if the account is activated and may be used, `FALSE` otherwise."},"allowManualJournalEntries":{"type":"boolean","description":"`TRUE` if manual journal entries are allowed, `FALSE` otherwise."},"balance":{"type":"number","description":"The balance of the general ledger account, which is only populated for the GET /glaccounts endpoint."},"creationDate":{"type":"string","description":"The creation date for this account, which is stored as UTC.","format":"date-time"},"currency":{"$ref":"#/$defs/Currency"},"description":{"type":"string","description":"A description of the general ledger account."},"encodedKey":{"type":"string","description":"The encoded key of the entity, generated, globally unique"},"glCode":{"type":"string","description":"The general ledger code used to identify different account types. Also used for grouping and categorizing accounts. For example: an account code of '3201' is considered a subtype of '3200'."},"lastModifiedDate":{"type":"string","description":"The last modification date and time, which is stored as UTC.","format":"date-time"},"migrationEventKey":{"type":"string","description":"The data migration event key if the general ledger account was created as a part of a data migration event."},"name":{"type":"string","description":"The name of the general ledger account."},"stripTrailingZeros":{"type":"boolean","description":"`TRUE` if trailing zeros are stripped, `FALSE` otherwise."},"type":{"description":"The general ledger account type.","enum":["ASSET","LIABILITY","EQUITY","INCOME","EXPENSE"]},"usage":{"description":"The usage type of the general ledger account. `DETAIL` accounts are used to stores transaction balances. `HEADER` accounts are used to organise and group detail accounts for reporting purposes.","enum":["DETAIL","HEADER"]}},"additionalProperties":true};function validate14(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){let vErrors = null;let errors = 0;if(errors === 0){if(data && typeof data == "object" && !Array.isArray(data)){if(data.activated !== undefined){const _errs2 = errors;if(typeof data.activated !== "boolean"){validate14.errors = [{instancePath:instancePath+"/activated",schemaPath:"#/properties/activated/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"}];return false;}var valid0 = _errs2 === errors;}else {var valid0 = true;}if(valid0){if(data.allowManualJournalEntries !== undefined){const _errs4 = errors;if(typeof data.allowManualJournalEntries !== "boolean"){validate14.errors = [{instancePath:instancePath+"/allowManualJournalEntries",schemaPath:"#/properties/allowManualJournalEntries/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"}];return false;}var valid0 = _errs4 === errors;}else {var valid0 = true;}if(valid0){if(data.balance !== undefined){let data2 = data.balance;const _errs6 = errors;if(!((typeof data2 == "number") && (isFinite(data2)))){validate14.errors = [{instancePath:instancePath+"/balance",schemaPath:"#/properties/balance/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid0 = _errs6 === errors;}else {var valid0 = true;}if(valid0){if(data.creationDate !== undefined){let data3 = data.creationDate;const _errs8 = errors;if(errors === _errs8){if(errors === _errs8){if(typeof data3 === "string"){if(!(formats0.validate(data3))){validate14.errors = [{instancePath:instancePath+"/creationDate",schemaPath:"#/properties/creationDate/format",keyword:"format",params:{format: "date-time"},message:"must match format \""+"date-time"+"\""}];return false;}}else {validate14.errors = [{instancePath:instancePath+"/creationDate",schemaPath:"#/properties/creationDate/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}}var valid0 = _errs8 === errors;}else {var valid0 = true;}if(valid0){if(data.currency !== undefined){let data4 = data.currency;const _errs10 = errors;const _errs11 = errors;if(errors === _errs11){if(data4 && typeof data4 == "object" && !Array.isArray(data4)){if(data4.code !== undefined){const _errs14 = errors;let valid3;valid3 = false;for(const v0 of schema15.properties.code.enum){if(func0(data4.code, v0)){valid3 = true;break;}}if(!valid3){validate14.errors = [{instancePath:instancePath+"/currency/code",schemaPath:"#/$defs/Currency/properties/code/enum",keyword:"enum",params:{allowedValues: schema15.properties.code.enum},message:"must be equal to one of the allowed values"}];return false;}var valid2 = _errs14 === errors;}else {var valid2 = true;}if(valid2){if(data4.currencyCode !== undefined){const _errs15 = errors;if(typeof data4.currencyCode !== "string"){validate14.errors = [{instancePath:instancePath+"/currency/currencyCode",schemaPath:"#/$defs/Currency/properties/currencyCode/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid2 = _errs15 === errors;}else {var valid2 = true;}}}else {validate14.errors = [{instancePath:instancePath+"/currency",schemaPath:"#/$defs/Currency/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}var valid0 = _errs10 === errors;}else {var valid0 = true;}if(valid0){if(data.description !== undefined){const _errs17 = errors;if(typeof data.description !== "string"){validate14.errors = [{instancePath:instancePath+"/description",schemaPath:"#/properties/description/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid0 = _errs17 === errors;}else {var valid0 = true;}if(valid0){if(data.encodedKey !== undefined){const _errs19 = errors;if(typeof data.encodedKey !== "string"){validate14.errors = [{instancePath:instancePath+"/encodedKey",schemaPath:"#/properties/encodedKey/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid0 = _errs19 === errors;}else {var valid0 = true;}if(valid0){if(data.glCode !== undefined){const _errs21 = errors;if(typeof data.glCode !== "string"){validate14.errors = [{instancePath:instancePath+"/glCode",schemaPath:"#/properties/glCode/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid0 = _errs21 === errors;}else {var valid0 = true;}if(valid0){if(data.lastModifiedDate !== undefined){let data10 = data.lastModifiedDate;const _errs23 = errors;if(errors === _errs23){if(errors === _errs23){if(typeof data10 === "string"){if(!(formats0.validate(data10))){validate14.errors = [{instancePath:instancePath+"/lastModifiedDate",schemaPath:"#/properties/lastModifiedDate/format",keyword:"format",params:{format: "date-time"},message:"must match format \""+"date-time"+"\""}];return false;}}else {validate14.errors = [{instancePath:instancePath+"/lastModifiedDate",schemaPath:"#/properties/lastModifiedDate/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}}var valid0 = _errs23 === errors;}else {var valid0 = true;}if(valid0){if(data.migrationEventKey !== undefined){const _errs25 = errors;if(typeof data.migrationEventKey !== "string"){validate14.errors = [{instancePath:instancePath+"/migrationEventKey",schemaPath:"#/properties/migrationEventKey/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid0 = _errs25 === errors;}else {var valid0 = true;}if(valid0){if(data.name !== undefined){const _errs27 = errors;if(typeof data.name !== "string"){validate14.errors = [{instancePath:instancePath+"/name",schemaPath:"#/properties/name/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid0 = _errs27 === errors;}else {var valid0 = true;}if(valid0){if(data.stripTrailingZeros !== undefined){const _errs29 = errors;if(typeof data.stripTrailingZeros !== "boolean"){validate14.errors = [{instancePath:instancePath+"/stripTrailingZeros",schemaPath:"#/properties/stripTrailingZeros/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"}];return false;}var valid0 = _errs29 === errors;}else {var valid0 = true;}if(valid0){if(data.type !== undefined){const _errs31 = errors;let valid4;valid4 = false;for(const v1 of schema16.properties.type.enum){if(func0(data.type, v1)){valid4 = true;break;}}if(!valid4){validate14.errors = [{instancePath:instancePath+"/type",schemaPath:"#/properties/type/enum",keyword:"enum",params:{allowedValues: schema16.properties.type.enum},message:"must be equal to one of the allowed values"}];return false;}var valid0 = _errs31 === errors;}else {var valid0 = true;}if(valid0){if(data.usage !== undefined){let data15 = data.usage;const _errs32 = errors;if(!((data15 === "DETAIL") || (data15 === "HEADER"))){validate14.errors = [{instancePath:instancePath+"/usage",schemaPath:"#/properties/usage/enum",keyword:"enum",params:{allowedValues: schema16.properties.usage.enum},message:"must be equal to one of the allowed values"}];return false;}var valid0 = _errs32 === errors;}else {var valid0 = true;}}}}}}}}}}}}}}}else {validate14.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}validate14.errors = vErrors;return errors === 0;}function validate11(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){let vErrors = null;let errors = 0;if(errors === 0){if(data && typeof data == "object" && !Array.isArray(data)){if(data.accountKey !== undefined){const _errs2 = errors;if(typeof data.accountKey !== "string"){validate11.errors = [{instancePath:instancePath+"/accountKey",schemaPath:"#/properties/accountKey/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid0 = _errs2 === errors;}else {var valid0 = true;}if(valid0){if(data.amount !== undefined){let data1 = data.amount;const _errs4 = errors;if(!((typeof data1 == "number") && (isFinite(data1)))){validate11.errors = [{instancePath:instancePath+"/amount",schemaPath:"#/properties/amount/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid0 = _errs4 === errors;}else {var valid0 = true;}if(valid0){if(data.assignedBranchKey !== undefined){const _errs6 = errors;if(typeof data.assignedBranchKey !== "string"){validate11.errors = [{instancePath:instancePath+"/assignedBranchKey",schemaPath:"#/properties/assignedBranchKey/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid0 = _errs6 === errors;}else {var valid0 = true;}if(valid0){if(data.bookingDate !== undefined){let data3 = data.bookingDate;const _errs8 = errors;if(errors === _errs8){if(errors === _errs8){if(typeof data3 === "string"){if(!(formats0.validate(data3))){validate11.errors = [{instancePath:instancePath+"/bookingDate",schemaPath:"#/properties/bookingDate/format",keyword:"format",params:{format: "date-time"},message:"must match format \""+"date-time"+"\""}];return false;}}else {validate11.errors = [{instancePath:instancePath+"/bookingDate",schemaPath:"#/properties/bookingDate/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}}var valid0 = _errs8 === errors;}else {var valid0 = true;}if(valid0){if(data.creationDate !== undefined){let data4 = data.creationDate;const _errs10 = errors;if(errors === _errs10){if(errors === _errs10){if(typeof data4 === "string"){if(!(formats0.validate(data4))){validate11.errors = [{instancePath:instancePath+"/creationDate",schemaPath:"#/properties/creationDate/format",keyword:"format",params:{format: "date-time"},message:"must match format \""+"date-time"+"\""}];return false;}}else {validate11.errors = [{instancePath:instancePath+"/creationDate",schemaPath:"#/properties/creationDate/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}}var valid0 = _errs10 === errors;}else {var valid0 = true;}if(valid0){if(data.encodedKey !== undefined){const _errs12 = errors;if(typeof data.encodedKey !== "string"){validate11.errors = [{instancePath:instancePath+"/encodedKey",schemaPath:"#/properties/encodedKey/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid0 = _errs12 === errors;}else {var valid0 = true;}if(valid0){if(data.entryID !== undefined){let data6 = data.entryID;const _errs14 = errors;if(!(((typeof data6 == "number") && (!(data6 % 1) && !isNaN(data6))) && (isFinite(data6)))){validate11.errors = [{instancePath:instancePath+"/entryID",schemaPath:"#/properties/entryID/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];return false;}var valid0 = _errs14 === errors;}else {var valid0 = true;}if(valid0){if(data.foreignAmount !== undefined){const _errs16 = errors;if(!(validate12(data.foreignAmount, {instancePath:instancePath+"/foreignAmount",parentData:data,parentDataProperty:"foreignAmount",rootData}))){vErrors = vErrors === null ? validate12.errors : vErrors.concat(validate12.errors);errors = vErrors.length;}var valid0 = _errs16 === errors;}else {var valid0 = true;}if(valid0){if(data.glAccount !== undefined){const _errs17 = errors;if(!(validate14(data.glAccount, {instancePath:instancePath+"/glAccount",parentData:data,parentDataProperty:"glAccount",rootData}))){vErrors = vErrors === null ? validate14.errors : vErrors.concat(validate14.errors);errors = vErrors.length;}var valid0 = _errs17 === errors;}else {var valid0 = true;}if(valid0){if(data.notes !== undefined){const _errs18 = errors;if(typeof data.notes !== "string"){validate11.errors = [{instancePath:instancePath+"/notes",schemaPath:"#/properties/notes/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid0 = _errs18 === errors;}else {var valid0 = true;}if(valid0){if(data.productKey !== undefined){const _errs20 = errors;if(typeof data.productKey !== "string"){validate11.errors = [{instancePath:instancePath+"/productKey",schemaPath:"#/properties/productKey/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid0 = _errs20 === errors;}else {var valid0 = true;}if(valid0){if(data.productType !== undefined){let data11 = data.productType;const _errs22 = errors;if(!((data11 === "LOAN") || (data11 === "SAVINGS"))){validate11.errors = [{instancePath:instancePath+"/productType",schemaPath:"#/properties/productType/enum",keyword:"enum",params:{allowedValues: schema12.properties.productType.enum},message:"must be equal to one of the allowed values"}];return false;}var valid0 = _errs22 === errors;}else {var valid0 = true;}if(valid0){if(data.reversalEntryKey !== undefined){const _errs23 = errors;if(typeof data.reversalEntryKey !== "string"){validate11.errors = [{instancePath:instancePath+"/reversalEntryKey",schemaPath:"#/properties/reversalEntryKey/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid0 = _errs23 === errors;}else {var valid0 = true;}if(valid0){if(data.transactionId !== undefined){const _errs25 = errors;if(typeof data.transactionId !== "string"){validate11.errors = [{instancePath:instancePath+"/transactionId",schemaPath:"#/properties/transactionId/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid0 = _errs25 === errors;}else {var valid0 = true;}if(valid0){if(data.type !== undefined){let data14 = data.type;const _errs27 = errors;if(!((data14 === "DEBIT") || (data14 === "CREDIT"))){validate11.errors = [{instancePath:instancePath+"/type",schemaPath:"#/properties/type/enum",keyword:"enum",params:{allowedValues: schema12.properties.type.enum},message:"must be equal to one of the allowed values"}];return false;}var valid0 = _errs27 === errors;}else {var valid0 = true;}if(valid0){if(data.userKey !== undefined){const _errs28 = errors;if(typeof data.userKey !== "string"){validate11.errors = [{instancePath:instancePath+"/userKey",schemaPath:"#/properties/userKey/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid0 = _errs28 === errors;}else {var valid0 = true;}}}}}}}}}}}}}}}}}else {validate11.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}validate11.errors = vErrors;return errors === 0;}function validate10(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){let vErrors = null;let errors = 0;if(errors === 0){if(Array.isArray(data)){var valid0 = true;const len0 = data.length;for(let i0=0; i0<len0; i0++){const _errs1 = errors;if(!(validate11(data[i0], {instancePath:instancePath+"/" + i0,parentData:data,parentDataProperty:i0,rootData}))){vErrors = vErrors === null ? validate11.errors : vErrors.concat(validate11.errors);errors = vErrors.length;}var valid0 = _errs1 === errors;if(!valid0){break;}}}else {validate10.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "array"},message:"must be array"}];return false;}}validate10.errors = vErrors;return errors === 0;};validate.schema=schema11;