/**
 * Generated by Ajv https://ajv.js.org/guide/managing-schemas.html#standalone-validation-code 
 * eslint-disable
 */
const validate=validate10;var stdin_default=validate10;const schema11={"$schema":"http://json-schema.org/draft-07/schema#","title":"createResponse","type":"array","items":{"$ref":"#/$defs/GLJournalEntryaf30"},"$defs":{"GLJournalEntryaf30":{"type":"object","title":"GLJournalEntryaf30","description":"Represents a general ledger journal entry.","properties":{"amount":{"type":"number","title":"amount","description":"The amount which was debited or credited in the organization's currency."},"notes":{"type":"string","title":"notes","description":"Optional notes entered by the user when they performed the journal entry."},"creationDate":{"type":"string","title":"creationDate","description":"The creation date of the general ledger journal entry.","format":"date-time"},"productKey":{"type":"string","title":"productKey","description":"The product associated with this journal entry. `Null` if the journal entry is not associated with any product."},"type":{"title":"type","description":"The general ledger journal entry type, which may be debit or credit.","enum":["DEBIT","CREDIT"]},"assignedBranchKey":{"type":"string","title":"assignedBranchKey","description":"The key of the assigned branch for this general ledger journal entry."},"transactionId":{"type":"string","title":"transactionId","description":"The transation ID, which is not unique."},"userKey":{"type":"string","title":"userKey","description":"The encoded key of the user that performed the transaction."},"entryID":{"type":"integer","title":"entryID","description":"The ID of the general ledger journal entry."},"accountKey":{"type":"string","title":"accountKey","description":"The account associated with this journal entry. `Null` if the journal entry is not associated to any account."},"foreignAmount":{"title":"foreignAmount","$ref":"#/$defs/GLJournalEntryForeignAmountaf30"},"reversalEntryKey":{"type":"string","title":"reversalEntryKey","description":"The entry key of the general ledger journal entry that reverses this general ledger journal entry. Null if the general ledger journal entry isn't reversed."},"encodedKey":{"type":"string","title":"encodedKey","description":"The encoded key of the entity, generated, globally unique"},"bookingDate":{"type":"string","title":"bookingDate","description":"The date and time when the general ledger journal entry was recorded.","format":"date-time"},"glAccount":{"title":"glAccount","$ref":"#/$defs/GLAccountaf30"},"productType":{"title":"productType","description":"The product type that is referenced by the account key. `Null` if the journal entry is not associated to any product.","enum":["LOAN","SAVINGS"]}},"additionalProperties":true},"GLJournalEntryForeignAmountaf30":{"type":"object","title":"GLJournalEntryForeignAmountaf30","description":"Represents the details of the general ledger journal entry amount posted in foreign currency.","properties":{"accountingRate":{"title":"accountingRate","$ref":"#/$defs/AccountingRateaf30"},"amount":{"type":"number","title":"amount","description":"The amount of an accounting entry in foreign currency."},"currency":{"title":"currency","$ref":"#/$defs/Currencyaf30"}},"additionalProperties":true},"AccountingRateaf30":{"type":"object","title":"AccountingRateaf30","description":"Represents the conversion rate used in accounting to convert amounts from one currency to organisation currency","properties":{"rate":{"type":"number","title":"rate","description":"Value of rate to be used for accounting conversions"},"endDate":{"type":"string","title":"endDate","description":"Rate validity end date","format":"date-time"},"toCurrencyCode":{"type":"string","title":"toCurrencyCode","description":"Foreign currency code"},"encodedKey":{"type":"string","title":"encodedKey","description":"The encoded key of the accounting rate, auto generated, unique"},"fromCurrencyCode":{"type":"string","title":"fromCurrencyCode","description":"Organisation currency code"},"startDate":{"type":"string","title":"startDate","description":"Rate validity start date","format":"date-time"}},"additionalProperties":true},"Currencyaf30":{"type":"object","title":"Currencyaf30","description":"Represents a currency eg. USD, EUR.","properties":{"currencyCode":{"type":"string","title":"currencyCode","description":"Currency code for NON_FIAT currency."},"code":{"title":"code","description":"Fiat(ISO-4217) currency code or NON_FIAT for non fiat currencies.","enum":["AED","AFN","ALL","AMD","ANG","AOA","ARS","AUD","AWG","AZN","BAM","BBD","BDT","BGN","BHD","BIF","BMD","BND","BOB","BOV","BRL","BSD","BTN","BWP","BYR","BYN","BZD","CAD","CDF","CHE","CHF","CHW","CLF","CLP","CNY","COP","COU","CRC","CUC","CUP","CVE","CZK","DJF","DKK","DOP","DZD","EGP","ERN","ETB","EUR","FJD","FKP","GBP","GEL","GHS","GIP","GMD","GNF","GTQ","GYD","HKD","HNL","HRK","HTG","HUF","IDR","ILS","INR","IQD","IRR","ISK","JMD","JOD","JPY","KES","KGS","KHR","KMF","KPW","KRW","KWD","KYD","KZT","LAK","LBP","LKR","LRD","LSL","LTL","LVL","LYD","MAD","MDL","MGA","MKD","MMK","MNT","MOP","MRO","MRU","MUR","MVR","MWK","MXN","MXV","MYR","MZN","NAD","NGN","NIO","NOK","NPR","NZD","OMR","PAB","PEN","PGK","PHP","PKR","PLN","PYG","QAR","RON","RSD","RUB","RWF","SAR","SBD","SCR","SDG","SEK","SGD","SHP","SLL","SOS","SRD","STD","STN","SVC","SYP","SZL","THB","TJS","TMT","TND","TOP","TRY","TTD","TWD","TZS","UAH","UGX","USD","USN","UYI","UYU","UYW","UZS","VED","VEF","VES","VND","VUV","WST","XAG","XAU","XAF","XBA","XBB","XBC","XBD","XCD","XDR","XOF","XPD","XPF","XPT","XSU","XTS","XUA","XXX","YER","ZAR","ZMK","ZWL","ZMW","SSP","NON_FIAT"]}},"additionalProperties":true},"GLAccountaf30":{"type":"object","title":"GLAccountaf30","description":"Represents a general ledger account.","properties":{"migrationEventKey":{"type":"string","title":"migrationEventKey","description":"The data migration event key if the general ledger account was created as a part of a data migration event."},"lastModifiedDate":{"type":"string","title":"lastModifiedDate","description":"The last modification date and time, which is stored as UTC.","format":"date-time"},"glCode":{"type":"string","title":"glCode","description":"The general ledger code used to identify different account types. Also used for grouping and categorizing accounts. For example: an account code of '3201' is considered a subtype of '3200'."},"usage":{"title":"usage","description":"The usage type of the general ledger account. `DETAIL` accounts are used to stores transaction balances. `HEADER` accounts are used to organise and group detail accounts for reporting purposes.","enum":["DETAIL","HEADER"]},"description":{"type":"string","title":"description","description":"A description of the general ledger account."},"creationDate":{"type":"string","title":"creationDate","description":"The creation date for this account, which is stored as UTC.","format":"date-time"},"type":{"title":"type","description":"The general ledger account type.","enum":["ASSET","LIABILITY","EQUITY","INCOME","EXPENSE"]},"allowManualJournalEntries":{"type":"boolean","title":"allowManualJournalEntries","description":"`TRUE` if manual journal entries are allowed, `FALSE` otherwise."},"balance":{"type":"number","title":"balance","description":"The balance of the general ledger account, which is only populated for the GET /glaccounts endpoint."},"name":{"type":"string","title":"name","description":"The name of the general ledger account."},"encodedKey":{"type":"string","title":"encodedKey","description":"The encoded key of the entity, generated, globally unique"},"currency":{"title":"currency","$ref":"#/$defs/Currencyaf30"},"stripTrailingZeros":{"type":"boolean","title":"stripTrailingZeros","description":"`TRUE` if trailing zeros are stripped, `FALSE` otherwise."},"activated":{"type":"boolean","title":"activated","description":"`TRUE` if the account is activated and may be used, `FALSE` otherwise."}},"additionalProperties":true}}};const schema12={"type":"object","title":"GLJournalEntryaf30","description":"Represents a general ledger journal entry.","properties":{"amount":{"type":"number","title":"amount","description":"The amount which was debited or credited in the organization's currency."},"notes":{"type":"string","title":"notes","description":"Optional notes entered by the user when they performed the journal entry."},"creationDate":{"type":"string","title":"creationDate","description":"The creation date of the general ledger journal entry.","format":"date-time"},"productKey":{"type":"string","title":"productKey","description":"The product associated with this journal entry. `Null` if the journal entry is not associated with any product."},"type":{"title":"type","description":"The general ledger journal entry type, which may be debit or credit.","enum":["DEBIT","CREDIT"]},"assignedBranchKey":{"type":"string","title":"assignedBranchKey","description":"The key of the assigned branch for this general ledger journal entry."},"transactionId":{"type":"string","title":"transactionId","description":"The transation ID, which is not unique."},"userKey":{"type":"string","title":"userKey","description":"The encoded key of the user that performed the transaction."},"entryID":{"type":"integer","title":"entryID","description":"The ID of the general ledger journal entry."},"accountKey":{"type":"string","title":"accountKey","description":"The account associated with this journal entry. `Null` if the journal entry is not associated to any account."},"foreignAmount":{"title":"foreignAmount","$ref":"#/$defs/GLJournalEntryForeignAmountaf30"},"reversalEntryKey":{"type":"string","title":"reversalEntryKey","description":"The entry key of the general ledger journal entry that reverses this general ledger journal entry. Null if the general ledger journal entry isn't reversed."},"encodedKey":{"type":"string","title":"encodedKey","description":"The encoded key of the entity, generated, globally unique"},"bookingDate":{"type":"string","title":"bookingDate","description":"The date and time when the general ledger journal entry was recorded.","format":"date-time"},"glAccount":{"title":"glAccount","$ref":"#/$defs/GLAccountaf30"},"productType":{"title":"productType","description":"The product type that is referenced by the account key. `Null` if the journal entry is not associated to any product.","enum":["LOAN","SAVINGS"]}},"additionalProperties":true};const schema13={"type":"object","title":"GLJournalEntryForeignAmountaf30","description":"Represents the details of the general ledger journal entry amount posted in foreign currency.","properties":{"accountingRate":{"title":"accountingRate","$ref":"#/$defs/AccountingRateaf30"},"amount":{"type":"number","title":"amount","description":"The amount of an accounting entry in foreign currency."},"currency":{"title":"currency","$ref":"#/$defs/Currencyaf30"}},"additionalProperties":true};const schema14={"type":"object","title":"AccountingRateaf30","description":"Represents the conversion rate used in accounting to convert amounts from one currency to organisation currency","properties":{"rate":{"type":"number","title":"rate","description":"Value of rate to be used for accounting conversions"},"endDate":{"type":"string","title":"endDate","description":"Rate validity end date","format":"date-time"},"toCurrencyCode":{"type":"string","title":"toCurrencyCode","description":"Foreign currency code"},"encodedKey":{"type":"string","title":"encodedKey","description":"The encoded key of the accounting rate, auto generated, unique"},"fromCurrencyCode":{"type":"string","title":"fromCurrencyCode","description":"Organisation currency code"},"startDate":{"type":"string","title":"startDate","description":"Rate validity start date","format":"date-time"}},"additionalProperties":true};const schema15={"type":"object","title":"Currencyaf30","description":"Represents a currency eg. USD, EUR.","properties":{"currencyCode":{"type":"string","title":"currencyCode","description":"Currency code for NON_FIAT currency."},"code":{"title":"code","description":"Fiat(ISO-4217) currency code or NON_FIAT for non fiat currencies.","enum":["AED","AFN","ALL","AMD","ANG","AOA","ARS","AUD","AWG","AZN","BAM","BBD","BDT","BGN","BHD","BIF","BMD","BND","BOB","BOV","BRL","BSD","BTN","BWP","BYR","BYN","BZD","CAD","CDF","CHE","CHF","CHW","CLF","CLP","CNY","COP","COU","CRC","CUC","CUP","CVE","CZK","DJF","DKK","DOP","DZD","EGP","ERN","ETB","EUR","FJD","FKP","GBP","GEL","GHS","GIP","GMD","GNF","GTQ","GYD","HKD","HNL","HRK","HTG","HUF","IDR","ILS","INR","IQD","IRR","ISK","JMD","JOD","JPY","KES","KGS","KHR","KMF","KPW","KRW","KWD","KYD","KZT","LAK","LBP","LKR","LRD","LSL","LTL","LVL","LYD","MAD","MDL","MGA","MKD","MMK","MNT","MOP","MRO","MRU","MUR","MVR","MWK","MXN","MXV","MYR","MZN","NAD","NGN","NIO","NOK","NPR","NZD","OMR","PAB","PEN","PGK","PHP","PKR","PLN","PYG","QAR","RON","RSD","RUB","RWF","SAR","SBD","SCR","SDG","SEK","SGD","SHP","SLL","SOS","SRD","STD","STN","SVC","SYP","SZL","THB","TJS","TMT","TND","TOP","TRY","TTD","TWD","TZS","UAH","UGX","USD","USN","UYI","UYU","UYW","UZS","VED","VEF","VES","VND","VUV","WST","XAG","XAU","XAF","XBA","XBB","XBC","XBD","XCD","XDR","XOF","XPD","XPF","XPT","XSU","XTS","XUA","XXX","YER","ZAR","ZMK","ZWL","ZMW","SSP","NON_FIAT"]}},"additionalProperties":true};const func0=require("ajv/dist/runtime/equal").default;function validate12(data,{instancePath="",parentData,parentDataProperty,rootData=data}={}){let vErrors=null;let errors=0;if(errors===0){if(data&&typeof data=="object"&&!Array.isArray(data)){if(data.accountingRate!==void 0){let data0=data.accountingRate;const _errs2=errors;const _errs3=errors;if(errors===_errs3){if(data0&&typeof data0=="object"&&!Array.isArray(data0)){if(data0.rate!==void 0){let data1=data0.rate;const _errs6=errors;if(!(typeof data1=="number"&&isFinite(data1))){validate12.errors=[{instancePath:instancePath+"/accountingRate/rate",schemaPath:"#/$defs/AccountingRateaf30/properties/rate/type",keyword:"type",params:{type:"number"},message:"must be number"}];return false}var valid2=_errs6===errors}else{var valid2=true}if(valid2){if(data0.endDate!==void 0){const _errs8=errors;if(errors===_errs8){if(errors===_errs8){if(!(typeof data0.endDate==="string")){validate12.errors=[{instancePath:instancePath+"/accountingRate/endDate",schemaPath:"#/$defs/AccountingRateaf30/properties/endDate/type",keyword:"type",params:{type:"string"},message:"must be string"}];return false}}}var valid2=_errs8===errors}else{var valid2=true}if(valid2){if(data0.toCurrencyCode!==void 0){const _errs10=errors;if(typeof data0.toCurrencyCode!=="string"){validate12.errors=[{instancePath:instancePath+"/accountingRate/toCurrencyCode",schemaPath:"#/$defs/AccountingRateaf30/properties/toCurrencyCode/type",keyword:"type",params:{type:"string"},message:"must be string"}];return false}var valid2=_errs10===errors}else{var valid2=true}if(valid2){if(data0.encodedKey!==void 0){const _errs12=errors;if(typeof data0.encodedKey!=="string"){validate12.errors=[{instancePath:instancePath+"/accountingRate/encodedKey",schemaPath:"#/$defs/AccountingRateaf30/properties/encodedKey/type",keyword:"type",params:{type:"string"},message:"must be string"}];return false}var valid2=_errs12===errors}else{var valid2=true}if(valid2){if(data0.fromCurrencyCode!==void 0){const _errs14=errors;if(typeof data0.fromCurrencyCode!=="string"){validate12.errors=[{instancePath:instancePath+"/accountingRate/fromCurrencyCode",schemaPath:"#/$defs/AccountingRateaf30/properties/fromCurrencyCode/type",keyword:"type",params:{type:"string"},message:"must be string"}];return false}var valid2=_errs14===errors}else{var valid2=true}if(valid2){if(data0.startDate!==void 0){const _errs16=errors;if(errors===_errs16){if(errors===_errs16){if(!(typeof data0.startDate==="string")){validate12.errors=[{instancePath:instancePath+"/accountingRate/startDate",schemaPath:"#/$defs/AccountingRateaf30/properties/startDate/type",keyword:"type",params:{type:"string"},message:"must be string"}];return false}}}var valid2=_errs16===errors}else{var valid2=true}}}}}}}else{validate12.errors=[{instancePath:instancePath+"/accountingRate",schemaPath:"#/$defs/AccountingRateaf30/type",keyword:"type",params:{type:"object"},message:"must be object"}];return false}}var valid0=_errs2===errors}else{var valid0=true}if(valid0){if(data.amount!==void 0){let data7=data.amount;const _errs18=errors;if(!(typeof data7=="number"&&isFinite(data7))){validate12.errors=[{instancePath:instancePath+"/amount",schemaPath:"#/properties/amount/type",keyword:"type",params:{type:"number"},message:"must be number"}];return false}var valid0=_errs18===errors}else{var valid0=true}if(valid0){if(data.currency!==void 0){let data8=data.currency;const _errs20=errors;const _errs21=errors;if(errors===_errs21){if(data8&&typeof data8=="object"&&!Array.isArray(data8)){if(data8.currencyCode!==void 0){const _errs24=errors;if(typeof data8.currencyCode!=="string"){validate12.errors=[{instancePath:instancePath+"/currency/currencyCode",schemaPath:"#/$defs/Currencyaf30/properties/currencyCode/type",keyword:"type",params:{type:"string"},message:"must be string"}];return false}var valid4=_errs24===errors}else{var valid4=true}if(valid4){if(data8.code!==void 0){const _errs26=errors;let valid5;valid5=false;for(const v0 of schema15.properties.code.enum){if(func0(data8.code,v0)){valid5=true;break}}if(!valid5){validate12.errors=[{instancePath:instancePath+"/currency/code",schemaPath:"#/$defs/Currencyaf30/properties/code/enum",keyword:"enum",params:{allowedValues:schema15.properties.code.enum},message:"must be equal to one of the allowed values"}];return false}var valid4=_errs26===errors}else{var valid4=true}}}else{validate12.errors=[{instancePath:instancePath+"/currency",schemaPath:"#/$defs/Currencyaf30/type",keyword:"type",params:{type:"object"},message:"must be object"}];return false}}var valid0=_errs20===errors}else{var valid0=true}}}}else{validate12.errors=[{instancePath,schemaPath:"#/type",keyword:"type",params:{type:"object"},message:"must be object"}];return false}}validate12.errors=vErrors;return errors===0}const schema16={"type":"object","title":"GLAccountaf30","description":"Represents a general ledger account.","properties":{"migrationEventKey":{"type":"string","title":"migrationEventKey","description":"The data migration event key if the general ledger account was created as a part of a data migration event."},"lastModifiedDate":{"type":"string","title":"lastModifiedDate","description":"The last modification date and time, which is stored as UTC.","format":"date-time"},"glCode":{"type":"string","title":"glCode","description":"The general ledger code used to identify different account types. Also used for grouping and categorizing accounts. For example: an account code of '3201' is considered a subtype of '3200'."},"usage":{"title":"usage","description":"The usage type of the general ledger account. `DETAIL` accounts are used to stores transaction balances. `HEADER` accounts are used to organise and group detail accounts for reporting purposes.","enum":["DETAIL","HEADER"]},"description":{"type":"string","title":"description","description":"A description of the general ledger account."},"creationDate":{"type":"string","title":"creationDate","description":"The creation date for this account, which is stored as UTC.","format":"date-time"},"type":{"title":"type","description":"The general ledger account type.","enum":["ASSET","LIABILITY","EQUITY","INCOME","EXPENSE"]},"allowManualJournalEntries":{"type":"boolean","title":"allowManualJournalEntries","description":"`TRUE` if manual journal entries are allowed, `FALSE` otherwise."},"balance":{"type":"number","title":"balance","description":"The balance of the general ledger account, which is only populated for the GET /glaccounts endpoint."},"name":{"type":"string","title":"name","description":"The name of the general ledger account."},"encodedKey":{"type":"string","title":"encodedKey","description":"The encoded key of the entity, generated, globally unique"},"currency":{"title":"currency","$ref":"#/$defs/Currencyaf30"},"stripTrailingZeros":{"type":"boolean","title":"stripTrailingZeros","description":"`TRUE` if trailing zeros are stripped, `FALSE` otherwise."},"activated":{"type":"boolean","title":"activated","description":"`TRUE` if the account is activated and may be used, `FALSE` otherwise."}},"additionalProperties":true};function validate14(data,{instancePath="",parentData,parentDataProperty,rootData=data}={}){let vErrors=null;let errors=0;if(errors===0){if(data&&typeof data=="object"&&!Array.isArray(data)){if(data.migrationEventKey!==void 0){const _errs2=errors;if(typeof data.migrationEventKey!=="string"){validate14.errors=[{instancePath:instancePath+"/migrationEventKey",schemaPath:"#/properties/migrationEventKey/type",keyword:"type",params:{type:"string"},message:"must be string"}];return false}var valid0=_errs2===errors}else{var valid0=true}if(valid0){if(data.lastModifiedDate!==void 0){const _errs4=errors;if(errors===_errs4){if(errors===_errs4){if(!(typeof data.lastModifiedDate==="string")){validate14.errors=[{instancePath:instancePath+"/lastModifiedDate",schemaPath:"#/properties/lastModifiedDate/type",keyword:"type",params:{type:"string"},message:"must be string"}];return false}}}var valid0=_errs4===errors}else{var valid0=true}if(valid0){if(data.glCode!==void 0){const _errs6=errors;if(typeof data.glCode!=="string"){validate14.errors=[{instancePath:instancePath+"/glCode",schemaPath:"#/properties/glCode/type",keyword:"type",params:{type:"string"},message:"must be string"}];return false}var valid0=_errs6===errors}else{var valid0=true}if(valid0){if(data.usage!==void 0){let data3=data.usage;const _errs8=errors;if(!(data3==="DETAIL"||data3==="HEADER")){validate14.errors=[{instancePath:instancePath+"/usage",schemaPath:"#/properties/usage/enum",keyword:"enum",params:{allowedValues:schema16.properties.usage.enum},message:"must be equal to one of the allowed values"}];return false}var valid0=_errs8===errors}else{var valid0=true}if(valid0){if(data.description!==void 0){const _errs9=errors;if(typeof data.description!=="string"){validate14.errors=[{instancePath:instancePath+"/description",schemaPath:"#/properties/description/type",keyword:"type",params:{type:"string"},message:"must be string"}];return false}var valid0=_errs9===errors}else{var valid0=true}if(valid0){if(data.creationDate!==void 0){const _errs11=errors;if(errors===_errs11){if(errors===_errs11){if(!(typeof data.creationDate==="string")){validate14.errors=[{instancePath:instancePath+"/creationDate",schemaPath:"#/properties/creationDate/type",keyword:"type",params:{type:"string"},message:"must be string"}];return false}}}var valid0=_errs11===errors}else{var valid0=true}if(valid0){if(data.type!==void 0){const _errs13=errors;let valid1;valid1=false;for(const v0 of schema16.properties.type.enum){if(func0(data.type,v0)){valid1=true;break}}if(!valid1){validate14.errors=[{instancePath:instancePath+"/type",schemaPath:"#/properties/type/enum",keyword:"enum",params:{allowedValues:schema16.properties.type.enum},message:"must be equal to one of the allowed values"}];return false}var valid0=_errs13===errors}else{var valid0=true}if(valid0){if(data.allowManualJournalEntries!==void 0){const _errs14=errors;if(typeof data.allowManualJournalEntries!=="boolean"){validate14.errors=[{instancePath:instancePath+"/allowManualJournalEntries",schemaPath:"#/properties/allowManualJournalEntries/type",keyword:"type",params:{type:"boolean"},message:"must be boolean"}];return false}var valid0=_errs14===errors}else{var valid0=true}if(valid0){if(data.balance!==void 0){let data8=data.balance;const _errs16=errors;if(!(typeof data8=="number"&&isFinite(data8))){validate14.errors=[{instancePath:instancePath+"/balance",schemaPath:"#/properties/balance/type",keyword:"type",params:{type:"number"},message:"must be number"}];return false}var valid0=_errs16===errors}else{var valid0=true}if(valid0){if(data.name!==void 0){const _errs18=errors;if(typeof data.name!=="string"){validate14.errors=[{instancePath:instancePath+"/name",schemaPath:"#/properties/name/type",keyword:"type",params:{type:"string"},message:"must be string"}];return false}var valid0=_errs18===errors}else{var valid0=true}if(valid0){if(data.encodedKey!==void 0){const _errs20=errors;if(typeof data.encodedKey!=="string"){validate14.errors=[{instancePath:instancePath+"/encodedKey",schemaPath:"#/properties/encodedKey/type",keyword:"type",params:{type:"string"},message:"must be string"}];return false}var valid0=_errs20===errors}else{var valid0=true}if(valid0){if(data.currency!==void 0){let data11=data.currency;const _errs22=errors;const _errs23=errors;if(errors===_errs23){if(data11&&typeof data11=="object"&&!Array.isArray(data11)){if(data11.currencyCode!==void 0){const _errs26=errors;if(typeof data11.currencyCode!=="string"){validate14.errors=[{instancePath:instancePath+"/currency/currencyCode",schemaPath:"#/$defs/Currencyaf30/properties/currencyCode/type",keyword:"type",params:{type:"string"},message:"must be string"}];return false}var valid3=_errs26===errors}else{var valid3=true}if(valid3){if(data11.code!==void 0){const _errs28=errors;let valid4;valid4=false;for(const v1 of schema15.properties.code.enum){if(func0(data11.code,v1)){valid4=true;break}}if(!valid4){validate14.errors=[{instancePath:instancePath+"/currency/code",schemaPath:"#/$defs/Currencyaf30/properties/code/enum",keyword:"enum",params:{allowedValues:schema15.properties.code.enum},message:"must be equal to one of the allowed values"}];return false}var valid3=_errs28===errors}else{var valid3=true}}}else{validate14.errors=[{instancePath:instancePath+"/currency",schemaPath:"#/$defs/Currencyaf30/type",keyword:"type",params:{type:"object"},message:"must be object"}];return false}}var valid0=_errs22===errors}else{var valid0=true}if(valid0){if(data.stripTrailingZeros!==void 0){const _errs29=errors;if(typeof data.stripTrailingZeros!=="boolean"){validate14.errors=[{instancePath:instancePath+"/stripTrailingZeros",schemaPath:"#/properties/stripTrailingZeros/type",keyword:"type",params:{type:"boolean"},message:"must be boolean"}];return false}var valid0=_errs29===errors}else{var valid0=true}if(valid0){if(data.activated!==void 0){const _errs31=errors;if(typeof data.activated!=="boolean"){validate14.errors=[{instancePath:instancePath+"/activated",schemaPath:"#/properties/activated/type",keyword:"type",params:{type:"boolean"},message:"must be boolean"}];return false}var valid0=_errs31===errors}else{var valid0=true}}}}}}}}}}}}}}}else{validate14.errors=[{instancePath,schemaPath:"#/type",keyword:"type",params:{type:"object"},message:"must be object"}];return false}}validate14.errors=vErrors;return errors===0}function validate11(data,{instancePath="",parentData,parentDataProperty,rootData=data}={}){let vErrors=null;let errors=0;if(errors===0){if(data&&typeof data=="object"&&!Array.isArray(data)){if(data.amount!==void 0){let data0=data.amount;const _errs2=errors;if(!(typeof data0=="number"&&isFinite(data0))){validate11.errors=[{instancePath:instancePath+"/amount",schemaPath:"#/properties/amount/type",keyword:"type",params:{type:"number"},message:"must be number"}];return false}var valid0=_errs2===errors}else{var valid0=true}if(valid0){if(data.notes!==void 0){const _errs4=errors;if(typeof data.notes!=="string"){validate11.errors=[{instancePath:instancePath+"/notes",schemaPath:"#/properties/notes/type",keyword:"type",params:{type:"string"},message:"must be string"}];return false}var valid0=_errs4===errors}else{var valid0=true}if(valid0){if(data.creationDate!==void 0){const _errs6=errors;if(errors===_errs6){if(errors===_errs6){if(!(typeof data.creationDate==="string")){validate11.errors=[{instancePath:instancePath+"/creationDate",schemaPath:"#/properties/creationDate/type",keyword:"type",params:{type:"string"},message:"must be string"}];return false}}}var valid0=_errs6===errors}else{var valid0=true}if(valid0){if(data.productKey!==void 0){const _errs8=errors;if(typeof data.productKey!=="string"){validate11.errors=[{instancePath:instancePath+"/productKey",schemaPath:"#/properties/productKey/type",keyword:"type",params:{type:"string"},message:"must be string"}];return false}var valid0=_errs8===errors}else{var valid0=true}if(valid0){if(data.type!==void 0){let data4=data.type;const _errs10=errors;if(!(data4==="DEBIT"||data4==="CREDIT")){validate11.errors=[{instancePath:instancePath+"/type",schemaPath:"#/properties/type/enum",keyword:"enum",params:{allowedValues:schema12.properties.type.enum},message:"must be equal to one of the allowed values"}];return false}var valid0=_errs10===errors}else{var valid0=true}if(valid0){if(data.assignedBranchKey!==void 0){const _errs11=errors;if(typeof data.assignedBranchKey!=="string"){validate11.errors=[{instancePath:instancePath+"/assignedBranchKey",schemaPath:"#/properties/assignedBranchKey/type",keyword:"type",params:{type:"string"},message:"must be string"}];return false}var valid0=_errs11===errors}else{var valid0=true}if(valid0){if(data.transactionId!==void 0){const _errs13=errors;if(typeof data.transactionId!=="string"){validate11.errors=[{instancePath:instancePath+"/transactionId",schemaPath:"#/properties/transactionId/type",keyword:"type",params:{type:"string"},message:"must be string"}];return false}var valid0=_errs13===errors}else{var valid0=true}if(valid0){if(data.userKey!==void 0){const _errs15=errors;if(typeof data.userKey!=="string"){validate11.errors=[{instancePath:instancePath+"/userKey",schemaPath:"#/properties/userKey/type",keyword:"type",params:{type:"string"},message:"must be string"}];return false}var valid0=_errs15===errors}else{var valid0=true}if(valid0){if(data.entryID!==void 0){let data8=data.entryID;const _errs17=errors;if(!(typeof data8=="number"&&(!(data8%1)&&!isNaN(data8))&&isFinite(data8))){validate11.errors=[{instancePath:instancePath+"/entryID",schemaPath:"#/properties/entryID/type",keyword:"type",params:{type:"integer"},message:"must be integer"}];return false}var valid0=_errs17===errors}else{var valid0=true}if(valid0){if(data.accountKey!==void 0){const _errs19=errors;if(typeof data.accountKey!=="string"){validate11.errors=[{instancePath:instancePath+"/accountKey",schemaPath:"#/properties/accountKey/type",keyword:"type",params:{type:"string"},message:"must be string"}];return false}var valid0=_errs19===errors}else{var valid0=true}if(valid0){if(data.foreignAmount!==void 0){const _errs21=errors;if(!validate12(data.foreignAmount,{instancePath:instancePath+"/foreignAmount",parentData:data,parentDataProperty:"foreignAmount",rootData})){vErrors=vErrors===null?validate12.errors:vErrors.concat(validate12.errors);errors=vErrors.length}var valid0=_errs21===errors}else{var valid0=true}if(valid0){if(data.reversalEntryKey!==void 0){const _errs22=errors;if(typeof data.reversalEntryKey!=="string"){validate11.errors=[{instancePath:instancePath+"/reversalEntryKey",schemaPath:"#/properties/reversalEntryKey/type",keyword:"type",params:{type:"string"},message:"must be string"}];return false}var valid0=_errs22===errors}else{var valid0=true}if(valid0){if(data.encodedKey!==void 0){const _errs24=errors;if(typeof data.encodedKey!=="string"){validate11.errors=[{instancePath:instancePath+"/encodedKey",schemaPath:"#/properties/encodedKey/type",keyword:"type",params:{type:"string"},message:"must be string"}];return false}var valid0=_errs24===errors}else{var valid0=true}if(valid0){if(data.bookingDate!==void 0){const _errs26=errors;if(errors===_errs26){if(errors===_errs26){if(!(typeof data.bookingDate==="string")){validate11.errors=[{instancePath:instancePath+"/bookingDate",schemaPath:"#/properties/bookingDate/type",keyword:"type",params:{type:"string"},message:"must be string"}];return false}}}var valid0=_errs26===errors}else{var valid0=true}if(valid0){if(data.glAccount!==void 0){const _errs28=errors;if(!validate14(data.glAccount,{instancePath:instancePath+"/glAccount",parentData:data,parentDataProperty:"glAccount",rootData})){vErrors=vErrors===null?validate14.errors:vErrors.concat(validate14.errors);errors=vErrors.length}var valid0=_errs28===errors}else{var valid0=true}if(valid0){if(data.productType!==void 0){let data15=data.productType;const _errs29=errors;if(!(data15==="LOAN"||data15==="SAVINGS")){validate11.errors=[{instancePath:instancePath+"/productType",schemaPath:"#/properties/productType/enum",keyword:"enum",params:{allowedValues:schema12.properties.productType.enum},message:"must be equal to one of the allowed values"}];return false}var valid0=_errs29===errors}else{var valid0=true}}}}}}}}}}}}}}}}}else{validate11.errors=[{instancePath,schemaPath:"#/type",keyword:"type",params:{type:"object"},message:"must be object"}];return false}}validate11.errors=vErrors;return errors===0}function validate10(data,{instancePath="",parentData,parentDataProperty,rootData=data}={}){let vErrors=null;let errors=0;if(errors===0){if(Array.isArray(data)){var valid0=true;const len0=data.length;for(let i0=0;i0<len0;i0++){const _errs1=errors;if(!validate11(data[i0],{instancePath:instancePath+"/"+i0,parentData:data,parentDataProperty:i0,rootData})){vErrors=vErrors===null?validate11.errors:vErrors.concat(validate11.errors);errors=vErrors.length}var valid0=_errs1===errors;if(!valid0){break}}}else{validate10.errors=[{instancePath,schemaPath:"#/type",keyword:"type",params:{type:"array"},message:"must be array"}];return false}}validate10.errors=vErrors;return errors===0};validate.schema=schema11;export{stdin_default as default,validate};
