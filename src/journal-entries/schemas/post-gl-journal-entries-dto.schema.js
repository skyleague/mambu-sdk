/* eslint-disable */
// @ts-nocheck
/**
 * Generated by Ajv https://ajv.js.org/guide/managing-schemas.html#standalone-validation-code
 */
import {createRequire} from 'module';const require = createRequire(import.meta.url);"use strict";
/** @type {unknown} */
export const validate = validate10;export default validate10;const schema11 = {"$schema":"http://json-schema.org/draft-07/schema#","title":"PostGLJournalEntriesDTO","type":"object","description":"Represents the information to create general ledger journal entries.","properties":{"branchId":{"type":"string","description":"The ID of the assigned branch for the journal entries."},"credits":{"type":"array","description":"The list of general ledger accounts to be credited with corresponding amounts.","items":{"$ref":"#/$defs/GLAccountAmount"}},"date":{"type":"string","description":"The date and time when the general ledger journal entries were recorded, also known as the booking date.","format":"date-time"},"debits":{"type":"array","description":"The list of general ledger accounts to be debited with corresponding amounts.","items":{"$ref":"#/$defs/GLAccountAmount"}},"notes":{"type":"string","description":"The notes entered when the journal entry was posted."},"transactionId":{"type":"string","description":"A non-unique trasanction ID. This will be autogenerated if an ID is not provided."}},"required":["date"],"additionalProperties":true,"$defs":{"GLAccountAmount":{"type":"object","description":"Represents the general ledger account and amount used in a journal entry record.","properties":{"amount":{"type":"number","description":"The amount which was debited or credited."},"glAccount":{"type":"string","description":"Represents the general ledger account code of the the general ledger account that was debited or credited."}},"additionalProperties":true}}};const schema12 = {"type":"object","description":"Represents the general ledger account and amount used in a journal entry record.","properties":{"amount":{"type":"number","description":"The amount which was debited or credited."},"glAccount":{"type":"string","description":"Represents the general ledger account code of the the general ledger account that was debited or credited."}},"additionalProperties":true};const formats0 = require("ajv-formats/dist/formats").fullFormats["date-time"];function validate10(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){let vErrors = null;let errors = 0;if(errors === 0){if(data && typeof data == "object" && !Array.isArray(data)){let missing0;if((data.date === undefined) && (missing0 = "date")){validate10.errors = [{instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];return false;}else {if(data.branchId !== undefined){const _errs2 = errors;if(typeof data.branchId !== "string"){validate10.errors = [{instancePath:instancePath+"/branchId",schemaPath:"#/properties/branchId/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid0 = _errs2 === errors;}else {var valid0 = true;}if(valid0){if(data.credits !== undefined){let data1 = data.credits;const _errs4 = errors;if(errors === _errs4){if(Array.isArray(data1)){var valid1 = true;const len0 = data1.length;for(let i0=0; i0<len0; i0++){let data2 = data1[i0];const _errs6 = errors;const _errs7 = errors;if(errors === _errs7){if(data2 && typeof data2 == "object" && !Array.isArray(data2)){if(data2.amount !== undefined){let data3 = data2.amount;const _errs10 = errors;if(!((typeof data3 == "number") && (isFinite(data3)))){validate10.errors = [{instancePath:instancePath+"/credits/" + i0+"/amount",schemaPath:"#/$defs/GLAccountAmount/properties/amount/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid3 = _errs10 === errors;}else {var valid3 = true;}if(valid3){if(data2.glAccount !== undefined){const _errs12 = errors;if(typeof data2.glAccount !== "string"){validate10.errors = [{instancePath:instancePath+"/credits/" + i0+"/glAccount",schemaPath:"#/$defs/GLAccountAmount/properties/glAccount/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid3 = _errs12 === errors;}else {var valid3 = true;}}}else {validate10.errors = [{instancePath:instancePath+"/credits/" + i0,schemaPath:"#/$defs/GLAccountAmount/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}var valid1 = _errs6 === errors;if(!valid1){break;}}}else {validate10.errors = [{instancePath:instancePath+"/credits",schemaPath:"#/properties/credits/type",keyword:"type",params:{type: "array"},message:"must be array"}];return false;}}var valid0 = _errs4 === errors;}else {var valid0 = true;}if(valid0){if(data.date !== undefined){let data5 = data.date;const _errs14 = errors;if(errors === _errs14){if(errors === _errs14){if(typeof data5 === "string"){if(!(formats0.validate(data5))){validate10.errors = [{instancePath:instancePath+"/date",schemaPath:"#/properties/date/format",keyword:"format",params:{format: "date-time"},message:"must match format \""+"date-time"+"\""}];return false;}}else {validate10.errors = [{instancePath:instancePath+"/date",schemaPath:"#/properties/date/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}}var valid0 = _errs14 === errors;}else {var valid0 = true;}if(valid0){if(data.debits !== undefined){let data6 = data.debits;const _errs16 = errors;if(errors === _errs16){if(Array.isArray(data6)){var valid4 = true;const len1 = data6.length;for(let i1=0; i1<len1; i1++){let data7 = data6[i1];const _errs18 = errors;const _errs19 = errors;if(errors === _errs19){if(data7 && typeof data7 == "object" && !Array.isArray(data7)){if(data7.amount !== undefined){let data8 = data7.amount;const _errs22 = errors;if(!((typeof data8 == "number") && (isFinite(data8)))){validate10.errors = [{instancePath:instancePath+"/debits/" + i1+"/amount",schemaPath:"#/$defs/GLAccountAmount/properties/amount/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid6 = _errs22 === errors;}else {var valid6 = true;}if(valid6){if(data7.glAccount !== undefined){const _errs24 = errors;if(typeof data7.glAccount !== "string"){validate10.errors = [{instancePath:instancePath+"/debits/" + i1+"/glAccount",schemaPath:"#/$defs/GLAccountAmount/properties/glAccount/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid6 = _errs24 === errors;}else {var valid6 = true;}}}else {validate10.errors = [{instancePath:instancePath+"/debits/" + i1,schemaPath:"#/$defs/GLAccountAmount/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}var valid4 = _errs18 === errors;if(!valid4){break;}}}else {validate10.errors = [{instancePath:instancePath+"/debits",schemaPath:"#/properties/debits/type",keyword:"type",params:{type: "array"},message:"must be array"}];return false;}}var valid0 = _errs16 === errors;}else {var valid0 = true;}if(valid0){if(data.notes !== undefined){const _errs26 = errors;if(typeof data.notes !== "string"){validate10.errors = [{instancePath:instancePath+"/notes",schemaPath:"#/properties/notes/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid0 = _errs26 === errors;}else {var valid0 = true;}if(valid0){if(data.transactionId !== undefined){const _errs28 = errors;if(typeof data.transactionId !== "string"){validate10.errors = [{instancePath:instancePath+"/transactionId",schemaPath:"#/properties/transactionId/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid0 = _errs28 === errors;}else {var valid0 = true;}}}}}}}}else {validate10.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}validate10.errors = vErrors;return errors === 0;};validate.schema=schema11;