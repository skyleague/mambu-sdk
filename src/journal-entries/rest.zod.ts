/**
 * Generated by @skyleague/therefore
 * Do not manually touch this
 */
/* eslint-disable */

import { z } from 'zod'

export const Currency = z
    .object({
        code: z
            .enum([
                'AED',
                'AFN',
                'ALL',
                'AMD',
                'ANG',
                'AOA',
                'ARS',
                'AUD',
                'AWG',
                'AZN',
                'BAM',
                'BBD',
                'BDT',
                'BGN',
                'BHD',
                'BIF',
                'BMD',
                'BND',
                'BOB',
                'BOV',
                'BRL',
                'BSD',
                'BTN',
                'BWP',
                'BYR',
                'BYN',
                'BZD',
                'CAD',
                'CDF',
                'CHE',
                'CHF',
                'CHW',
                'CLF',
                'CLP',
                'CNY',
                'COP',
                'COU',
                'CRC',
                'CUC',
                'CUP',
                'CVE',
                'CZK',
                'DJF',
                'DKK',
                'DOP',
                'DZD',
                'EGP',
                'ERN',
                'ETB',
                'EUR',
                'FJD',
                'FKP',
                'GBP',
                'GEL',
                'GHS',
                'GIP',
                'GMD',
                'GNF',
                'GTQ',
                'GYD',
                'HKD',
                'HNL',
                'HRK',
                'HTG',
                'HUF',
                'IDR',
                'ILS',
                'INR',
                'IQD',
                'IRR',
                'ISK',
                'JMD',
                'JOD',
                'JPY',
                'KES',
                'KGS',
                'KHR',
                'KMF',
                'KPW',
                'KRW',
                'KWD',
                'KYD',
                'KZT',
                'LAK',
                'LBP',
                'LKR',
                'LRD',
                'LSL',
                'LTL',
                'LVL',
                'LYD',
                'MAD',
                'MDL',
                'MGA',
                'MKD',
                'MMK',
                'MNT',
                'MOP',
                'MRO',
                'MRU',
                'MUR',
                'MVR',
                'MWK',
                'MXN',
                'MXV',
                'MYR',
                'MZN',
                'NAD',
                'NGN',
                'NIO',
                'NOK',
                'NPR',
                'NZD',
                'OMR',
                'PAB',
                'PEN',
                'PGK',
                'PHP',
                'PKR',
                'PLN',
                'PYG',
                'QAR',
                'RON',
                'RSD',
                'RUB',
                'RWF',
                'SAR',
                'SBD',
                'SCR',
                'SDG',
                'SEK',
                'SGD',
                'SHP',
                'SLL',
                'SOS',
                'SRD',
                'STD',
                'STN',
                'SVC',
                'SYP',
                'SZL',
                'THB',
                'TJS',
                'TMT',
                'TND',
                'TOP',
                'TRY',
                'TTD',
                'TWD',
                'TZS',
                'UAH',
                'UGX',
                'USD',
                'USN',
                'UYI',
                'UYU',
                'UYW',
                'UZS',
                'VED',
                'VEF',
                'VES',
                'VND',
                'VUV',
                'WST',
                'XAG',
                'XAU',
                'XAF',
                'XBA',
                'XBB',
                'XBC',
                'XBD',
                'XCD',
                'XDR',
                'XOF',
                'XPD',
                'XPF',
                'XPT',
                'XSU',
                'XTS',
                'XUA',
                'XXX',
                'YER',
                'ZAR',
                'ZIG',
                'ZMK',
                'ZWL',
                'ZMW',
                'SSP',
                'NON_FIAT',
            ])
            .describe('Fiat(ISO-4217) currency code or NON_FIAT for non fiat currencies.')
            .optional(),
        currencyCode: z.string().describe('Currency code for NON_FIAT currency.').optional(),
    })
    .describe('Represents a currency eg. USD, EUR.')

export type Currency = z.infer<typeof Currency>

export const AccountingRate = z
    .object({
        encodedKey: z.string().describe('The encoded key of the accounting rate, auto generated, unique').optional(),
        endDate: z.string().datetime({ offset: true }).describe('Rate validity end date').optional(),
        fromCurrencyCode: z.string().describe('Organisation currency code').optional(),
        rate: z.number().describe('Value of rate to be used for accounting conversions').optional(),
        startDate: z.string().datetime({ offset: true }).describe('Rate validity start date').optional(),
        toCurrencyCode: z.string().describe('Foreign currency code').optional(),
    })
    .describe('Represents the conversion rate used in accounting to convert amounts from one currency to organisation currency')

export type AccountingRate = z.infer<typeof AccountingRate>

export const GLAccount = z
    .object({
        activated: z.boolean().describe('`TRUE` if the account is activated and may be used, `FALSE` otherwise.').optional(),
        allowManualJournalEntries: z
            .boolean()
            .describe('`TRUE` if manual journal entries are allowed, `FALSE` otherwise.')
            .optional(),
        balance: z
            .number()
            .describe('The balance of the general ledger account, which is only populated for the GET /glaccounts endpoint.')
            .optional(),
        creationDate: z
            .string()
            .datetime({ offset: true })
            .describe('The creation date for this account, which is stored as UTC.')
            .optional(),
        currency: Currency.optional(),
        description: z.string().describe('A description of the general ledger account.').optional(),
        encodedKey: z.string().describe('The encoded key of the entity, generated, globally unique').optional(),
        glCode: z
            .string()
            .describe(
                `The general ledger code used to identify different account types. Also used for grouping and categorizing accounts. For example: an account code of '3201' is considered a subtype of '3200'.`,
            )
            .optional(),
        lastModifiedDate: z
            .string()
            .datetime({ offset: true })
            .describe('The last modification date and time, which is stored as UTC.')
            .optional(),
        migrationEventKey: z
            .string()
            .describe(
                'The data migration event key if the general ledger account was created as a part of a data migration event.',
            )
            .optional(),
        name: z.string().describe('The name of the general ledger account.').optional(),
        stripTrailingZeros: z.boolean().describe('`TRUE` if trailing zeros are stripped, `FALSE` otherwise.').optional(),
        type: z
            .enum(['ASSET', 'LIABILITY', 'EQUITY', 'INCOME', 'EXPENSE'])
            .describe('The general ledger account type.')
            .optional(),
        usage: z
            .enum(['DETAIL', 'HEADER'])
            .describe(
                'The usage type of the general ledger account. `DETAIL` accounts are used to stores transaction balances. `HEADER` accounts are used to organise and group detail accounts for reporting purposes.',
            )
            .optional(),
    })
    .describe('Represents a general ledger account.')

export type GLAccount = z.infer<typeof GLAccount>

export const GLJournalEntryForeignAmount = z
    .object({
        accountingRate: AccountingRate.optional(),
        amount: z.number().describe('The amount of an accounting entry in foreign currency.').optional(),
        currency: Currency.optional(),
    })
    .describe('Represents the details of the general ledger journal entry amount posted in foreign currency.')

export type GLJournalEntryForeignAmount = z.infer<typeof GLJournalEntryForeignAmount>

export const GLJournalEntry = z
    .object({
        accountKey: z
            .string()
            .describe(
                'The account associated with this journal entry. `Null` if the journal entry is not associated to any account.',
            )
            .optional(),
        amount: z.number().describe(`The amount which was debited or credited in the organization's currency.`).optional(),
        assignedBranchKey: z
            .string()
            .describe('The key of the assigned branch for this general ledger journal entry.')
            .optional(),
        bookingDate: z
            .string()
            .datetime({ offset: true })
            .describe('The date and time when the general ledger journal entry was recorded.')
            .optional(),
        creationDate: z
            .string()
            .datetime({ offset: true })
            .describe('The creation date of the general ledger journal entry.')
            .optional(),
        encodedKey: z.string().describe('The encoded key of the entity, generated, globally unique').optional(),
        entryID: z.number().int().describe('The ID of the general ledger journal entry.').optional(),
        foreignAmount: GLJournalEntryForeignAmount.optional(),
        glAccount: GLAccount.optional(),
        notes: z.string().describe('Optional notes entered by the user when they performed the journal entry.').optional(),
        productKey: z
            .string()
            .describe(
                'The product associated with this journal entry. `Null` if the journal entry is not associated with any product.',
            )
            .optional(),
        productType: z
            .enum(['LOAN', 'SAVINGS'])
            .describe(
                'The product type that is referenced by the account key. `Null` if the journal entry is not associated to any product.',
            )
            .optional(),
        reversalEntryKey: z
            .string()
            .describe(
                `The entry key of the general ledger journal entry that reverses this general ledger journal entry. Null if the general ledger journal entry isn't reversed.`,
            )
            .optional(),
        transactionId: z.string().describe('The transation ID, which is not unique.').optional(),
        type: z
            .enum(['DEBIT', 'CREDIT'])
            .describe('The general ledger journal entry type, which may be debit or credit.')
            .optional(),
        userKey: z.string().describe('The encoded key of the user that performed the transaction.').optional(),
    })
    .describe('Represents a general ledger journal entry.')

export type GLJournalEntry = z.infer<typeof GLJournalEntry>

export const RestError = z.object({
    errorCode: z.number().int().optional(),
    errorReason: z.string().optional(),
    errorSource: z.string().optional(),
})

export type RestError = z.infer<typeof RestError>

export const GLJournalEntrySortingCriteria = z
    .object({
        field: z
            .enum([
                'encodedKey',
                'entryId',
                'bookingDate',
                'creationDate',
                'transactionId',
                'glAccountName',
                'glAccountId',
                'glAccountType',
                'debit',
                'credit',
                'foreignDebit',
                'foreignCredit',
                'loanAccountId',
                'userName',
                'user',
                'branchName',
                'foreignCurrency',
            ])
            .describe(
                'The field that can be used to sort the selection. These fields can be from the enumerated values or you can specify a custom field using the format [customFieldSetId].[customFieldId].',
            ),
        order: z.enum(['ASC', 'DESC']).describe('The sorting order: `ASC` or `DESC`. The default order is `DESC`.').optional(),
    })
    .describe('Represents the sorting criteria used for general ledger journal entries.')

export type GLJournalEntrySortingCriteria = z.infer<typeof GLJournalEntrySortingCriteria>

export const GLJournalEntryFilterCriteria = z
    .object({
        field: z.union([
            z
                .enum([
                    'productType',
                    'glAccountKey',
                    'userKey',
                    'encodedKey',
                    'entryId',
                    'bookingDate',
                    'creationDate',
                    'transactionId',
                    'glAccountId',
                    'glAccountType',
                    'source',
                    'debit',
                    'credit',
                    'foreignDebit',
                    'foreignCredit',
                    'loanAccountId',
                    'foreignCurrencyCode',
                    'assignedBranchKey',
                ])
                .describe(
                    'The fields used to search. These fields can be from the enumerated values or you can specify a custom field using the format [customFieldSetId].[customFieldId].',
                ),
            z.string(),
        ]),
        operator: z
            .enum([
                'EQUALS',
                'EQUALS_CASE_SENSITIVE',
                'DIFFERENT_THAN',
                'MORE_THAN',
                'LESS_THAN',
                'BETWEEN',
                'ON',
                'AFTER',
                'AFTER_INCLUSIVE',
                'BEFORE',
                'BEFORE_INCLUSIVE',
                'STARTS_WITH',
                'STARTS_WITH_CASE_SENSITIVE',
                'IN',
                'TODAY',
                'THIS_WEEK',
                'THIS_MONTH',
                'THIS_YEAR',
                'LAST_DAYS',
                'EMPTY',
                'NOT_EMPTY',
            ])
            .describe(
                '| **Operator**                | **Affected values**  | **Available for**                                                    |\\n|---------------               |----------------------|----------------------------------------------------------------------|\\n| EQUALS                       | ONE_VALUE            | BIG_DECIMAL,BOOLEAN,LONG,MONEY,NUMBER,PERCENT,STRING,ENUM,KEY        |\\n| EQUALS_CASE_SENSITIVE        | ONE_VALUE            | BIG_DECIMAL,BOOLEAN,LONG,MONEY,NUMBER,PERCENT,STRING,ENUM,KEY 		  |\\n| MORE_THAN                    | ONE_VALUE            | BIG_DECIMAL,NUMBER,MONEY                                             |\\n| LESS_THAN                    | ONE_VALUE            | BIG_DECIMAL,NUMBER,MONEY                                             |\\n| BETWEEN                      | TWO_VALUES           | BIG_DECIMAL,NUMBER,MONEY,DATE,DATE_TIME                              |\\n| ON                           | ONE_VALUE            | DATE,DATE_TIME                                                       |\\n| AFTER                        | ONE_VALUE            | DATE,DATE_TIME                                                       |\\n| BEFORE                       | ONE_VALUE            | DATE,DATE_TIME                                                       |\\n| BEFORE_INCLUSIVE             | ONE_VALUE            | DATE,DATE_TIME                                                       |\\n| STARTS_WITH                  | ONE_VALUE            | STRING                                                               |\\n| STARTS_WITH_CASE_SENSITIVE   | ONE_VALUE            | STRING                                                               |\\n| IN                           | LIST                 | ENUM,KEY                                                             |\\n| TODAY                        | NO_VALUE             | DATE,DATE_TIME                                                       |\\n| THIS_WEEK                    | NO_VALUE             | DATE,DATE_TIME                                                       |\\n| THIS_MONTH                   | NO_VALUE             | DATE,DATE_TIME                                                       |\\n| THIS_YEAR                    | NO_VALUE             | DATE,DATE_TIME                                                       |\\n| LAST_DAYS                    | ONE_VALUE            | NUMBER                                                               |\\n| EMPTY                        | NO_VALUE             | BIG_DECIMAL,LONG,MONEY,NUMBER,PERCENT,STRING,ENUM,KEY,DATE,DATE_TIME |\\n| NOT_EMPTY                    | NO_VALUE             | BIG_DECIMAL,LONG,MONEY,NUMBER,PERCENT,STRING,ENUM,KEY,DATE,DATE_TIME |',
            ),
        secondValue: z
            .string()
            .describe('The second value to match the searching criteria, when the `BETWEEN` operator is used.')
            .optional(),
        value: z.string().describe('The value to match the searching criteria.').optional(),
        values: z.string().array().describe('List of values when the `IN` operator is used.').optional(),
    })
    .describe('Represents the filtering criteria used for searching general ledger journal entries.')

export type GLJournalEntryFilterCriteria = z.infer<typeof GLJournalEntryFilterCriteria>

export const GLAccountAmount = z
    .object({
        amount: z.number().describe('The amount which was debited or credited.').optional(),
        glAccount: z
            .string()
            .describe(
                'Represents the general ledger account code of the the general ledger account that was debited or credited.',
            )
            .optional(),
    })
    .describe('Represents the general ledger account and amount used in a journal entry record.')

export type GLAccountAmount = z.infer<typeof GLAccountAmount>

export const CreateResponse = GLJournalEntry.array()

export type CreateResponse = z.infer<typeof CreateResponse>

export const ErrorResponse = z.object({
    errors: RestError.array().optional(),
})

export type ErrorResponse = z.infer<typeof ErrorResponse>

export const GetAllResponse = GLJournalEntry.array()

export type GetAllResponse = z.infer<typeof GetAllResponse>

export const GLJournalEntrySearchCriteria = z
    .object({
        filterCriteria: GLJournalEntryFilterCriteria.array().describe('The list of filtering criteria.').optional(),
        sortingCriteria: GLJournalEntrySortingCriteria.optional(),
    })
    .describe('Represents the list of filtering criteria and the sorting criteria when searching general ledger journal entries.')

export type GLJournalEntrySearchCriteria = z.infer<typeof GLJournalEntrySearchCriteria>

export const PostGLJournalEntriesDTO = z
    .object({
        branchId: z.string().describe('The ID of the assigned branch for the journal entries.').optional(),
        credits: GLAccountAmount.array()
            .describe('The list of general ledger accounts to be credited with corresponding amounts.')
            .optional(),
        date: z
            .string()
            .datetime({ offset: true })
            .describe('The date and time when the general ledger journal entries were recorded, also known as the booking date.'),
        debits: GLAccountAmount.array()
            .describe('The list of general ledger accounts to be debited with corresponding amounts.')
            .optional(),
        notes: z.string().describe('The notes entered when the journal entry was posted.').optional(),
        transactionId: z
            .string()
            .describe('A non-unique trasanction ID. This will be autogenerated if an ID is not provided.')
            .optional(),
    })
    .describe('Represents the information to create general ledger journal entries.')

export type PostGLJournalEntriesDTO = z.infer<typeof PostGLJournalEntriesDTO>

export const SearchResponse = GLJournalEntry.array()

export type SearchResponse = z.infer<typeof SearchResponse>
