/**
 * Generated by @skyleague/therefore@v1.0.0-local
 * Do not manually touch this
 */
/* eslint-disable */

import type { DefinedError, ValidateFunction } from 'ajv'

import { validate as CreateResponseValidator } from './schemas/create-response.schema.js'
import { validate as ErrorResponseValidator } from './schemas/error-response.schema.js'
import { validate as GetAllResponseValidator } from './schemas/get-all-response.schema.js'
import { validate as GLJournalEntrySearchCriteriaValidator } from './schemas/gl-journal-entry-search-criteria.schema.js'
import { validate as PostGLJournalEntriesDTOValidator } from './schemas/post-gl-journal-entries-dto.schema.js'
import { validate as SearchResponseValidator } from './schemas/search-response.schema.js'

/**
 * Represents the conversion rate used in accounting to convert amounts from one currency to organisation currency
 */
export interface AccountingRate {
    /**
     * The encoded key of the accounting rate, auto generated, unique
     */
    encodedKey?: string | undefined
    /**
     * Rate validity end date
     */
    endDate?: string | undefined
    /**
     * Organisation currency code
     */
    fromCurrencyCode?: string | undefined
    /**
     * Value of rate to be used for accounting conversions
     */
    rate?: number | undefined
    /**
     * Rate validity start date
     */
    startDate?: string | undefined
    /**
     * Foreign currency code
     */
    toCurrencyCode?: string | undefined
}

export type CreateResponse = GLJournalEntry[]

export const CreateResponse = {
    validate: CreateResponseValidator as ValidateFunction<CreateResponse>,
    get schema() {
        return CreateResponse.validate.schema
    },
    get errors() {
        return CreateResponse.validate.errors ?? undefined
    },
    is: (o: unknown): o is CreateResponse => CreateResponse.validate(o) === true,
    parse: (o: unknown): { right: CreateResponse } | { left: DefinedError[] } => {
        if (CreateResponse.is(o)) {
            return { right: o }
        }
        return { left: (CreateResponse.errors ?? []) as DefinedError[] }
    },
} as const

/**
 * Represents a currency eg. USD, EUR.
 */
export interface Currency {
    /**
     * Fiat(ISO-4217) currency code or NON_FIAT for non fiat currencies.
     */
    code?:
        | 'AED'
        | 'AFN'
        | 'ALL'
        | 'AMD'
        | 'ANG'
        | 'AOA'
        | 'ARS'
        | 'AUD'
        | 'AWG'
        | 'AZN'
        | 'BAM'
        | 'BBD'
        | 'BDT'
        | 'BGN'
        | 'BHD'
        | 'BIF'
        | 'BMD'
        | 'BND'
        | 'BOB'
        | 'BOV'
        | 'BRL'
        | 'BSD'
        | 'BTN'
        | 'BWP'
        | 'BYR'
        | 'BYN'
        | 'BZD'
        | 'CAD'
        | 'CDF'
        | 'CHE'
        | 'CHF'
        | 'CHW'
        | 'CLF'
        | 'CLP'
        | 'CNY'
        | 'COP'
        | 'COU'
        | 'CRC'
        | 'CUC'
        | 'CUP'
        | 'CVE'
        | 'CZK'
        | 'DJF'
        | 'DKK'
        | 'DOP'
        | 'DZD'
        | 'EGP'
        | 'ERN'
        | 'ETB'
        | 'EUR'
        | 'FJD'
        | 'FKP'
        | 'GBP'
        | 'GEL'
        | 'GHS'
        | 'GIP'
        | 'GMD'
        | 'GNF'
        | 'GTQ'
        | 'GYD'
        | 'HKD'
        | 'HNL'
        | 'HRK'
        | 'HTG'
        | 'HUF'
        | 'IDR'
        | 'ILS'
        | 'INR'
        | 'IQD'
        | 'IRR'
        | 'ISK'
        | 'JMD'
        | 'JOD'
        | 'JPY'
        | 'KES'
        | 'KGS'
        | 'KHR'
        | 'KMF'
        | 'KPW'
        | 'KRW'
        | 'KWD'
        | 'KYD'
        | 'KZT'
        | 'LAK'
        | 'LBP'
        | 'LKR'
        | 'LRD'
        | 'LSL'
        | 'LTL'
        | 'LVL'
        | 'LYD'
        | 'MAD'
        | 'MDL'
        | 'MGA'
        | 'MKD'
        | 'MMK'
        | 'MNT'
        | 'MOP'
        | 'MRO'
        | 'MRU'
        | 'MUR'
        | 'MVR'
        | 'MWK'
        | 'MXN'
        | 'MXV'
        | 'MYR'
        | 'MZN'
        | 'NAD'
        | 'NGN'
        | 'NIO'
        | 'NOK'
        | 'NPR'
        | 'NZD'
        | 'OMR'
        | 'PAB'
        | 'PEN'
        | 'PGK'
        | 'PHP'
        | 'PKR'
        | 'PLN'
        | 'PYG'
        | 'QAR'
        | 'RON'
        | 'RSD'
        | 'RUB'
        | 'RWF'
        | 'SAR'
        | 'SBD'
        | 'SCR'
        | 'SDG'
        | 'SEK'
        | 'SGD'
        | 'SHP'
        | 'SLL'
        | 'SOS'
        | 'SRD'
        | 'STD'
        | 'STN'
        | 'SVC'
        | 'SYP'
        | 'SZL'
        | 'THB'
        | 'TJS'
        | 'TMT'
        | 'TND'
        | 'TOP'
        | 'TRY'
        | 'TTD'
        | 'TWD'
        | 'TZS'
        | 'UAH'
        | 'UGX'
        | 'USD'
        | 'USN'
        | 'UYI'
        | 'UYU'
        | 'UYW'
        | 'UZS'
        | 'VED'
        | 'VEF'
        | 'VES'
        | 'VND'
        | 'VUV'
        | 'WST'
        | 'XAG'
        | 'XAU'
        | 'XAF'
        | 'XBA'
        | 'XBB'
        | 'XBC'
        | 'XBD'
        | 'XCD'
        | 'XDR'
        | 'XOF'
        | 'XPD'
        | 'XPF'
        | 'XPT'
        | 'XSU'
        | 'XTS'
        | 'XUA'
        | 'XXX'
        | 'YER'
        | 'ZAR'
        | 'ZIG'
        | 'ZMK'
        | 'ZWL'
        | 'ZMW'
        | 'SSP'
        | 'NON_FIAT'
        | undefined
    /**
     * Currency code for NON_FIAT currency.
     */
    currencyCode?: string | undefined
}

export interface ErrorResponse {
    errors?: RestError[] | undefined
}

export const ErrorResponse = {
    validate: ErrorResponseValidator as ValidateFunction<ErrorResponse>,
    get schema() {
        return ErrorResponse.validate.schema
    },
    get errors() {
        return ErrorResponse.validate.errors ?? undefined
    },
    is: (o: unknown): o is ErrorResponse => ErrorResponse.validate(o) === true,
    parse: (o: unknown): { right: ErrorResponse } | { left: DefinedError[] } => {
        if (ErrorResponse.is(o)) {
            return { right: o }
        }
        return { left: (ErrorResponse.errors ?? []) as DefinedError[] }
    },
} as const

export type GetAllResponse = GLJournalEntry[]

export const GetAllResponse = {
    validate: GetAllResponseValidator as ValidateFunction<GetAllResponse>,
    get schema() {
        return GetAllResponse.validate.schema
    },
    get errors() {
        return GetAllResponse.validate.errors ?? undefined
    },
    is: (o: unknown): o is GetAllResponse => GetAllResponse.validate(o) === true,
    parse: (o: unknown): { right: GetAllResponse } | { left: DefinedError[] } => {
        if (GetAllResponse.is(o)) {
            return { right: o }
        }
        return { left: (GetAllResponse.errors ?? []) as DefinedError[] }
    },
} as const

/**
 * Represents a general ledger account.
 */
export interface GLAccount {
    /**
     * `TRUE` if the account is activated and may be used, `FALSE` otherwise.
     */
    activated?: boolean | undefined
    /**
     * `TRUE` if manual journal entries are allowed, `FALSE` otherwise.
     */
    allowManualJournalEntries?: boolean | undefined
    /**
     * The balance of the general ledger account, which is only populated for the GET /glaccounts endpoint.
     */
    balance?: number | undefined
    /**
     * The creation date for this account, which is stored as UTC.
     */
    creationDate?: string | undefined
    currency?: Currency | undefined
    /**
     * A description of the general ledger account.
     */
    description?: string | undefined
    /**
     * The encoded key of the entity, generated, globally unique
     */
    encodedKey?: string | undefined
    /**
     * The general ledger code used to identify different account types. Also used for grouping and categorizing accounts. For example: an account code of '3201' is considered a subtype of '3200'.
     */
    glCode?: string | undefined
    /**
     * The last modification date and time, which is stored as UTC.
     */
    lastModifiedDate?: string | undefined
    /**
     * The data migration event key if the general ledger account was created as a part of a data migration event.
     */
    migrationEventKey?: string | undefined
    /**
     * The name of the general ledger account.
     */
    name?: string | undefined
    /**
     * `TRUE` if trailing zeros are stripped, `FALSE` otherwise.
     */
    stripTrailingZeros?: boolean | undefined
    /**
     * The general ledger account type.
     */
    type?: 'ASSET' | 'LIABILITY' | 'EQUITY' | 'INCOME' | 'EXPENSE' | undefined
    /**
     * The usage type of the general ledger account. `DETAIL` accounts are used to stores transaction balances. `HEADER` accounts are used to organise and group detail accounts for reporting purposes.
     */
    usage?: 'DETAIL' | 'HEADER' | undefined
}

/**
 * Represents the general ledger account and amount used in a journal entry record.
 */
export interface GLAccountAmount {
    /**
     * The amount which was debited or credited.
     */
    amount?: number | undefined
    /**
     * Represents the general ledger account code of the the general ledger account that was debited or credited.
     */
    glAccount?: string | undefined
}

/**
 * Represents a general ledger journal entry.
 */
export interface GLJournalEntry {
    /**
     * The account associated with this journal entry. `Null` if the journal entry is not associated to any account.
     */
    accountKey?: string | undefined
    /**
     * The amount which was debited or credited in the organization's currency.
     */
    amount?: number | undefined
    /**
     * The key of the assigned branch for this general ledger journal entry.
     */
    assignedBranchKey?: string | undefined
    /**
     * The date and time when the general ledger journal entry was recorded.
     */
    bookingDate?: string | undefined
    /**
     * The creation date of the general ledger journal entry.
     */
    creationDate?: string | undefined
    /**
     * The encoded key of the entity, generated, globally unique
     */
    encodedKey?: string | undefined
    /**
     * The ID of the general ledger journal entry.
     */
    entryID?: number | undefined
    foreignAmount?: GLJournalEntryForeignAmount | undefined
    glAccount?: GLAccount | undefined
    /**
     * Optional notes entered by the user when they performed the journal entry.
     */
    notes?: string | undefined
    /**
     * The product associated with this journal entry. `Null` if the journal entry is not associated with any product.
     */
    productKey?: string | undefined
    /**
     * The product type that is referenced by the account key. `Null` if the journal entry is not associated to any product.
     */
    productType?: 'LOAN' | 'SAVINGS' | undefined
    /**
     * The entry key of the general ledger journal entry that reverses this general ledger journal entry. Null if the general ledger journal entry isn't reversed.
     */
    reversalEntryKey?: string | undefined
    /**
     * The transation ID, which is not unique.
     */
    transactionId?: string | undefined
    /**
     * The general ledger journal entry type, which may be debit or credit.
     */
    type?: 'DEBIT' | 'CREDIT' | undefined
    /**
     * The encoded key of the user that performed the transaction.
     */
    userKey?: string | undefined
}

/**
 * Represents the filtering criteria used for searching general ledger journal entries.
 */
export interface GLJournalEntryFilterCriteria {
    field:
        | 'productType'
        | 'glAccountKey'
        | 'userKey'
        | 'encodedKey'
        | 'entryId'
        | 'bookingDate'
        | 'creationDate'
        | 'transactionId'
        | 'glAccountId'
        | 'glAccountType'
        | 'source'
        | 'debit'
        | 'credit'
        | 'foreignDebit'
        | 'foreignCredit'
        | 'loanAccountId'
        | 'foreignCurrencyCode'
        | 'assignedBranchKey'
        | string
    /**
     * | **Operator**                | **Affected values**  | **Available for**                                                    |
     * |---------------               |----------------------|----------------------------------------------------------------------|
     * | EQUALS                       | ONE_VALUE            | BIG_DECIMAL,BOOLEAN,LONG,MONEY,NUMBER,PERCENT,STRING,ENUM,KEY        |
     * | EQUALS_CASE_SENSITIVE        | ONE_VALUE            | BIG_DECIMAL,BOOLEAN,LONG,MONEY,NUMBER,PERCENT,STRING,ENUM,KEY 		  |
     * | MORE_THAN                    | ONE_VALUE            | BIG_DECIMAL,NUMBER,MONEY                                             |
     * | LESS_THAN                    | ONE_VALUE            | BIG_DECIMAL,NUMBER,MONEY                                             |
     * | BETWEEN                      | TWO_VALUES           | BIG_DECIMAL,NUMBER,MONEY,DATE,DATE_TIME                              |
     * | ON                           | ONE_VALUE            | DATE,DATE_TIME                                                       |
     * | AFTER                        | ONE_VALUE            | DATE,DATE_TIME                                                       |
     * | BEFORE                       | ONE_VALUE            | DATE,DATE_TIME                                                       |
     * | BEFORE_INCLUSIVE             | ONE_VALUE            | DATE,DATE_TIME                                                       |
     * | STARTS_WITH                  | ONE_VALUE            | STRING                                                               |
     * | STARTS_WITH_CASE_SENSITIVE   | ONE_VALUE            | STRING                                                               |
     * | IN                           | LIST                 | ENUM,KEY                                                             |
     * | TODAY                        | NO_VALUE             | DATE,DATE_TIME                                                       |
     * | THIS_WEEK                    | NO_VALUE             | DATE,DATE_TIME                                                       |
     * | THIS_MONTH                   | NO_VALUE             | DATE,DATE_TIME                                                       |
     * | THIS_YEAR                    | NO_VALUE             | DATE,DATE_TIME                                                       |
     * | LAST_DAYS                    | ONE_VALUE            | NUMBER                                                               |
     * | EMPTY                        | NO_VALUE             | BIG_DECIMAL,LONG,MONEY,NUMBER,PERCENT,STRING,ENUM,KEY,DATE,DATE_TIME |
     * | NOT_EMPTY                    | NO_VALUE             | BIG_DECIMAL,LONG,MONEY,NUMBER,PERCENT,STRING,ENUM,KEY,DATE,DATE_TIME |
     */
    operator:
        | 'EQUALS'
        | 'EQUALS_CASE_SENSITIVE'
        | 'DIFFERENT_THAN'
        | 'MORE_THAN'
        | 'LESS_THAN'
        | 'BETWEEN'
        | 'ON'
        | 'AFTER'
        | 'AFTER_INCLUSIVE'
        | 'BEFORE'
        | 'BEFORE_INCLUSIVE'
        | 'STARTS_WITH'
        | 'STARTS_WITH_CASE_SENSITIVE'
        | 'IN'
        | 'TODAY'
        | 'THIS_WEEK'
        | 'THIS_MONTH'
        | 'THIS_YEAR'
        | 'LAST_DAYS'
        | 'EMPTY'
        | 'NOT_EMPTY'
    /**
     * The second value to match the searching criteria, when the `BETWEEN` operator is used.
     */
    secondValue?: string | undefined
    /**
     * The value to match the searching criteria.
     */
    value?: string | undefined
    /**
     * List of values when the `IN` operator is used.
     */
    values?: string[] | undefined
}

/**
 * Represents the details of the general ledger journal entry amount posted in foreign currency.
 */
export interface GLJournalEntryForeignAmount {
    accountingRate?: AccountingRate | undefined
    /**
     * The amount of an accounting entry in foreign currency.
     */
    amount?: number | undefined
    currency?: Currency | undefined
}

/**
 * Represents the list of filtering criteria and the sorting criteria when searching general ledger journal entries.
 */
export interface GLJournalEntrySearchCriteria {
    /**
     * The list of filtering criteria.
     */
    filterCriteria?: GLJournalEntryFilterCriteria[] | undefined
    sortingCriteria?: GLJournalEntrySortingCriteria | undefined
}

export const GLJournalEntrySearchCriteria = {
    validate: GLJournalEntrySearchCriteriaValidator as ValidateFunction<GLJournalEntrySearchCriteria>,
    get schema() {
        return GLJournalEntrySearchCriteria.validate.schema
    },
    get errors() {
        return GLJournalEntrySearchCriteria.validate.errors ?? undefined
    },
    is: (o: unknown): o is GLJournalEntrySearchCriteria => GLJournalEntrySearchCriteria.validate(o) === true,
    parse: (o: unknown): { right: GLJournalEntrySearchCriteria } | { left: DefinedError[] } => {
        if (GLJournalEntrySearchCriteria.is(o)) {
            return { right: o }
        }
        return { left: (GLJournalEntrySearchCriteria.errors ?? []) as DefinedError[] }
    },
} as const

/**
 * Represents the sorting criteria used for general ledger journal entries.
 */
export interface GLJournalEntrySortingCriteria {
    /**
     * The field that can be used to sort the selection. These fields can be from the enumerated values or you can specify a custom field using the format [customFieldSetId].[customFieldId].
     */
    field:
        | 'encodedKey'
        | 'entryId'
        | 'bookingDate'
        | 'creationDate'
        | 'transactionId'
        | 'glAccountName'
        | 'glAccountId'
        | 'glAccountType'
        | 'debit'
        | 'credit'
        | 'foreignDebit'
        | 'foreignCredit'
        | 'loanAccountId'
        | 'userName'
        | 'user'
        | 'branchName'
        | 'foreignCurrency'
    /**
     * The sorting order: `ASC` or `DESC`. The default order is `DESC`.
     */
    order?: 'ASC' | 'DESC' | undefined
}

/**
 * Represents the information to create general ledger journal entries.
 */
export interface PostGLJournalEntriesDTO {
    /**
     * The ID of the assigned branch for the journal entries.
     */
    branchId?: string | undefined
    /**
     * The list of general ledger accounts to be credited with corresponding amounts.
     */
    credits?: GLAccountAmount[] | undefined
    /**
     * The date and time when the general ledger journal entries were recorded, also known as the booking date.
     */
    date: string
    /**
     * The list of general ledger accounts to be debited with corresponding amounts.
     */
    debits?: GLAccountAmount[] | undefined
    /**
     * The notes entered when the journal entry was posted.
     */
    notes?: string | undefined
    /**
     * A non-unique trasanction ID. This will be autogenerated if an ID is not provided.
     */
    transactionId?: string | undefined
}

export const PostGLJournalEntriesDTO = {
    validate: PostGLJournalEntriesDTOValidator as ValidateFunction<PostGLJournalEntriesDTO>,
    get schema() {
        return PostGLJournalEntriesDTO.validate.schema
    },
    get errors() {
        return PostGLJournalEntriesDTO.validate.errors ?? undefined
    },
    is: (o: unknown): o is PostGLJournalEntriesDTO => PostGLJournalEntriesDTO.validate(o) === true,
    parse: (o: unknown): { right: PostGLJournalEntriesDTO } | { left: DefinedError[] } => {
        if (PostGLJournalEntriesDTO.is(o)) {
            return { right: o }
        }
        return { left: (PostGLJournalEntriesDTO.errors ?? []) as DefinedError[] }
    },
} as const

export interface RestError {
    errorCode?: number | undefined
    errorReason?: string | undefined
    errorSource?: string | undefined
}

export type SearchResponse = GLJournalEntry[]

export const SearchResponse = {
    validate: SearchResponseValidator as ValidateFunction<SearchResponse>,
    get schema() {
        return SearchResponse.validate.schema
    },
    get errors() {
        return SearchResponse.validate.errors ?? undefined
    },
    is: (o: unknown): o is SearchResponse => SearchResponse.validate(o) === true,
    parse: (o: unknown): { right: SearchResponse } | { left: DefinedError[] } => {
        if (SearchResponse.is(o)) {
            return { right: o }
        }
        return { left: (SearchResponse.errors ?? []) as DefinedError[] }
    },
} as const
