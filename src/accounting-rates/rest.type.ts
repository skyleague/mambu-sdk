/**
 * Generated by @skyleague/therefore@v1.0.0-local
 * Do not manually touch this
 */
/* eslint-disable */
import type { ValidateFunction } from 'ajv'
import { ValidationError } from 'ajv'

/**
 * Represents the conversion rate used in accounting to convert amounts from one currency to organisation currency
 */
export interface AccountingRate {
    /**
     * The encoded key of the accounting rate, auto generated, unique
     */
    encodedKey?: string
    /**
     * Rate validity end date (as Organization Time)
     */
    endDate?: string
    /**
     * Organisation currency code
     */
    fromCurrencyCode?: string
    /**
     * Value of rate to be used for accounting conversions
     */
    rate?: number
    /**
     * Rate validity start date (as Organization Time)
     */
    startDate?: string
    /**
     * Foreign currency code
     */
    toCurrencyCode?: string
}

export const AccountingRate = {
    validate: (await import('./schemas/accounting-rate.schema.js')).validate as ValidateFunction<AccountingRate>,
    get schema() {
        return AccountingRate.validate.schema
    },
    get errors() {
        return AccountingRate.validate.errors ?? undefined
    },
    is: (o: unknown): o is AccountingRate => AccountingRate.validate(o) === true,
} as const

export interface ErrorResponse {
    errors?: RestError[]
}

export const ErrorResponse = {
    validate: (await import('./schemas/error-response.schema.js')).validate as ValidateFunction<ErrorResponse>,
    get schema() {
        return ErrorResponse.validate.schema
    },
    get errors() {
        return ErrorResponse.validate.errors ?? undefined
    },
    is: (o: unknown): o is ErrorResponse => ErrorResponse.validate(o) === true,
    assert: (o: unknown) => {
        if (!ErrorResponse.validate(o)) {
            throw new ValidationError(ErrorResponse.errors ?? [])
        }
    },
} as const

export type GetAllResponse = AccountingRate[]

export const GetAllResponse = {
    validate: (await import('./schemas/get-all-response.schema.js')).validate as ValidateFunction<GetAllResponse>,
    get schema() {
        return GetAllResponse.validate.schema
    },
    get errors() {
        return GetAllResponse.validate.errors ?? undefined
    },
    is: (o: unknown): o is GetAllResponse => GetAllResponse.validate(o) === true,
} as const

/**
 * The representation of a payload for creating Accounting Rate
 */
export interface PostAccountingRateDTO {
    /**
     * Value of conversions rate used in accounting to convert amounts from one currency to organisation currency
     */
    rate: number
    /**
     * The start date from which the accounting rate will be applied (as Organization time)
     */
    startDate?: string
}

export const PostAccountingRateDTO = {
    validate: (await import('./schemas/post-accounting-rate-dto.schema.js')).validate as ValidateFunction<PostAccountingRateDTO>,
    get schema() {
        return PostAccountingRateDTO.validate.schema
    },
    get errors() {
        return PostAccountingRateDTO.validate.errors ?? undefined
    },
    is: (o: unknown): o is PostAccountingRateDTO => PostAccountingRateDTO.validate(o) === true,
    assert: (o: unknown) => {
        if (!PostAccountingRateDTO.validate(o)) {
            throw new ValidationError(PostAccountingRateDTO.errors ?? [])
        }
    },
} as const

export interface RestError {
    errorCode?: number
    errorReason?: string
    errorSource?: string
}
