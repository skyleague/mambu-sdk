/**
 * Generated by @skyleague/therefore
 * Do not manually touch this
 */
/* eslint-disable */

import { z } from 'zod'

export const CommunicationMessageFilterCriteria = z
    .object({
        field: z.union([
            z
                .enum([
                    'encodedKey',
                    'creationDate',
                    'sendDate',
                    'senderKey',
                    'clientKey',
                    'groupKey',
                    'userKey',
                    'state',
                    'failureReason',
                    'failureCause',
                    'destination',
                    'type',
                    'event',
                ])
                .describe('The field(s) to use to perform the search.'),
            z.string(),
        ]),
        operator: z
            .enum([
                'EQUALS',
                'EQUALS_CASE_SENSITIVE',
                'DIFFERENT_THAN',
                'MORE_THAN',
                'LESS_THAN',
                'BETWEEN',
                'ON',
                'AFTER',
                'AFTER_INCLUSIVE',
                'BEFORE',
                'BEFORE_INCLUSIVE',
                'STARTS_WITH',
                'STARTS_WITH_CASE_SENSITIVE',
                'IN',
                'TODAY',
                'THIS_WEEK',
                'THIS_MONTH',
                'THIS_YEAR',
                'LAST_DAYS',
                'EMPTY',
                'NOT_EMPTY',
            ])
            .describe(
                '| **Operator**                | **Affected values**  | **Available for**                                                    |\\n|---------------               |----------------------|----------------------------------------------------------------------|\\n| EQUALS                       | ONE_VALUE            | BIG_DECIMAL,BOOLEAN,LONG,MONEY,NUMBER,PERCENT,STRING,ENUM,KEY        |\\n| EQUALS_CASE_SENSITIVE        | ONE_VALUE            | BIG_DECIMAL,BOOLEAN,LONG,MONEY,NUMBER,PERCENT,STRING,ENUM,KEY 		  |\\n| MORE_THAN                    | ONE_VALUE            | BIG_DECIMAL,NUMBER,MONEY                                             |\\n| LESS_THAN                    | ONE_VALUE            | BIG_DECIMAL,NUMBER,MONEY                                             |\\n| BETWEEN                      | TWO_VALUES           | BIG_DECIMAL,NUMBER,MONEY,DATE,DATE_TIME                              |\\n| ON                           | ONE_VALUE            | DATE,DATE_TIME                                                       |\\n| AFTER                        | ONE_VALUE            | DATE,DATE_TIME                                                       |\\n| BEFORE                       | ONE_VALUE            | DATE,DATE_TIME                                                       |\\n| BEFORE_INCLUSIVE             | ONE_VALUE            | DATE,DATE_TIME                                                       |\\n| STARTS_WITH                  | ONE_VALUE            | STRING                                                               |\\n| STARTS_WITH_CASE_SENSITIVE   | ONE_VALUE            | STRING                                                               |\\n| IN                           | LIST                 | ENUM,KEY                                                             |\\n| TODAY                        | NO_VALUE             | DATE,DATE_TIME                                                       |\\n| THIS_WEEK                    | NO_VALUE             | DATE,DATE_TIME                                                       |\\n| THIS_MONTH                   | NO_VALUE             | DATE,DATE_TIME                                                       |\\n| THIS_YEAR                    | NO_VALUE             | DATE,DATE_TIME                                                       |\\n| LAST_DAYS                    | ONE_VALUE            | NUMBER                                                               |\\n| EMPTY                        | NO_VALUE             | BIG_DECIMAL,LONG,MONEY,NUMBER,PERCENT,STRING,ENUM,KEY,DATE,DATE_TIME |\\n| NOT_EMPTY                    | NO_VALUE             | BIG_DECIMAL,LONG,MONEY,NUMBER,PERCENT,STRING,ENUM,KEY,DATE,DATE_TIME |',
            ),
        secondValue: z
            .string()
            .describe('The second value to match the searching criteria, when the `BETWEEN` operator is used.')
            .optional(),
        value: z.string().describe('The value to match the searching criteria.').optional(),
        values: z.string().array().describe('List of values when the `IN` operator is used.').optional(),
    })
    .describe('The unit that composes the list used for communication messages client directed searching')

export type CommunicationMessageFilterCriteria = z.infer<typeof CommunicationMessageFilterCriteria>

export const CommunicationMessageSearchSortingCriteria = z
    .object({
        field: z
            .enum(['encodedKey', 'creationDate', 'sendDate', 'senderKey', 'clientKey', 'groupKey', 'userKey', 'type'])
            .describe('Sort Messages By'),
        order: z.enum(['ASC', 'DESC']).describe('The sorting order: `ASC` or `DESC`. The default order is `DESC`.').optional(),
    })
    .describe('The sorting criteria used for Messages search.')

export type CommunicationMessageSearchSortingCriteria = z.infer<typeof CommunicationMessageSearchSortingCriteria>

export const RestError = z.object({
    errorCode: z.number().int().optional(),
    errorReason: z.string().optional(),
    errorSource: z.string().optional(),
})

export type RestError = z.infer<typeof RestError>

export const CommunicationMessage = z
    .object({
        body: z.string().describe('The contents of the message.').optional(),
        clientKey: z.string().describe('The client the message was sent to.').optional(),
        creationDate: z
            .string()
            .datetime({ offset: true })
            .describe('The date the communication message was created in UTC.')
            .optional(),
        depositAccountKey: z.string().describe('The deposit account that triggered this message.').optional(),
        destination: z.string().describe('The destination (phone number or email address) this message was sent to.').optional(),
        encodedKey: z
            .string()
            .describe('The encoded key of the communication message, which is generated automatically, and must be unique.')
            .optional(),
        event: z
            .enum([
                'MANUAL',
                'DO_NOTHING',
                'CLIENT_CREATED',
                'CLIENT_APPROVED',
                'GROUP_ACTIVITY',
                'GROUP_CREATED',
                'LOAN_CREATED',
                'INTEREST_RATE_CHANGED',
                'CLIENT_REJECTED',
                'CLIENT_ACTIVITY',
                'LOAN_REPAYMENT',
                'LOAN_REPAYMENT_REVERSAL',
                'FEE_APPLIED',
                'FEE_ADJUSTED',
                'FEE_CHARGED',
                'PENALTY_APPLIED',
                'PENALTY_ADJUSTMENT',
                'FEES_DUE_REDUCED',
                'FEE_REDUCTION_ADJUSTMENT',
                'LOAN_APPROVAL',
                'LOAN_ACCOUNT_CLOSURE',
                'LOAN_ACCOUNT_WRITE_OFF',
                'LOAN_ACCOUNT_REJECTION',
                'LOAN_ACCOUNT_RESCHEDULED',
                'LOAN_ACCOUNT_REFINANCED',
                'REPAYMENT_REMINDER',
                'ACCOUNT_IN_ARREARS',
                'LOAN_DISBURSEMENT',
                'LOAN_DISBURSEMENT_REVERSAL',
                'LOAN_ACCOUNT_ACTIVITY',
                'LOAN_ANTICIPATED_DISBURSEMENT',
                'SAVINGS_CREATED',
                'SAVINGS_DEPOSIT',
                'SAVINGS_DEPOSIT_REVERSAL',
                'REAPPLIED_SAVINGS_DEPOSIT',
                'SAVINGS_APPROVAL',
                'SAVINGS_ACCOUNT_ACTIVATED',
                'SAVINGS_ACCOUNT_CLOSURE',
                'SAVINGS_ACCOUNT_REJECTION',
                'SAVINGS_WITHDRAWAL',
                'SAVINGS_WITHDRAWAL_REVERSAL',
                'REAPPLIED_SAVINGS_WITHDRAWAL',
                'SAVINGS_ACCOUNT_ACTIVITY',
                'DEPOSIT_INTEREST_APPLIED',
                'DEPOSIT_INTEREST_APPLIED_ADJUSTMENT',
                'ACCOUNT_AUTHORISATION_HOLD_CREATED',
                'ACCOUNT_AUTHORISATION_HOLD_REVERSED',
                'ACCOUNT_AUTHORISATION_HOLD_SETTLED',
                'CARDS_AUTHORISATION_HOLD_CREATED',
                'CARDS_AUTHORISATION_HOLD_SETTLED',
                'CARDS_AUTHORISATION_HOLD_AMOUNT_DECREASED',
                'CARDS_AUTHORISATION_HOLD_AMOUNT_INCREASED',
                'CARDS_AUTHORISATION_HOLD_EXPIRED',
                'CARDS_AUTHORISATION_HOLD_REVERSED',
                'PORTAL_ACTIVATED',
                'PORTAL_PASSWORD_RESET',
                'END_OF_DAY_PROCESSING_COMPLETED',
                'DATA_ACCESS_STATE_CHANGED',
                'CREDIT_ARRANGEMENT_CREATED',
                'CREDIT_ARRANGEMENT_CLOSED',
                'CREDIT_ARRANGEMENT_APPROVED',
                'CREDIT_ARRANGEMENT_REJECTED',
                'CREDIT_ARRANGEMENT_WITHDRAWN',
                'CREDIT_ARRANGEMENT_DELETED',
                'CREDIT_ARRANGEMENT_ACCOUNT_ADDED',
                'CREDIT_ARRANGEMENT_ACCOUNT_REMOVED',
                'CREDIT_ARRANGEMENT_EDITED',
                'PAYMENT_ORDER_ACTIVITY',
                'COLLECTION_ORDER_ACTIVITY',
                'JOURNAL_ENTRY_ADDED',
                'JOURNAL_ENTRY_ADJUSTED',
                'SAVINGS_TRANSACTION_EDITED',
                'CARD_WITHDRAWAL_REVERSAL',
                'CARD_DEPOSIT_REVERSAL',
            ])
            .describe('The event that triggered this message.')
            .optional(),
        failureCause: z.string().describe('The failure code if the message failed to send.').optional(),
        failureReason: z
            .enum([
                'MESSAGING_EXCEPTION',
                'INVALID_SMTP_CREDENTIALS',
                'UNSUPPORTED_ENCODING_EXCEPTION',
                'EMAIL_SERVICE_NOT_ENABLED',
                'SMS_TOO_LONG',
                'SMS_SERVICE_NOT_ENABLED',
                'SMS_NOT_SENT',
                'SMS_SERVICE_ERROR',
                'SMS_CONNECTION_EXCEPTION',
                'WEBHOOK_NOTIFICATIONS_DISABLED',
                'INVALID_HTTP_RESPONSE',
                'HTTP_ERROR_WHILE_SENDING',
                'INVALID_JSON_BODY_SYNTAX',
                'MISSING_TEMPLATE_KEY',
                'MAX_MESSAGE_SIZE_LIMIT_EXCEEDED',
                'UNDEFINED_DESTINATION',
                'INVALID_HTTP_PROTOCOL',
                'BLACKLISTED_URL',
                'INVALID_SMS_GATEWAY_CREDENTIALS',
                'MISSING_SMS_RECIPIENT',
                'SMS_GATEWAY_ERROR',
                'MISSING_EMAIL_RECIPIENT_ADDRESS',
                'OTHER',
            ])
            .describe('The reason for the communication message failure.')
            .optional(),
        groupKey: z.string().describe('The group the message was sent to.').optional(),
        loanAccountKey: z.string().describe('The loan account that triggered this message.').optional(),
        numRetries: z.number().int().describe('The number of retries to send the message.').optional(),
        referenceId: z
            .string()
            .describe('The reference ID of the communication message, generated by the SMS dispatcher.')
            .optional(),
        repaymentKey: z.string().describe('The repayment that triggered this message.').optional(),
        sendDate: z
            .string()
            .datetime({ offset: true })
            .describe('The date the communication message was sent in UTC.')
            .optional(),
        senderKey: z
            .string()
            .describe('The encoded key of the sender. If specified, it should be the encoded key of the current user.')
            .optional(),
        state: z
            .enum(['SENT', 'QUEUED', 'QUEUED_FOR_STREAM', 'WAITING', 'SENDING_ASYNC', 'FAILED'])
            .describe('The state of the message.')
            .optional(),
        subject: z.string().describe('The subject of the message.').optional(),
        templateKey: z.string().describe('The communication message template key.').optional(),
        type: z
            .enum(['EMAIL', 'SMS', 'WEB_HOOK', 'EVENT_STREAM', 'TASK'])
            .describe('The type of communication message.')
            .optional(),
        userKey: z.string().describe('The user the message was sent to.').optional(),
    })
    .describe('Represents a communication message.')

export type CommunicationMessage = z.infer<typeof CommunicationMessage>

export const CommunicationMessageAction = z
    .object({
        messages: z.string().array().describe('The list of failed communication messages to resend.'),
    })
    .describe('Represents a list of failed communication messages to resend.')

export type CommunicationMessageAction = z.infer<typeof CommunicationMessageAction>

export const CommunicationMessageEnqueueAction = z
    .object({
        endDate: z.string().datetime({ offset: true }).describe('The upper limit until which created messages will be enqueued.'),
        startDate: z
            .string()
            .datetime({ offset: true })
            .describe('The lower limit from which created messages will be enqueued.'),
        templateTypes: z
            .enum(['EMAIL', 'SMS', 'WEB_HOOK', 'EVENT_STREAM', 'TASK'])
            .array()
            .describe('The list of template message types to enqueue.')
            .optional(),
    })
    .describe('Represents the time interval to resend messages.')

export type CommunicationMessageEnqueueAction = z.infer<typeof CommunicationMessageEnqueueAction>

export const CommunicationMessagesSearchSortCriteria = z
    .object({
        filterCriteria: CommunicationMessageFilterCriteria.array().describe('The list of filtering criteria.'),
        sortingCriteria: CommunicationMessageSearchSortingCriteria,
    })
    .describe('The unit that composes the body used used for communication messages client directed searching.')

export type CommunicationMessagesSearchSortCriteria = z.infer<typeof CommunicationMessagesSearchSortCriteria>

export const ErrorResponse = z.object({
    errors: RestError.array().optional(),
})

export type ErrorResponse = z.infer<typeof ErrorResponse>

export const Search1Response = CommunicationMessage.array()

export type Search1Response = z.infer<typeof Search1Response>

export const SearchRequest = CommunicationMessageFilterCriteria.array()

export type SearchRequest = z.infer<typeof SearchRequest>

export const SearchResponse = CommunicationMessage.array()

export type SearchResponse = z.infer<typeof SearchResponse>
